[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "js/abstract.js",
    "content": "'use strict';\n/* global Util */\n/**\n * ヒエラルキー構造を持つ各クラスの基底クラス\n * 木構造とは異なり、枝分かれしていても同列のオブジェクト間でポインタを持ち合います\n */\nexport class AbstractHierarchy {  // jshint ignore:line\n    // constructor {{{\n    /**\n     * @param {Element} elem 自身のDOM要素\n     */\n    constructor(elem) {\n        this._elem = elem;\n        this._parent = null;\n        this._next = null;\n        this._prev = null;\n        this._children = [];\n        this._width = null;\n        this._height = null;\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 自身のDOM要素を返します\n     * @return {Element} 自身のDOM要素\n     */\n    elem() {\n        return this._elem;\n    }\n\n    /**\n     * 自身の親を設定します。また、引数を省略すると自身の親を取得します\n     * @param {AbstractHierarchy} [opt_newParent] 新たに設定する親\n     * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)\n     */\n    parent(opt_newParent) {\n        if (opt_newParent === undefined) { // nullが渡されることもあるのでundefinedと厳密に比較\n            return this._parent;\n        }\n\n        this._parent = opt_newParent;\n        return this;\n    }\n\n    /**\n     * 自身の次にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の次にある同列のインスタンスを取得します\n     * @param {AbstractHierarchy} [opt_newNext] 新たに設定するインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の次にある同列のインスタンス(引数を省略した場合)、後者はなければnull\n     */\n    next(opt_newNext) {\n        if (opt_newNext === undefined) {\n            return this._next;\n        }\n\n        this._next = opt_newNext;\n        return this;\n    }\n\n    /**\n     * 自身の前にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の前にある同列のインスタンスを取得します\n     * @param {AbstractHierarchy} [opt_newPrev] 新たに設定するインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の前にある同列のインスタンス(引数を省略した場合)、後者はなければnull\n     */\n    prev(opt_newPrev) {\n        if (opt_newPrev === undefined) {\n            return this._prev;\n        }\n\n        this._prev = opt_newPrev;\n        return this;\n    }\n\n    /**\n     * 指定されたインデックスの子を取得します。また、引数省略で自身の子を配列で取得します\n     * @param {number} [opt_index] 取得する子のインデックス。範囲外ならundefinedが返される\n     * @return {AbstractHierarchy} indexで指定された子(引数を渡した場合)あるいは自身の子の配列(引数を省略した場合)\n     */\n    children(opt_index) {\n        if (opt_index === undefined) {\n            return Util.copyArray(this._children);\n        }\n\n        return this._children[opt_index];\n    }\n\n    /**\n     * 自身の最初の子を取得します\n     * @return {AbstractHierarchy} 自身の最初の子。子がいなければnull\n     */\n    firstChild() {\n        if (!this.hasChild()) {\n            return null;\n        }\n\n        return this._children[0];\n    }\n\n    /**\n     * 自身の最後の子を取得します\n     * @return {AbstractHierarchy} 自身の最後の子。子がいなければnull\n     */\n    lastChild() {\n        if (!this.hasChild()) {\n            return null;\n        }\n\n        return this._children[this.childLength()-1];\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * objが自身と同一のオブジェクトかどうかを返します\n     * @param {AbstractHierarchy} obj 比較するオブジェクト\n     * @return {boolean} objが自身と同一ならtrue、そうでなければfalse\n     */\n    is(obj) {\n        return obj === this;\n    }\n\n    /**\n     * 自身がクラスにclassNameを持っているかどうかを返します\n     * @param {string} className 判定するクラス名\n     * @return {boolean} 自身がclassNameを付与されていればtrue、そうでなければfalse\n     */\n    hasClass(className) {\n        return this._elem.classList.contains(className);\n    }\n\n    /**\n     * 自身が子を持っているかどうかを返します\n     * @return {boolean} 自身が子を持っていればtrue、そうでなければfalse\n     */\n    hasChild() {\n        return this._children.length > 0;\n    }\n\n    /**\n     * 自身が親にとって唯一の子であるかどうかを返します\n     * @return {boolean} 自身が親にとって唯一の子であればtrue、そうでなければfalse\n     */\n    isOnlyChild() {\n        return this.parent().childLength() === 1 && this.parent().children(0) === this;\n    }\n\n    /**\n     * 自身の子が空であるかどうかを返します\n     * @return {boolean} 自身が子を持っていなければtrue、そうでなければfalse\n     */\n    isEmpty() {\n        return this._children.length === 0;\n    }\n\n    /**\n     * 同一の親を持つ次の兄弟が存在するかどうかを返します\n     * @return {boolean} 自身の次のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse\n     */\n    hasNextSibling() {\n        if (this.next()) {\n            return this.next().parent() === this.parent();\n        }\n\n        return false;\n    }\n\n    /**\n     * 同一の親を持つ前の兄弟が存在するかどうかを返します\n     * @return {boolean} 自身の前のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse\n     */\n    hasPrevSibling() {\n        if (this.prev()) {\n            return this.prev().parent() === this.parent();\n        }\n\n        return false;\n    }\n\n    /**\n     * 自身が親の第一の子であるかどうかを返します\n     * @return {boolean} 自身の前のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse\n     */\n    isFirst() {\n        return !this.hasPrevSibling();\n    }\n\n    /**\n     * 自身が親の最後の子であるかどうかを返します。Charの場合は、EOLの前の文字とEOLの２つでtrueを返します\n     * @return {boolean} 自身の次のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse\n     */\n    isLast() {\n        return !this.hasNextSibling();\n    }//}}}\n\n    // --参照操作 {{{\n    /**\n     * childを自身の子の最後に加えます\n     * @param {AbstractHierarchy} child 自身の子の最後に加えるインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    pushChild(child) {\n        this._children.push(child);\n        return this;\n    }\n\n    /**\n     * 自身の子のpos番目にchildを加えます\n     * @param {number} pos childを加える位置のインデックス(０始まり)\n     * @param {AbstractHierarchy} child 子に加えるインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    insertChild(pos,child) {\n        // 配列の範囲外の数値を渡されたらpushに切り替える\n        if (pos < 0 || pos >= this._children.length) {\n            return this.pushChild(child);\n        }\n\n        this._children.splice(pos,0,child);\n        return this;\n    }\n\n    /**\n     * childを自身の子から削除します\n     * @param {AbstractHierarchy} child 自身の子から削除するインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    deleteChild(child) {\n        const pos = child.index();\n\n        this._children.splice(pos, 1);\n        child.parent(null);\n        return this;\n    }\n\n    /**\n     * 自身の子のoldChildを子から削除し、新たにnewChildを同じ位置に加えます\n     * @param {AbstractHierarchy} oldChild 入替えられる自身の子のインスタンス\n     * @param {AbstractHierarchy} newChild 入れ替える自身の子でなかったインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    replaceChild(oldChild,newChild) {\n        const pos = oldChild.index();\n\n        this._children.splice(pos, 1, newChild);\n        return this;\n    }\n\n    /**\n     * 子の参照を自身から切り離して空にします。DOM要素には影響しません\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    emptyChild() {\n        this._children = [];\n        return this;\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 自身が表す文字列を返します\n     * @return {string} 自身の内部にある文字列\n     */\n    text() {\n        return this.elem().textContent;\n    }\n\n    /**\n     * 自身が表す文字列の文字数を返します\n     * @return {number} 自身の内部にある文字列の文字数\n     */\n    length() {\n        return this.text().length;\n    }\n\n    /**\n     * 同一の親を持つ兄弟の中でのインデックスを返します\n     * @return {number} 同一の親を持つ兄弟の中での０始まりのインデックス\n     */\n    index() {\n        const siblings = this.parent().children();\n        return siblings.indexOf(this);\n    }\n\n    /**\n     * 自身の子の数を返します\n     * @return {number} 自身の子の数\n     */\n    childLength() {\n        // Rowではchildren()の意味が違うので、混同しないようchildren()をさけて直接プロパティにアクセスする\n        return this._children.length;\n    }//}}}\n\n    // --Style {{{\n    /**\n     * 自身の持つクラスすべてをひとつの文字列で返します\n     * @return {string} 自身の持つすべてのクラス名\n     */\n    className() {\n        return this._elem.className || ''; // クラスがひとつもなければ空文字\n    }\n\n    /**\n     * 自身のクラスにclassNameを加えます\n     * @param {string} className 自身のクラスに加えるクラス名\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addClass(className) {\n        this._elem.classList.add(className);\n        return this;\n    }\n\n    /**\n     * 自身のクラスからclassNameを除去します\n     * @param {string} className 自身のクラスから除去するクラス名\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeClass(className) {\n        this._elem.classList.remove(className);\n        return this;\n    }\n\n    /**\n     * 自身の持つすべての子のクラスからclassNameを除去します\n     * @param {string} className 除去するクラス名\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeClassFromAllChild(className) {\n        for (let child of this._children) {\n            child.removeClass(className);\n        }\n        return this;\n    }\n\n    /**\n     * 自身の高さを取得します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の高さ\n     */\n    height(opt_useCache) {\n        // elementが不可視状態にあれば長さが０になったり、ブラウザごとに取得手段に違いがあったり直接指定されているstyleとcssでの指定の違い、cssでの指定が'auto'になっていると文字列が返ってきたりと\n        // javascriptでのcss値の取得は複雑で困難であることから、jQueryの使用が適していると判断した(不可視の要素は一時的に可視状態にしてから取得するので、レンダリングが発生する可能性は高い)\n        // 読み込み時には時間がかかるが、キャッシュすることで行移動などでは最低限の計算になると期待\n        if (opt_useCache === undefined) {\n            opt_useCache = true;\n        }\n\n        if (opt_useCache && this._height) {\n            return this._height;\n        }\n\n        this._height = parseInt($(this.elem()).css('height'));\n        return this._height;\n    }\n\n    /**\n     * 自身の幅を取得します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の幅\n     */\n    width(opt_useCache) {\n        if (opt_useCache === undefined) {\n            opt_useCache = true;\n        }\n\n        if (opt_useCache && this._width) {\n            return this._width;\n        }\n\n        this._width = parseInt($(this.elem()).css('width'));\n        return this._width;\n    }\n\n    /**\n     * 要素左上のX座標を返します\n     * @return {number} 要素左上のX座標\n     */\n    x() {\n        return this.elem().getBoundingClientRect().left + window.pageXOffset;\n    }\n\n    /**\n     * 要素左上のY座標を返します\n     * @return {number} 要素左上のY座標\n     */\n    y() {\n        return this.elem().getBoundingClientRect().top + window.pageYOffset;\n    }\n\n    /**\n     * ある点からオブジェクトの中心点までの距離を計算します\n     * @param {number} x 基準点のX座標\n     * @param {number} y 基準点のY座標\n     * @return {number} 計算された距離のピクセル数\n     */\n    computeDistanceFromPoint(x,y) {\n        const ownPos = this.computeCenterPoint();\n        return Util.computeDistanceP2P(x,y,ownPos.x,ownPos.y);\n    }\n\n    /**\n     * 中心点の座標を返します\n     * @return {object} プロバティxにX座標、プロパティyにY座標の入ったオブジェクト\n     */\n    computeCenterPoint() {\n        return {\n            x: this.x() + this.width()/2,\n            y: this.y() + this.height()/2\n        };\n    }//}}}\n\n    // --DOM操作関係 //{{{\n    /**\n     * 内部のエレメントを空にします。childrenとして持っていない要素(EOLなど)は削除されません\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    emptyElem() {\n        for (let child of this._children) {\n            this.elem().removeChild(child.elem());\n        }\n        return this;\n    }\n\n    /**\n     * 内部のエレメントに加え、内部の参照も空にします\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    empty() {\n        this.emptyElem();\n        this.emptyChild();\n        return this;\n    }//}}}\n\n    // --イベント //{{{\n    /**\n     * 自身にkeydownイベントリスナーを付加します。重ねがけは無効となります\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        if (this._keydownArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._keydownArg = this._onKeydown.bind(this);\n        document.addEventListener('keydown', this._keydownArg);\n        return this;\n    }\n\n    /**\n     * 自身のkeydownイベントリスナーを除去します\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeKeydownEventListener() {\n        if (!this._keydownArg) {\n            return this;\n        }\n\n        document.removeEventListener('keydown', this._keydownArg);\n        this._keydownArg = null;\n        return this;\n    }\n\n    /**\n     * keydownイベントの前処理を行い、イベントを実行します\n     * @param {object} e イベントオブジェクト\n     */\n    _onKeydown(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 123) { return; } // F12のみブラウザショートカットキー\n\n        this.runKeydown(e, keycode);\n        // デフォルトの動作を無効化する\n        e.preventDefault();\n    }\n\n    /**\n     * keydownイベントの実行内容。onkeydown()内で使用するために定義しておくが、内容はサブクラスで上書きします\n     * @param {object} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    runKeydown(e, keycode) {\n        return this;\n    }\n\n    /**\n     * 自身にクリックイベントを付加します。重ねがけは無効となります\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addClickEventListener() {\n        if (this._clickArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._clickArg = this._onClick.bind(this);\n        this.elem().addEventListener('click', this._clickArg);\n        return this;\n    }\n\n    /**\n     * 自身のクリックイベントを除去します\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeClickEventListener() {\n        if (!this._clickArg) {\n            return this;\n        }\n\n        this.elem().removeEventListener('click', this._clickArg);\n        this._clickArg = null;\n        return this;\n    }\n\n    /**\n     * クリックイベントを実行します\n     * @param {Event} e イベントオブジェクト\n     */\n    _onClick(e) {\n        this.runClick(e);\n    }\n\n    /**\n     * clickイベントの実行内容です。onClick()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります\n     * @param {object} e イベントオブジェクト\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    runClick(e) {\n        return this;\n    }\n\n    /**\n     * 自身にホイールイベントを付加します。重ねがけは無効となります\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addWheelEventListener() {\n        if (this._wheelArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._wheelArg = this._onWheel.bind(this);\n        const selector = '#' + this.elem().id;\n        $('body').on('mousewheel', selector, this._wheelArg);\n        return this;\n    }\n\n    /**\n     * 自身のホイールイベントを除去します\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeWheelEventListener() {\n        if (!this._wheelArg) {\n            return this;\n        }\n\n        const selector = '#' + this.elem().id;\n        $('body').off('mousewheel', selector, this._wheelArg);\n        this._wheelArg = null;\n        return this;\n    }\n\n    /**\n     * keydownイベントの前処理を行い、イベントを実行します\n     * @param {object} e イベントオブジェクト\n     * @param {number} delta ホイールの移動量\n     * @param {number} deltaX\n     * @param {number} deltaY\n     */\n    _onWheel(e,delta,deltaX,deltaY) {\n        this.runWheel(e,delta > 0);\n    }\n\n    /**\n     * ホイールイベントの実行内容です。onWheel()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります\n     * @param {object} e イベントオブジェクト\n     * @param {boolean} isUp ホイールが上方向に動いたならtrue、そうでなければfalse\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    runWheel(e,isUp) {\n        return this;\n    }//}}}\n}\n",
    "static": true,
    "longname": "js/abstract.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "AbstractHierarchy",
    "memberof": "js/abstract.js",
    "static": true,
    "longname": "js/abstract.js~AbstractHierarchy",
    "access": null,
    "export": true,
    "importPath": "./js/abstract.js",
    "importStyle": "{AbstractHierarchy}",
    "description": "ヒエラルキー構造を持つ各クラスの基底クラス\n木構造とは異なり、枝分かれしていても同列のオブジェクト間でポインタを持ち合います",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "自身のDOM要素"
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "_elem",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_elem",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "_parent",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_parent",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "_next",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_next",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "_prev",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_prev",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "_children",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_children",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "_width",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_width",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "_height",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_height",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "elem",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#elem",
    "access": null,
    "description": "自身のDOM要素を返します",
    "lineNumber": 27,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身のDOM要素"
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "parent",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#parent",
    "access": null,
    "description": "自身の親を設定します。また、引数を省略すると自身の親を取得します",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newParent",
        "description": "新たに設定する親"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "_parent",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_parent",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "next",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#next",
    "access": null,
    "description": "自身の次にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の次にある同列のインスタンスを取得します",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newNext",
        "description": "新たに設定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の次にある同列のインスタンス(引数を省略した場合)、後者はなければnull"
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "_next",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_next",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "prev",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#prev",
    "access": null,
    "description": "自身の前にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の前にある同列のインスタンスを取得します",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newPrev",
        "description": "新たに設定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の前にある同列のインスタンス(引数を省略した場合)、後者はなければnull"
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "_prev",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_prev",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "children",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#children",
    "access": null,
    "description": "指定されたインデックスの子を取得します。また、引数省略で自身の子を配列で取得します",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス。範囲外ならundefinedが返される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "indexで指定された子(引数を渡した場合)あるいは自身の子の配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "firstChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#firstChild",
    "access": null,
    "description": "自身の最初の子を取得します",
    "lineNumber": 90,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身の最初の子。子がいなければnull"
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "lastChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#lastChild",
    "access": null,
    "description": "自身の最後の子を取得します",
    "lineNumber": 102,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身の最後の子。子がいなければnull"
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "is",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#is",
    "access": null,
    "description": "objが自身と同一のオブジェクトかどうかを返します",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "比較するオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "objが自身と同一ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "hasClass",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasClass",
    "access": null,
    "description": "自身がクラスにclassNameを持っているかどうかを返します",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "判定するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がclassNameを付与されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "hasChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasChild",
    "access": null,
    "description": "自身が子を持っているかどうかを返します",
    "lineNumber": 134,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "isOnlyChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isOnlyChild",
    "access": null,
    "description": "自身が親にとって唯一の子であるかどうかを返します",
    "lineNumber": 142,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が親にとって唯一の子であればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isEmpty",
    "access": null,
    "description": "自身の子が空であるかどうかを返します",
    "lineNumber": 150,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "hasNextSibling",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasNextSibling",
    "access": null,
    "description": "同一の親を持つ次の兄弟が存在するかどうかを返します",
    "lineNumber": 158,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の次のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "hasPrevSibling",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasPrevSibling",
    "access": null,
    "description": "同一の親を持つ前の兄弟が存在するかどうかを返します",
    "lineNumber": 170,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の前のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "isFirst",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isFirst",
    "access": null,
    "description": "自身が親の第一の子であるかどうかを返します",
    "lineNumber": 182,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の前のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "isLast",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isLast",
    "access": null,
    "description": "自身が親の最後の子であるかどうかを返します。Charの場合は、EOLの前の文字とEOLの２つでtrueを返します",
    "lineNumber": 190,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の次のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "pushChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#pushChild",
    "access": null,
    "description": "childを自身の子の最後に加えます",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "自身の子の最後に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "insertChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#insertChild",
    "access": null,
    "description": "自身の子のpos番目にchildを加えます",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "childを加える位置のインデックス(０始まり)"
      },
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "子に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "deleteChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#deleteChild",
    "access": null,
    "description": "childを自身の子から削除します",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "自身の子から削除するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "replaceChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#replaceChild",
    "access": null,
    "description": "自身の子のoldChildを子から削除し、新たにnewChildを同じ位置に加えます",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "oldChild",
        "description": "入替えられる自身の子のインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "newChild",
        "description": "入れ替える自身の子でなかったインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "emptyChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#emptyChild",
    "access": null,
    "description": "子の参照を自身から切り離して空にします。DOM要素には影響しません",
    "lineNumber": 251,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "_children",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_children",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "text",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#text",
    "access": null,
    "description": "自身が表す文字列を返します",
    "lineNumber": 261,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身の内部にある文字列"
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "length",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#length",
    "access": null,
    "description": "自身が表す文字列の文字数を返します",
    "lineNumber": 269,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の内部にある文字列の文字数"
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "index",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#index",
    "access": null,
    "description": "同一の親を持つ兄弟の中でのインデックスを返します",
    "lineNumber": 277,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "同一の親を持つ兄弟の中での０始まりのインデックス"
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "childLength",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#childLength",
    "access": null,
    "description": "自身の子の数を返します",
    "lineNumber": 286,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の子の数"
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "className",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#className",
    "access": null,
    "description": "自身の持つクラスすべてをひとつの文字列で返します",
    "lineNumber": 296,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身の持つすべてのクラス名"
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "addClass",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addClass",
    "access": null,
    "description": "自身のクラスにclassNameを加えます",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "自身のクラスに加えるクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "removeClass",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeClass",
    "access": null,
    "description": "自身のクラスからclassNameを除去します",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "自身のクラスから除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "removeClassFromAllChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeClassFromAllChild",
    "access": null,
    "description": "自身の持つすべての子のクラスからclassNameを除去します",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "height",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#height",
    "access": null,
    "description": "自身の高さを取得します",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "_height",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_height",
    "access": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "width",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#width",
    "access": null,
    "description": "自身の幅を取得します",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "_width",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_width",
    "access": null,
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "x",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#x",
    "access": null,
    "description": "要素左上のX座標を返します",
    "lineNumber": 377,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "要素左上のX座標"
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "y",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#y",
    "access": null,
    "description": "要素左上のY座標を返します",
    "lineNumber": 385,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "要素左上のY座標"
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "computeDistanceFromPoint",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#computeDistanceFromPoint",
    "access": null,
    "description": "ある点からオブジェクトの中心点までの距離を計算します",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "基準点のX座標"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "基準点のY座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された距離のピクセル数"
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "computeCenterPoint",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#computeCenterPoint",
    "access": null,
    "description": "中心点の座標を返します",
    "lineNumber": 404,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "プロバティxにX座標、プロパティyにY座標の入ったオブジェクト"
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "emptyElem",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#emptyElem",
    "access": null,
    "description": "内部のエレメントを空にします。childrenとして持っていない要素(EOLなど)は削除されません",
    "lineNumber": 416,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "empty",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#empty",
    "access": null,
    "description": "内部のエレメントに加え、内部の参照も空にします",
    "lineNumber": 427,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addKeydownEventListener",
    "access": null,
    "description": "自身にkeydownイベントリスナーを付加します。重ねがけは無効となります",
    "lineNumber": 438,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_keydownArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_keydownArg",
    "access": null,
    "description": null,
    "lineNumber": 444,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "removeKeydownEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeKeydownEventListener",
    "access": null,
    "description": "自身のkeydownイベントリスナーを除去します",
    "lineNumber": 453,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_keydownArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_keydownArg",
    "access": null,
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_onKeydown",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_onKeydown",
    "access": null,
    "description": "keydownイベントの前処理を行い、イベントを実行します",
    "lineNumber": 467,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容。onkeydown()内で使用するために定義しておくが、内容はサブクラスで上書きします",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addClickEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addClickEventListener",
    "access": null,
    "description": "自身にクリックイベントを付加します。重ねがけは無効となります",
    "lineNumber": 498,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 504,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "removeClickEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeClickEventListener",
    "access": null,
    "description": "自身のクリックイベントを除去します",
    "lineNumber": 513,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 519,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_onClick",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_onClick",
    "access": null,
    "description": "クリックイベントを実行します",
    "lineNumber": 527,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "runClick",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#runClick",
    "access": null,
    "description": "clickイベントの実行内容です。onClick()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "addWheelEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addWheelEventListener",
    "access": null,
    "description": "自身にホイールイベントを付加します。重ねがけは無効となります",
    "lineNumber": 544,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_wheelArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_wheelArg",
    "access": null,
    "description": null,
    "lineNumber": 550,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "removeWheelEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeWheelEventListener",
    "access": null,
    "description": "自身のホイールイベントを除去します",
    "lineNumber": 560,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_wheelArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_wheelArg",
    "access": null,
    "description": null,
    "lineNumber": 567,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_onWheel",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_onWheel",
    "access": null,
    "description": "keydownイベントの前処理を行い、イベントを実行します",
    "lineNumber": 578,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "ホイールの移動量"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaY",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "runWheel",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#runWheel",
    "access": null,
    "description": "ホイールイベントの実行内容です。onWheel()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります",
    "lineNumber": 588,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUp",
        "description": "ホイールが上方向に動いたならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "js/character.js",
    "content": "'use strict';\n/* global AbstractHierarchy, ElemCreator, Util */\n\n/**\n * 文字を表すクラス\n */\nexport class Char extends AbstractHierarchy {\n    //{{{\n    /**\n     * @param {object} data 文字を表すオブジェクト<br>\n     * <pre>\n     * <code>\n     *  // 例\n     *\t\t{\n     *\t\t\t\"char\":\"あ\",\n     *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\t\"fontSize\": \"auto\"\n     *\t\t}\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        // dataオブジェクトにcharプロパティがなければEOLからの呼び出しで、dataにはエレメントが入っている\n        super(data.char ? ElemCreator.createCharElement(data) : data);\n        if (!('fontSize' in data)) {\n            this._fontSize = data.fontSize;\n        }\n    }\n\n    // --参照取得\n\n    /**\n     * 自身の親であるRowインスタンスをnewRowに設定します、あるいは引数省略で取得します\n     * @param {Row} [opt_newRow] 新たに設定する行のインスタンス\n     * @return {Char Row} 自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)\n     */\n    row(opt_newRow) {\n        return this.parent(opt_newRow);\n    }\n\n    /**\n     * 自身の属する段落のインスタンスを取得します\n     * @return {Paragraph} 自身の属する段落のインスタンス\n     */\n    paragraph() {\n        return this.row().paragraph();\n    }\n\n    /**\n     * 自身の属する文章コンテナのインスタンスを取得します\n     * @return {SentenceContainer} 自身の属する文章コンテナのインスタンス\n     */\n    sentenceContainer() {\n        return this.paragraph().container();\n    }\n\n    /**\n     * カーソルのインスタンスを取得します\n     * @return {Cursor} 自身の属する文章コンテナの持つカーソルのインスタンス\n     */\n    cursor() {\n        return this.row().paragraph().container().cursor();\n    }\n\n    // Cursor用\n    /**\n     * カーソル文字として自身が不適なら自身の次のCharを返します。具体的には、自身が段落途中のEOLならその次の文字となります\n     * @return {Char} 自身も含めた自身以降でカーソル文字として適したインスタンス\n     */\n    slideNextCursor() {\n        // 段落最後のEOL以外のEOLには止まらない\n        // 段落途中のEOLならその次の文字に変更する\n        if (this.isEOL() && this.row().hasNextSibling()) {\n            return this.next();\n        }\n\n        return this;\n    }\n\n    /**\n     * カーソル文字として自身が不適なら自身の前のCharを返します。具体的には、自身が段落途中のEOLならその前の文字となります\n     * @return {Char} 自身も含めた自身以前でカーソル文字として適したインスタンス\n     */\n    slidePrevCursor() {\n        // 段落最後のEOL以外のEOLには止まらない\n        // 段落途中のEOLならその前の文字に変更する\n        if (this.isEOL() && this.row().hasNextSibling()) {\n            return this.prev();\n        }\n\n        return this;\n    }\n\n    /**\n     * 自身の次の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します\n     * @return {Char} 自身の次のCharインスタンス。見つからなければnull\n     */\n    nextChar() {\n        if (this.next() && this.next().isEOL()) {\n            return this.next().nextChar();\n        }\n\n        return this.next();\n    }\n\n    /**\n     * 自身の前の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します\n     * @return {Char} 自身の前のCharインスタンス。見つからなければnull\n     */\n    prevChar() {\n        if (this.prev() && this.prev().isEOL()) {\n            return this.prev().prevChar();\n        }\n\n        return this.prev();\n    }\n\n    /**\n     * 同一段落内での次の文字を返します。EOLは含みません\n     * @return {Char} 同一段落内での次の文字のインスタンス。なければnull\n     */\n    nextCharOnParagraph() {\n        if (this.hasNextCharOnParagraph()) {\n            return this.nextChar();\n        }\n\n        return null;\n    }\n\n    /**\n     * 同一段落内での前の文字を返します。EOLは含みません\n     * @return {Char} 同一段落内での前の文字のインスタンス。なければnull\n     */\n    prevCharOnParagraph() {\n        if (this.hasPrevCharOnParagraph()) {\n            return this.prevChar();\n        }\n\n        return null;\n    }\n\n    // --判定\n\n    /**\n     * 自身がEOLであるかどうかを返します\n     * @return {boolean} オーバーライドされない限り常にfalse\n     */\n    isEOL() {\n        return false;\n    }\n\n    /**\n     * 自身にカーソルがあたっているかどうかを返します\n     * @return {boolean} 自身にカーソルがあればtrue、そうでなければfalse\n     */\n    hasCursor() {\n        return this.hasClass('cursor');\n    }\n\n    /**\n     * 自身が可視化されているかどうかを返します\n     * @return {boolean} 自身が可視化されていればtrue、そうでなければfalse\n     */\n    isDisplay() {\n        return this.hasClass('display');\n    }\n\n    /**\n     * 自身が同一行内で最終文字であるかどうかを返します。EOLは含みません(次の文字がEOLならfalse,自身がEOLの場合もfalse)\n     * @return {boolean} 同一行内で最終文字でなければtrue、最終文字ならfalse。\n     */\n    hasNextSibling() {\n        return !(this._isEOL || this.next().isEOL());\n    }\n\n    /**\n     * 同一段落内で次のCharがあるかどうかを返します\n     * @return {boolean} 同一段落内で次のCharがあればtrue、そうでなければfalse\n     */\n    hasNextCharOnParagraph() {\n        return this.nextChar() && this.nextChar().paragraph() === this.paragraph();\n    }\n\n    /**\n     * 同一段落内で前のCharがあるかどうかを返します\n     * @return {boolean} 同一段落内で前のCharがあればtrue、そうでなければfalse\n     */\n    hasPrevCharOnParagraph() {\n        return this.prevChar() && this.prevChar().paragraph() === this.paragraph();\n    }\n\n    /**\n     * この要素がrangeの中にあるかどうかを返します\n     * @param {Range} range 判定の基準となる範囲を表すRange\n     * @return {boolean} この要素がrangeの中にあればtrue、そうでなければfalse\n     */\n    isInRange(range) {\n        const charRange = document.createRange();\n        // 現在の要素を囲む範囲をcharRangeとして設定。selectNodeContentsをselectNodeにする、あるいは引数をテキストノードではなくspan要素にすると、選択中最初と最終文字が反応しないことがある\n        charRange.selectNodeContents(this.elem().childNodes.item(0));\n        // 開始位置が同じかselectの開始位置より文字の開始位置が後ろにあり、\n        // 終了位置が同じかselectの終了位置より文字の終了位置が前にある\n        if (charRange.compareBoundaryPoints(Range.START_TO_START,range) >= 0 &&\n            charRange.compareBoundaryPoints(Range.END_TO_END,range) <= 0) {\n                charRange.detach();\n                return true;\n            }\n\n        charRange.detach();\n        return false;\n    }\n\n    // --Status\n\n    /**\n     * この文字の状態を表す規定のオブジェクトを作成します\n     * @return {object} この文字の状態を表す規定のオブジェクト\n     */\n    data() {\n        const data = {};\n        data.char = this.text();\n        data.decolation = this.classArray();\n        data.fontSize = this.fontSize() + '';\n        return data;\n    }\n\n    /**\n     * この文字にかかっている装飾のクラスを配列にして返します\n     * @return {string[]} この文字にかかっている装飾のクラスの配列。文字装飾がかかっていなければ空の配列\n     */\n    classArray() {\n        return this.className().match(/decolation-\\S+/g) || [];\n    }\n\n    // --Style\n\n    /**\n     * この文字にカーソルを当てます\n     * @param {boolean} [opt_bShift] シフトキーが押されていればtrue、そうでなければfalse\n     * @return {Char} 自身のインスタンス\n     */\n    addCursor(opt_bShift) {\n        this.cursor().addCursor(this,opt_bShift);\n        return this;\n    }\n\n    /**\n     * この文字のフォントサイズを変更します。あるいは引数省略で現在のフォントサイズを取得します\n     * @param {number string} [opt_fontSize] 新たに設定するフォントサイズ(数値以外では'auto'が渡せる)\n     * @return {Char number string} 自身のインスタンス(引数を渡した場合)。\n     *     現在のフォントサイズ(引数を省略した場合)、フォントサイズが数値で設定されていなければ文字列の'auto'\n     */\n    fontSize(opt_fontSize) {\n        if (opt_fontSize) {\n            this._fontSize = opt_fontSize;\n            this._elem.dataset.fontSize = opt_fontSize;\n            // フォントサイズが変更されると行の幅が変わる可能性があるため、計算し直しておく\n            this.row().width(false);\n            return this;\n        }\n\n        if (this._fontSize === undefined) {\n            return 'auto';\n        }\n\n        if (this._fontSize === 'auto') {\n            return this._fontSize;\n        }\n        return parseInt(this._fontSize);\n    }\n\n    /**\n     * この文字に文字色を設定します。あるいは引数省略で現在の文字色を取得します\n     * @param {string boolean} [opt_color] 文字列ならその色に設定する、falseを渡せば文字色を解除する\n     * @return {Char string} 自身のインスタンス(引数を渡した場合)、あるいは現在の文字色(引数を省略した場合。文字色が設定されていなければ'black')\n     */\n    color(opt_color) {\n        if (opt_color) {\n            this._addColor(opt_color);\n            return this;\n        }\n\n        if (opt_color === false) {\n            this._removeColor();\n            return this;\n        }\n\n        if (opt_color === undefined) {\n            const color = this.className().match(/decolation-color-(\\S+)/);\n            return color ? color[1] : 'black';\n        }\n    }\n\n    /**\n     * この文字の太字を設定、解除します\n     *     または引数省略でこの文字が太字になっているかどうかを返します\n     * @param {boolean} [opt_bl] trueなら太字にする、falseなら太字を解除する\n     * @return {Char boolean} 自身のインスタンス(引数を渡した場合)、あるいは太字になっているかどうかの真偽値(引数を省略した場合)\n     */\n    bold(opt_bl) {\n        if (opt_bl === undefined) {\n            return this.hasClass('decolation-font-bold');\n        }\n\n        if (opt_bl) {\n            this.addClass('decolation-font-bold');\n        } else {\n            this.removeClass('decolation-font-bold');\n        }\n        return this;\n    }\n\n    /**\n     * この文字の斜体を設定、解除します\n     *     または引数省略でこの文字が斜体になっているかどうかを返します\n     * @param {boolean} [opt_bl] trueなら斜体にする、falseなら斜体を解除する\n     * @return {Char} 自身のインスタンス(引数を渡した場合)、あるいは斜体になっているかどうかの真偽値(引数を省略した場合)\n     */\n    italic(opt_bl) {\n        if (opt_bl === undefined) {\n            return this.hasClass('decolation-font-italic');\n        }\n\n        if (opt_bl) {\n            this.addClass('decolation-font-italic');\n        } else {\n            this.removeClass('decolation-font-italic');\n        }\n        return this;\n    }\n\n    /**\n     * 文字色を設定します\n     * @param {string} color 設定する文字色\n     * @return {Char} 自身のインスタンス\n     */\n    _addColor(color) {\n        // 同一種のクラスをすでに持っていたら外す\n        this.removeColor();\n        if (color === 'decolation-color-black') {\n            return; // ブラックなら外して終わり\n        }\n        this.addClass('decolation-color-'+ color);\n        return this;\n    }\n\n    /**\n     * 文字色を解除します\n     * @return {Char} 自身のインスタンス\n     */\n    _removeColor() {\n        const regexp = new RegExp('decolation-color-\\\\S+');\n        const rmClass = this.className().match(regexp);\n        if (rmClass) {\n            this.removeClass(rmClass[0]);\n        }\n        return this;\n    }\n\n    /**\n     * この文字から始まる文字列がstrと合致するなら、その文字列のCharにクラスを付与します\n     * @param {string} str 判定する文字列\n     * @return {Char} 自身のインスタンス\n     */\n    markSearchPhrase(str) {\n        // １文字ずつ比較し、渡された文字列の長さ分のループを終えるまでに異なる文字が現れるか段落に残りの文字がなくなればreturn\n        // 最初のループを無事に終えればこの文字から始まる文字列はstrに合致しているということなので、それぞれクラスを付与する\n\n        // 合致しているかの判定\n        // 合致しない文字が現れたか、文字列を比較し終える前に段落の最後に達したらreturn\n        for (let i = 0, len = str.length, char = this;\n            i < len; i++, char = char.nextCharOnParagraph()) {\n                if (!char || str.charAt(i) !== char.text()) {\n                    return this;\n                }\n            }\n\n        // クラスの付与\n        this.addClass('search-label');\n        for (let i = 0, len = str.length, char = this;\n            i < len; char = char.nextChar(),i++) {\n                char.addClass('search-word');\n            }\n        return this;\n    }\n\n    // --DOM操作関係\n\n    /**\n     * charを自身の直前に挿入します\n     * @param {Char} char 挿入するインスタンス\n     * @return {Char} 自身のインスタンス\n     */\n    before(char) {\n        // DOM\n        // this.elem().before(char.elem()); // before(),after()はまだサポートされず\n        this.row().elem().insertBefore(char.elem(),this.elem());\n\n        // ポインタ調整\n        // oldPrev - char - this\n\n        // char\n        const oldPrev = this.prev();\n        if (oldPrev) {\n            this.prev().next(char);\n        }\n        char.prev(oldPrev);\n        char.next(this);\n        this.prev(char);\n        // parent\n        char.row(this.row());\n        const pos = this.index();\n        this.row().insertChar(pos,char);\n        return this;\n    }\n\n    /**\n     * charを自身の直後に挿入します\n     * @param {Char} char 挿入するインスタンス\n     * @return {Char} 自身のインスタンス\n     */\n    after(char) {\n        if (this.isEOL()) {\n            throw new Error('couldn\\'t after from EOL');\n        }\n\n        // DOM\n        if (this.hasNextSibling()) {\n            this.row().elem().insertBefore(char.elem(),this.next().elem());\n        } else {\n            this.row().elem().appendChild(char.elem());\n        }\n\n        // ポインタ調整\n        // this - char - oldNextChar\n\n        // char\n        const oldNextChar = this.next();\n        this.next(char);\n        char.prev(this);\n        char.next(oldNextChar);\n        if (oldNextChar) {\n            oldNextChar.prev(char);\n        }\n        // parent\n        char.row(this.row());\n        const pos = this.index() + 1;\n        this.row().insertChar(pos,char);\n        return this;\n    }\n\n    /**\n     * 自身を削除します。文書整形は行いません\n     * @return {Char} 自身のインスタンス\n     */\n    remove() {\n        // 要素と参照の削除\n        if (this.isEOL()) {\n            throw new Error('counldn\\'t remove EOL');\n        }\n        const row = this.row();\n        row.elem().removeChild(this.elem());\n\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n        const oldPrev = this.prev();\n        const oldNext = this.next();\n        if (oldPrev) {\n            oldPrev.next(oldNext);\n        }\n        if (oldNext) {\n            oldNext.prev(oldPrev);\n        }\n        // 古い親の配列から削除\n        row.deleteChar(this);\n        return this;\n    }\n\n    /**\n     * 自身を削除し、文書整形を行います(空行ができたらその行も削除し、文字数調整や禁則処理を行います)\n     * @return {Char} 自身のインスタンス\n     */\n    delete() {\n        const row = this.row();\n        const paragraph = row.paragraph();\n        this.remove();\n\n        // 段落先頭以外の行で、文字を削除した結果行が空になった場合、その行を削除する\n        if (!row.isFirst() && row.isEmpty()) {\n            if (row.lastChild().hasCursor()) {\n                row.prev().EOL().addCursor().setPosMemory(); // 削除行にカーソルがあれば、その前の行のEOLにカーソルを移動する\n            }\n            row.remove();\n        }\n\n        paragraph.cordinate().checkKinsoku();\n        return this;\n    }\n\n    /**\n     * 自分自身をnewCharと入れ替えます\n     * @param {Char} newChar 自身と入れ替える文字のインスタンス\n     * @return {Char} 自身のインスタンス\n     */\n    replace(newChar) {\n        newChar.prev(this.prev());\n        newChar.next(this.next());\n        if (this.prev()) { this.prev().next(newChar); }\n        if (this.next()) { this.next().prev(newChar); }\n        this.prev(null);\n        this.next(null);\n        this.row().replaceChild(this,newChar);\n        this.row(null);\n        return this;\n    }\n\n    /**\n     * 前の行の最後に移動します。その結果空行ができたら削除し、カーソルがその行にあれば自身の次のEOLに移動します\n     *     段落はまたがず、移動前の自身が段落最初の文字であれば何もしません\n     * @return {Char} 自身のインスタンス\n     */\n    moveLastBefore() {\n        if (this.isEOL() || !this.isFirst()) { return this; } // 各行最初の文字でのみ有効\n        if (this.row().isFirst()) {\n            return this; // 段落はまたがない\n        }\n\n        const oldRow = this.row();\n        // delete()内でcordinate()を使い、cordinate()内でmoveLastBefore()を使っているので、ここでdelete()を使うと無限再帰の恐れあり\n        this.remove();\n        oldRow.prev().append(this);\n\n        // 移動した結果、空行ができたら削除する\n        if (oldRow.isEmpty()) {\n            if (oldRow.hasCursor()) {\n                this.next().addCursor(); // 削除行にカーソルが含まれていれば移動する\n            }\n            oldRow.remove();\n        }\n        this.setPosMemory();\n        return this;\n    }\n\n    /**\n     * 次の行の最初に移動します。次の行が同じ段落になければ新しく行を作り、カーソルは自身の次のEOLに移動します\n     * @return {Char} 自身のインスタンス\n     */\n    moveFirstAfter() {\n        if (this.isEOL() || !this.isLast()) {\n            return this; // 各行最後の文字でのみ有効\n        }\n\n        const oldRow = this.row();\n        // 次の行がなければ新しく作る(段落はまたがない)\n        if (oldRow.isLast()) {\n            const newRow = Row.createEmptyRow();\n            oldRow.after(newRow);\n            if (oldRow.EOL().hasCursor()) {\n                newRow.EOL().addCursor(); // 段落最後のEOLにカーソルがあれば動かないので、移動する\n            }\n        }\n\n        this.remove();\n        oldRow.next().prepend(this.display(true)); // displayしておかなければ、changeDisplay()での計算に狂いが生じる\n\n        this.setPosMemory(); // カーソルが付与されている文字は変わらないが、その文字の位置が変わる可能性があるためposMemoryを付け替える\n        return this;\n    }\n\n    // --Display関係\n    /**\n     * 自身の表示非表示を切り替えます\n     * @param {boolean} bDisplay trueなら表示、falseなら非表示\n     * @return {Char} 自身のインスタンス\n     */\n    display(bDisplay) {\n        if (bDisplay) {\n            this._elem.classList.add('display');\n        } else {\n            this._elem.classList.remove('display');\n        }\n        return this;\n    }\n\n    // Utility\n\n    /**\n     * 現在のメニューバーの状態に即してcを内容に持つ規定のオブジェクトを作成します。メソッドを持つ既存のCharインスタンスには影響しません\n     * @param {string} c 作成するオブジェクトが表す文字(１文字)\n     * @return {object} 文字データを表す規定のオブジェクト\n     */\n    createData(c) {\n        // Menuインスタンスを取得しやすくするため、インスタンスメソッドとして定義\n        const ret = {};\n        ret.char = c;\n        const menu = this.paragraph().container().menu();\n        ret.decolation = menu.charDecolations();\n        ret.fontSize = menu.fontSizeInput();\n        return ret;\n    }\n\n    /**\n     * 文字装飾のない文字の文字データを返します\n     * @param {string} c 作成するオブジェクトが表す文字(１文字)\n     * @return {object} 文字データを表す規定のオブジェクト\n     */\n    static createPlainCharData(c) {\n        const ret = {};\n        ret.char = c;\n        ret.decolation = [];\n        ret.fontSize = 'auto';\n        return ret;\n    }\n\n    // -- other\n\n    /**\n     * この文字のインデックスをカーソル位置として記憶します\n     * @return {Char} 自身のインスタンス\n     */\n    setPosMemory() {\n        const index = this.index();\n        this.cursor().setPosMemory(index);\n        return this;\n    }\n\n    /**\n     * 自分を含めて、自分以降で同じ段落内のChar全てに処理を行います(EOLは含まない)\n     * @param {function} func 処理内容が定義された関数オブジェクト\n     * @return {Char} 自身のインスタンス\n     */\n    afterEach(func) {\n        const index = this.index();\n        let cnt = 0;\n        for (let char of this.row().chars()) {\n            if (cnt >= index) {\n                func(char);\n            }\n            cnt++;\n        }\n        return this;\n    }\n}//}}}\n\n\n/**\n * 行の末端を表すクラス\n */\nexport class EOL extends Char {\n    //{{{\n    // Rowとともに要素を作ってしまうため、要素を引数に取る必要がある\n    /**\n     * @param {Element} elem 自身のDOM要素\n     */\n    constructor(elem) {\n        super(elem); // 最初にスーパークラスのコンストラクタを呼ばなければエラー\n    }\n\n    /**\n     * 自身がEOLであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isEOL() {\n        return true;\n    }\n\n    // -- Status\n\n    /**\n     * 自身のインデックスを返します\n     * @return {number} 自身は親の配列に入っていないので、親の配列の長さと同じ数値を返す\n     */\n    index() {\n        return this.row().childLength();\n    }\n\n    // --DOM操作\n\n    /**\n     * rowを親として紐付けます\n     * @param {Row} row 親となる行のインスタンス\n     * @return {EOL} 自身のインスタンス\n     */\n    appended(row) {\n        // EOLは各行一文字目であるのとDom要素が先に作られるためRowのappend()が利用できない\n        // EOLがappendedされるのはまだrowが文書内に組み込まれる前なので、nextとprevの操作は不要\n        row.elem().appendChild(this.elem());\n        this.row(row);\n        return this;\n    }\n}//}}}\n\n\n/**\n * 行を表すクラス\n */\nexport class Row extends AbstractHierarchy {\n    //{{{\n    /**\n     * @param {object} data 行を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     *\t// 各文字のオブジェクトが配列で格納される\n     *\t[\n     *\t\t{\t // 文字を表すオブジェクト\n     *\t\t\t\"char\":\"あ\",\n     *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\t\"fontSize\":\"auto\"\n     *\t\t},\n     *\t\t{\n     *\t\t\t\"char\":\"い\",\n     *\t\t\t\"decolation\":null\n     *\t\t\t\"fontSize\":\"18\"\n     *\t\t}\n     *\t]\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        // 配列が渡されたら新しく要素を作り、そうでなければ要素が渡されたとしてそれを元にインスタンスを作る\n        if (Array.isArray(data)) {\n            super(ElemCreator.createRowElement(data));\n        } else {\n            // InputBufferの場合\n            super(data);\n            data = [];\n        }\n        this._EOL = new EOL(this._elem.lastElementChild);\n        this._EOL.appended(this);\n        if (!Array.isArray(data)) {\n            return;\n        }\n        for (let charData of data) {\n            const char = new Char(charData);\n            this.append(char);\n        }\n\n        this.addClickEventListener();\n    }\n\n    // --参照取得\n\n    /**\n     * 自身のEOLのインスタンスを返します\n     * @return {EOL} 自身のEOLのインスタンス\n     */\n    EOL() {\n        return this._EOL;\n    }\n\n    /**\n     * 自身の属する文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} 自身の属する文章コンテナのインスタンス\n     */\n    container() {\n        return this.paragraph().container();\n    }\n\n    /**\n     * 自身の親の段落を新たに設定する、あるいは現在の親段落を取得します\n     * @param {Paragraph} [opt_newParagraph] 新たに設定する親段落\n     * @return {Row Paragraph} 自身のインスタンス(引数を渡した場合)あるいは自身の親段落のインスタンス(引数を省略した場合)\n     */\n    paragraph(opt_newParagraph) {\n        return this.parent(opt_newParagraph);\n    }\n\n    /**\n     * カーソルを持つ文字のインスタンスを取得します\n     * @return {Char} カーソルを持つ文字のインスタンス\n     */\n    cursorChar() {\n        return this.paragraph().container().cursor().getChar();\n    }\n\n    /**\n     * 自身の内部にある最初のインスタンスを返します\n     * @return {Char} 自身の第一文字のインスタンス。それがなければ自身のEOLのインスタンス\n     */\n    firstChild() {\n        // 空行ではEOLが選択されるため、firstChar()ではなくfirstChild()\n        // RowではEOLが絡むためオーバーライドする\n        if (this.hasChar()) {\n            return this.chars()[0];\n        } else {\n            return this.EOL();\n        }\n    }\n    /**\n     * 自身の内部にある最後のインスタンスであるEOLのインスタンスを返します\n     * @return {Char} 自身のEOLのインスタンス\n     */\n    lastChild() {\n        return this.EOL();\n    }\n\n    /**\n     * 自身の最終文字のインスタンスを返します\n     * @return {Char} 自身の最終文字のインスタンス。空行であればnull\n     */\n    lastChar() {\n        return super.lastChild();\n    }\n\n    /**\n     * 指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します。EOLは含まれません\n     * @param {number} [opt_index] 取得する子のインデックス\n     * @return {Char Char[]} 指定された子のインスタンス(引数を渡した場合。範囲外の数値ならundefined)、\n     *     あるいは子のインスタンスの配列(引数を省略した場合。子がいなければ空の配列)\n     */\n    chars(opt_index) { // EOLは含まれない\n        return super.children(opt_index);\n    }\n\n    /**\n     * EOLを含む、指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する子のインデックス\n     * @return {Char} 指定された子のインスタンス(引数を渡した場合。範囲外のインデックスならEOL)、\n     *     あるいはEOLを含む子のインスタンスの配列(引数を省略した場合。子がいなければ要素がEOLのみである配列)\n     */\n    children(opt_index) { // EOLを含む\n        if (opt_index === undefined) {\n            const ret = super.children(); // push()の戻り値はlenghtプロパティの値なので、一旦変数に入れる必要あり\n            ret.push(this.EOL());\n            return ret;\n        }\n        return super.children(opt_index) || this.EOL();\n    }\n\n    // --判定\n\n    /**\n     * 内部に文字があるかどうかを返します\n     * @return {boolean} 内部に文字があればtrue、EOLのみの空行ならfalse\n     */\n    hasChar() {\n        return super.hasChild();\n    }\n\n    /**\n     * 行内にカーソルがあるかどうかを返します\n     * @return {boolean} 行内にカーソルが含まれていればtrue、そうでなければfalse\n     */\n    hasCursor() {\n        for (let char of this.children()) {\n            if (char.hasCursor()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * この要素が可視化されているかどうかを返します\n     * @return {boolean} 可視化されていたらtrue、そうでなければfalse\n     */\n    isDisplay() {\n        return this.hasClass('display');\n    }\n\n    /**\n     * objが行内に含まれているかどうかを返します\n     * @param {Char} obj 判定するインスタンス\n     * @return {Char} objが行内にあるCharおよびEOLのいずれかに一致するとtrue、そうでなければfalse\n     */\n    contains(obj) {\n        if (!(obj instanceof Char)) {\n            return false;\n        }\n\n        for (let char of this.children()) {\n            if (char.is(obj)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * ページ内で最初の行であるかどうかを返します\n     * @return {boolean} ページ内で最初の行であればtrue、そうでなければfalse\n     */\n    isPageBreak() {\n        return this.hasClass('page-break');\n    }\n\n    /**\n     * ページ内で最終行であるかどうかを返します\n     * @return {boolean} ページ内で最終行ならtrue、そうでなければfalse\n     */\n    isPageLast() {\n        return this.hasClass('page-last-row');\n    }\n\n    // --参照操作\n\n    /**\n     * charを自身の子の最後に加えます\n     * @param {Char} char 子に加える文字のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    pushChar(char) {\n        return this.pushChild(char);\n    }\n\n    /**\n     * charを自身の子の指定された位置に加えます\n     * @param {number} pos 加える位置のインデックス\n     * @param {Char} char 加える子のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    insertChar(pos,char) {\n        return this.insertChild(pos,char);\n    }\n\n    /**\n     * charを自身の子から削除します\n     * @param {Char} char 削除する子のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    deleteChar(char) {\n        return this.deleteChild(char);\n    }\n\n    // --Status\n\n    /**\n     * この行の状態を表す規定のオブジェクトを作成します\n     * @return {object[]} この行の状態を表す規定のオブジェクト\n     */\n    data() {\n        const data = [];\n        for (let char of this.chars()) {\n            data.push(char.data());\n        }\n        return data;\n    }\n\n    /**\n     * この行の文字数を返します。EOLは含みません\n     * @return {number} この行の文字数。空行なら０\n     */\n    charLen() {\n        return super.childLength();\n    }\n\n    /**\n     * この行の内部にある文字のうち、最も大きいフォントサイズを返します。'auto'は18として計算します\n     * @return {number} 最大のフォント数\n     */\n    maxFont() {\n        let max = 0; // 空行では０になる\n        for (let char of this.chars()) {\n            max = Math.max(max, char.fontSize() === 'auto' ? 18 : char.fontSize());\n        }\n        return max;\n    }\n\n    // --Style\n\n    /**\n     * この行の横幅を返します。行は９０度回転しているため、ここでいう幅はcss上の高さを表します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の幅\n     */\n    width(opt_useCache) {\n        return super.height(opt_useCache);\n    }\n\n    /**\n     * この行の高さを返します。行は９０度回転しているため、ここでいう高さはcss上の幅を表します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の高さ\n     */\n    height(opt_useCache) {\n        return super.width(opt_useCache);\n    }\n\n    // --DOM操作関係\n\n    /**\n     * 子を空にして参照を整えます\n     * @return {Row} 自身のインスタンス\n     */\n    empty() {\n        // emptyElem()に加え、オブジェクト参照も切り離す\n        this.emptyElem();\n        const prevRow = this.prev();\n\n        if (prevRow) {\n            this.EOL().prev(prevRow.lastChild());\n            prevRow.lastChild().next(this.EOL());\n        } else {\n            this.EOL().prev(null);\n        }\n        this.emptyChild();\n        return this;\n    }\n\n    /**\n     * 自身の最初にcharを挿入します\n     * @param {Char} char 挿入する文字のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    prepend(char) {\n        this.firstChild().before(char);\n        return this;\n    }\n\n    /**\n     * 自身の最後(EOLの直前)にcharを挿入します\n     * @param {Char} char 挿入する文字のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    append(char) {\n        this.EOL().before(char);\n        return this;\n    }\n\n    /**\n     * 自身の直前にrowを挿入します\n     * @param {Row} row 挿入する行のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    before(row) {\n        // DOM\n        this.paragraph().elem().insertBefore(row.elem(),this.elem());\n\n        // ポインタ調整\n        // oldPrev - row - this\n\n        // row\n        const oldPrev = this.prev();\n        if (oldPrev !== null) {\n            oldPrev.next(row);\n        }\n        row.prev(oldPrev);\n        row.next(this);\n        this.prev(row);\n        // char\n        if (oldPrev) {\n            oldPrev.lastChild().next(row.firstChild());\n            row.firstChild().prev(oldPrev.lastChild());\n        }\n        row.lastChild().next(this.firstChild());\n        this.firstChild().prev(row.lastChild());\n        // parent\n        row.paragraph(this.paragraph());\n        const pos = this.index();\n        this.paragraph().insertRow(pos,row);\n        return this;\n    }\n\n    /**\n     * 自身の直後にrowを挿入します\n     * @param {Row} row 挿入する行のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    after(row) {\n        // DOM\n        if (this.hasNextSibling()) {\n            this.paragraph().elem().insertBefore(row.elem(),this.next().elem());\n        } else {\n            this.paragraph().elem().appendChild(row.elem());\n        }\n\n        // ポインタ調整\n        // this - row - oldNext\n\n        // row\n        const oldNext = this.next();\n        this.next(row);\n        row.prev(this);\n        row.next(oldNext);\n        if (oldNext !== null) {\n            oldNext.prev(row);\n        }\n        // char\n        this.lastChild().next(row.firstChild());\n        row.firstChild().prev(this.lastChild());\n        if (oldNext !== null) {\n            row.lastChild().next(oldNext.firstChild());\n            oldNext.firstChild().prev(row.lastChild());\n        }\n        // parent\n        row.paragraph(this.paragraph());\n        const pos = this.index() + 1;\n        this.paragraph().insertRow(pos,row);\n        return this;\n    }\n\n    /**\n     * 自身を削除します。文書整形は行われません\n     * @return {Row} 自身のインスタンス\n     */\n    remove() {\n        // 段落に自分しか行がない場合、段落ごと削除する\n        if (this.isOnlyChild()) {\n            this.paragraph().remove();\n            return this;\n        }\n\n        this.paragraph().elem().removeChild(this.elem());\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n        // row\n        const oldPrevRow = this.prev();\n        const oldNextRow = this.next();\n        if (oldPrevRow) {\n            oldPrevRow.next(oldNextRow);\n        }\n        if (oldNextRow) {\n            oldNextRow.prev(oldPrevRow);\n        }\n        // char\n        const oldPrevChar = oldPrevRow && oldPrevRow.lastChild();\n        const oldNextChar = oldNextRow && oldNextRow.firstChild();\n        if (oldPrevChar) {\n            oldPrevChar.next(oldNextChar);\n        }\n        if (oldNextChar) {\n            oldNextChar.prev(oldPrevChar);\n        }\n\n        this.paragraph().deleteRow(this);\n\n        this.next(null);\n        this.prev(null);\n        this.firstChild().prev(null);\n        this.lastChild().next(null);\n        return this;\n    }\n\n    /**\n     * 自身を削除し、文書整形を行います(カーソルが含まれていれば前の行、前の行がなければ次の行にカーソルを移動します)\n     * @return {Row} 自身のインスタンス\n     */\n    delete() {\n        // カーソルを動かしたくなければremove()を使う\n        const oldPrevRow = this.prev();\n        const oldNextRow = this.next();\n\n        this.remove();\n\n        // カーソルが削除行に含まれていれば、その前の行にカーソルを移動する\n        if (this.hasCursor()) {\n            if (oldPrevRow) {\n                this.cursor().moveRow(oldPrevRow);\n            } else {\n                this.cursor().moveRow(oldNextRow);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 前の段落の最終行として移動します。各段落最初の行でのみ有効です。自身が空行であれば削除されます\n     * @return {Row} 自身のインスタンス\n     */\n    moveLastBefore() {\n        if (!this.isFirst()) { // 各段落最初の行でのみ有効\n            return this;\n        }\n        if (this.paragraph().isFirst()) {\n            return this; // 文章先頭では無効\n        }\n\n        const prevParagraph = this.paragraph().prev();\n\n        // 空行を移動しようとした時の処理\n        if (this.isEmpty()) {\n            // 前の段落に移動せず削除する\n            // カーソルが含まれていれば、カーソルを前の行のEOLに移動\n            this.remove();\n            if (this.hasCursor()) {\n                prevParagraph.lastChild().EOL().addCursor().setPosMemory();\n            }\n            return this;\n        }\n\n        this.remove(); // カーソルはいじる必要なし\n        prevParagraph.append(this);\n        return this;\n    }\n\n    /**\n     * 次のRowの第一文字を、自らの最後に移動します。段落内でのみ有効となります\n     * @return {Row} 自身のインスタンス\n     */\n    bringChar() {\n        if (this.isLast()) {\n            return this;\n        }\n        this.next().firstChild().moveLastBefore();\n        return this;\n    }\n\n    /**\n     * 次のRowの最初のnum文字を、自らの最後に移動します。段落内でのみ有効となります。また、文字同士の順番に変化はありません\n     * @param {number} num 移動する文字数\n     * @return {Row} 自身のインスタンス\n     */\n    bringChars(num) {\n        for (let i = 0; i < num; i++) {\n            this.bringChar();\n        }\n        return this;\n    }\n\n    /**\n     * 自分の最後の文字を、次の行の最初に移動します。次の行がなければ新しく作成されます\n     * @return {Row} 自身のインスタンス\n     */\n    takeChar() {\n        if (!this.hasChar()) { // lastChar()でnullが取得される可能性があるため\n            return this;\n        }\n        this.lastChar().moveFirstAfter(); // lastChild()では毎回EOLが取得されるのでlastChar()\n        return this;\n    }\n\n    /**\n     * 自分の最後のnum文字を、次の行の最初に移動します。次の行がなければ新しく作成されます\n     * @param {number} num 移動する文字数\n     * @return {Row} 自身のインスタンス\n     */\n    takeChars(num) {\n        for (let i = 0; i < num; i++) {\n            this.takeChar();\n        }\n        return this;\n    }\n\n    /**\n     * 引数の文字列から作成された装飾のない文字のインスタンスを自らの最後に追加します\n     * @return {Row} 自身のインスタンス\n     */\n    createPlainContent(str) {\n        for (let c of str) {\n            this.append(new Char(Char.createPlainCharData(c)));\n        }\n        return this;\n    }\n\n    // --文章整理\n\n    /**\n     * 指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n     *     標準以外のフォントサイズの文字があれば文字数はフォントサイズに合わせて調整されます。\n     *     また、自身が空段落以外での空行であれば削除します\n     * @return {Row} 自身のインスタンス\n     */\n    cordinate() {\n        if (this.index() > 0 && this.isEmpty()) {\n            return this.delete(); // 空段落以外での空行は削除する\n        }\n\n        const confLen = this.container().strLenOnRow();\n        const len = this.charLen();\n        if (len < confLen) {\n            this.bringChars(confLen - len);\n        }\n\n        // 多すぎる文字数は減らす\n        // フォントの異なる文字が混ざっている場合、他の行と高さが異なってしまうため、その行の文字を変える必要がある\n        const maxSize = confLen * 18; // 標準フォント×文字数の数値が基準\n        let sum = 0;\n        for (let array of this.chars().entries()) {\n            const char = array[1];\n            sum += char.fontSize() === 'auto' ? 18 : char.fontSize();\n            if (sum > maxSize) {\n                const index = array[0];\n                this.takeChars(this.charLen() - index);\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 行内の禁則処理を行います\n     * @return {Row} 自身のインスタンス\n     */\n    checkKinsoku() {\n        if (this.isEmpty()) { return this; }\n        // 行頭にあるべきではないもの\n        for (let firstText = this.firstChild().text();\n            !this.isFirst() && /[」』）。、？]/.test(firstText); firstText = this.firstChild().text()) {\n                this.firstChild().moveLastBefore();\n            }\n        // 行末にあるべきではないもの\n        for (let lastText = this.lastChar().text();\n            !this.isLast() && /[「『（]/.test(lastText); lastText = this.lastChar().text()) {\n                this.lastChar().moveFirstAfter();\n            }\n        return this;\n    }\n\n    // --Display関係\n\n    /**\n     * 自身と子のCharを表示、あるいは非表示にします。内部の文字はfirst文字以降で自身に収まる文字を表示し、それ以外の文字は非表示にします\n     * @param {boolean} bDisplay trueであれば自身を表示し、falseで非表示にする\n     * @param {number} first 自身内部のCharを何文字目から表示するかのインデックス(０始まり)\n     * @return {Row} 自身のインスタンス\n     */\n    display(bDisplay,first) {\n        if (!bDisplay) {\n            this.elem().classList.remove('display');\n            return this;\n        }\n\n        this.elem().classList.add('display');\n        const dispHeight = this.height();\n        let heightSum = 0;\n        for (let array of this.chars().entries()) {\n            const index = array[0];\n            const char = array[1];\n            if (index < first) {\n                char.display(false);\n                continue;\n            }\n            const fontHeight = char.fontSize(); // sizeの取得はDOMにアクセスせずに行っているため、ここではレンダリングは発生しない\n            heightSum += fontHeight === 'auto' ? 18 : fontHeight;\n            char.display(index >= first && heightSum < dispHeight); // trueになれば表示、falseになれば非表示\n        }\n        return this;\n    }\n\n    /**\n     * カーソル位置を基準にして、文字を何文字目から表示すべきかの計算結果を返します\n     * @return {number} 文字の表示開始位置のインデックス\n     */\n    computeDisplayCharPos() {\n        const cursorIndex = this.cursorChar().index();\n        const currentFirst = this.firstDisplayCharPos();\n        const currentEnd = this.lastDisplayCharPos();\n        // カーソルが前にある\n        if (cursorIndex <= currentFirst) {\n            return cursorIndex;\n        }\n        // カーソルが後ろにある\n        if ( cursorIndex > currentEnd) {\n            return currentFirst + (cursorIndex - currentEnd);\n        }\n        return currentFirst;\n    }\n\n    /**\n     * この行が何文字目から表示されているかのインデックスを返します\n     * @return {number} EOL含め最初に表示された文字のインデックス。文字が全て非表示になっていれば-1\n     */\n    firstDisplayCharPos() {\n        for (let char of this.children()) {\n            if (char.isDisplay()) {\n                return char.index();\n            }\n        }\n        return -1; // displayがひとつもない(EOLは常にdisplayなので、ここまで来たら異常)\n    }\n\n    /**\n     * この行が何文字目まで表示されているかのインデックスを返します\n     * @return {number} EOL含め最後に表示された文字のインデックス。文字が全て非表示になっていれば-1\n     */\n    lastDisplayCharPos() {\n        if (!this.hasChar) {\n            return 0;\n        }\n        for (let i = this.charLen()-1,char; (char = this.chars(i)); i--) {\n            if (char.isDisplay()) {\n                return char.next().isEOL() ? i + 1 : i; // すべての文字がdisplayしていればEOLのインデックスを返す\n            }\n        }\n        return -1;\n    }\n\n    // --イベント\n\n    /**\n     * 行のクリックイベントの実行内容です。行をクリックすると最も近い文字にカーソルが当たります\n     * @param {Event} e イベントオブジェクト\n     */\n    runClick(e) {\n        if (this.container().inputBuffer().isDisplay()) {\n            return;\n        }\n\n        const clickX = e.pageX;\n        const clickY = e.pageY;\n        let min = Number.MAX_VALUE;\n        let closestChar;\n\n        for (let char of this.children()) {\n            const distance = char.computeDistanceFromPoint(clickX,clickY);\n            if (distance < min) {\n                min = distance;\n                closestChar = char;\n            }\n        }\n        closestChar.slidePrevCursor().addCursor().setPosMemory();\n    }\n\n    // --静的メソッド\n\n    /**\n     * 空行のRowインスタンスを新たに作成します\n     * @return {Row} 作成されたインスタンス\n     */\n    static createEmptyRow() {\n        return new Row([]);\n    }\n\n    // -- other\n\n    /**\n     * 同一段落で自分以降の行に処理を行います。\n     *     処理中に同一段落の行でなくなったなどしても影響せず、実行時時点で処理対象であった行すべてが処理されますので注意してください\n     * @param {function} func 処理が定義された関数オブジェクト\n     * @return {Row} 自身のインスタンス\n     */\n    afterEach(func) {\n        const index = this.index();\n        let cnt = 0;\n        for (let row of this.paragraph().rows()) {\n            if (cnt >= index) {\n                func(row);\n            }\n            cnt++;\n        }\n        return this;\n    }\n}//}}}\n\n\n/**\n * 段落を表すクラス\n */\nexport class Paragraph extends AbstractHierarchy {\n    //{{{\n    /**\n     * @param {object} data 段落を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     *  // 段落のクラスと各文字オブジェクトの配列の入った配列\n     *\t[\n     *\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n     *\t\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n     *\t\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n     *\t\t\t\t\"char\":\"あ\",\n     *\t\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\t\t\"fontSize\":\"auto\"\n     *\t\t\t},\n     *\t\t\t{\n     *\t\t\t\t\"char\":\"い\",\n     *\t\t\t\t\"decolation\":[]\n     *\t\t\t\t\"fontSize\":\"30\"\n     *\t\t\t}\n     *\t\t\t]\n     *\t]\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        super(ElemCreator.createParagraphElement(data));\n        const strLen = 40;\n        const spArray = Util.splitArray(data[1],strLen); // data[1]が空配列なら、spArrayにも空配列が入る\n        for (let charArray of spArray) {\n            this.append(new Row(charArray));\n        }\n        // data[1]が空配列 = 空段落(空行)の場合は上記for文が実行されないので、別に空行を作成して連結する\n        if (spArray.length === 0) {\n            this.append(Row.createEmptyRow());\n        }\n    }\n\n    // --参照取得\n\n    /**\n     * 親の文章コンテナを設定、または引数省略で取得します\n     * @param {SentenceContainer} [opt_newContainer] 新たに設定する、自身の属する文章コンテナのインスタンス\n     * @return {Paragraph SentenceContainer} 自身のインスタンス(引数を渡した場合)、あるいは自身の親の文章コンテナのインスタンス\n     */\n    container(opt_newContainer) {\n        return this.parent(opt_newContainer);\n    }\n\n    /**\n     * 指定された行のインスタンス、あるいは引数省略で子のインスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する子のインスタンスのインデックス\n     * @return {Row Row[]} 指定された行のインスタンス(引数を渡した場合)、あるいは子の配列(引数を省略した場合)\n     */\n    rows(opt_index) {\n        return this.children(opt_index);\n    }\n\n    // --判定\n\n    /**\n     * 自身が内部に行を持っているかどうかを返します\n     * @return {boolean} 自身が子を持っていればtrue、そうでなければfalse\n     */\n    hasRow() {\n        return this.hasChild();\n    }\n\n    /**\n     * 自身が空段落であるかどうかを返します。\n     *     空行がひとつだけあってもtrueを返します(空行は空段落にしか存在しないのが正常であるため)\n     * @return {boolean} 内部に行が存在しないか、空行が一つだけならtrue\n     */\n    isEmpty() {\n        return !this.hasChild() || this.firstChild().isEmpty();\n    }\n\n    /**\n     * 段落内にカーソルが含まれているかどうかを返します\n     * @return {boolean} 段落内にカーソルが含まれていればtrue、そうでなければfalse\n     */\n    hasCursor() {\n        for (let row of this.rows()) {\n            if (row.hasCursor()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するかどうかを返します\n     * @param {AbstractHierarchy} obj 判定するインスタンス\n     * @return {boolean} 引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するとtrue、そうでなければfalse\n     */\n    contains(obj) {\n        for (let row of this.rows()) {\n            if (row.is(obj)) {\n                return true;\n            }\n            if (row.contains(obj)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // --参照操作\n\n    /**\n     * 自身の子の最後にrowを加えます\n     * @param {Row} row 自身の子の最後に加えるインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    pushRow(row) {\n        return this.pushChild(row);\n    }\n\n    /**\n     * 自身の子の指定された位置にrowを挿入します\n     * @param {number} pos rowを挿入する位置のインデックス\n     * @param {Row} row 挿入するインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    insertRow(pos, row) {\n        return this.insertChild(pos,row);\n    }\n\n    /**\n     * 自身の子からrowを削除します\n     * @param {Row} row 削除する子のインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    deleteRow(row) {\n        return this.deleteChild(row);\n    }\n\n    // --Status\n\n    /**\n     * この段落の状態を表す規定のオブジェクトを作成します\n     * @return {object[]} この段落の状態を表す規定のオブジェクト\n     */\n    data() {\n        const data = [];\n        data[0] = this.classArray();\n        const charArray = [];\n        for (let row of this.rows()) {\n            for (let char of row.chars()) {\n                charArray.push(char.data());\n            }\n        }\n        data[1] = charArray;\n        return data;\n    }\n\n    /**\n     * この段落の装飾のクラスを文字列の配列にします\n     * @return {string[]} 装飾関係のクラスの配列。なければ空の配列\n     */\n    classArray() {\n        return this.elem().className.match(/decolation-\\S+/g) || [];\n    }\n\n    /**\n     * 段落内の文字数を数えます\n     * @return {number} 段落内の文字数\n     */\n    countChar() {\n        let cnt = 0;\n        for (let row of this.rows()) {\n            cnt += row.charLen();\n        }\n        return cnt;\n    }\n\n    // --Style\n\n    /**\n     * 段落にtext-alignを設定する、あるいは引数省略で現在のtext-alignの状態を取得します\n     * @param {string boolean} [opt_align] 新たに設定する'left','center','right'の文字列。\n     *     'left'あるいはfalseならalignを解除する\n     * @return {Paragraph string} 自身のインスタンス(引数を渡した場合)、\n     *     あるいは現在のtext-alignの状態(引数を省略した場合)\n     */\n    align(opt_align) {\n        if (opt_align === undefined) {\n            const align = this.className().match(/decolation-textalign-(\\S+)/);\n            return align ? align[1] : 'left';\n        }\n\n        const oldAlign = this.className().match(/decolation-textalign-\\S+/);\n        if (oldAlign) {\n            this.removeClass(oldAlign[0]);\n        }\n\n        if (opt_align && opt_align !== 'left') {\n            this.addClass('decolation-textalign-'+ opt_align);\n        }\n        return this;\n    }\n\n    /**\n     * 自身内部にあるすべてのCharから指定クラスを除去します\n     * @return {Paragraph} 自身のインスタンス\n     */\n    removeClassFromAllChar(className) {\n        for (let row of this.rows()) {\n            row.removeClassFromAllChild(className);\n        }\n        return this;\n    }\n\n    /**\n     * 自身内部にある文字にstrと合致する文字列があればsearch-labelクラスとsearch-wordクラスを付与します\n     * @param {string} str 判定する文字列\n     * @return {Paragraph} 自身のインスタンス\n     */\n    search(str) {\n        this.removeClassFromAllChar('search-label');\n        this.removeClassFromAllChar('search-word');\n        for (let row of this.rows()) {\n            for (let char of row.chars()) {\n                char.markSearchPhrase(str);\n            }\n        }\n        return this;\n    }\n\n    // --DOM操作関係\n\n    /**\n     * 自身の最後にrowを追加します\n     * @param {Row} row 追加するインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    append(row) {\n        this.elem().appendChild(row.elem());\n        row.paragraph(this);\n        const nextParagraph = this.next();\n        // rowの後側接続\n        if (nextParagraph) {\n            // row\n            const nextRow = nextParagraph.firstChild();\n            nextRow.prev(row);\n            row.next(nextRow);\n            // char\n            nextRow.firstChild().prev(row.lastChild());\n            row.lastChild().next(nextRow.firstChild());\n        }\n\n        // rowの前側接続\n        // 自段落の最終行　→　前の段落の最終行　→　null\n        const oldLastRow = this.hasRow() ?\n            this.lastChild() : (this.prev() ? this.prev().lastChild() : null);\n\n        this.pushRow(row);\n        if (oldLastRow === null) {\n            // 一行も存在しない状態からのappend\n            return this;\n        }\n        // row\n        oldLastRow.next(row);\n        row.prev(oldLastRow);\n        // char\n        oldLastRow.lastChild().next(row.firstChild());\n        row.firstChild().prev(oldLastRow.lastChild());\n\n        return this;\n    }\n\n    /**\n     * 自身の直後にparagraphを挿入します\n     * @param {Paragraph} paragraph 挿入するインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    after(paragraph) {\n        // DOM\n        if (this.hasNextSibling()) {\n            this.container().elem().insertBefore(paragraph.elem(),this.next().elem());\n        } else {\n            this.container().elem().appendChild(paragraph.elem());\n        }\n\n        // ポインタ調整\n        // this - paragraph - oldNext\n\n        // paragraph\n        const oldNext = this.next();\n        this.next(paragraph);\n        paragraph.prev(this);\n        paragraph.next(oldNext);\n        if (oldNext) {\n            oldNext.prev(paragraph);\n        }\n        // row\n        this.lastChild().next(paragraph.firstChild());\n        paragraph.firstChild().prev(this.lastChild());\n        if (oldNext) {\n            paragraph.lastChild().next(oldNext.firstChild());\n            oldNext.firstChild().prev(paragraph.lastChild());\n        }\n        // char\n        this.lastChild().lastChild().next(paragraph.firstChild().firstChild());\n        paragraph.firstChild().firstChild().prev(this.lastChild().lastChild());\n        if (oldNext) {\n            paragraph.lastChild().lastChild().next(oldNext.firstChild().firstChild());\n            oldNext.firstChild().firstChild().prev(paragraph.lastChild().lastChild());\n        }\n        // parent\n        paragraph.container(this.container());\n        const pos = this.index() + 1;\n        this.container().insertParagraph(pos,paragraph);\n        return this;\n    }\n\n    /**\n     * 自身を削除します。文書整形は行われません\n     * @return {Paragraph} 自身のインスタンス\n     */\n    remove() {\n        this.container().elem().removeChild(this.elem());\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n\n        // paragraph\n        // oldPrevParagraph - oldNextParagraph\n        const oldPrevParagraph = this.prev();\n        const oldNextParagraph = this.next();\n        if (oldPrevParagraph) {\n            oldPrevParagraph.next(oldNextParagraph);\n        }\n        if (oldNextParagraph) {\n            oldNextParagraph.prev(oldPrevParagraph);\n        }\n\n        // row\n        // oldPrevParagraph.lastChild() - oldNextParagraph.firstChild();\n        // oldPrevRow - oldNextRow\n        const oldPrevRow = oldPrevParagraph && oldPrevParagraph.lastChild();\n        const oldNextRow = oldNextParagraph && oldNextParagraph.firstChild();\n        if (oldPrevRow) {\n            oldPrevRow.next(oldNextRow);\n        }\n        if (oldNextRow) {\n            oldNextRow.prev(oldPrevRow);\n        }\n\n        // char\n        // oldPrevRow.lastChild() - oldNextRow.lastChild();\n        // oldPrevChar - oldNextChar\n        const oldPrevChar = oldPrevRow && oldPrevRow.lastChild();\n        const oldNextChar = oldNextRow && oldNextRow.firstChild();\n        if (oldPrevChar) {\n            oldPrevChar.next(oldNextChar);\n        }\n        if (oldNextChar) {\n            oldNextChar.prev(oldPrevChar);\n        }\n\n        this.container().deleteParagraph(this);\n        if (this.prev(null).firstChild()) {\n            if (this.firstChild().prev(null).firstChild()) {\n                this.firstChild().firstChild().prev(null);\n            }\n        }\n        if (this.next(null).lastChild()) {\n            if (this.lastChild().next(null).lastChild()) {\n                this.lastChild().lastChild().next(null);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 自身を削除し、文書を整形します(内部にカーソルがあれば直前の行に平行移動します。直前の行がなければ直後の行に移動します)\n     * @return {Paragraph} 自身のインスタンス\n     */\n    delete() {\n        const oldPrevRow = this.prev() && this.prev().lastChild();\n        const oldNextRow = this.next() && this.next().firstChild();\n\n        this.remove();\n\n        if (this.hasCursor()) {\n            if (oldPrevRow) {\n                this.cursor().moveRow(oldPrevRow);\n            } else { // 直前の行がなければ直後\n                this.cursor().moveRow(oldNextRow);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 渡された文字以降を新しい段落に移動して、段落を２つに分けます\n     * @param {Char} char 段落分割の基準文字のインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    divide(char) {\n        /*\n         *\n         * 新しい段落を作成し、基準文字以降を新しい段落に移動する。\n         *  基準文字の属していた行以降の同段落の行を新しい段落に移動する。\n         *  新しい段落を基準文字のあった段落の直後に挿入する。cordinate()で文字の調整を行う\n         *\n         *  段落先頭から:一行目の文字が丸々新しい行に移って次の段落の一行目となる。\n         *               二行目以降は行ごと次の段落へ\n         *               →　基準文字のあった行は空行となりもともとの段落の唯一の行となるため、\n         *                   あたかも空段落が基準行の前に挿入されたようになる\n         *  行頭から:基準行の文字がまるまる新しい行に移って次の段落の一行目になる。\n         *           基準行以降の行は行ごと新しい段落に移る。\n         *           →　基準行以降が新しい段落に移り、それ以前の行はもともとの段落に残るため、段落が２つに別れる。\n         *           この時点では、もともとの段落の最後に空行が残っている状態なので、cordinate()で対応する\n         *  行の途中から:基準文字以降の同じ行の文字が新しい行に移って次の段落の一行目になる。\n         *               それ以降は行ごと次の段落に移る。\n         *               →　基準文字以降が新しい段落になる。この時点では一行目の文字数がおかしいので、cordinate()で調整する\n         *  段落最後のEOLから: 基準文字のインデックスが同一行の他の文字より大きいため、afterEach()が一度も実行されない。\n         *                     次の行も存在しないのでnextRowが存在せず、nextRow.afterEach()は実行されない。\n         *                     ただし、新しい行はnewParagraphを作成した時点で存在している。\n         *                     →　新しい段落が今いる段落の後ろに追加されるだけ\n         */\n        if (!this.contains(char)) {\n            return this;\n        }\n        const paragraph = char.row().paragraph();\n        // 作成時点で空行が含まれている 段落にテキストアラインが付与されていれば、新しい段落も同様にする\n        const newParagraph = Paragraph.createEmptyParagraph().align(paragraph.align());\n        const nextRow = char.row().hasNextSibling() ? char.row().next() : null; // この行以降を新しい段落に移動\n        // 一行目\n        // 基準文字以降を新しい行に移し、新しい段落に挿入する\n        // 元々の行は空になってもそのまま\n        const newRow = newParagraph.firstChild();\n        char.afterEach(function (c) {\n            c.remove();\n            newRow.append(c);\n        });\n\n        // 二行目以降\n        // 行ごと新しい段落に移動\n        if (nextRow) {\n            nextRow.afterEach(function (row) {\n                row.remove();\n                newParagraph.append(row);\n            });\n        }\n\n        this.after(newParagraph);\n        paragraph.cordinate().checkKinsoku();\n        newParagraph.cordinate().checkKinsoku();\n        return this;\n    }\n\n    // --文章整理\n\n    /**\n     * 内部行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n     *     標準以外のフォントサイズの文字があれば文字数はそのサイズに合わせて調整されます。\n     *     また、自身が空段落ではなく内部に空行があれば削除します\n     * @return {Paragraph} 自身のインスタンス\n     */\n    cordinate() {\n        // エラー原因まとめ\n        // ここで一旦rows()の内容が保存され、そこから一つ一つrowを取り出す(rows()はコピーされた配列が返される)\n        // row.cordinate()内のbringChar()によって、最終行が削除されることがある\n        // 削除された最終行でも、先に保存されていたためrow.cordinate()が実行される\n        // 削除行の参照は保持されているのでcordinate()はエラーが起きずに実行される\n        // ただしremove()された時にparentにnullが代入されているので、内部でparagraph().container()が実行されるときにNullPointer\n        for (let row of this.rows()) {\n            if (!row.paragraph()) {\n                continue; // cordinate()内で行が削除された場合の対策\n            }\n            row.cordinate();\n        }\n        return this;\n    }\n\n    /**\n     * 段落内に禁則処理を施します\n     * @return {Paragraph} 自身のインスタンス\n     */\n    checkKinsoku() {\n        for (let row of this.rows()) {\n            if (!row.paragraph()) {\n                continue;\n            }\n            row.checkKinsoku();\n        }\n        return this;\n    }\n\n    /**\n     * 内部にあるすべての行の表示非表示を切り替えます\n     * @param {boolean} bDisplay 表示するならtrue、そうでなければfalseを指定する\n     * @return {Paragraph} 自身のインスタンス\n     */\n    display(bDisplay) {\n        for (let row of this.rows()) {\n            row.display(bDisplay);\n        }\n        return this;\n    }\n\n    /**\n     * 空段落のインスタンスを新たに作成します\n     * @return {Paragraph} 空段落のインスタンス\n     */\n    static createEmptyParagraph() {\n        const arg = [];\n        arg[0] = [];\n        arg[1] = [];\n        return new Paragraph(arg);\n    }\n}//}}}\n",
    "static": true,
    "longname": "js/character.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Char",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~Char",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{Char}",
    "description": "文字を表すクラス",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#constructor",
    "access": null,
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文字を表すオブジェクト<br>\n<pre>\n<code>\n // 例\n\t{\n\t\t\"char\":\"あ\",\n\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\"fontSize\": \"auto\"\n\t}\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_fontSize",
    "memberof": "js/character.js~Char",
    "static": false,
    "longname": "js/character.js~Char#_fontSize",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "row",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#row",
    "access": null,
    "description": "自身の親であるRowインスタンスをnewRowに設定します、あるいは引数省略で取得します",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newRow",
        "description": "新たに設定する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char Row"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "paragraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#paragraph",
    "access": null,
    "description": "自身の属する段落のインスタンスを取得します",
    "lineNumber": 45,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身の属する段落のインスタンス"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#sentenceContainer",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを取得します",
    "lineNumber": 53,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "cursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#cursor",
    "access": null,
    "description": "カーソルのインスタンスを取得します",
    "lineNumber": 61,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナの持つカーソルのインスタンス"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "slideNextCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#slideNextCursor",
    "access": null,
    "description": "カーソル文字として自身が不適なら自身の次のCharを返します。具体的には、自身が段落途中のEOLならその次の文字となります",
    "lineNumber": 70,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身も含めた自身以降でカーソル文字として適したインスタンス"
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "slidePrevCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#slidePrevCursor",
    "access": null,
    "description": "カーソル文字として自身が不適なら自身の前のCharを返します。具体的には、自身が段落途中のEOLならその前の文字となります",
    "lineNumber": 84,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身も含めた自身以前でカーソル文字として適したインスタンス"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "nextChar",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#nextChar",
    "access": null,
    "description": "自身の次の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します",
    "lineNumber": 98,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の次のCharインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "prevChar",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#prevChar",
    "access": null,
    "description": "自身の前の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します",
    "lineNumber": 110,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の前のCharインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "nextCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#nextCharOnParagraph",
    "access": null,
    "description": "同一段落内での次の文字を返します。EOLは含みません",
    "lineNumber": 122,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "同一段落内での次の文字のインスタンス。なければnull"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "prevCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#prevCharOnParagraph",
    "access": null,
    "description": "同一段落内での前の文字を返します。EOLは含みません",
    "lineNumber": 134,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "同一段落内での前の文字のインスタンス。なければnull"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "isEOL",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#isEOL",
    "access": null,
    "description": "自身がEOLであるかどうかを返します",
    "lineNumber": 148,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "オーバーライドされない限り常にfalse"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "hasCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasCursor",
    "access": null,
    "description": "自身にカーソルがあたっているかどうかを返します",
    "lineNumber": 156,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身にカーソルがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "isDisplay",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#isDisplay",
    "access": null,
    "description": "自身が可視化されているかどうかを返します",
    "lineNumber": 164,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が可視化されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "hasNextSibling",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasNextSibling",
    "access": null,
    "description": "自身が同一行内で最終文字であるかどうかを返します。EOLは含みません(次の文字がEOLならfalse,自身がEOLの場合もfalse)",
    "lineNumber": 172,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一行内で最終文字でなければtrue、最終文字ならfalse。"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "hasNextCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasNextCharOnParagraph",
    "access": null,
    "description": "同一段落内で次のCharがあるかどうかを返します",
    "lineNumber": 180,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一段落内で次のCharがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "hasPrevCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasPrevCharOnParagraph",
    "access": null,
    "description": "同一段落内で前のCharがあるかどうかを返します",
    "lineNumber": 188,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一段落内で前のCharがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "isInRange",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#isInRange",
    "access": null,
    "description": "この要素がrangeの中にあるかどうかを返します",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "Range"
        ],
        "spread": false,
        "optional": false,
        "name": "range",
        "description": "判定の基準となる範囲を表すRange"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "この要素がrangeの中にあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "data",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#data",
    "access": null,
    "description": "この文字の状態を表す規定のオブジェクトを作成します",
    "lineNumber": 219,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "この文字の状態を表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "classArray",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#classArray",
    "access": null,
    "description": "この文字にかかっている装飾のクラスを配列にして返します",
    "lineNumber": 231,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "この文字にかかっている装飾のクラスの配列。文字装飾がかかっていなければ空の配列"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "addCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#addCursor",
    "access": null,
    "description": "この文字にカーソルを当てます",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "fontSize",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#fontSize",
    "access": null,
    "description": "この文字のフォントサイズを変更します。あるいは引数省略で現在のフォントサイズを取得します",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_fontSize",
        "description": "新たに設定するフォントサイズ(数値以外では'auto'が渡せる)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char number string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)。\n    現在のフォントサイズ(引数を省略した場合)、フォントサイズが数値で設定されていなければ文字列の'auto'"
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_fontSize",
    "memberof": "js/character.js~Char",
    "static": false,
    "longname": "js/character.js~Char#_fontSize",
    "access": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "color",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#color",
    "access": null,
    "description": "この文字に文字色を設定します。あるいは引数省略で現在の文字色を取得します",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "string boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_color",
        "description": "文字列ならその色に設定する、falseを渡せば文字色を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の文字色(引数を省略した場合。文字色が設定されていなければ'black')"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "bold",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#bold",
    "access": null,
    "description": "この文字の太字を設定、解除します\n    または引数省略でこの文字が太字になっているかどうかを返します",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueなら太字にする、falseなら太字を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは太字になっているかどうかの真偽値(引数を省略した場合)"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "italic",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#italic",
    "access": null,
    "description": "この文字の斜体を設定、解除します\n    または引数省略でこの文字が斜体になっているかどうかを返します",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueなら斜体にする、falseなら斜体を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは斜体になっているかどうかの真偽値(引数を省略した場合)"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "_addColor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#_addColor",
    "access": null,
    "description": "文字色を設定します",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "設定する文字色"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_removeColor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#_removeColor",
    "access": null,
    "description": "文字色を解除します",
    "lineNumber": 351,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "markSearchPhrase",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#markSearchPhrase",
    "access": null,
    "description": "この文字から始まる文字列がstrと合致するなら、その文字列のCharにクラスを付与します",
    "lineNumber": 365,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "判定する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "before",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#before",
    "access": null,
    "description": "charを自身の直前に挿入します",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "after",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#after",
    "access": null,
    "description": "charを自身の直後に挿入します",
    "lineNumber": 422,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "remove",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#remove",
    "access": null,
    "description": "自身を削除します。文書整形は行いません",
    "lineNumber": 456,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "delete",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#delete",
    "access": null,
    "description": "自身を削除し、文書整形を行います(空行ができたらその行も削除し、文字数調整や禁則処理を行います)",
    "lineNumber": 482,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "replace",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#replace",
    "access": null,
    "description": "自分自身をnewCharと入れ替えます",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "newChar",
        "description": "自身と入れ替える文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "moveLastBefore",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#moveLastBefore",
    "access": null,
    "description": "前の行の最後に移動します。その結果空行ができたら削除し、カーソルがその行にあれば自身の次のEOLに移動します\n    段落はまたがず、移動前の自身が段落最初の文字であれば何もしません",
    "lineNumber": 521,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "moveFirstAfter",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#moveFirstAfter",
    "access": null,
    "description": "次の行の最初に移動します。次の行が同じ段落になければ新しく行を作り、カーソルは自身の次のEOLに移動します",
    "lineNumber": 547,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "display",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#display",
    "access": null,
    "description": "自身の表示非表示を切り替えます",
    "lineNumber": 575,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "trueなら表示、falseなら非表示"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "createData",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#createData",
    "access": null,
    "description": "現在のメニューバーの状態に即してcを内容に持つ規定のオブジェクトを作成します。メソッドを持つ既存のCharインスタンスには影響しません",
    "lineNumber": 591,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "作成するオブジェクトが表す文字(１文字)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文字データを表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "createPlainCharData",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/character.js~Char.createPlainCharData",
    "access": null,
    "description": "文字装飾のない文字の文字データを返します",
    "lineNumber": 606,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "作成するオブジェクトが表す文字(１文字)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文字データを表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "setPosMemory",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#setPosMemory",
    "access": null,
    "description": "この文字のインデックスをカーソル位置として記憶します",
    "lineNumber": 620,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "afterEach",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#afterEach",
    "access": null,
    "description": "自分を含めて、自分以降で同じ段落内のChar全てに処理を行います(EOLは含まない)",
    "lineNumber": 631,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "処理内容が定義された関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "EOL",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~EOL",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{EOL}",
    "description": "行の末端を表すクラス",
    "lineNumber": 648,
    "interface": false,
    "extends": [
      "Char"
    ]
  },
  {
    "__docId__": 116,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#constructor",
    "access": null,
    "description": "",
    "lineNumber": 654,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "自身のDOM要素"
      }
    ]
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "isEOL",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#isEOL",
    "access": null,
    "description": "自身がEOLであるかどうかを返します",
    "lineNumber": 662,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "index",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#index",
    "access": null,
    "description": "自身のインデックスを返します",
    "lineNumber": 672,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身は親の配列に入っていないので、親の配列の長さと同じ数値を返す"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "appended",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#appended",
    "access": null,
    "description": "rowを親として紐付けます",
    "lineNumber": 683,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "親となる行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Row",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~Row",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{Row}",
    "description": "行を表すクラス",
    "lineNumber": 696,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#constructor",
    "access": null,
    "description": "",
    "lineNumber": 719,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "行を表すオブジェクト<br>\n例\n<pre>\n<code>\n// 各文字のオブジェクトが配列で格納される\n[\n\t{\t // 文字を表すオブジェクト\n\t\t\"char\":\"あ\",\n\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\"fontSize\":\"auto\"\n\t},\n\t{\n\t\t\"char\":\"い\",\n\t\t\"decolation\":null\n\t\t\"fontSize\":\"18\"\n\t}\n]\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_EOL",
    "memberof": "js/character.js~Row",
    "static": false,
    "longname": "js/character.js~Row#_EOL",
    "access": null,
    "description": null,
    "lineNumber": 728,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "EOL",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#EOL",
    "access": null,
    "description": "自身のEOLのインスタンスを返します",
    "lineNumber": 747,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "自身のEOLのインスタンス"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "container",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#container",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを返します",
    "lineNumber": 755,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "paragraph",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#paragraph",
    "access": null,
    "description": "自身の親の段落を新たに設定する、あるいは現在の親段落を取得します",
    "lineNumber": 764,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newParagraph",
        "description": "新たに設定する親段落"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親段落のインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "cursorChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#cursorChar",
    "access": null,
    "description": "カーソルを持つ文字のインスタンスを取得します",
    "lineNumber": 772,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソルを持つ文字のインスタンス"
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "firstChild",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#firstChild",
    "access": null,
    "description": "自身の内部にある最初のインスタンスを返します",
    "lineNumber": 780,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の第一文字のインスタンス。それがなければ自身のEOLのインスタンス"
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "lastChild",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#lastChild",
    "access": null,
    "description": "自身の内部にある最後のインスタンスであるEOLのインスタンスを返します",
    "lineNumber": 793,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のEOLのインスタンス"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "lastChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#lastChar",
    "access": null,
    "description": "自身の最終文字のインスタンスを返します",
    "lineNumber": 801,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の最終文字のインスタンス。空行であればnull"
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "chars",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#chars",
    "access": null,
    "description": "指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します。EOLは含まれません",
    "lineNumber": 811,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char Char[]"
      ],
      "spread": false,
      "description": "指定された子のインスタンス(引数を渡した場合。範囲外の数値ならundefined)、\n    あるいは子のインスタンスの配列(引数を省略した場合。子がいなければ空の配列)"
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "children",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#children",
    "access": null,
    "description": "EOLを含む、指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します",
    "lineNumber": 821,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "指定された子のインスタンス(引数を渡した場合。範囲外のインデックスならEOL)、\n    あるいはEOLを含む子のインスタンスの配列(引数を省略した場合。子がいなければ要素がEOLのみである配列)"
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "hasChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#hasChar",
    "access": null,
    "description": "内部に文字があるかどうかを返します",
    "lineNumber": 836,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内部に文字があればtrue、EOLのみの空行ならfalse"
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "hasCursor",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#hasCursor",
    "access": null,
    "description": "行内にカーソルがあるかどうかを返します",
    "lineNumber": 844,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "行内にカーソルが含まれていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "isDisplay",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#isDisplay",
    "access": null,
    "description": "この要素が可視化されているかどうかを返します",
    "lineNumber": 857,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "可視化されていたらtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "contains",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#contains",
    "access": null,
    "description": "objが行内に含まれているかどうかを返します",
    "lineNumber": 866,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "判定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "objが行内にあるCharおよびEOLのいずれかに一致するとtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "isPageBreak",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#isPageBreak",
    "access": null,
    "description": "ページ内で最初の行であるかどうかを返します",
    "lineNumber": 884,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ページ内で最初の行であればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "isPageLast",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#isPageLast",
    "access": null,
    "description": "ページ内で最終行であるかどうかを返します",
    "lineNumber": 892,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ページ内で最終行ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "pushChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#pushChar",
    "access": null,
    "description": "charを自身の子の最後に加えます",
    "lineNumber": 903,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "子に加える文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "insertChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#insertChar",
    "access": null,
    "description": "charを自身の子の指定された位置に加えます",
    "lineNumber": 913,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "加える位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "加える子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "deleteChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#deleteChar",
    "access": null,
    "description": "charを自身の子から削除します",
    "lineNumber": 922,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "削除する子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "data",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#data",
    "access": null,
    "description": "この行の状態を表す規定のオブジェクトを作成します",
    "lineNumber": 932,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "この行の状態を表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "charLen",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#charLen",
    "access": null,
    "description": "この行の文字数を返します。EOLは含みません",
    "lineNumber": 944,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "この行の文字数。空行なら０"
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "maxFont",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#maxFont",
    "access": null,
    "description": "この行の内部にある文字のうち、最も大きいフォントサイズを返します。'auto'は18として計算します",
    "lineNumber": 952,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "最大のフォント数"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "width",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#width",
    "access": null,
    "description": "この行の横幅を返します。行は９０度回転しているため、ここでいう幅はcss上の高さを表します",
    "lineNumber": 968,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "height",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#height",
    "access": null,
    "description": "この行の高さを返します。行は９０度回転しているため、ここでいう高さはcss上の幅を表します",
    "lineNumber": 978,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "empty",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#empty",
    "access": null,
    "description": "子を空にして参照を整えます",
    "lineNumber": 988,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "prepend",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#prepend",
    "access": null,
    "description": "自身の最初にcharを挿入します",
    "lineNumber": 1008,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入する文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "append",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#append",
    "access": null,
    "description": "自身の最後(EOLの直前)にcharを挿入します",
    "lineNumber": 1018,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入する文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "before",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#before",
    "access": null,
    "description": "自身の直前にrowを挿入します",
    "lineNumber": 1028,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "after",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#after",
    "access": null,
    "description": "自身の直後にrowを挿入します",
    "lineNumber": 1062,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "remove",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#remove",
    "access": null,
    "description": "自身を削除します。文書整形は行われません",
    "lineNumber": 1099,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "delete",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#delete",
    "access": null,
    "description": "自身を削除し、文書整形を行います(カーソルが含まれていれば前の行、前の行がなければ次の行にカーソルを移動します)",
    "lineNumber": 1140,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "moveLastBefore",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#moveLastBefore",
    "access": null,
    "description": "前の段落の最終行として移動します。各段落最初の行でのみ有効です。自身が空行であれば削除されます",
    "lineNumber": 1162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "bringChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#bringChar",
    "access": null,
    "description": "次のRowの第一文字を、自らの最後に移動します。段落内でのみ有効となります",
    "lineNumber": 1192,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "bringChars",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#bringChars",
    "access": null,
    "description": "次のRowの最初のnum文字を、自らの最後に移動します。段落内でのみ有効となります。また、文字同士の順番に変化はありません",
    "lineNumber": 1205,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動する文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "takeChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#takeChar",
    "access": null,
    "description": "自分の最後の文字を、次の行の最初に移動します。次の行がなければ新しく作成されます",
    "lineNumber": 1216,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "takeChars",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#takeChars",
    "access": null,
    "description": "自分の最後のnum文字を、次の行の最初に移動します。次の行がなければ新しく作成されます",
    "lineNumber": 1229,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動する文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "createPlainContent",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#createPlainContent",
    "access": null,
    "description": "引数の文字列から作成された装飾のない文字のインスタンスを自らの最後に追加します",
    "lineNumber": 1240,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "cordinate",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#cordinate",
    "access": null,
    "description": "指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n    標準以外のフォントサイズの文字があれば文字数はフォントサイズに合わせて調整されます。\n    また、自身が空段落以外での空行であれば削除します",
    "lineNumber": 1255,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "checkKinsoku",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#checkKinsoku",
    "access": null,
    "description": "行内の禁則処理を行います",
    "lineNumber": 1286,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "display",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#display",
    "access": null,
    "description": "自身と子のCharを表示、あるいは非表示にします。内部の文字はfirst文字以降で自身に収まる文字を表示し、それ以外の文字は非表示にします",
    "lineNumber": 1309,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "trueであれば自身を表示し、falseで非表示にする"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "自身内部のCharを何文字目から表示するかのインデックス(０始まり)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "computeDisplayCharPos",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#computeDisplayCharPos",
    "access": null,
    "description": "カーソル位置を基準にして、文字を何文字目から表示すべきかの計算結果を返します",
    "lineNumber": 1336,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文字の表示開始位置のインデックス"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "firstDisplayCharPos",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#firstDisplayCharPos",
    "access": null,
    "description": "この行が何文字目から表示されているかのインデックスを返します",
    "lineNumber": 1355,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "EOL含め最初に表示された文字のインデックス。文字が全て非表示になっていれば-1"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "lastDisplayCharPos",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#lastDisplayCharPos",
    "access": null,
    "description": "この行が何文字目まで表示されているかのインデックスを返します",
    "lineNumber": 1368,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "EOL含め最後に表示された文字のインデックス。文字が全て非表示になっていれば-1"
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "runClick",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#runClick",
    "access": null,
    "description": "行のクリックイベントの実行内容です。行をクリックすると最も近い文字にカーソルが当たります",
    "lineNumber": 1386,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "createEmptyRow",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/character.js~Row.createEmptyRow",
    "access": null,
    "description": "空行のRowインスタンスを新たに作成します",
    "lineNumber": 1412,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "作成されたインスタンス"
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "afterEach",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#afterEach",
    "access": null,
    "description": "同一段落で自分以降の行に処理を行います。\n    処理中に同一段落の行でなくなったなどしても影響せず、実行時時点で処理対象であった行すべてが処理されますので注意してください",
    "lineNumber": 1424,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "処理が定義された関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "Paragraph",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~Paragraph",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{Paragraph}",
    "description": "段落を表すクラス",
    "lineNumber": 1441,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#constructor",
    "access": null,
    "description": "",
    "lineNumber": 1467,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "段落を表すオブジェクト<br>\n例\n<pre>\n<code>\n // 段落のクラスと各文字オブジェクトの配列の入った配列\n[\n\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n\t\t\t\"char\":\"あ\",\n\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\t\"fontSize\":\"auto\"\n\t\t},\n\t\t{\n\t\t\t\"char\":\"い\",\n\t\t\t\"decolation\":[]\n\t\t\t\"fontSize\":\"30\"\n\t\t}\n\t\t]\n]\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "container",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#container",
    "access": null,
    "description": "親の文章コンテナを設定、または引数省略で取得します",
    "lineNumber": 1487,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newContainer",
        "description": "新たに設定する、自身の属する文章コンテナのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の親の文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "rows",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#rows",
    "access": null,
    "description": "指定された行のインスタンス、あるいは引数省略で子のインスタンスの配列を取得します",
    "lineNumber": 1496,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインスタンスのインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Row[]"
      ],
      "spread": false,
      "description": "指定された行のインスタンス(引数を渡した場合)、あるいは子の配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "hasRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#hasRow",
    "access": null,
    "description": "自身が内部に行を持っているかどうかを返します",
    "lineNumber": 1506,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#isEmpty",
    "access": null,
    "description": "自身が空段落であるかどうかを返します。\n    空行がひとつだけあってもtrueを返します(空行は空段落にしか存在しないのが正常であるため)",
    "lineNumber": 1515,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内部に行が存在しないか、空行が一つだけならtrue"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "hasCursor",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#hasCursor",
    "access": null,
    "description": "段落内にカーソルが含まれているかどうかを返します",
    "lineNumber": 1523,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "段落内にカーソルが含まれていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "contains",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#contains",
    "access": null,
    "description": "引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するかどうかを返します",
    "lineNumber": 1537,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "判定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するとtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "pushRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#pushRow",
    "access": null,
    "description": "自身の子の最後にrowを加えます",
    "lineNumber": 1556,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "自身の子の最後に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "insertRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#insertRow",
    "access": null,
    "description": "自身の子の指定された位置にrowを挿入します",
    "lineNumber": 1566,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "rowを挿入する位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "deleteRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#deleteRow",
    "access": null,
    "description": "自身の子からrowを削除します",
    "lineNumber": 1575,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "削除する子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "data",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#data",
    "access": null,
    "description": "この段落の状態を表す規定のオブジェクトを作成します",
    "lineNumber": 1585,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "この段落の状態を表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "classArray",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#classArray",
    "access": null,
    "description": "この段落の装飾のクラスを文字列の配列にします",
    "lineNumber": 1602,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "装飾関係のクラスの配列。なければ空の配列"
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "countChar",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#countChar",
    "access": null,
    "description": "段落内の文字数を数えます",
    "lineNumber": 1610,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "段落内の文字数"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "align",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#align",
    "access": null,
    "description": "段落にtext-alignを設定する、あるいは引数省略で現在のtext-alignの状態を取得します",
    "lineNumber": 1627,
    "params": [
      {
        "nullable": null,
        "types": [
          "string boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_align",
        "description": "新たに設定する'left','center','right'の文字列。\n    'left'あるいはfalseならalignを解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、\n    あるいは現在のtext-alignの状態(引数を省略した場合)"
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "removeClassFromAllChar",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#removeClassFromAllChar",
    "access": null,
    "description": "自身内部にあるすべてのCharから指定クラスを除去します",
    "lineNumber": 1648,
    "params": [
      {
        "name": "className",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "search",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#search",
    "access": null,
    "description": "自身内部にある文字にstrと合致する文字列があればsearch-labelクラスとsearch-wordクラスを付与します",
    "lineNumber": 1660,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "判定する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "append",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#append",
    "access": null,
    "description": "自身の最後にrowを追加します",
    "lineNumber": 1678,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "追加するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "after",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#after",
    "access": null,
    "description": "自身の直後にparagraphを挿入します",
    "lineNumber": 1718,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "remove",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#remove",
    "access": null,
    "description": "自身を削除します。文書整形は行われません",
    "lineNumber": 1762,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "delete",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#delete",
    "access": null,
    "description": "自身を削除し、文書を整形します(内部にカーソルがあれば直前の行に平行移動します。直前の行がなければ直後の行に移動します)",
    "lineNumber": 1819,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "divide",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#divide",
    "access": null,
    "description": "渡された文字以降を新しい段落に移動して、段落を２つに分けます",
    "lineNumber": 1840,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "段落分割の基準文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "cordinate",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#cordinate",
    "access": null,
    "description": "内部行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n    標準以外のフォントサイズの文字があれば文字数はそのサイズに合わせて調整されます。\n    また、自身が空段落ではなく内部に空行があれば削除します",
    "lineNumber": 1902,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "checkKinsoku",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#checkKinsoku",
    "access": null,
    "description": "段落内に禁則処理を施します",
    "lineNumber": 1922,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "display",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#display",
    "access": null,
    "description": "内部にあるすべての行の表示非表示を切り替えます",
    "lineNumber": 1937,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "表示するならtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "createEmptyParagraph",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/character.js~Paragraph.createEmptyParagraph",
    "access": null,
    "description": "空段落のインスタンスを新たに作成します",
    "lineNumber": 1948,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "空段落のインスタンス"
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "js/container.js",
    "content": "'use strict';\n/* global AbstractHierarchy, Paragraph, Cursor, InputBuffer, CommandLine, Menu, DoManager, Util, getSelection */  // jshint ignore:line\n\n\n/**\n * 語句検索モードを担当するクラス\n */\nexport class SearchMode {  // jshint ignore:line\n    //{{{\n    constructor(sentenceContainer) {\n        this._elem = document.getElementById('search');\n        this._sentenceContainer = sentenceContainer;\n    }\n\n    /**\n     * 渡された文字列を本文内から探し、見つかった文字列にsearch-wordクラスを付与します。\n     *     さらに、見つかった文字列の先頭文字にsearch-labelクラスを付与します\n     *  @param {string} str 検索文字列\n     *  @return {SentenceContainer} 自身のインスタンス\n     */\n    _search(str) {\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            paragraph.search(str);\n        }\n        return this;\n    }\n\n    /**\n     * 文書内語句検索を始めます\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    start() {\n        this._elem.classList.add('active');\n        this._elem.focus();\n        this._elem.value = '/';\n        this._sentenceContainer.removeKeydownEventListener();\n        if (!this._keyupArg) {\n            this._keyupArg = this._onKeyup.bind(this);\n            this._elem.addEventListener('keyup', this._keyupArg, false);\n            this._elem.addEventListener('focusin', this._onFocusin.bind(this));\n            this._elem.addEventListener('focusout', this._onFocusout.bind(this));\n        }\n        return this;\n    }\n\n    /**\n     * 文書内語句検索を完全に終了します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    stop() {\n        this._sentenceContainer.addKeydownEventListener();\n        this._elem.value = '';\n        this._elem.classList.remove('active');\n        this._sentenceContainer\n            .removeClassFromAllChar('search-label').removeClassFromAllChar('search-word');\n        return this;\n    }\n\n    /**\n     * 語句検索inputフォームのkeyupイベントです\n     * @param {Event} e イベントオブジェクト\n     */\n    _onKeyup(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 13) {\n            // enter\n            this._elem.blur(); // enterを押しただけではフォーカスが外れない\n            return;\n        }\n\n        // 中身が空になればsearchモードを完全に終了する\n        if (this._elem.value === '') {\n            this._elem.blur();\n            this.stop();\n            return;\n        }\n\n        this._search(this._elem.value.slice(1));\n    }\n\n    /**\n     * 語句検索inputフォームからフォーカスが外れた際のイベント実行内容です。\n     *     文書コンテナ本体にkeydownイベントを戻します\n     */\n    _onFocusout() {\n        this._sentenceContainer.addKeydownEventListener();\n    }\n\n    /**\n     * 語句検索inputフォームにフォーカスがあたった際のイベント実行内容です。\n     *     文書コンテナ本体のkeydownイベントを外します\n     */\n    _onFocusin() {\n        this._sentenceContainer.removeKeydownEventListener();\n    }\n}//}}}\n\n\n/**\n * 文書内の文字選択を担当するクラス\n */\nexport class SelectRange {  // jshint ignore:line\n    //{{{\n\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._cursor = sentenceContainer.cursor();\n    }\n\n    /**\n     * 選択範囲にある文字インスタンスを配列で返します\n     * @param {boolean} [opt_bl] 選択範囲を解除するならtrueを指定する\n     * @return {Char[]} 選択範囲内にある文字インスタンスの配列\n     */\n    selectChars(opt_bl) {\n        const ret = [];\n        const selection = getSelection();\n        if (this._selectText().length === 0) {\n            return ret; // rangeCount===0とすると、EOLのみ選択されることがある\n        }\n\n        const selRange = selection.getRangeAt(0);\n        for (let char = this._sentenceContainer.firstChar(); char; char = char.nextChar()) {\n            if (char.isInRange(selRange)) {\n                ret.push(char);\n            }\n        }\n\n        selRange.detach();\n        if (opt_bl) {\n            selection.removeAllRanges(); // 選択を解除する\n        }\n        return ret;\n    }\n\n    /**\n     * 選択範囲内にある文字列をローカルストレージに保存します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    copySelectText() {\n        localStorage.clipBoard = this._selectText();\n        return this;\n    }\n\n    // ペースト\n    /**\n     * ローカルストレージに保存した文字列をカーソル位置から挿入します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    pasteText() {\n        this._cursor.insert(localStorage.clipBoard);\n        return this;\n    }\n\n    /**\n     * 選択範囲内にある文字列を返します\n     * @return {string} 選択範囲内の文字列\n     */\n    _selectText() {\n        const selection = getSelection();\n        let ret = '';\n        for (let i = 0, cnt = selection.rangeCount; i < cnt; i++) {\n            const selRange = selection.getRangeAt(i);\n            ret += selRange.toString();\n        }\n        return ret;\n    }\n\n    /**\n     * マウスで選択範囲を変更した際のイベントを与えます。選択範囲最後の文字の次の文字にカーソルを当てます\n     */\n    addSelectEvent() {\n        this._sentenceContainer.elem().addEventListener('mouseup', function (e) {\n            const selChars = this.selectChars();\n            // 選択範囲の直後にカーソルを当てる\n            if (selChars.length > 0) {\n                const lastCharOnSelect = selChars[selChars.length -1];\n                const newCursor =\n                    lastCharOnSelect.hasNextSibling() ? lastCharOnSelect.next() : lastCharOnSelect;\n                newCursor.addCursor().setPosMemory();\n            }\n        }.bind(this),false);\n    }\n}//}}}\n\n\n/**\n * 文字や行の表示および非表示を担当するクラス\n */\nexport class Displayer { // jshint ignore:line\n    //{{{\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n    }\n\n    /**\n     * 文書を１行目の１文字目から表示します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    resetDisplay() {\n        this._addDisplay(0,0);\n        return this;\n    }\n\n    // strPos: 'center','right'\n    /**\n     * カーソル位置を基準として文書を表示し直します\n     * @param {string} [opt_pos] 表示後のカーソル位置を指定する。'center'と'right'に対応。\n     *     省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    changeDisplay(opt_pos) {\n        const cursorChar = this._sentenceContainer.cursorChar();\n        const rowPos = this._computeDisplayRowPos(opt_pos);\n        const charPos = cursorChar.row().computeDisplayCharPos();\n        this._addDisplay(rowPos, charPos);\n        return this;\n    }\n\n    /**\n     * 表示を一行分右に動かします\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    shiftRightDisplay() {\n        const charPos = this._sentenceContainer.cursorRow().computeDisplayCharPos();\n        const firstDisplay = this._firstDisplayRow();\n        if (!firstDisplay.prev()) {\n            return this;\n        }\n\n        firstDisplay.prev().display(true, charPos);\n        this._lastDisplayRow().display(false);\n        return this;\n    }\n\n    /**\n     * 表示を一行分左に動かします\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    shiftLeftDisplay() {\n        const charPos = this._sentenceContainer.cursorRow().computeDisplayCharPos();\n        const lastDisplay = this._lastDisplayRow();\n        if (!lastDisplay.next()) {\n            return this;\n        }\n\n        lastDisplay.next().display(true, charPos);\n        this._firstDisplayRow().display(false);\n        return this;\n    }\n\n    /**\n     * firstRow行目以降を表示します。\n     *     文字はfirstChar文字目以降が表示されます\n     * @param {number} firstRow 表示される最初の行のインデックス\n     * @param {number} firstChar 表示される最初の文字のインデックス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    _addDisplay(firstRow, firstChar) {\n        const dispWidth = this._sentenceContainer.width();\n        const cache = {};\n        let cnt = 0; // 総行数をカウントする\n        let sum = 0; // 表示行の幅合計\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (cnt < firstRow) {\n                    row.display(false);\n                    cnt++;\n                    continue;\n                }\n\n                // 行の幅は子の最大のフォントによって決まると考え、最大フォントごとの行幅をキャッシュする(レンダリング頻度の削減)\n                const maxFont = row.maxFont();\n                if (cache[maxFont]) {\n                    const rowWidth = cache[maxFont];\n                    sum += rowWidth + 2; // 2はボーダーの幅\n                } else {\n                    cache[maxFont] = row.width();\n                    const rowWidth = cache[maxFont];\n                    sum += rowWidth + 2; // 2はボーダーの幅\n                }\n                row.display((sum < dispWidth), firstChar);\n                cnt++;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * カーソル位置を基準に、最初に表示されるべき行のインデックスを返します\n     * @param {string} [opt_pos] 表示後のカーソル位置を指定する。\n     *     'center'なら、カーソル位置を中央にする。'right'なら、カーソル位置が最も右になるよう表示される。\n     *     省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n     *     (現在のカーソル位置が現在表示されている画面から一行後ろにあれば一行分表示位置が後ろにずれる、といった形)\n     * @return {number} 計算された最初に表示されるべき行のインデックス\n     */\n    _computeDisplayRowPos(opt_pos) {\n        const currentFirst = this._firstDisplayRowPos();\n        const cursorIndex = this._cursorRowPos();\n        const currentEnd = this._lastDisplayRowPos();\n\n        // カーソル位置を中央にする\n        // HACK:計算前のdisplayの数を基準にするので、フォントの大きさなどによってずれもありうる\n        if (opt_pos === 'center') {\n            const harfRange = (currentEnd - currentFirst) / 2;\n            const ret = cursorIndex - harfRange;\n            return ret >= 0 ? ret : 0;\n        }\n\n        if (opt_pos === 'right') {\n            return cursorIndex;\n        }\n\n        // カーソルが前にある\n        if (cursorIndex < currentFirst) {\n            return cursorIndex;\n        }\n\n        // カーソルが後ろにある\n        if (cursorIndex > currentEnd) {\n            return currentFirst + (cursorIndex - currentEnd);\n        }\n\n        // displayに囲まれた部分にdisplayでない行がある場合\n        // 途中行数変化\n        return currentFirst;\n    }\n\n    /**\n     * 現在表示されている行の最初の行のインデックスを返します\n     * @return {number} 現在表示されている行の最初の行のインデックス。表示行がなければ-1\n     */\n    _firstDisplayRowPos() {\n        let cnt = 0;\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (row.isDisplay()) {\n                    return cnt;\n                }\n                cnt++;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 現在表示されている行の最後の行のインデックスを返します\n     * @return {number} 現在表示されている行の最後の行のインデックス。表示行がなければ-1\n     */\n    _lastDisplayRowPos() {\n        for (let row = this._sentenceContainer.lastRow(),\n            index = this._sentenceContainer.countRow() -1;\n            row; row = row.prev(), index--) {\n                if (row.isDisplay()) {\n                    return index;\n                }\n            }\n        return -1;\n    }\n\n    /**\n     * カーソル行が文書全体で何行目かを返します\n     * @return {number} カーソル行の文書全体でのインデックス。文書内に段落がない、あるいはカーソル行がなければ-1\n     */\n    _cursorRowPos() {\n        const cursorRow = this._sentenceContainer.cursorRow();\n        let cnt = 0;\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (row.is(cursorRow)) {\n                    return cnt;\n                }\n                cnt++;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 表示されている行のうち最初の行のインスタンスを返します\n     * @return {Row} 最初の表示行のインスタンス。表示行がなければnull\n     */\n    _firstDisplayRow() {\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (row.isDisplay()) {\n                    return row;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 表示されている行のうち最後の行のインスタンスを返します\n     * @return {Row} 最後の表示行のインスタンス。表示行がなければnull\n     */\n    _lastDisplayRow() {\n        for (let row = this._sentenceContainer.lastRow(); row; row = row.prev()) {\n            if (row.isDisplay()) {\n                return row;\n            }\n        }\n        return null;\n    }\n}//}}}\n\n\n/**\n * 文章コンテナを表すクラス\n */\nexport class SentenceContainer extends AbstractHierarchy {  // jshint ignore:line\n\n    // constructor {{{\n    /**\n     * @param {object} [opt_data] 文書情報のオブジェクト\n     * <pre>\n     * {\n     * \t\"filename\": \"sampleFile\",\n     * \t\"fileId\": \"12\",\n     *\t\t\"saved\": \"2016-08-23 02:13:05\",\n     *\t\t\"userId\": \"7\",\n     *\t\t\"data\": {\n     *\t\t\t\"conf\": { // 文書全体に関する設定情報\n     *\t\t\t\t\"strLen\": \"36\",\n     *\t\t\t\t\"rowLen\": \"42\"\n     *\t\t\t},\n     *\t\t\t\"text\":[ // 各段落の情報が入った配列の配列\n     *\t\t\t\t\t\t[ // 段落の情報が入った配列\n     *\t\t\t\t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n     *\t\t\t\t\t\t\t[\t // 各文字のオブジェクトが配列で格納される\n     *\t\t\t\t\t\t\t\t{\t // 文字を表すオブジェクト\n     *\t\t\t\t\t\t\t\t\t\"char\":\"あ\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"],\n     *\t\t\t\t\t\t\t\t\t\"fontSize\":\"auto\"\n     *\t\t\t\t\t\t\t\t},\n     *\t\t\t\t\t\t\t\t{\n     *\t\t\t\t\t\t\t\t\t\"char\":\"い\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[]\n     *\t\t\t\t\t\t\t\t}\n     *\t\t\t\t\t\t\t]\n     *\t\t\t\t\t\t],\n     *\t\t\t\t\t\t[\n     *\t\t\t\t\t\t\t[],\n     *\t\t\t\t\t\t\t[\n     *\t\t\t\t\t\t\t\t{\n     *\t\t\t\t\t\t\t\t\t\"char\":\"い\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n     *\t\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n     *\t\t\t\t\t\t\t\t},\n     *\t\t\t\t\t\t\t\t{\n     *\t\t\t\t\t\t\t\t\t\"char\":\"う\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n     *\t\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n     *\t\t\t\t\t\t\t\t}\n     *\t\t\t\t\t\t\t]\n     *\t\t\t\t\t\t]\n     *\t\t\t]\n     *\t\t}\n     * }\n     * </pre>\n     */\n    constructor(opt_data) {\n        super(document.getElementById('sentence_container'));\n        if (opt_data) {\n            this.init(opt_data);\n        }\n        this._titleElem = document.getElementById('file_title');\n        this._announceElem = document.getElementById('user_info');\n        this._changedElem = document.getElementById('changed');\n\n        this._cursor = new Cursor(this);\n        this._inputBuffer = new InputBuffer(this);\n        this._fileList = new FileList(this);\n        this._command = new CommandLine(this);\n        this._menu = new Menu(this);\n        this._doManager = new DoManager(this);\n        this._displayer = new Displayer(this);\n        this._searchMode = new SearchMode(this);\n        this._selectRange = new SelectRange(this);\n\n        this.addFileTitleEvent();\n        this._selectRange.addSelectEvent();\n\n        if (!opt_data) {\n            this.newFile();\n        }\n    }\n\n    /**\n     * 文書をコンテナに展開します\n     * @param {object} data 文書情報のオブジェクト\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    init(data) {\n        this.empty();\n        // 文書情報\n        this.filename(data.filename);\n        this.fileId(data.fileId);\n        this.saved(\n            data.saved ||\n                (new Date(Date.now()).toLocaleDateString() + ' ' +\n                    new Date(Date.now()).toLocaleTimeString()).replace(/\\//g,'-'));\n        this._strLenOnRow = data.data.conf.strLen || 40; // １行の文字数\n        this._rowLenOnPage = data.data.conf.rowLen || 40; // １ページの行数\n        this.menu().confStrLenElem().value = this._strLenOnRow;\n        this.menu().confRowLenElem().value = this._rowLenOnPage;\n        // DOMの構築\n        for (let paraData of data.data.text) {\n            this.append(new Paragraph(paraData));\n        }\n\n        this.cursor().init();\n        this.cordinate();\n        this._displayer.resetDisplay();\n        this.breakPage().printInfo();\n        this.addKeydownEventListener();\n        this.addWheelEventListener();\n        this._doManager.reset();\n        return this;\n    }\n    // }}}\n\n    // --参照取得 {{{\n\n    /**\n     * 指定された段落のインスタンス、あるいは引数省略で子の段落のインスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する段落のインデックス\n     * @return {Paragraph Paragraph[]} 指定された段落のインスタンス。あるいは引数省略で段落のインスタンスの配列(子がなければ空の配列)\n     */\n    paragraphs(opt_index) {\n        return this.children(opt_index);\n    }\n\n    /**\n     * 文章内の最初の行のインスタンスを返します\n     * @return {Row} 最初の行のインスタンス\n     */\n    firstRow() {\n        return this.firstChild().firstChild();\n    }\n\n    /**\n     * 文章内の最終行のインスタンスを返します\n     * @return {Row} 最終行のインスタンス\n     */\n    lastRow() {\n        return this.lastChild().lastChild();\n    }\n\n    /**\n     * num行目のRowを取得します。\n     *     numが負の数なら最初の行、numが行数以上の数値であれば最終行のインスタンスが取得されます\n     * @param {number} num 取得する行のインデックス\n     * @return {Row} 見つかった行のインスタンス\n     */\n    row(num) {\n        if (num <= 0) {\n            return this.firstRow();\n        }\n\n        let cnt = 0;\n        for (let row = this.firstRow(); row; row = row.next()) {\n            cnt++;\n            if (cnt === num) {\n                return row;\n            }\n        }\n        return this.lastRow();\n    }\n\n    /**\n     * numページ目の第一行目のRowを取得します。\n     *     numが負の数なら最初の行、numがページ数以上の数値であれば最終行のインスタンスが取得されます\n     * @param {number} num 何ページ目か\n     * @return {Row} 見つかった行のインスタンス\n     */\n    pageRow(num) {\n        if (num <= 0) {\n            return this.firstRow();\n        }\n\n        let cnt = 0;\n        for (let row = this.firstRow(); row; row = row.next()) {\n            if (row.isPageBreak()) {\n                cnt++;\n                if (cnt === num) {\n                    return row;\n                }\n            }\n        }\n        return this.lastRow();\n    }\n\n    /**\n     * 文書内で最初の文字(あるいはEOL)のインスタンスを返します\n     * @return {Char EOL} 見つかった文字のインスタンス\n     */\n    firstChar() {\n        return this.firstRow().firstChild();\n    }\n\n    /**\n     * 文書内で最終文字(EOLは除く)のインスタンスを返します\n     * @return {Char} 見つかった文字のインスタンス\n     */\n    lastChar() {\n        return this.lastEOL().prevChar();\n    }\n\n    /**\n     * 文書内で最終行のEOLを返します\n     * @return {EOL} 最後のEOL\n     */\n    lastEOL() {\n        return this.lastRow().lastChild();\n    }\n\n    /**\n     * カーソルのインスタンスを返します\n     * @return {Cursor} 文書内のカーソルのインスタンス\n     */\n    cursor() {\n        return this._cursor;\n    }\n\n    /**\n     * この文書内でカーソルのあたっている文字のインスタンスを返します\n     * @return {Char} カーソル文字のインスタンス\n     */\n    cursorChar() {\n        return this.cursor().getChar();\n    }\n\n    /**\n     * この文書内でカーソルのある行のインスタンスを返します\n     * @return {Row} カーソル行のインスタンス\n     */\n    cursorRow() {\n        return this.cursorChar().row();\n    }\n\n    /**\n     * この文書に入力する際に使用する入力バッファーのインスタンスを返します\n     * @return {InputBuffer} 入力バッファーのインスタンス\n     */\n    inputBuffer() {\n        return this._inputBuffer;\n    }\n\n    /**\n     * この文書コンテナを使用するファイルリストのインスタンスを返します\n     * @return {FileList} ファイルリストのインスタンス\n     */\n    fileList() {\n        return this._fileList;\n    }\n\n    /**\n     * コマンドラインのインスタンスを返します\n     * @return {CommandLine} コマンドラインのインスタンス\n     */\n    command() {\n        return this._command;\n    }\n\n    /**\n     * この文書を操作するMenuクラスのインスタンスを返します\n     * @return {Menu} メニューバーのインスタンス\n     */\n    menu() {\n        return this._menu;\n    }\n    // }}}\n\n    // --判定 {{{\n    /**\n     * この文書内に段落が存在するかどうかを返します\n     * @return {boolean} 段落が存在するならtrue、そうでなければfalse\n     */\n    hasParagraph() {\n        return this.hasChild();\n    }\n\n    // --参照操作\n\n    /**\n     * 子の最後にparagraphを追加します\n     * @param {Paragraph} paragraph 追加する段落のインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    pushParagraph(paragraph) {\n        return this.pushChild(paragraph);\n    }\n\n    /**\n     * 子の指定された位置にparagraphを挿入します\n     * @param {number} pos 挿入する位置のインデックス\n     * @param {Paragraph} paragraph 挿入するインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    insertParagraph(pos,paragraph) {\n        return this.insertChild(pos,paragraph);\n    }\n\n    /**\n     * 子からparagraphを削除します\n     * @param {Paragraph} paragraph 削除する段落のインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    deleteParagraph(paragraph) {\n        return this.deleteChild(paragraph);\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 文書の内容を表したオブジェクトのjson文字列を作成します\n     * @return {string} 文書内容を表すオブジェクトのjson文字列\n     */\n    data() {\n        const data = {};\n        data.conf = this.menu().configueData();\n        const paraArr = [];\n        for (let paragraph of this.paragraphs()) {\n            paraArr.push(paragraph.data());\n        }\n        data.text = paraArr;\n\n        return JSON.stringify(data);\n    }\n\n    /**\n     * この文書内に展開しているファイル名を変更する、あるいは引数省略で現在のファイル名を取得します\n     * @param {string} [opt_newFilename] 新たに設定するファイル名\n     * @return {SentenceContainer string} 自身のインスタンス(引数を渡した場合)、あるいは現在のファイル名(引数を省略した場合)\n     */\n    filename(opt_newFilename) {\n        if (opt_newFilename === undefined) {\n            return this._filename;\n        }\n\n        this._filename = opt_newFilename;\n        this._titleElem.value = opt_newFilename;\n        this._titleElem.dataset.filename = opt_newFilename;\n        return this;\n    }\n\n    /**\n     * 現在のファイルに新たなIDを与える、あるいは引数省略で現在のファイルIDを取得します\n     * @param {number} [opt_newId] 新たに設定するID\n     * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在のファイルID(引数を省略した場合)\n     */\n    fileId(opt_newId) {\n        if (opt_newId === undefined) {\n            return this._fileId;\n        }\n\n        const newId = opt_newId;\n        this._fileId = newId;\n        this._titleElem.dataset.fileId = newId;\n        return this;\n    }\n\n    /**\n     * 最終更新日時を設定、あるいは引数省略で最終更新日時を取得します\n     * @param {string} [opt_newSaved] 新たに設定する最終更新日時の文字列\n     * @return {SentenceContainer string} 自身のインスタンス(引数を渡した場合)、あるいは現在の最終更新日時の文字列(引数を省略した場合)\n     */\n    saved(opt_newSaved) {\n        if (opt_newSaved === undefined) {\n            return this._saved;\n        }\n\n        const newSaved = opt_newSaved;\n        this._saved = newSaved;\n        document.getElementById('saved').textContent = newSaved;\n        return this;\n    }\n\n    /**\n     * 最後の保存から変更があったのかどうかを示すマーク([+]記号)を設定、あるいは引数省略で現在設定されているのかどうかを取得します\n     * @param {boolean} [opt_bl] 設定する場合はtrue、外す場合はfalse\n     * @return {SentenceContainer boolean} 自身のインスタンス(引数を渡した場合)、あるいは現在の設定状態の真偽値(引数を省略した場合)\n     */\n    isChanged(opt_bl) {\n        if (opt_bl === undefined) {\n            return this._changedElem.classList.contains('active');\n        }\n\n        if (opt_bl === true) {\n            this._changedElem.classList.add('active');\n            return this;\n        }\n        if (opt_bl === false) {\n            this._changedElem.classList.remove('active');\n            return this;\n        }\n    }\n\n    /**\n     * 一行の文字数を変更する、あるいは引数省略で現在の設定上の一行の文字数を取得します\n     * @param {number} [opt_newStrLen] 新たに設定する行内文字数\n     * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在の設定上の行内文字数(引数を省略した場合)\n     */\n    strLenOnRow(opt_newStrLen) {\n        if (opt_newStrLen === undefined) {\n            return this._strLenOnRow;\n        }\n\n        const newStrLen = opt_newStrLen;\n        this._strLenOnRow = newStrLen;\n        this.cordinate().checkKinsoku().changeDisplay().breakPage().printInfo();\n        this.cursor().createCursorLine();\n        return this;\n    }\n\n    // 設定上のページ内行数\n    /**\n     * 一ページの行数を変更する、あるいは引数省略で現在の一ページの行数を取得します\n     * @param {number} [opt_newRowLen] 新たに設定するページ内行数\n     * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在のページ内行数(引数を省略した場合)\n     */\n    rowLenOnPage(opt_newRowLen) {\n        if (opt_newRowLen === undefined) {\n            return this._rowLenOnPage;\n        }\n\n        const newRowLen = opt_newRowLen;\n        this._rowLenOnPage = newRowLen;\n        this.breakPage().printInfo();\n        return this;\n    }\n\n    /**\n     * 文書内文字数を数えます\n     * @return {number} 文書内の総文字数\n     */\n    countChar() {\n        let cnt = 0;\n        for (let paragraph of this.paragraphs()) {\n            cnt += paragraph.countChar();\n        }\n        return cnt;\n    }\n\n    // 全行数\n    /**\n     * 文書内行数を数えます\n     * @return {number} 文書内の総行数\n     */\n    countRow() {\n        let cnt = 0;\n        for (let paragraph of this.paragraphs()) {\n            cnt += paragraph.childLength();\n        }\n        return cnt;\n    }\n\n    /**\n     * 文書内のページ数を数えます\n     * @return {number} 文書内の総ページ数\n     */\n    countPage() {\n        let cnt = 0;\n        for (let row = this.firstRow(); row; row = row.next()) {\n            if (row.isPageBreak()) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * この文書コンテナの横幅を返えます。\n     *     文書コンテナは９０度回転しているため、css上は高さと同様です\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の幅\n     */\n    width(opt_useCache) {\n        return super.height(opt_useCache);\n    }\n\n    /**\n     * この文書コンテナの高さを返します。\n     *     文書コンテナは９０度回転しているため、css上は横幅と同様です\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の高さ\n     */\n    height(opt_useCache) {\n        return super.width(opt_useCache);\n    }\n\n    /**\n     * 文書内すべての文字から、指定されたクラスを除去します\n     * @param {string} className 除去するクラス名\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    removeClassFromAllChar(className) {\n        for (let paragraph of this.paragraphs()) {\n            paragraph.removeClassFromAllChar(className);\n        }\n        return this;\n    } //}}}\n\n    // --DOM操作関係 {{{\n    /**\n     * 子を空にし、入力モード、語句検索モードは終了します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    empty() {\n        this.emptyElem();\n        this.emptyChild();\n        this.removeKeydownEventListener();\n        this.removeWheelEventListener();\n        if (this.inputBuffer().isDisplay()) {\n            this.inputBuffer().empty().hide();\n        }\n        this._searchMode.stop();\n        return this;\n    }\n\n    /**\n     * この文章コンテナの末尾にparagraphを追加します\n     * @param {Paragraph} paragraph 追加する段落のインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    append(paragraph) {\n        this.elem().appendChild(paragraph.elem());\n        paragraph.container(this);\n        if (!this.hasParagraph()) {\n            this.pushParagraph(paragraph);\n            return this;\n        }\n\n        // paragraph\n        this.lastChild().next(paragraph);\n        paragraph.prev(this.lastChild());\n        // row\n        const lastRow = this.lastChild().lastChild();\n        lastRow.next(paragraph.firstChild());\n        paragraph.firstChild().prev(lastRow);\n        // char\n        const lastChar = lastRow.lastChild();\n        lastChar.next(paragraph.firstChild().firstChild());\n        paragraph.firstChild().firstChild().prev(lastChar);\n\n        this.pushParagraph(paragraph);\n        return this;\n    }//}}}\n\n    // printInfo {{{\n    /**\n     * 文書情報を表示します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    printInfo() {\n        document.getElementById('str_pos').textContent = this.cursor().currentCharPos();\n        document.getElementById('str_len').textContent = this.cursor().strLenOfRow();\n        document.getElementById('row_pos').textContent = this.cursor().currentRowPos();\n        document.getElementById('row_len').textContent = this.cursor().rowLenOnPage();\n        document.getElementById('page_pos').textContent = this.cursor().currentPage();\n        document.getElementById('page_len').textContent = this.countPage();\n        return this;\n    }//}}}\n\n    // --文章整理 {{{\n    /**\n     * 各行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n     *     標準以外のフォントサイズの文字があればフォントサイズに合わせて文字数は調整されます。\n     *     また、空段落以外に空行があれば削除します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    cordinate() {\n        for (let paragraph of this.paragraphs()) {\n            paragraph.cordinate();\n        }\n        return this;\n    }\n\n    /**\n     * 禁則処理を行います。\n     *     各行の文字数への変化が伴うため、cordinate()の後に実行してください\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    checkKinsoku() {\n        for (let paragraph of this.paragraphs()) {\n            paragraph.checkKinsoku();\n        }\n        return this;\n    }//}}}\n\n    // 改ページ {{{\n    /**\n     * ページの最初の行と最終行に目印となるクラスを与えます\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    breakPage() {\n        const pageNum = this.rowLenOnPage();\n        // page-break\n        let cntBreak = 0;\n        for (let paragraph of this.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (cntBreak === 0 || cntBreak % pageNum === 0) { // １行目とpageNumの倍数行目\n                    row.addClass('page-break');\n                } else {\n                    row.removeClass('page-break');\n                }\n                cntBreak++;\n            }\n        }\n        // page-last-row\n        let cntLast = 0;\n        const lastRow = this.countRow() -1;\n        for (let paragraph of this.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if ((cntLast + 1) % pageNum === 0 || cntLast === lastRow) { // (pageNumの倍数-1)行目と最終行\n                    row.addClass('page-last-row');\n                }\n                else {\n                    row.removeClass('page-last-row');\n                }\n                cntLast++;\n            }\n        }\n        return this;\n    }//}}}\n\n    // announce {{{\n    /**\n     * ユーザーへの情報を表示します\n     * @param {string} str 表示する情報\n     * @param {string} [opt_color='black'] 黒文字以外の文字色で表示する場合に色名を指定する\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    announce(str, opt_color) {\n        this._announceElem.textContent = str;\n        if (opt_color) {\n            this._announceElem.style.color = opt_color;\n        } else {\n            this._announceElem.style.color = '';\n        }\n        return this;\n    }//}}}\n\n    // --ファイル操作 {{{\n    /**\n     * 指定されたファイルを開きます(非同期通信)\n     * @param {number} fileId 開くファイルのID\n     * @return {SentenceContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/ReadJsonFile.html\n     */\n    readFile(fileId) {\n        const file = this.fileList().findFile(fileId)[0];\n        file.open();\n        return this;\n    }\n\n    /**\n     * 現在開いているファイルを上書き保存します。\n     *     newFile()されて初めての保存なら名前をつけて保存します。(ともに非同期通信)\n     * @return {SentenceContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileDataServlet.html\n     */\n    saveFile() {\n        this.announce('保存中');\n        Util.post('/tategaki/FileData',{\n            file_id: this.fileId(),\n            filename: this.filename(),\n            json: this.data(),\n            saved: Date.now()\n        }, function (json) {\n            if (json.result === 'true') {\n                this.saved(json.saved).announce('保存しました');\n                this.fileId(json.fileID);\n                this.fileList().read();\n                this.isChanged(false);\n            } else {\n                this.announce('保存エラー');\n            }\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * 新しいファイルを開きます\n     * @param {string='newfile'} filename 新しいファイル名\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    newFile(filename) {\n        if (filename === undefined) {\n            filename = 'newfile';\n        }\n        this.init({\n            fileId: -1,\n            filename: filename,\n            data: {\n                conf:{},\n                text:[[[],[]]]\n            }\n        }); // 空段落のデータ\n        return this;\n    }//}}}\n\n    // --Display関係 {{{\n    changeDisplay(opt_pos) {\n        this._displayer.changeDisplay(opt_pos);\n    } // }}}\n\n    // undo redo {{{\n    /**\n     * DoMemoryをアンドゥスタックに積みます\n     * @param {DoMemory} doMemory アンドゥスタックに積むDoMemory\n     */\n    addDo(doMemory) {\n        this._doManager.add(doMemory);\n        return this;\n    }\n\n    /**\n     * アンドゥします\n     */\n    undo() {\n        if (this._doManager.hasUndo()) {\n            this._doManager.undo();\n        } else {\n            this.announce('すでに一番古い変更です');\n        }\n        return this;\n    }\n\n    /**\n     * リドゥします\n     */\n    redo() {\n        if (this._doManager.hasRedo()) {\n            this._doManager.redo();\n        } else {\n            this.announce('すでに一番新しい変更です');\n        }\n        return this;\n    }//}}}\n\n    // --イベント {{{\n    // keydown\n    /**\n     * この文書コンテナにkeydownイベントリスナーを付加します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        this.inputBuffer().removeKeydownEventListener()\n            .convertContainer().removeKeydownEventListener();\n        super.addKeydownEventListener();\n        return this;\n    }\n\n    /**\n     * keydownイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    runKeydown(e, keycode) {\n        this.announce('');\n        if (e.ctrlKey) {\n            return this.runControlKeyDown(e,keycode);\n        }\n\n        switch (keycode) {\n            case 8:\n                // backspace\n                this.cursor().backSpace(true);\n                break;\n            case 13:\n                // Enter\n                this.cursor().lineBreak(true);\n                break;\n            case 32:\n                // space\n                this.cursor().insert('　', true);\n                break;\n            case 37:\n                // Left\n                this.cursor().moveLeft(e.shiftKey);\n                break;\n            case 38:\n                // Up\n                this.cursor().movePrev(e.shiftKey);\n                break;\n            case 39:\n                // Right\n                this.cursor().moveRight(e.shiftKey);\n                break;\n            case 40:\n                // Down\n                this.cursor().moveNext(e.shiftKey);\n                break;\n            case 58: // firefox developer edition\n            case 186: // chrome\n                // :\n                this.command().start();\n                break;\n            case 191:\n                // /\n                this._searchMode.start();\n                break;\n            default:\n                this.inputBuffer().tryTransfer(keycode, e.shiftKey);\n                break;\n        }\n        return this;\n    }\n\n    /**\n     * @private\n     * コントロールキーを押されていた場合のkeydownイベントの実行内容です\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    runControlKeyDown(e,keycode) {\n        switch (keycode) {\n            case 67:\n                // c\n                this._selectRange.copySelectText();\n                break;\n            case 18:\n            case 70:\n                // f\n                this.fileList().showModal();\n                break;\n            case 72:\n                // h\n                this.cursor().moveLeft(e.shiftKey);\n                break;\n            case 73:\n                // i\n                this.fileList().openNextFile();\n                break;\n            case 74:\n                // j\n                this.cursor().moveNext(e.shiftKey);\n                break;\n            case 75:\n                // k\n                this.cursor().movePrev(e.shiftKey);\n                break;\n            case 76:\n                // l\n                this.cursor().moveRight(e.shiftKey);\n                break;\n            case 79:\n                // o\n                this.fileList().openPrevFile();\n                break;\n            case 82:\n                //r\n                this.redo();\n                break;\n            case 83:\n                // s\n                this.saveFile();\n                break;\n            case 85:\n                //u\n                this.undo();\n                break;\n            case 86:\n                // v\n                this._selectRange.pasteText();\n                break;\n            case 188:\n                // ,\n                this.cursor().nextSearch();\n                break;\n            case 190:\n                // .\n                this.cursor().prevSearch();\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n\n    // wheel\n    /**\n     * ホイールイベントの実行内容です(表示を４行分移動する)\n     * @param {Event} e イベントオブジェクト\n     * @param {boolean} isUp 上方向にホイールが動かされたならtrue、そうでなければfalse\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    runWheel(e, isUp) {\n        const mvRowNum = 4; // 一度に動かす行数\n        if (isUp) {\n            for (let i = 0; i < mvRowNum; i++) {\n                this._displayer.shiftRightDisplay();\n            }\n        } else {\n            for (let i = 0; i < mvRowNum; i++) {\n                this._displayer.shiftLeftDisplay();\n            }\n        }\n        return this;\n    }\n\n    // ファイル名input\n    /**\n     * ファイル名inputフォームにイベントを付加します(主に、フォーカスがあたった際と外れた際のイベント)。\n     */\n    addFileTitleEvent() {\n        // 与えっぱなし。実行内容もここで定義\n        this._titleElem.addEventListener('focusin',function (e) {\n            if (this.inputBuffer().isDisplay) {\n                this.inputBuffer().empty().hide();\n            }\n            this.removeKeydownEventListener();\n        }.bind(this),false);\n\n        this._titleElem.addEventListener('focusout',function (e) {\n            if (this._titleElem.value === '') {\n                this.announce('ファイル名が入力されていません','red');\n                this._titleElem.value = this._titleElem.dataset.filename;\n            }\n            this.addKeydownEventListener();\n        }.bind(this),false);\n    }\n\n    //}}}\n}\n",
    "static": true,
    "longname": "js/container.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "SearchMode",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~SearchMode",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{SearchMode}",
    "description": "語句検索モードを担当するクラス",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sentenceContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_elem",
    "memberof": "js/container.js~SearchMode",
    "static": false,
    "longname": "js/container.js~SearchMode#_elem",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/container.js~SearchMode",
    "static": false,
    "longname": "js/container.js~SearchMode#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_search",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_search",
    "access": null,
    "description": "渡された文字列を本文内から探し、見つかった文字列にsearch-wordクラスを付与します。\n    さらに、見つかった文字列の先頭文字にsearch-labelクラスを付与します",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "検索文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "start",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#start",
    "access": null,
    "description": "文書内語句検索を始めます",
    "lineNumber": 32,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_keyupArg",
    "memberof": "js/container.js~SearchMode",
    "static": false,
    "longname": "js/container.js~SearchMode#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "stop",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#stop",
    "access": null,
    "description": "文書内語句検索を完全に終了します",
    "lineNumber": 50,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "_onKeyup",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_onKeyup",
    "access": null,
    "description": "語句検索inputフォームのkeyupイベントです",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_onFocusout",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_onFocusout",
    "access": null,
    "description": "語句検索inputフォームからフォーカスが外れた際のイベント実行内容です。\n    文書コンテナ本体にkeydownイベントを戻します",
    "lineNumber": 93,
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_onFocusin",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_onFocusin",
    "access": null,
    "description": "語句検索inputフォームにフォーカスがあたった際のイベント実行内容です。\n    文書コンテナ本体のkeydownイベントを外します",
    "lineNumber": 101,
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "SelectRange",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~SelectRange",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{SelectRange}",
    "description": "文書内の文字選択を担当するクラス",
    "lineNumber": 110,
    "interface": false
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#constructor",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sentenceContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/container.js~SelectRange",
    "static": false,
    "longname": "js/container.js~SelectRange#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/container.js~SelectRange",
    "static": false,
    "longname": "js/container.js~SelectRange#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "selectChars",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#selectChars",
    "access": null,
    "description": "選択範囲にある文字インスタンスを配列で返します",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "選択範囲を解除するならtrueを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char[]"
      ],
      "spread": false,
      "description": "選択範囲内にある文字インスタンスの配列"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "copySelectText",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#copySelectText",
    "access": null,
    "description": "選択範囲内にある文字列をローカルストレージに保存します",
    "lineNumber": 148,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "pasteText",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#pasteText",
    "access": null,
    "description": "ローカルストレージに保存した文字列をカーソル位置から挿入します",
    "lineNumber": 158,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_selectText",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#_selectText",
    "access": null,
    "description": "選択範囲内にある文字列を返します",
    "lineNumber": 167,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "選択範囲内の文字列"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "addSelectEvent",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#addSelectEvent",
    "access": null,
    "description": "マウスで選択範囲を変更した際のイベントを与えます。選択範囲最後の文字の次の文字にカーソルを当てます",
    "lineNumber": 180,
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "Displayer",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~Displayer",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{Displayer}",
    "description": "文字や行の表示および非表示を担当するクラス",
    "lineNumber": 198,
    "interface": false
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sentenceContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/container.js~Displayer",
    "static": false,
    "longname": "js/container.js~Displayer#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "resetDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#resetDisplay",
    "access": null,
    "description": "文書を１行目の１文字目から表示します",
    "lineNumber": 208,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "changeDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#changeDisplay",
    "access": null,
    "description": "カーソル位置を基準として文書を表示し直します",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_pos",
        "description": "表示後のカーソル位置を指定する。'center'と'right'に対応。\n    省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "shiftRightDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#shiftRightDisplay",
    "access": null,
    "description": "表示を一行分右に動かします",
    "lineNumber": 232,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "shiftLeftDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#shiftLeftDisplay",
    "access": null,
    "description": "表示を一行分左に動かします",
    "lineNumber": 248,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_addDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_addDisplay",
    "access": null,
    "description": "firstRow行目以降を表示します。\n    文字はfirstChar文字目以降が表示されます",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "表示される最初の行のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstChar",
        "description": "表示される最初の文字のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "_computeDisplayRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_computeDisplayRowPos",
    "access": null,
    "description": "カーソル位置を基準に、最初に表示されるべき行のインデックスを返します",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_pos",
        "description": "表示後のカーソル位置を指定する。\n    'center'なら、カーソル位置を中央にする。'right'なら、カーソル位置が最も右になるよう表示される。\n    省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n    (現在のカーソル位置が現在表示されている画面から一行後ろにあれば一行分表示位置が後ろにずれる、といった形)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された最初に表示されるべき行のインデックス"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "_firstDisplayRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_firstDisplayRowPos",
    "access": null,
    "description": "現在表示されている行の最初の行のインデックスを返します",
    "lineNumber": 341,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在表示されている行の最初の行のインデックス。表示行がなければ-1"
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "_lastDisplayRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_lastDisplayRowPos",
    "access": null,
    "description": "現在表示されている行の最後の行のインデックスを返します",
    "lineNumber": 358,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在表示されている行の最後の行のインデックス。表示行がなければ-1"
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "_cursorRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_cursorRowPos",
    "access": null,
    "description": "カーソル行が文書全体で何行目かを返します",
    "lineNumber": 373,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル行の文書全体でのインデックス。文書内に段落がない、あるいはカーソル行がなければ-1"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "_firstDisplayRow",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_firstDisplayRow",
    "access": null,
    "description": "表示されている行のうち最初の行のインスタンスを返します",
    "lineNumber": 391,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最初の表示行のインスタンス。表示行がなければnull"
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "_lastDisplayRow",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_lastDisplayRow",
    "access": null,
    "description": "表示されている行のうち最後の行のインスタンスを返します",
    "lineNumber": 406,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最後の表示行のインスタンス。表示行がなければnull"
    }
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "SentenceContainer",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~SentenceContainer",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{SentenceContainer}",
    "description": "文章コンテナを表すクラス",
    "lineNumber": 420,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_data",
        "description": "文書情報のオブジェクト\n<pre>\n{\n\t\"filename\": \"sampleFile\",\n\t\"fileId\": \"12\",\n\t\"saved\": \"2016-08-23 02:13:05\",\n\t\"userId\": \"7\",\n\t\"data\": {\n\t\t\"conf\": { // 文書全体に関する設定情報\n\t\t\t\"strLen\": \"36\",\n\t\t\t\"rowLen\": \"42\"\n\t\t},\n\t\t\"text\":[ // 各段落の情報が入った配列の配列\n\t\t\t\t\t[ // 段落の情報が入った配列\n\t\t\t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t\t\t\t\t\t[\t // 各文字のオブジェクトが配列で格納される\n\t\t\t\t\t\t\t{\t // 文字を表すオブジェクト\n\t\t\t\t\t\t\t\t\"char\":\"あ\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"auto\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t\t\t\t\t\t\t\t\"decolation\":[]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t[],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"う\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t]\n\t}\n}\n</pre>"
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "_titleElem",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_titleElem",
    "access": null,
    "description": null,
    "lineNumber": 476,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "_announceElem",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_announceElem",
    "access": null,
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "_changedElem",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_changedElem",
    "access": null,
    "description": null,
    "lineNumber": 478,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "_inputBuffer",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_inputBuffer",
    "access": null,
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "_fileList",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_fileList",
    "access": null,
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_command",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_command",
    "access": null,
    "description": null,
    "lineNumber": 483,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "_menu",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_menu",
    "access": null,
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "_doManager",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_doManager",
    "access": null,
    "description": null,
    "lineNumber": 485,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "_displayer",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_displayer",
    "access": null,
    "description": null,
    "lineNumber": 486,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_searchMode",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_searchMode",
    "access": null,
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "_selectRange",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_selectRange",
    "access": null,
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "init",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#init",
    "access": null,
    "description": "文書をコンテナに展開します",
    "lineNumber": 503,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文書情報のオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "_strLenOnRow",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_strLenOnRow",
    "access": null,
    "description": null,
    "lineNumber": 512,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "_rowLenOnPage",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_rowLenOnPage",
    "access": null,
    "description": null,
    "lineNumber": 513,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "paragraphs",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#paragraphs",
    "access": null,
    "description": "指定された段落のインスタンス、あるいは引数省略で子の段落のインスタンスの配列を取得します",
    "lineNumber": 539,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する段落のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph Paragraph[]"
      ],
      "spread": false,
      "description": "指定された段落のインスタンス。あるいは引数省略で段落のインスタンスの配列(子がなければ空の配列)"
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "firstRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#firstRow",
    "access": null,
    "description": "文章内の最初の行のインスタンスを返します",
    "lineNumber": 547,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最初の行のインスタンス"
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "lastRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#lastRow",
    "access": null,
    "description": "文章内の最終行のインスタンスを返します",
    "lineNumber": 555,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最終行のインスタンス"
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "row",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#row",
    "access": null,
    "description": "num行目のRowを取得します。\n    numが負の数なら最初の行、numが行数以上の数値であれば最終行のインスタンスが取得されます",
    "lineNumber": 565,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "取得する行のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "見つかった行のインスタンス"
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "pageRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#pageRow",
    "access": null,
    "description": "numページ目の第一行目のRowを取得します。\n    numが負の数なら最初の行、numがページ数以上の数値であれば最終行のインスタンスが取得されます",
    "lineNumber": 586,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "何ページ目か"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "見つかった行のインスタンス"
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "firstChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#firstChar",
    "access": null,
    "description": "文書内で最初の文字(あるいはEOL)のインスタンスを返します",
    "lineNumber": 607,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char EOL"
      ],
      "spread": false,
      "description": "見つかった文字のインスタンス"
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "lastChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#lastChar",
    "access": null,
    "description": "文書内で最終文字(EOLは除く)のインスタンスを返します",
    "lineNumber": 615,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "見つかった文字のインスタンス"
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "lastEOL",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#lastEOL",
    "access": null,
    "description": "文書内で最終行のEOLを返します",
    "lineNumber": 623,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "最後のEOL"
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "cursor",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cursor",
    "access": null,
    "description": "カーソルのインスタンスを返します",
    "lineNumber": 631,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "文書内のカーソルのインスタンス"
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "cursorChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cursorChar",
    "access": null,
    "description": "この文書内でカーソルのあたっている文字のインスタンスを返します",
    "lineNumber": 639,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "cursorRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cursorRow",
    "access": null,
    "description": "この文書内でカーソルのある行のインスタンスを返します",
    "lineNumber": 647,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "カーソル行のインスタンス"
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "inputBuffer",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#inputBuffer",
    "access": null,
    "description": "この文書に入力する際に使用する入力バッファーのインスタンスを返します",
    "lineNumber": 655,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "入力バッファーのインスタンス"
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#fileList",
    "access": null,
    "description": "この文書コンテナを使用するファイルリストのインスタンスを返します",
    "lineNumber": 663,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "ファイルリストのインスタンス"
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "command",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#command",
    "access": null,
    "description": "コマンドラインのインスタンスを返します",
    "lineNumber": 671,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "コマンドラインのインスタンス"
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "menu",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#menu",
    "access": null,
    "description": "この文書を操作するMenuクラスのインスタンスを返します",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "メニューバーのインスタンス"
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "hasParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#hasParagraph",
    "access": null,
    "description": "この文書内に段落が存在するかどうかを返します",
    "lineNumber": 689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "段落が存在するならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "pushParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#pushParagraph",
    "access": null,
    "description": "子の最後にparagraphを追加します",
    "lineNumber": 700,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "追加する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "insertParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#insertParagraph",
    "access": null,
    "description": "子の指定された位置にparagraphを挿入します",
    "lineNumber": 710,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "挿入する位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "deleteParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#deleteParagraph",
    "access": null,
    "description": "子からparagraphを削除します",
    "lineNumber": 719,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "削除する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "data",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#data",
    "access": null,
    "description": "文書の内容を表したオブジェクトのjson文字列を作成します",
    "lineNumber": 728,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "文書内容を表すオブジェクトのjson文字列"
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "filename",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#filename",
    "access": null,
    "description": "この文書内に展開しているファイル名を変更する、あるいは引数省略で現在のファイル名を取得します",
    "lineNumber": 745,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newFilename",
        "description": "新たに設定するファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のファイル名(引数を省略した場合)"
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "_filename",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_filename",
    "access": null,
    "description": null,
    "lineNumber": 750,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "fileId",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#fileId",
    "access": null,
    "description": "現在のファイルに新たなIDを与える、あるいは引数省略で現在のファイルIDを取得します",
    "lineNumber": 761,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newId",
        "description": "新たに設定するID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のファイルID(引数を省略した場合)"
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "_fileId",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_fileId",
    "access": null,
    "description": null,
    "lineNumber": 767,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "saved",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#saved",
    "access": null,
    "description": "最終更新日時を設定、あるいは引数省略で最終更新日時を取得します",
    "lineNumber": 777,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newSaved",
        "description": "新たに設定する最終更新日時の文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の最終更新日時の文字列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "_saved",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_saved",
    "access": null,
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "isChanged",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#isChanged",
    "access": null,
    "description": "最後の保存から変更があったのかどうかを示すマーク([+]記号)を設定、あるいは引数省略で現在設定されているのかどうかを取得します",
    "lineNumber": 793,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "設定する場合はtrue、外す場合はfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の設定状態の真偽値(引数を省略した場合)"
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "strLenOnRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#strLenOnRow",
    "access": null,
    "description": "一行の文字数を変更する、あるいは引数省略で現在の設定上の一行の文字数を取得します",
    "lineNumber": 813,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newStrLen",
        "description": "新たに設定する行内文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の設定上の行内文字数(引数を省略した場合)"
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "_strLenOnRow",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_strLenOnRow",
    "access": null,
    "description": null,
    "lineNumber": 819,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "rowLenOnPage",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#rowLenOnPage",
    "access": null,
    "description": "一ページの行数を変更する、あるいは引数省略で現在の一ページの行数を取得します",
    "lineNumber": 831,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newRowLen",
        "description": "新たに設定するページ内行数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のページ内行数(引数を省略した場合)"
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "_rowLenOnPage",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_rowLenOnPage",
    "access": null,
    "description": null,
    "lineNumber": 837,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "countChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#countChar",
    "access": null,
    "description": "文書内文字数を数えます",
    "lineNumber": 846,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総文字数"
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "countRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#countRow",
    "access": null,
    "description": "文書内行数を数えます",
    "lineNumber": 859,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総行数"
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "countPage",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#countPage",
    "access": null,
    "description": "文書内のページ数を数えます",
    "lineNumber": 871,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総ページ数"
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "width",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#width",
    "access": null,
    "description": "この文書コンテナの横幅を返えます。\n    文書コンテナは９０度回転しているため、css上は高さと同様です",
    "lineNumber": 890,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "height",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#height",
    "access": null,
    "description": "この文書コンテナの高さを返します。\n    文書コンテナは９０度回転しているため、css上は横幅と同様です",
    "lineNumber": 901,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "removeClassFromAllChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#removeClassFromAllChar",
    "access": null,
    "description": "文書内すべての文字から、指定されたクラスを除去します",
    "lineNumber": 910,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "empty",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#empty",
    "access": null,
    "description": "子を空にし、入力モード、語句検索モードは終了します",
    "lineNumber": 922,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "append",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#append",
    "access": null,
    "description": "この文章コンテナの末尾にparagraphを追加します",
    "lineNumber": 939,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "追加する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "printInfo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#printInfo",
    "access": null,
    "description": "文書情報を表示します",
    "lineNumber": 968,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "cordinate",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cordinate",
    "access": null,
    "description": "各行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n    標準以外のフォントサイズの文字があればフォントサイズに合わせて文字数は調整されます。\n    また、空段落以外に空行があれば削除します",
    "lineNumber": 985,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "checkKinsoku",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#checkKinsoku",
    "access": null,
    "description": "禁則処理を行います。\n    各行の文字数への変化が伴うため、cordinate()の後に実行してください",
    "lineNumber": 997,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "breakPage",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#breakPage",
    "access": null,
    "description": "ページの最初の行と最終行に目印となるクラスを与えます",
    "lineNumber": 1009,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "announce",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#announce",
    "access": null,
    "description": "ユーザーへの情報を表示します",
    "lineNumber": 1047,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示する情報"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'black'",
        "defaultRaw": "'black'",
        "name": "opt_color",
        "description": "黒文字以外の文字色で表示する場合に色名を指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "readFile",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#readFile",
    "access": null,
    "description": "指定されたファイルを開きます(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/ReadJsonFile.html"
    ],
    "lineNumber": 1064,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fileId",
        "description": "開くファイルのID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "saveFile",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#saveFile",
    "access": null,
    "description": "現在開いているファイルを上書き保存します。\n    newFile()されて初めての保存なら名前をつけて保存します。(ともに非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileDataServlet.html"
    ],
    "lineNumber": 1076,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "newFile",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#newFile",
    "access": null,
    "description": "新しいファイルを開きます",
    "lineNumber": 1101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string='newfile'"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "新しいファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "changeDisplay",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#changeDisplay",
    "access": null,
    "description": null,
    "lineNumber": 1117,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "opt_pos",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "addDo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#addDo",
    "access": null,
    "description": "DoMemoryをアンドゥスタックに積みます",
    "lineNumber": 1126,
    "params": [
      {
        "nullable": null,
        "types": [
          "DoMemory"
        ],
        "spread": false,
        "optional": false,
        "name": "doMemory",
        "description": "アンドゥスタックに積むDoMemory"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "undo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#undo",
    "access": null,
    "description": "アンドゥします",
    "lineNumber": 1134,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "redo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#redo",
    "access": null,
    "description": "リドゥします",
    "lineNumber": 1146,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#addKeydownEventListener",
    "access": null,
    "description": "この文書コンテナにkeydownイベントリスナーを付加します",
    "lineNumber": 1161,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容です",
    "lineNumber": 1174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "runControlKeyDown",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#runControlKeyDown",
    "access": "private",
    "description": "",
    "lineNumber": 1230,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "keycode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "runWheel",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#runWheel",
    "access": null,
    "description": "ホイールイベントの実行内容です(表示を４行分移動する)",
    "lineNumber": 1302,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUp",
        "description": "上方向にホイールが動かされたならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "addFileTitleEvent",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#addFileTitleEvent",
    "access": null,
    "description": "ファイル名inputフォームにイベントを付加します(主に、フォーカスがあたった際と外れた際のイベント)。",
    "lineNumber": 1320,
    "params": []
  },
  {
    "__docId__": 302,
    "kind": "file",
    "name": "js/filelist.js",
    "content": "'use strict';\n/* global AbstractHierarchy, ElemCreator, Util */\n\n/**\n * ユーザーのファイル情報のひとつを扱うクラス\n */\nexport class File extends AbstractHierarchy {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {number} id ファイルのID\n     * @param {string} filename ファイル名\n     */\n    constructor(id, filename) {\n        super(ElemCreator.createFileElement(id, filename));\n        this._link = this.elem().getElementsByTagName('a')[0];\n        this._id = id;\n        this._name = filename;\n        this._nextFile = null;\n        this._prevFile = null;\n        this.addClickEventListener();\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 自身の属するファイルリストの参照を探して取得します\n     * @return {FileList} 自身の属するファイルリストのインスタンス。見つからなければnull\n     */\n    fileList() {\n        for (let parentDir = this.parent(); parentDir ;parentDir = parentDir.parent() ) {\n            if (parentDir.isRoot()) {\n                return parentDir;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 内部のaタグのDOM要素を取得します\n     * @return {Element} 自身の持つaタグのDOM要素\n     */\n    link() {\n        return this._link;\n    }\n\n    /**\n     * 自身の次に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n     *     通常のnext()はディレクトリも含め同階層のみをつなぎますが、nextFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます\n     * @param {File} [opt_file] 新たに設定するファイルのインスタンス\n     * @return {File} 自身のインスタンス(引数を渡した場合)、あるいは自身の次のファイルのインスタンス(引数を省略した場合)\n     */\n    nextFile(opt_file) {\n        if (opt_file === undefined) {\n            return this._nextFile;\n        }\n\n        this._nextFile = opt_file;\n        return this;\n    }\n\n    /**\n     * 自身の前に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n     *     通常のやprev()はディレクトリも含め同階層のみをつなぎますが、prevFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます\n     * @param {File} [opt_file] 新たに設定するファイルのインスタンス\n     * @return {File} 自身のインスタンス(引数を渡した場合)、あるいは自身の前のファイルのインスタンス(引数を省略した場合)\n     */\n    prevFile(opt_file) {\n        if (opt_file === undefined) {\n            return this._prevFile;\n        }\n\n        this._prevFile = opt_file;\n        return this;\n    }//}}}\n\n    // --判定 {{{\n    /**\n     * 自身がFileListのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isRoot() {\n        return false;\n    }\n\n    /**\n     * 自身がディレクトリのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isDirectory() {\n        return false;\n    }\n\n    /**\n     * 自身がファイルのインスタンスであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isFile() {\n        return true;\n    }\n\n    /**\n     * 自身が最初のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最初のファイルであるかどうか)\n     * @return {boolean} 自身がファイルリストの中で最初のファイルならtrue、そうでなければfalse\n     */\n    isFirstFile() {\n        return this.prevFile() === null;\n    }\n\n    /**\n     * 自身が最後のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最後のファイルであるかどうか)\n     * @return {boolean} 自身がファイルリストの中で最後のファイルならtrue、そうでなければfalse\n     */\n    isLastFile() {\n        return this.nextFile() === null;\n    }\n\n    /**\n     * 自身が表すファイルが文章コンテナに読み込まれているかどうかを返します\n     * @return {boolean} 自身が現在読み込まれていればtrue、そうでなければfalse\n     */\n    isOpen() {\n        return this.fileList().sentenceContainer().fileId() === this.id();\n    }\n\n    /**\n     * 自身が表すファイルが文章コンテナに読み込まれていないかどうかを返します\n     * @return {boolean} 自身が現在読み込まれていなければtrue、そうでなければfalse\n     */\n    isClose() {\n        return this.fileList().sentenceContainer().fileId() !== this.id();\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 自身のファイルIDを返します\n     * @return {number} 自身のファイルID\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * 自身のファイル名を返します\n     * @return {string} 自身のファイル名\n     */\n    name() {\n        return this._name;\n    }//}}}\n\n    // --DOM操作 {{{\n    /**\n     * 文章コンテナに自身のファイルを非同期で読み込みます\n     * @return {File} 自身のインスタンス\n     */\n    open() {\n        const sentenceContainer = this.fileList().sentenceContainer();\n        if (sentenceContainer.isChanged()) {\n            sentenceContainer.announce('最後の変更が保存されていません');\n            return this;\n        }\n\n        const data = {};\n        data.file_id = this.id();\n        sentenceContainer.announce('読込中');\n        Util.get('/tategaki/FileData',\n            json => sentenceContainer.init(json).isChanged(false).announce('読み込み完了'),\n            data);\n        return this;\n    }\n\n    /**\n     * 自身の要素及び自身への参照を削除し、自身が表すファイルを削除します(非同期通信)\n     * @return {File} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/DeleteServlet.html\n     */\n    delete() {\n        Util.post('/tategaki/Delete',{\n            file_id: this.id()\n        },function (json) {\n            if (json.result === 'false' || json.result === false) {\n                console.log('ファイル削除エラーです(ファイル番号：'+ this.id() + ')');\n                return;\n            }\n\n            const fileList = this.fileList();\n            const sentenceContainer = fileList.sentenceContainer();\n            // 現在開いているファイルを削除したなら、前後どちらかのファイルを開く\n            // 同じディレクトリに他のファイルがなければ新しいファイルを開く\n            // 最後に、ファイルリストを作り直す\n            if (fileList.currentFile() === this) {\n                const nextFile = this.nextFile() || this.prevFile();\n                if (nextFile) {\n                    nextFile.open();\n                    fileList.read();\n                    return;\n                }\n                if (!nextFile) {\n                    sentenceContainer.newFile();\n                    fileList.read();\n                    return;\n                }\n            }\n            fileList.read();\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * 自身をnewParentDirの中に移動し、ファイルリストを作り直します(非同期通信)\n     * @param {Directory} newParentDir 自身の親となるディレクトリのインスタンス\n     * @return {File} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    move(newParentDir) {\n        const fileList = this.fileList();\n        Util.post('/tategaki/FileList',{\n            file_id: this.id(),\n            new_parent_id: newParentDir.id()\n        }, data => fileList.read());\n        return this;\n    }//}}}\n\n    // --イベント {{{\n    // liタグの要素ではなくaタグ要素にクリックイベントを設定するためオーバーライド\n    /**\n     * 自身のリンクにクリックイベントを付加します\n     * @return {File} 自身のインスタンス\n     */\n    addClickEventListener() {\n        this._clickArg = this._onClick.bind(this);\n        this.link().addEventListener('click',this._clickArg);\n        return this;\n    }\n\n    /**\n     * 自身のリンクへのクリックイベントを除去します\n     * @return {File} 自身のインスタンス\n     */\n    removeClickEventListener() {\n        if (!this._clickArg) {\n            return this;\n        }\n        this.link().removeEventListener('click',this._clickArg);\n        this._clickArg = null;\n        return this;\n    }\n\n    /**\n     * 自身のリンクへのクリックイベントの内容です(クリックするとファイルが読み込まれる)\n     * @param {Event} e イベントオブジェクト\n     */\n    runClick(e) {\n        this.open();\n        $('#file_list_modal').modal('hide');\n    }//}}}\n}//}}}\n\n\n/**\n * ユーザーのディレクトリ情報のひとつを扱うクラス\n */\nexport class Directory extends AbstractHierarchy {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {number} dirId ディレクトリID\n     * @param {object} data ディレクトリの情報を持つオブジェクト\n     * <pre>\n     * <code>\n     *  // データの内容例\n     * {\n     *\t\t\"directoryname\": \"dirname\",\n     *\t\t\"4\":\"indirfile\",\n     *\t\t\"9\":\"file\",\n     *\t\t\"12\": {\n     *\t\t\t\"directoryname\": \"seconddir\",\n     *\t\t\t\"17\": \"file\"\n     *\t\t}\n     *\t}\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(dirId,data) {\n        /*\n         * dataの中身例(rootから見て)\n         * data = {\n         * \t\"directoryname\": \"root\",\n         * \t\"1\":\"sample\",\n         * \t\"8\":\"file\",\n         * \t\"6\": {\n         * \t\t\"directoryname\": \"dirname\",\n         * \t\t\"4\":\"indirfile\",\n         * \t\t\"9\":\"file\",\n         * \t\t\"12\": {\n         * \t\t\t\"directoryname\": \"seconddir\",\n         * \t\t\t\"17\": \"file\"\n         * \t\t}\n         * \t}\n         * }\n         * fileId:filename\n         */\n        super(ElemCreator.createDirectoryElement(dirId,data));\n        this._link = this.elem().getElementsByTagName('a')[0];\n        this._innerList = this.elem().getElementsByTagName('ul')[0];\n\n        this._id = parseInt(dirId);\n        this._name = data.directoryname;\n        for (let id in data) {\n            if (id === 'directoryname') {\n                continue;\n            }\n            if (typeof data[id] === 'string') {\n                this.append(new File(id,data[id]));\n            }\n            if (typeof data[id] === 'object') {\n                this.append(new Directory(id,data[id]));\n            }\n        }\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 内部のaタグのDOM要素を取得します\n     * @return {Element} 自身の持つaタグのDOM要素\n     */\n    link() {\n        return this._link;\n    }\n\n    /**\n     * 自身の内部の要素の構築先であるDOM要素(コラプスの内容の格納先)を返します\n     * @return {Element} 自身の内部リストのDOM要素\n     */\n    innerList() {\n        return this._innerList;\n    }\n\n    /**\n     * 自身の属するファイルリストの参照を探して取得します\n     * @return {FileList} 自身の属するファイルリストのインスタンス。見つからなければnull\n     */\n    fileList() {\n        for (let parentDir = this.parent(); parentDir; parentDir = parentDir.parent()) {\n            if (parentDir.isRoot()) {\n                return parentDir;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 自分の次のファイル(ディレクトリ、内部のファイルを除く)を探す\n     * @return {File} 自分の次のファイル(ディレクトリ、内部のファイルを除く)。自分の後方にファイルがなければnull\n     */\n    findNextFile() {\n        for (let fileList = this.fileList(), nextFile = fileList.findNextFile(this);\n            nextFile; nextFile = fileList.findNextFile(nextFile)) {\n                if (!this.contains(nextFile)) {\n                    return nextFile;\n                }\n            }\n        return null;\n    }//}}}\n\n    // --判定 {{{\n    /**\n     * 自身がFileListのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isRoot() {\n        return false;\n    }\n\n    /**\n     * 自身がDirectoryのインスタンスであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isDirectory() {\n        return true;\n    }\n\n    /**\n     * 自身がFileのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isFile() {\n        return false;\n    }\n\n    /**\n     * fileOrDirectoryがこのディレクトリ内にあるかどうかを判定します\n     * @param {File Directory} fileOrDirectory 判定するファイル、またはディレクトリ\n     * @return {boolean} 引数がこのディレクトリの中にあればtrue、そうでなければfalse\n     */\n    contains(fileOrDirectory) {\n        for (let fileList = this.fileList(), parents = fileOrDirectory.parent();\n            parents !== fileList; parents = parents.parent()) {\n                if (parents === this) {\n                    return true;\n                }\n            }\n        return false;\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 自身のIDを返します\n     * @return {number} 自身のID\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * 自身のディレクトリ名を返します\n     * @return {string} 自身のディレクトリ名\n     */\n    name() {\n        return this._name;\n    }//}}}\n\n    // --DOM操作 {{{\n    /**\n     * 自身の内部の最後にfileを追加します\n     * @param {File Directory} file 追加するファイル、あるいはディレクトリのインスタンス\n     * @return {Directory} 自身のインスタンス\n     */\n    append(file) {\n        // DOM\n        this.appendElem(file);\n\n        // ポインタ調整\n        // 最初の要素と最後の要素はつなげる\n\n        if (this.hasChild()) {\n            this.lastChild().next(file);\n            file.prev(this.lastChild());\n        }\n        file.parent(this);\n        this.pushChild(file);\n        return this;\n    }\n\n    /**\n     * 自身の内部リストの内部の最後にfileのDOM要素を追加します\n     * @param {File Directory} file 追加するファイル、あるいはディレクトリのインスタンス\n     * @return {Directory} 自身のインスタンス\n     */\n    appendElem(file) {\n        this.innerList().appendChild(file.elem());\n        return this;\n    }\n\n    /**\n     * 自身を削除します(非同期通信)\n     * @param {boolean} [opt_bl=false] 自身の内部にファイルがあるとき、強制的に中のファイルごと削除するならtrue、そうでなければfalseを指定する\n     * @return {Directory} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/DeleteServlet.html\n     */\n    delete(opt_bl) {\n        const bl = opt_bl || false; // 引数省略の場合でも、明確にfalseを入れる\n        Util.post('/tategaki/Delete',{\n            directory_id: this.id(),\n            option: bl\n        }, function (data) {\n            const fileList = this.fileList();\n            fileList.read();\n            if (data.result === 'false') {\n                alert('削除できませんでした。');\n                return;\n            }\n\n            // 現在開いているファイルが自分の中にある場合、自分の次のファイルを開く\n            // 自分以降にファイルがなければ最初のファイル、それもなければ新しいファイルを開く\n            if (this.contains(fileList.currentFile())) {\n                const nextFile = this.findNextFile() || fileList.firstFile();\n                if (nextFile) {\n                    nextFile.open();\n                } else {\n                    fileList.sentenceContainer().newFile();\n                }\n            }\n\n        }.bind(this));\n        return this;\n    }//}}}\n}//}}}\n\n\n/**\n * ファイルやディレクトリを一覧にするファイルリストを表すクラス\n */\nexport class FileList extends AbstractHierarchy {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 自身のファイルを展開する文章コンテナのインスタンス\n     * @param {object} [opt_data] ファイルやディレクトリの情報を扱うオブジェクト。省略した場合は、init()にdataを渡して参照やDOMの構築を行う\n     * <pre>\n     * <code>\n     *  // dataの中身例\n     * {\n     * \t\"directoryname\": \"root\",\n     * \t\"1\":\"sample\",\n     * \t\"8\":\"file\",\n     * \t\"6\": {\n     * \t\t\"directoryname\": \"dirname\",\n     * \t\t\"4\":\"indirfile\",\n     * \t\t\"9\":\"file\",\n     * \t\t\"12\": {\n     * \t\t\t\"directoryname\": \"seconddir\",\n     * \t\t\t\"17\": \"file\"\n     * \t\t}\n     * \t}\n     * }\n     * </code>\n     * </pre>\n     */\n    constructor(sentenceContainer, opt_data) {\n        super(document.getElementById('file_list'));\n        this._sentenceContainer = sentenceContainer;\n        this._$modal = $('#file_list_modal');\n        this._filterInputElem = document.getElementById('file_list_filter');\n        this.addEventListenerOnInput();\n        if (opt_data) {\n            this.init(opt_data);\n        } else {\n            this.read();\n        }\n    }\n\n    /**\n     * 参照やDOMの構築を行います\n     * @param {object} data ファイルやディレクトリの情報を扱うオブジェクト。詳細はconstructorの説明へ\n     * @return {FileList} 自身のインスタンス\n     */\n    init(data) {\n        this.empty();\n        for (let id in data) {\n            if (id === 'directoryname') {\n                continue;\n            }\n\n            if (typeof data[id] === 'string') {\n                this.append(new File(id,data[id]));\n            }\n            if (typeof data[id] === 'object') {\n                this.append(new Directory(id,data[id]));\n            }\n        }\n        this.chainFile();\n        return this;\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} 自身のファイルを展開する文章コンテナのインスタンス\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * 自身の子のうち、最初のファイルのインスタンスを取得します\n     * @return {File} 最初のファイルのインスタンス\n     */\n    firstFile() {\n        return this.findNextFile(this);\n    }\n\n    /**\n     * 自身の子のうち、最後のファイルのインスタンスを取得します\n     * @return {File} 最後のファイルのインスタンス\n     */\n    lastFile() {\n        for (let file = this.firstFile(); file; file = file.nextFile()) {\n            if (file.isLastFile()) {\n                return file;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 現在文章コンテナに展開されているファイルのインスタンスを返します\n     * @return {File} 現在開かれているファイルのインスタンス\n     */\n    currentFile() {\n        for (let file = this.firstFile(); file; file = file.nextFile()) {\n            if (file.isOpen()) {\n                return file;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * ファイルリストのモーダルのjQueryオブジェクトを返します\n     * @return {jQuery} ファイルリストモーダルのjQueryオブジェクト\n     */\n    $modal() {\n        return this._$modal;\n    }\n\n    /**\n     * ファイルリストモーダル下部にある検索ボックスのDOM要素を返します\n     * @return {Element} 検索用InputのDOM要素\n     */\n    filterInputElem() {\n        return this._filterInputElem;\n    }\n\n    /**\n     * 指定されたファイルのインスタンスを探索して返します。\n     *     同じ名前を持つファイルが複数見つかる場合もあるので、結果は配列にして返します\n     * @param {number string} idOrName 対象ファイルのID、もしくはファイル名\n     * @return {File[]} 見つかったファイルインスタンスの配列\n     */\n    findFile(idOrName) {\n        const ret = [];\n        this.each(file => {\n            if (file.isDirectory()) {\n                return;\n            }\n\n            if (file.id() === idOrName ||\n                (typeof idOrName === 'string' && new RegExp('^'+ idOrName +'$','i')\n                    .test(file.name()))) {\n                        ret.push(file);\n                    }\n        });\n        return ret;\n    }\n\n    /**\n     * 指定されたディレクトリのインスタンスを探索して返します。\n     *     同じ名前を持つディレクトリが複数見つかる場合もあるので、結果は配列にして返します\n     * @param {number string} idOrName 対象ディレクトリのID、もしくはディレクトリ名\n     * @return {Directory[]} 見つかったディレクトリインスタンスの配列\n     */\n    findDirectory(idOrName) {\n        const ret = [];\n        this.each(dir => {\n            if (dir.isFile()) {\n                return;\n            }\n\n            if (dir.id() === idOrName ||\n                (typeof idOrName === 'string' && new RegExp('^'+ idOrName +'$','i')\n                    .test(dir.name()))) {\n                        ret.push(dir);\n                    }\n        });\n        return ret;\n    }//}}}\n\n    // --判定 {{{\n    /**\n     * 自身がFileListのインスタンスであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isRoot() {\n        return true;\n    }\n\n    /**\n     * 自身がDirectoryのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isFile() {\n        return false;\n    }\n\n    /**\n     * 自身がFileのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isDirectory() {\n        return false;\n    }\n\n    /**\n     * ファイルリストのモーダルが開いているかどうかを返します\n     * @return {boolean} ファイルリストのモーダルが開いていればtrue、そうでなければfalse\n     */\n    isOpen() {\n        return this.$modal().hasClass('in');\n    }\n\n    /**\n     * 自身の内部にファイルがあるかどうかを返します\n     * @return {boolean} ファイルがあればtrue、そうでなければfalse\n     */\n    hasFile() {\n        return this.firstFile() !== null;\n    }//}}}\n\n    // --参照操作 {{{\n    /**\n     * 内部のFile同士を参照でつなぎます\n     * @return {FileList} 自身のインスタンス\n     */\n    chainFile() {\n        let prev;\n        this.each(file => {\n            if (!file.isFile()) {\n                return;\n            }\n\n            if (prev) {\n                prev.nextFile(file);\n            }\n            file.prevFile(prev);\n            prev = file;\n        });\n        return this;\n    }\n\n    /**\n     * リストで上からファイルだけを数えた場合の、引数の次のファイルを返します\n     * @param {FileList File Directory} file 基準とするインスタンス\n     * @return {File} 見つかったファイルのインスタンス。引数の次のファイルが見つからなければnull\n     */\n    findNextFile(file) {\n        /*\n         *\n         *  チェックする順番は、ファイルならその次のファイルをチェックし、ディレクトリなら下に潜って最初に見つけたファイルをチェックする\n         *  -- 全要素を順に探索していくための道のり --\n         *  引数がファイルなら。引数の次を確認する\n         *  引数がディレクトリなら、その最初の子を確認する(FileListはディレクトリ扱い)\n         *  空ディレクトリ(firstChild()===null)なら、引数の次を確認する\n         *  引数の次が同じ階層になければ(ディレクトリ内の最後と判断する)、親ディレクトリの次を確認する(それでもなければ、さらに上の親ディレクトリの次、と繰り返す)\n         *  引数の次の要素が見つからず親をたどっていく過程でルートディレクトリ(FileList)に辿り着いた場合は、探索が最後に達したとしてnullを返す\n         *  -- ここまでで確認要素を取得 --\n         *  取得した確認要素がディレクトリなら、さらに潜って探索を次に進めるため再帰する\n         *  取得した確認要素がファイルなら、その要素が引数の次のファイルなので返す\n         */\n        if (file.isEmpty() && file.isRoot()) {\n            return null;\n        }\n        let check;\n        if (file.isFile()) {\n            check = file.next();\n        }\n        if (file.isDirectory() || file.isRoot()) {\n            check = file.firstChild() || file.next();\n        }\n        if (!check) {\n            for (let parentDir = file.parent();\n                !(check = parentDir.next()); parentDir = parentDir.parent()) {\n                    if (parentDir.isRoot()) {\n                        return null;\n                    }\n                }\n        }\n        if (check.isDirectory()) {\n            return this.findNextFile(check);\n        }\n        if (check.isFile()) {\n            return check;\n        }\n        return null;\n    }\n\n    /**\n     * すべてのファイルとディレクトリを順に引数にして関数を実行します\n     * @param {function} func 実行する関数オブジェクト\n     * @return {FileList} 自身のインスタンス\n     */\n    each(func) {\n        if (this.firstChild() === null) { // ファイルやディレクトリがひとつもない場合\n            return this;\n        }\n\n        // fileに子があれば子に進み、なければ次に進む(子のあるディレクトリなら最初の子、fileか空ディレクトリなら次に進む)\n        // 次がなければ親の次に進む。それでもなければさらに親の次、と繰り返す\n        // その過程でルートディレクトリが見つかれば探索終了\n        for (let file = this.firstChild(), temp = this;; temp = file,\n            file = file.hasChild() ? file.firstChild() : file.next()) {\n                if (file) {\n                    func(file);\n                    continue;\n                }\n\n                for (let parentDir = temp.parent();\n                    !(file = parentDir.next()); parentDir = parentDir.parent()) {\n                        if (parentDir.isRoot()) {\n                            return this;\n                        }\n                    }\n                func(file);\n            }\n        return this;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * ファイルリストのモーダルを開きます。その際、ファイル検索ボックスに自動的にフォーカスを当てます\n     * @return {FileList} 自身のインスタンス\n     */\n    showModal() {\n        this.filterInputElem().value = '';\n        this.filterInputElem().focus();\n        this.resetList();\n        this.$modal().modal();\n        return this;\n    }\n\n    /**\n     * ファイルリストのモーダルを閉じます\n     * @return {FileList} 自身のインスタンス\n     */\n    hideModal() {\n        this.$modal().modal('hide');\n        return this;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * ファイルリストの末端にファイル、またはディレクトリを追加します\n     * @param {File Directory} file 追加するファイル、またはディレクトリ\n     * @return {FileList} 自身のインスタンス\n     */\n    append(file) {\n        // DOM\n        this.appendElem(file);\n\n        // ポインタ調整\n        // 最初の要素と最後の要素はつなげる\n\n        if (this.hasChild()) {\n            this.lastChild().next(file);\n            file.prev(this.lastChild());\n        }\n        file.parent(this);\n        this.pushChild(file);\n        return this;\n    }\n\n    /**\n     * 自身のDOM要素の内部の最後にfileのDOM要素を追加します\n     * @param {File Directory} file 追加するファイル、またはディレクトリのインスタンス\n     * @return {FileList} 自身のインスタンス\n     */\n    appendElem(file) {\n        this.elem().appendChild(file.elem());\n        return this;\n    }\n\n    /**\n     * 内部のエレメントを空にします\n     * @return {FileList} 自身のインスタンス\n     */\n    emptyElem() {\n        // FileListは内部のエレメントが参照とは独立して変動するため、参照として保持しているエレメントを削除する方式では\n        // 存在しないエレメントを削除しようとすることになりエラーが起こるため、オーバーライドする\n        const children = this.elem().children;\n        let child;\n        while ((child = children[0])) {\n            this.elem().removeChild(child);\n        }\n        return this;\n    }\n\n    /**\n     * 各インスタンスの参照はそのままで、DOM要素のみを構築し直します\n     * @return {FileList} 自身のインスタンス\n     */\n    resetList() {\n        this.emptyElem();\n        this.each(file => {\n            file.parent().appendElem(file);\n        });\n        return this;\n    }\n\n    /**\n     * ファイルリストの内容をstrから始まる名前を持つファイル・ディレクトリのみに置き換えます(各インスタンスの参照はそのままで、DOM要素のみを変更します)\n     * @param {string} str この文字列から始まる名前を持つファイル、ディレクトリだけがファイルリスト内に表示される\n     * @return {FileList} 自身のインスタンス\n     */\n    filter(str) {\n        this.emptyElem();\n        const regexp = new RegExp('^'+ str +'.*','i');\n        this.each(file => {\n            if (regexp.test(file.name())) {\n                this.elem().appendChild(file.elem());\n            }\n        });\n        if (this.elem().children.length === 0) {\n            const li = document.createElement('li');\n            li.textContent = '該当するファイルは見つかりませんでした。';\n            this.elem().appendChild(li);\n        }\n        return this;\n    }//}}}\n\n    // ファイル操作(非同期通信)//{{{\n\n    /**\n     * ファイルリストをサーバーから読み込み、各インスタンスを構築し直します(非同期通信)\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    read() {\n        Util.get('/tategaki/FileList',\n            function (json) {\n                this.init(json);\n            }.bind(this));\n        return this;\n    }\n\n    /**\n     * 現在開いているファイルの次のファイルを読み込み、文章コンテナに展開します\n     * @return {FileList} 自身のインスタンス\n     */\n    openNextFile() {\n        const currentFile = this.currentFile();\n        const file = currentFile && currentFile.nextFile();\n        if (file) {\n            file.open();\n        } else if(this.hasFile()) {\n            this.firstFile().open();\n        }\n        return this;\n    }\n\n    /**\n     * 現在開いているファイルの前のファイルを読み込み、文章コンテナに展開します\n     * @return {FileList} 自身のインスタンス\n     */\n    openPrevFile() {\n        const currentFile = this.currentFile();\n        const file = currentFile && currentFile.prevFile();\n        if (file) {\n            file.open();\n        } else if (this.hasFile()) {\n            this.lastFile().open();\n        }\n        return this;\n    }\n\n    /**\n     * 名前で指定されたファイルを削除します(非同期通信)。同名のファイルが複数見つかった場合は確認します\n     * @param {string} filename 削除するファイルの名前\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/DeleteFile.html\n     */\n    deleteFile(filename) {\n        const files = this.findFile(filename);\n        const fileLength = files.length;\n        if (fileLength === 0) {\n            this.sentenceContainer().announce('存在しないファイルです','red');\n            return this;\n        }\n\n        if (fileLength === 1) {\n            files[0].delete();\n            return this;\n        }\n\n        if (fileLength > 0) {\n            if (window.confirm('同一名のファイルが複数存在します。\\n' +\n                'すべてのファイルを削除しますか。\\n' +\n                    'このうちのどれかのファイルを削除する場合はキャンセルし、個別に削除してください。')) {\n                        for (let i = 0,file; (file = files[i]); i++) {\n                            file.delete();\n                        }\n                    } else {\n                        console.log('[複数ファイル]削除できませんでした。:' + filename);\n                    }\n        }\n        return this;\n    }\n\n    /**\n     * 指定された名前でディレクトリを作成します(非同期通信)\n     * @param {string} dirname 新しく作成されるディレクトリの名前\n     * @param {number} [opt_parentID] 親ディレクトリのID。指定しなければroot直下\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    mkdir(dirname, opt_parentID) {\n        if (!dirname) {\n            return this;\n        }\n\n        Util.post('/tategaki/FileList',{\n            name: dirname,\n            new_parent_id: opt_parentID || -1,\n            saved: Date.now()\n        },function (data) {\n            if (data.result === 'true') {\n                this.sentenceContainer().announce('ディレクトリを作成しました:'+ dirname);\n                this.read();\n            } else {\n                this.sentenceContainer().announce('ディレクトリ作成エラー');\n            }\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * 指定された名前のディレクトリを削除します(非同期通信)\n     * @param {string} dirname 削除するディレクトリの名前\n     * @param {boolean} isForce ディレクトリ内にファイル等があっても強制的に中身ごと削除するならtrue、そうでなければfalse\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/Delete.html\n     */\n    deleteDirectory(dirname, isForce) {\n        const dirs = this.findDirectory(dirname);\n        if (dirs.length === 0) {\n            return this;\n        }\n\n        dirs[0].delete(isForce);\n        return this;\n    }\n\n    /**\n     * 指定されたファイルを指定されたディレクトリ内に移動します(非同期通信)\n     * @param {string} filename 移動するファイル名。同名のファイルが見つかった場合は、最初に見つかったファイルが選択される\n     * @param {string} dirname 移動先のディレクトリ名。同名のディレクトリが見つかった場合は、最初に見つかったディレクトリが選択される\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    moveFile(filename, dirname) {\n        const files = this.findFile(filename);\n        const dirs = this.findDirectory(dirname);\n        if (files.length === 0 || dirs.length === 0) {\n            return this;\n        }\n\n        files[0].move(dirs[0]);\n        return this;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * ファイルリストのモーダル内にあるファイル検索ボックス関係のイベントを付加します\n     */\n    addEventListenerOnInput() {\n        // モーダルが開くと、検索欄にフォーカスが移動する\n        this.$modal().on('shown.bs.modal',function (e) {\n            this.filterInputElem().focus();\n        }.bind(this));\n        // ファイル検索欄\n        this.filterInputElem().addEventListener('keyup',this.onKeyupOnInput.bind(this));\n    }\n\n    /**\n     * ファイル検索ボックスのkeyupイベントの内容です\n     * @param {Event} e イベントオブジェクト\n     */\n    onKeyupOnInput(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 123) { return; } // F12のみブラウザショートカットキー\n        if (keycode === 13) {\n            // enter\n            const file = this.findFile(this.filterInputElem().value)[0];\n            if (file) {\n                file.open();\n            }\n            this.hideModal();\n            this.resetList();\n        } else if (this.filterInputElem().value.length === 0) {\n            this.resetList();\n        } else {\n            this.filter(this.filterInputElem().value);\n        }\n    }//}}}\n}//}}}\n\n",
    "static": true,
    "longname": "js/filelist.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "File",
    "memberof": "js/filelist.js",
    "static": true,
    "longname": "js/filelist.js~File",
    "access": null,
    "export": true,
    "importPath": "./js/filelist.js",
    "importStyle": "{File}",
    "description": "ユーザーのファイル情報のひとつを扱うクラス",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ファイルのID"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "ファイル名"
      }
    ]
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "_link",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_link",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "_id",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_id",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "_name",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_name",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "_nextFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_nextFile",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "_prevFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_prevFile",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#fileList",
    "access": null,
    "description": "自身の属するファイルリストの参照を探して取得します",
    "lineNumber": 29,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身の属するファイルリストのインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "link",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#link",
    "access": null,
    "description": "内部のaタグのDOM要素を取得します",
    "lineNumber": 42,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の持つaタグのDOM要素"
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "nextFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#nextFile",
    "access": null,
    "description": "自身の次に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n    通常のnext()はディレクトリも含め同階層のみをつなぎますが、nextFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_file",
        "description": "新たに設定するファイルのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の次のファイルのインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "_nextFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_nextFile",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "prevFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#prevFile",
    "access": null,
    "description": "自身の前に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n    通常のやprev()はディレクトリも含め同階層のみをつなぎますが、prevFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_file",
        "description": "新たに設定するファイルのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の前のファイルのインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_prevFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_prevFile",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "isRoot",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返します",
    "lineNumber": 81,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isDirectory",
    "access": null,
    "description": "自身がディレクトリのインスタンスであるかどうかを返します",
    "lineNumber": 89,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "isFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isFile",
    "access": null,
    "description": "自身がファイルのインスタンスであるかどうかを返します",
    "lineNumber": 97,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "isFirstFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isFirstFile",
    "access": null,
    "description": "自身が最初のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最初のファイルであるかどうか)",
    "lineNumber": 105,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がファイルリストの中で最初のファイルならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "isLastFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isLastFile",
    "access": null,
    "description": "自身が最後のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最後のファイルであるかどうか)",
    "lineNumber": 113,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がファイルリストの中で最後のファイルならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "isOpen",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isOpen",
    "access": null,
    "description": "自身が表すファイルが文章コンテナに読み込まれているかどうかを返します",
    "lineNumber": 121,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が現在読み込まれていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "isClose",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isClose",
    "access": null,
    "description": "自身が表すファイルが文章コンテナに読み込まれていないかどうかを返します",
    "lineNumber": 129,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が現在読み込まれていなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "id",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#id",
    "access": null,
    "description": "自身のファイルIDを返します",
    "lineNumber": 138,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身のファイルID"
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "name",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#name",
    "access": null,
    "description": "自身のファイル名を返します",
    "lineNumber": 146,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身のファイル名"
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "open",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#open",
    "access": null,
    "description": "文章コンテナに自身のファイルを非同期で読み込みます",
    "lineNumber": 155,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "delete",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#delete",
    "access": null,
    "description": "自身の要素及び自身への参照を削除し、自身が表すファイルを削除します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/DeleteServlet.html"
    ],
    "lineNumber": 176,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "move",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#move",
    "access": null,
    "description": "自身をnewParentDirの中に移動し、ファイルリストを作り直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "newParentDir",
        "description": "自身の親となるディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "addClickEventListener",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#addClickEventListener",
    "access": null,
    "description": "自身のリンクにクリックイベントを付加します",
    "lineNumber": 229,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "removeClickEventListener",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#removeClickEventListener",
    "access": null,
    "description": "自身のリンクへのクリックイベントを除去します",
    "lineNumber": 239,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "runClick",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#runClick",
    "access": null,
    "description": "自身のリンクへのクリックイベントの内容です(クリックするとファイルが読み込まれる)",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "Directory",
    "memberof": "js/filelist.js",
    "static": true,
    "longname": "js/filelist.js~Directory",
    "access": null,
    "export": true,
    "importPath": "./js/filelist.js",
    "importStyle": "{Directory}",
    "description": "ユーザーのディレクトリ情報のひとつを扱うクラス",
    "lineNumber": 262,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dirId",
        "description": "ディレクトリID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ディレクトリの情報を持つオブジェクト\n<pre>\n<code>\n // データの内容例\n{\n\t\"directoryname\": \"dirname\",\n\t\"4\":\"indirfile\",\n\t\"9\":\"file\",\n\t\"12\": {\n\t\t\"directoryname\": \"seconddir\",\n\t\t\"17\": \"file\"\n\t}\n}\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "_link",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_link",
    "access": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "_innerList",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_innerList",
    "access": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "_id",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_id",
    "access": null,
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "_name",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_name",
    "access": null,
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "link",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#link",
    "access": null,
    "description": "内部のaタグのDOM要素を取得します",
    "lineNumber": 326,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の持つaタグのDOM要素"
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "innerList",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#innerList",
    "access": null,
    "description": "自身の内部の要素の構築先であるDOM要素(コラプスの内容の格納先)を返します",
    "lineNumber": 334,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の内部リストのDOM要素"
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#fileList",
    "access": null,
    "description": "自身の属するファイルリストの参照を探して取得します",
    "lineNumber": 342,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身の属するファイルリストのインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "findNextFile",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#findNextFile",
    "access": null,
    "description": "自分の次のファイル(ディレクトリ、内部のファイルを除く)を探す",
    "lineNumber": 355,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自分の次のファイル(ディレクトリ、内部のファイルを除く)。自分の後方にファイルがなければnull"
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "isRoot",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返します",
    "lineNumber": 370,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#isDirectory",
    "access": null,
    "description": "自身がDirectoryのインスタンスであるかどうかを返します",
    "lineNumber": 378,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "isFile",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#isFile",
    "access": null,
    "description": "自身がFileのインスタンスであるかどうかを返します",
    "lineNumber": 386,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "contains",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#contains",
    "access": null,
    "description": "fileOrDirectoryがこのディレクトリ内にあるかどうかを判定します",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "fileOrDirectory",
        "description": "判定するファイル、またはディレクトリ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "引数がこのディレクトリの中にあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "id",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#id",
    "access": null,
    "description": "自身のIDを返します",
    "lineNumber": 410,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身のID"
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "name",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#name",
    "access": null,
    "description": "自身のディレクトリ名を返します",
    "lineNumber": 418,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身のディレクトリ名"
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "append",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#append",
    "access": null,
    "description": "自身の内部の最後にfileを追加します",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、あるいはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "appendElem",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#appendElem",
    "access": null,
    "description": "自身の内部リストの内部の最後にfileのDOM要素を追加します",
    "lineNumber": 449,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、あるいはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "delete",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#delete",
    "access": null,
    "description": "自身を削除します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/DeleteServlet.html"
    ],
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opt_bl",
        "description": "自身の内部にファイルがあるとき、強制的に中のファイルごと削除するならtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "FileList",
    "memberof": "js/filelist.js",
    "static": true,
    "longname": "js/filelist.js~FileList",
    "access": null,
    "export": true,
    "importPath": "./js/filelist.js",
    "importStyle": "{FileList}",
    "description": "ファイルやディレクトリを一覧にするファイルリストを表すクラス",
    "lineNumber": 493,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#constructor",
    "access": null,
    "description": "",
    "lineNumber": 519,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "自身のファイルを展開する文章コンテナのインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_data",
        "description": "ファイルやディレクトリの情報を扱うオブジェクト。省略した場合は、init()にdataを渡して参照やDOMの構築を行う\n<pre>\n<code>\n // dataの中身例\n{\n\t\"directoryname\": \"root\",\n\t\"1\":\"sample\",\n\t\"8\":\"file\",\n\t\"6\": {\n\t\t\"directoryname\": \"dirname\",\n\t\t\"4\":\"indirfile\",\n\t\t\"9\":\"file\",\n\t\t\"12\": {\n\t\t\t\"directoryname\": \"seconddir\",\n\t\t\t\"17\": \"file\"\n\t\t}\n\t}\n}\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/filelist.js~FileList",
    "static": false,
    "longname": "js/filelist.js~FileList#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "_$modal",
    "memberof": "js/filelist.js~FileList",
    "static": false,
    "longname": "js/filelist.js~FileList#_$modal",
    "access": null,
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "_filterInputElem",
    "memberof": "js/filelist.js~FileList",
    "static": false,
    "longname": "js/filelist.js~FileList#_filterInputElem",
    "access": null,
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "init",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#init",
    "access": null,
    "description": "参照やDOMの構築を行います",
    "lineNumber": 537,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ファイルやディレクトリの情報を扱うオブジェクト。詳細はconstructorの説明へ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#sentenceContainer",
    "access": null,
    "description": "文章コンテナのインスタンスを返します",
    "lineNumber": 560,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のファイルを展開する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "firstFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#firstFile",
    "access": null,
    "description": "自身の子のうち、最初のファイルのインスタンスを取得します",
    "lineNumber": 568,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "最初のファイルのインスタンス"
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "lastFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#lastFile",
    "access": null,
    "description": "自身の子のうち、最後のファイルのインスタンスを取得します",
    "lineNumber": 576,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "最後のファイルのインスタンス"
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "currentFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#currentFile",
    "access": null,
    "description": "現在文章コンテナに展開されているファイルのインスタンスを返します",
    "lineNumber": 589,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "現在開かれているファイルのインスタンス"
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "$modal",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#$modal",
    "access": null,
    "description": "ファイルリストのモーダルのjQueryオブジェクトを返します",
    "lineNumber": 602,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "jQuery"
      ],
      "spread": false,
      "description": "ファイルリストモーダルのjQueryオブジェクト"
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "filterInputElem",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#filterInputElem",
    "access": null,
    "description": "ファイルリストモーダル下部にある検索ボックスのDOM要素を返します",
    "lineNumber": 610,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "検索用InputのDOM要素"
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "findFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#findFile",
    "access": null,
    "description": "指定されたファイルのインスタンスを探索して返します。\n    同じ名前を持つファイルが複数見つかる場合もあるので、結果は配列にして返します",
    "lineNumber": 620,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrName",
        "description": "対象ファイルのID、もしくはファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File[]"
      ],
      "spread": false,
      "description": "見つかったファイルインスタンスの配列"
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "findDirectory",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#findDirectory",
    "access": null,
    "description": "指定されたディレクトリのインスタンスを探索して返します。\n    同じ名前を持つディレクトリが複数見つかる場合もあるので、結果は配列にして返します",
    "lineNumber": 642,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrName",
        "description": "対象ディレクトリのID、もしくはディレクトリ名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory[]"
      ],
      "spread": false,
      "description": "見つかったディレクトリインスタンスの配列"
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "isRoot",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返します",
    "lineNumber": 663,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "isFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isFile",
    "access": null,
    "description": "自身がDirectoryのインスタンスであるかどうかを返します",
    "lineNumber": 671,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isDirectory",
    "access": null,
    "description": "自身がFileのインスタンスであるかどうかを返します",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "isOpen",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isOpen",
    "access": null,
    "description": "ファイルリストのモーダルが開いているかどうかを返します",
    "lineNumber": 687,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ファイルリストのモーダルが開いていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "hasFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#hasFile",
    "access": null,
    "description": "自身の内部にファイルがあるかどうかを返します",
    "lineNumber": 695,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ファイルがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "chainFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#chainFile",
    "access": null,
    "description": "内部のFile同士を参照でつなぎます",
    "lineNumber": 704,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "findNextFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#findNextFile",
    "access": null,
    "description": "リストで上からファイルだけを数えた場合の、引数の次のファイルを返します",
    "lineNumber": 725,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileList File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "基準とするインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "見つかったファイルのインスタンス。引数の次のファイルが見つからなければnull"
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "each",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#each",
    "access": null,
    "description": "すべてのファイルとディレクトリを順に引数にして関数を実行します",
    "lineNumber": 771,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "実行する関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "showModal",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#showModal",
    "access": null,
    "description": "ファイルリストのモーダルを開きます。その際、ファイル検索ボックスに自動的にフォーカスを当てます",
    "lineNumber": 803,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "hideModal",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#hideModal",
    "access": null,
    "description": "ファイルリストのモーダルを閉じます",
    "lineNumber": 815,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "append",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#append",
    "access": null,
    "description": "ファイルリストの末端にファイル、またはディレクトリを追加します",
    "lineNumber": 827,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、またはディレクトリ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "appendElem",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#appendElem",
    "access": null,
    "description": "自身のDOM要素の内部の最後にfileのDOM要素を追加します",
    "lineNumber": 848,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、またはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "emptyElem",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#emptyElem",
    "access": null,
    "description": "内部のエレメントを空にします",
    "lineNumber": 857,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "resetList",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#resetList",
    "access": null,
    "description": "各インスタンスの参照はそのままで、DOM要素のみを構築し直します",
    "lineNumber": 872,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "filter",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#filter",
    "access": null,
    "description": "ファイルリストの内容をstrから始まる名前を持つファイル・ディレクトリのみに置き換えます(各インスタンスの参照はそのままで、DOM要素のみを変更します)",
    "lineNumber": 885,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "この文字列から始まる名前を持つファイル、ディレクトリだけがファイルリスト内に表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "read",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#read",
    "access": null,
    "description": "ファイルリストをサーバーから読み込み、各インスタンスを構築し直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 908,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "openNextFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#openNextFile",
    "access": null,
    "description": "現在開いているファイルの次のファイルを読み込み、文章コンテナに展開します",
    "lineNumber": 920,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "openPrevFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#openPrevFile",
    "access": null,
    "description": "現在開いているファイルの前のファイルを読み込み、文章コンテナに展開します",
    "lineNumber": 935,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "deleteFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#deleteFile",
    "access": null,
    "description": "名前で指定されたファイルを削除します(非同期通信)。同名のファイルが複数見つかった場合は確認します",
    "see": [
      "../WEB-INF/classes/doc/DeleteFile.html"
    ],
    "lineNumber": 952,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "削除するファイルの名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "mkdir",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#mkdir",
    "access": null,
    "description": "指定された名前でディレクトリを作成します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 986,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "新しく作成されるディレクトリの名前"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_parentID",
        "description": "親ディレクトリのID。指定しなければroot直下"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "deleteDirectory",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#deleteDirectory",
    "access": null,
    "description": "指定された名前のディレクトリを削除します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/Delete.html"
    ],
    "lineNumber": 1013,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "削除するディレクトリの名前"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isForce",
        "description": "ディレクトリ内にファイル等があっても強制的に中身ごと削除するならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "moveFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#moveFile",
    "access": null,
    "description": "指定されたファイルを指定されたディレクトリ内に移動します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 1030,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "移動するファイル名。同名のファイルが見つかった場合は、最初に見つかったファイルが選択される"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "移動先のディレクトリ名。同名のディレクトリが見つかった場合は、最初に見つかったディレクトリが選択される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "addEventListenerOnInput",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#addEventListenerOnInput",
    "access": null,
    "description": "ファイルリストのモーダル内にあるファイル検索ボックス関係のイベントを付加します",
    "lineNumber": 1046,
    "params": []
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "onKeyupOnInput",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#onKeyupOnInput",
    "access": null,
    "description": "ファイル検索ボックスのkeyupイベントの内容です",
    "lineNumber": 1059,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "js/input.js",
    "content": "'use strict';\n/* global AbstractHierarchy, Char, Row, KeyTable, ElemCreator, Util */\n// classは巻き上げが起こらないため、Char・Rowの下に作る必要がある。ただし、SentenceContainer内で利用するのでSentenceContainerよりは上になければならない\n\n\n/**\n * 入力文字を表すクラス\n */\nexport class InputChar extends Char {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {object} data 文字を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     *\t{\n     *\t\t\"char\":\"あ\",\n     *\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\"fontSize\": \"auto\"\n     *\t}\n     *\t</code>\n     *\t</pre>\n     *\t@param {number} [opt_phraseNum=-1] 文節のインデックス\n     */\n    constructor(data, opt_phraseNum) {\n        super(data);\n        if (opt_phraseNum === undefined) {\n            opt_phraseNum = -1;\n        }\n        this.phraseNum(opt_phraseNum);\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * 自身の文節番号がnumであるかどうかを返します\n     * @param {number} num 判定するインデックス\n     * @return {boolean} 自身の文節番号がnumであればtrue、そうでなければfalse\n     */\n    isPhraseNum(num) {\n        return num === this.phraseNum();\n    }\n\n    /**\n     * 自身が選択されているかどうかを表します\n     * @return {boolean} 自身が選択されていればtrue、そうでなければfalse。漢字変換が一度もされていなければfalse\n     */\n    isSelect() {\n        return this.hasClass('select-phrase');\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * この文字の文節番号をopt_newNumに設定する、あるいは引数省略で現在の文節番号を取得します\n     * @param {number} [opt_newNum] 新たに設定する文節番号(０始まり)\n     * @return {InputChar number} 自身のインスタンス(引数を渡した場合)、あるいは現在の文節のインデックス(引数を省略した場合)\n     */\n    phraseNum(opt_newNum) {\n        if (opt_newNum === undefined) {\n            return this._phraseNum;\n        }\n\n        this.elem().dataset.phraseNum = opt_newNum;\n        this._phraseNum = opt_newNum;\n        return this;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * この文字を選択状態にします\n     * @return {InputChar} 自身のインスタンス\n     */\n    select() {\n        this.addClass('select-phrase');\n        return this;\n    }\n\n    /**\n     * この文字を非選択状態にします\n     * @return {InputChar} 自身のインスタンス\n     */\n    removeSelect() {\n        this.removeClass('select-phrase');\n        return this;\n    }//}}}\n}//}}}\n\n\n/**\n * 入力された文字をいったん保持するバッファーを表すクラス。\n *     内部の子にInputCharのインスタンス群を持ちます。\n *     また、一度も漢字変換がされず文節番号がすべて-1の場合と、漢字変換が行われ文節が分けられている場合と２つの状態がある\n */\nexport class InputBuffer extends Row {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} container 自身の属する文章コンテナのインスタンス\n     */\n    constructor(container) {\n        super(document.getElementById('input_buffer'));\n        this._container = container;\n        this._convertContainer = new ConvertContainer(this);\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 自身の属する文章コンテナのインスタンスを取得します\n     * @return {SentenceContainer} 自身の属する文章コンテナ\n     */\n    container() {\n        return this._container;\n    }\n\n    /**\n     * カーソルのインスタンスを取得します\n     * @return {Cursor} カーソルのインスタンス\n     */\n    cursor() {\n        return this.container().cursor();\n    }\n\n    /**\n     * カーソルのある文字のインスタンスを取得します\n     * @return {Char} カーソル文字のインスタンス\n     */\n    cursorChar() {\n        return this.cursor().getChar();\n    }\n\n    /**\n     * 漢字変換コンテナのインスタンスを取得します\n     * @return {ConvertContainer} 漢字変換コンテナのインスタンス\n     */\n    convertContainer() {\n        return this._convertContainer;\n    }\n\n    /**\n     * 指定された文節番号の入力文字インスタンスを配列にして返します\n     * @param {number} num 集める入力文字の文節番号\n     * @return {InputChar[]} 指定された文節番号の入力文字インスタンスの配列\n     */\n    phrases(num) {\n        const ret = [];\n        for (let char of this.chars()) {\n            if (char.isPhraseNum(num)) {\n                ret.push(char);\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * 選択中の文節の入力文字インスタンスを返します\n     * @return {InputChar[]} 選択中の入力文字インスタンスの配列。選択されていなければ空の配列\n     */\n    selectPhrases() {\n        const ret = [];\n        for (let char of this.chars()) {\n            if (char.isSelect()) {\n                ret.push(char);\n            }\n        }\n        return ret;\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * 自身が可視化されている(文字入力中)かどうかを返します\n     * @return {boolean} 自身が可視化されていればtrue、そうでなければfalse\n     */\n    isDisplay() {\n        return this.elem().style.display === 'block';\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * 各入力文字に文節番号をふります。変換候補一覧群を作成した後で使用してください\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    setPhraseNum() {\n        let cnt = 0;\n        for (let view of this.convertContainer().views()) {\n            const num = view.phraseNum();\n            const len = view.getSelect().length(); // 選択行がなければひらがなを使って計算\n            for (let i = 0; i < len; i++, cnt++) {\n                this.chars(cnt).phraseNum(num);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 選択されている文節のインデックスを返します\n     * @return {number} 選択文節のインデックス。選択されていなければ-1\n     */\n    selectIndex() {\n        for (let char of this.chars()) {\n            if (char.isSelect()) {\n                return char.phraseNum();\n            }\n        }\n        return -1;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * 自身の幅を取得します。文章内のRowと異なり回転されていないため、css上の幅と一致します\n     * @return {number} 自身の幅\n     */\n    width() {\n        return super.super.width();\n    }\n\n    /**\n     * 自身の高さを取得します。文章内のRowと異なり回転されていないため、css上の高さと一致します\n     * @return {number} 自身の高さ\n     */\n    height() {\n        return super.super.height();\n    }\n\n    /**\n     * @private\n     * 内部の入力文字を元に、適切な幅を計算します\n     * @return {number} 計算された幅のピクセル数\n     */\n    newWidth() {\n        const cache = {};\n        let width = 0;\n        for (let char of this.chars()) {\n            const size = char.fontSize();\n            if (cache[size]) {\n                width = Math.max(width,cache[size]);\n            } else {\n                cache[size] = char.width();\n                width = Math.max(width,char.width());\n            }\n        }\n        return width + 5; // 5px余裕をもたせる\n    }\n\n    /**\n     * @private\n     * 内部の入力文字を元に、適切な高さを計算します\n     * @return {number} 計算された高さのピクセル数\n     */\n    newHeight() {\n        const cache = {};\n        let height = 0;\n        for (let char of this.chars()) {\n            const size = char.fontSize();\n            if (cache[size]) {\n                height += cache[size];\n            } else {\n                cache[size] = char.height();\n                height += cache[size];\n            }\n        }\n        return height + 5; // 5px余裕をもたせる\n    }\n\n    /**\n     * カーソル位置のX座標を返します\n     * @return {number} カーソル位置のX座標\n     */\n    cursorX() {\n        return this.cursorChar().x();\n    }\n\n    /**\n     * カーソル位置のY座標を返します\n     * @return {number} カーソル位置のY座標\n     */\n    cursorY() {\n        return this.cursorChar().y();\n    }\n\n    /**\n     * 自身の高さや幅を内部の各入力文字に合わせて調整します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    resize() {\n        const style = this.elem().style;\n        style.width = this.newWidth() + 'px';\n        style.height = this.newHeight() + 'px';\n        return this;\n    }\n\n    /**\n     * 自身の表示位置をカーソルに合わせます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    move() {\n        this.elem().style.left = this.cursorX() + 'px';\n        this.elem().style.top = this.cursorY() + 'px';\n        return this;\n    }\n\n    /**\n     * 自身を表示します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    show() {\n        this.elem().style.display = 'block';\n        return this;\n    }\n\n    /**\n     * 自身を非表示にします\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    hide() {\n        this.elem().style.display = 'none';\n        this.removeKeydownEventListener();\n        return this;\n    }//}}}\n\n    // 選択 {{{\n\n    /**\n     * 選択文節を次の文節に変更します。最後の文節から実行されれば、最初の文節が選択されます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    selectNext() {\n        return this.select(this.selectIndex() + 1);\n    }\n\n    /**\n     * 選択文節を前の文節に変更します。最初の文節から実行されれば、最後の文節が選択されます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    selectPrev() {\n        return this.select(this.selectIndex() - 1);\n    }\n\n    /**\n     * 文節番号がindexの文字を選択します。引数が負になれば最後の文節を、最大の文節番号を越えれば最初の文節を選択します\n     * @param {number} index 選択する文節のインデックス。負の数なら最後の文節、範囲より大きな数なら最初の文節が選択される\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    select(index) {\n        const maxIndex = this.lastChar().phraseNum();\n        if (index < 0) {\n            index = maxIndex;\n        }\n        if (index > maxIndex) {\n            index = 0;\n        }\n\n        for (let char of this.chars()) {\n            if (char.phraseNum() === index) {\n                char.select();\n            } else {\n                char.removeSelect();\n            }\n        }\n        this.convertContainer().views(index).active();\n        return this;\n    }//}}}\n\n    // --文字操作 {{{\n\n    /**\n     * 自身を空にして、文字入力を終了します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    empty() {\n        super.empty();\n        if (this.convertContainer().isActive()) {\n            this.convertContainer().empty().hide();\n        }\n        return this;\n    }\n\n    /**\n     * keycodeを追加した場合の新たな文字列で入力文字を置き換えます\n     * @param {number} keycode 追加するキーのキーコード\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    increace(keycode, bShift) {\n        const newInputStr = this._newString(keycode,bShift);\n\n        if (newInputStr === undefined || newInputStr.indexOf('undefined') !== -1) {\n            // 未定義文字(alt,ctrl,tabなど)はreturn\n            return this;\n        }\n\n        this.update(newInputStr);\n        this.resize();\n        return this;\n    }\n\n    /**\n     * bufferの最後の文字を削除します。内部に文字がなくなれば入力を終了します\n     * @return {InputChar} 削除した入力文字のインスタンス\n     */\n    decreace() {\n        if (!this.hasChar) {\n            return this;\n        }\n\n        const ret = this.lastChar().remove();\n        this.resize();\n        if (!this.hasChar()) {\n            this.hide();\n            this.container().addKeydownEventListener();\n        }\n        return ret;\n    }\n\n    /**\n     * 内部の入力文字をstrで置き換えます\n     * @param {string} str 置き換える文字列\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    update(str) {\n        this.empty();\n        for (let char of str) {\n            this.append(new InputChar(this.cursorChar().createData(char)));\n        }\n        this.show();\n        return this;\n    }\n\n    /**\n     * カーソル位置に文字を挿入し、後処理を行って入力状態を終了します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    print() {\n        this.cursor().insert(this.text(), true);\n        this.empty().hide();\n        this.container().addKeydownEventListener();\n        this.container().changeDisplay();\n        return this;\n    }\n\n    /**\n     * 入力文字をすべてカタカナに置き換えます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    toKatakanaAll() {\n        this.update(this._getKatakana());\n        return this;\n    }\n\n    /**\n     * 入力文字すべてを漢字変換します(非同期通信)\n     * @return {InputBuffer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    convert() {\n        this.convertContainer().convert(this.text());\n        return this;\n    }\n\n    /**\n     * インデックスがnumである文節の入力文字をstrで入れ替えます\n     * @param {number} num 入れ替える文節のインデックス\n     * @param {string} str 入れ替える文字列\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    insertPhrase(num, str) {\n        const phrases = this.phrases(num);\n        if (phrases.length === 0) { // 指定された文節番号の文字が見つからなかった\n            return this;\n        }\n        // 新しいInputCharをもともとあった文字の前に挿入していく\n        for (let c of str) {\n            const newChar = new InputChar(this.cursorChar().createData(c),num);\n            phrases[0].before(newChar);\n            if (phrases[0].isSelect()) { // 選択中の文節なら入替え文字も選択\n                newChar.select();\n            }\n        }\n        // 古い文字を削除\n        for (let old of phrases) {\n            old.remove();\n        }\n        this.resize();\n        return this;\n    }\n\n    /**\n     * インデックスがnumである文節の後ろにstrを追加します。追加した文字の文節番号は負の値になります\n     * @param {number} num 挿入位置の指定\n     * @param {string} str 挿入する文字列\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    insertPhraseAfter(num, str) {\n        const phrases = this.phrases(num);\n        if (phrases.length === 0) { // 指定された文節番号の文字が見つからなかった\n            return this;\n        }\n\n        const nextChar = phrases[phrases.length -1].next(); // 挿入用の文字。最後にはEOLがあるので、必ず存在する\n        for (let c of str) {\n            nextChar.before(new InputChar(this.cursorChar().createData(c),-num));\n        }\n        this.resize();\n        return this;\n    }\n\n    // --外からの情報取得\n\n    /**\n     * 現在の文字列にkeycodeを加えて作られる文字列を取得します。\n     *     未定義のkeycodeの場合はundefinedが文字列内に含まれますので注意してください\n     * @param {number} keycode 追加するキーのキーコード\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n     * @return {string} keycodeを追加して作られた文字列\n     */\n    _newString(keycode,bShift) {\n        const inputStr = this.text(); //もともとの文字列\n        if (bShift) {\n            return inputStr + KeyTable.shiftKey[keycode];\n        }\n\n        return KeyTable.makeString(inputStr,keycode); //keycodeを加えた新しい文字列\n    }\n\n    /**\n     * 現在の入力文字をカタカナに変換した場合の文字列を返します。\n     *     変換できない文字があれば変換せずに元の文字をそのまま連結します\n     * @return {string} カタカナに置き換えた文字列\n     */\n    _getKatakana() {\n        const str = this.text();\n        let rtnKatakana = '';\n        for (let char of str) {\n            const cKatakana = KeyTable.katakana[char];\n            if (cKatakana) {\n                rtnKatakana += cKatakana;\n            } else {\n                rtnKatakana += char; // 変換できなければ元の文字をそのまま連結\n            }\n        }\n        return rtnKatakana;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * keyeventがSentenceContainerから移動するかどうかを判定して前処理を行います(キーコードをincreace()して入力文字ができれば入力モードに移行します)\n     * @param {number} keycode 押下されたキーのキーコード\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    tryTransfer(keycode,bShift) {\n        this.increace(keycode,bShift);\n        if (this.hasChar()) {\n            this.addKeydownEventListener();\n            this.move();\n        }\n        return this;\n    }\n\n    /**\n     * 入力時のkeydownイベントリスナーを付加します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        this.container().removeKeydownEventListener();\n        this.convertContainer().removeKeydownEventListener();\n        super.addKeydownEventListener();\n        return this;\n    }\n\n    /**\n     * 入力時のkeydownイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     */\n    runKeydown(e,keycode) {\n        switch (keycode) {\n            case 8:\n                // backspace\n                this.decreace();\n                break;\n            case 13:\n                // enter\n                this.print();\n                break;\n            case 32:\n                // space\n                this.convert();\n                break;\n            case 118:\n                // F7\n                this.toKatakanaAll();\n                break;\n            default:\n                this.increace(keycode,e.shiftKey);\n                break;\n        }\n    }//}}}\n}//}}}\n\n\n/**\n * 漢字変換ビューを表すクラス。\n *     それぞれ一つの文節を担当し、複数の漢字変換候補を持ちます。\n *     また、内部には変換候補としてRowクラスのインスタンスを持ちます\n */\nexport class ConvertView extends AbstractHierarchy {\n    //{{{\n    // 文節番号は、ConvertViewのindex()と同じ\n\n    // constructor {{{\n    /**\n     * @param {object} data 変換候補を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     * [[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        super(ElemCreator.createConvertViewElement());\n        data[1].push(data[0]); // 末尾に明確にひらがなを入れる\n        for (let str of data[1]) {\n            const row = Row.createEmptyRow();\n            row.createPlainContent(str);\n            this.append(row);\n        }\n        this.removeClass('paragraph');\n        this.addClass('convert-view');\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 自分の属する漢字変換コンテナのインスタンスを新たに設定する、あるいは引数省略で現在属しているの漢字変換コンテナを取得します\n     * @param {ConvertContainer} [opt_newContainer] 新たに設定する漢字変換コンテナのインスタンス\n     * @return {ConvertView ConvertContainer} 自身のインスタンス(引数を渡した場合)、あるいは所属する漢字変換コンテナ(引数を省略した場合)\n     */\n    container(opt_newContainer) {\n        return this.parent(opt_newContainer);\n    }\n\n    /**\n     * 指定されたインデックスの変換候補を表すインスタンス、あるいは引数省略で変換候補インスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する変換候補のインデックス\n     * @return {Row Row[]} 指定されたインデックスの変換候補インスタンス(引数を渡した場合)、あるいは変換候補インスタンスの配列(引数を省略した場合)\n     */\n    rows(opt_index) {\n        return this.children(opt_index);\n    }\n\n    /**\n     * 現在選択中の行を取得します\n     * @return {Row} 現在選択中の行のインスタンス。選択行がなければ候補最後のひらがな行のインスタンス\n     */\n    getSelect() {\n        for (let row of this.rows()) {\n            if (row.hasClass('select')) {\n                return row;\n            }\n        }\n        return this.lastChild(); // 選択行がなければひらがな行\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * この候補一覧が可視化されているかどうかを返します\n     * @return {boolean} 可視化されていればtrue、そうでなければfalse\n     */\n    isActive() {\n        return this.hasClass('active');\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * この候補一覧が担当する文節のひらがなを文字列で返します\n     * @return {string} 担当文節のひらがな\n     */\n    hiragana() {\n        return this.lastChild().text(); // 最終行は必ずひらがな\n    }\n\n    /**\n     * ひらがなでの文字数を返します\n     * @return {number} ひらがなでの文字数\n     */\n    kanaLength() {\n        return this.hiragana().length;\n    }\n\n    /**\n     * 担当する文節のインデックスを返します\n     * @return {number} 担当文節のインデックス(０始まり)\n     */\n    phraseNum() {\n        return this.index();\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * この漢字変換候補一覧を可視化します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    active() {\n        for (let view of this.container().views()) {\n            if (view.hasClass('active')) {\n                view.removeClass('active');\n            }\n        }\n        this.addClass('active');\n        return this;\n    }\n\n    /**\n     * 変換候補の選択をひとつ左に移動します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    selectLeft() {\n        const index = this.getSelect().index() + 1;\n        this.select(index);\n        return this;\n    }\n\n    /**\n     * 変換候補の選択をひとつ右に移動します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    selectRight() {\n        const index = this.getSelect().index() - 1;\n        this.select(index);\n        return this;\n    }\n\n    /**\n     * 指定されたインデックスの変換候補を選択します\n     * @param {number} index 選択する候補のインデックス\n     * @return {ConvertView} 自身のインスタンス\n     */\n    select(index) {\n        if (index < 0) {\n            index = 0;\n        }\n        if (index >= this.childLength()) {\n            index = this.childLength() - 1;\n        }\n\n        for (let row of this.rows()) {\n            if (row.hasClass('select')) {\n                row.removeClass('select');\n            }\n        }\n\n        const newRow = this.rows(index);\n        newRow.addClass('select');\n        this.container().inputBuffer().insertPhrase(this.phraseNum(),newRow.text());\n        return this;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * 自身の最後に変換候補を追加します\n     * @param {Row} row 追加する変換候補\n     * @return {ConvertView} 自身のインスタンス\n     */\n    append(row) {\n        // DOM\n        this.elem().appendChild(row.elem());\n        // ポインタ調整\n        // view\n        if (this.hasChild()) {\n            this.lastChild().next(row);\n            row.prev(this.lastChild());\n        }\n        // parent\n        row.parent(this);\n        this.pushChild(row);\n        return this;\n    }\n\n    /**\n     * 自身の直前に変換候補一覧を挿入します\n     * @param {ConvertView} view 挿入する変換候補一覧\n     * @return {ConvertView} 自身のインスタンス\n     */\n    before(view) {\n        // DOM\n        this.container().elem().insertBefore(view.elem(),this.elem());\n\n        // 参照調整\n        // oldPrev - view - this\n\n        // view\n        const oldPrev = this.prev();\n        if (oldPrev) {\n            oldPrev.next(view);\n        }\n        view.prev(oldPrev);\n        view.next(this);\n        this.prev(view);\n        // paretn\n        view.container(this.container());\n        const pos = this.index();\n        this.container().insertChild(pos,view);\n        return this;\n    }\n\n    /**\n     * 自身の直後に変換候補一覧を挿入します\n     * @param {ConvertView} view 挿入する変換候補一覧\n     * @return {ConvertView} 自身のインスタンス\n     */\n    after(view) {\n        // DOM\n        if (this.hasNextSibling()) {\n            this.container().elem().insertBefore(view.elem(),this.next().elem());\n        } else {\n            this.container().elem().appendChild(view.elem());\n        }\n\n        // 参照調整\n        // this - view - oldNext\n\n        // view\n        const oldNext = this.next();\n        this.next(view);\n        view.prev(this);\n        view.next(oldNext);\n        if (oldNext) {\n            oldNext.prev(view);\n        }\n        // parent\n        view.container(this.container());\n        const pos = this.index() + 1;\n        this.container().insertChild(pos,view);\n        return this;\n    }\n\n    /**\n     * 自身を削除します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    remove() {\n        // DOM\n        this.container().elem().removeChild(this.elem());\n\n        // 参照調整\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n\n        // view\n        const oldPrev = this.prev();\n        const oldNext = this.next();\n        if (oldPrev) {\n            oldPrev.next(oldNext);\n        }\n        if (oldNext) {\n            oldNext.prev(oldPrev);\n        }\n        this.prev(null);\n        this.next(null);\n        // parent\n        this.container().deleteChild(this);\n        this.container(null);\n        return this;\n    }\n\n    /**\n     * 自身をviewと入れ替えます\n     * @param {ConvertView} view 入れ替える変換候補一覧\n     * @return {ConvertView} 自身のインスタンス\n     */\n    replace(view) {\n        this.before(view);\n        if (this.isActive()) {\n            view.active();\n        }\n        return this.remove();\n    }\n\n    /**\n     * 自身が担当する文節をカタカナに変換します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    toKatakana() {\n        this.container().inputBuffer().insertPhrase(this.phraseNum(),this._getKatakana());\n        return this;\n    }\n\n    /**\n     * 自身が担当する文節のカタカナを文字列で取得します\n     * @return {string} カタカナに変換した場合の文字列\n     */\n    _getKatakana() {\n        const str = this.hiragana();\n        let rtnKatakana = '';\n        for (let char of str) {\n            const cKatakana = KeyTable.katakana[char];\n            if (cKatakana) {\n                rtnKatakana += cKatakana;\n            } else {\n                rtnKatakana += char; // 変換できなければ元の文字をそのまま連結\n            }\n        }\n        return rtnKatakana;\n    }//}}}\n}//}}}\n\n\n/**\n * 変換候補一覧を束ねる漢字変換コンテナを表すクラス\n */\nexport class ConvertContainer extends AbstractHierarchy {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {InputBuffer} inputBuffer 入力元のインスタンス\n     */\n    constructor(inputBuffer) {\n        super(document.getElementById('convert_container'));\n        this._inputBuffer = inputBuffer;\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 入力元のインスタンスを取得します\n     * @return {InputBuffer} 入力元のインスタンス\n     */\n    inputBuffer() {\n        return this._inputBuffer;\n    }\n\n    /**\n     * 指定された変換候補一覧、あるいは引数省略で変換候補一覧の配列を取得します\n     * @param {number} [opt_index] 取得する候補一覧のインデックス\n     * @return {ConvertView ConvertView[]} 指定された候補一覧(引数を渡した場合)、あるいは候補一覧の配列(引数を省略した場合)\n     */\n    views(opt_index) {\n        return super.children(opt_index);\n    }\n\n    /**\n     * 現在アクティブになっている変換候補一覧のインスタンスを取得します\n     * @return {ConvertView} 現在アクティブな変換候補一覧のインスタンス。なければnull\n     */\n    activeView() {\n        for (let view of this.views()) {\n            if (view.isActive()) {\n                return view;\n            }\n        }\n        return null;\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * 漢字変換が行われているところかどうかを返します\n     * @return {boolean} 候補一覧がひとつでも内部にあればtrue、そうでなければfalse\n     */\n    isActive() {\n        return this.childLength() > 0;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * 表示位置をカーソル横に移動します\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    reposition() {\n        const x = this.cursorX();\n        const y = this.cursorY();\n        this.elem().style.top = y + 'px';\n        this.elem().style.left = (x - this.width()) + 'px';\n        return this;\n    }\n\n    /**\n     * カーソル位置のX座標を返します\n     * @return {number} カーソル位置のX座標\n     */\n    cursorX() {\n        return this.inputBuffer().cursorX();\n    }\n\n    /**\n     * カーソル位置のY座標を返します\n     * @return {number} カーソル位置のY座標\n     */\n    cursorY() {\n        return this.inputBuffer().cursorY();\n    }\n\n    /**\n     * 自身を表示します\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    show() {\n        this.elem().style.display = 'block';\n        return this;\n    }\n\n    /**\n     * 自身を非表示にします\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    hide() {\n        this.elem().style.display = 'none';\n        this.removeKeydownEventListener();\n        return this;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * カーソル位置から文字を挿入して、内部の変換候補一覧を破棄します\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    print() {\n        this.inputBuffer().print();\n        return this;\n    }\n\n    /**\n     * 内部に変換候補一覧のインスタンス群を構築します\n     * @param {object} data 文節分け及び変換候補を示すオブジェクト<br>\n     * <pre>\n     * <code>\n     *  // data形式例\n     * [[ひらがな,[漢字１,漢字２,漢字３]],[ひらがな２,[漢字４,漢字５]],[[ひらがな３,[漢字６,漢字７]]]]\n     * </code>\n     * </pre>\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    createViews(data) {\n        this.empty();\n        for (let phraseData of data) {\n            this.append(new ConvertView(phraseData));\n        }\n        return this;\n    }\n\n    /**\n     * 漢字変換を始めます(非同期通信)\n     * @param {string} str 変換する文字列\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    convert(str) {\n        Util.get('/tategaki/Convert', function (json) {\n            this.createViews(json);\n            this.inputBuffer().setPhraseNum();\n            // すべて変換第一候補を選択する\n            for (let view of this.views()) {\n                view.select(0);\n            }\n            // 最初の文節を選択\n            this.inputBuffer().select(0);\n\n            this.reposition();\n            this.addKeydownEventListener();\n        }.bind(this), {\n            sentence: str\n        });\n        this.show();\n\n        return this;\n    }\n\n    /**\n     * 文節区切りをひとつ前にずらして変換し直します(非同期通信)\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    shiftUp() {\n        const activeView = this.activeView();\n\n        if (activeView.kanaLength() === 1) {\n            return this;\n        }\n\n        // 最終文節から\n        // 最後の一字を分離して、二文節を変換し直す\n        if (activeView.isLast()) {\n            const activeKana = activeView.hiragana();\n            const sendString = activeKana.slice(0, -1) + ',' + activeKana.slice(-1);\n            Util.get('/tategaki/Convert', function (json) {\n                this.replace(activeView.phraseNum(),json);\n            }.bind(this), {\n                sentence: sendString\n            });\n            return this;\n        }\n\n        // 選択文字列から最後の一文字を取り除き、その次の文節の頭につなげてそれぞれを変換し直す\n        const activeKana = activeView.hiragana();\n        const nextView = activeView.next();\n        const nextKana = nextView.hiragana();\n        const sendString = activeKana.slice(0,-1) + ',' + activeKana.slice(-1) + nextKana;\n        Util.get('/tategaki/Convert', function (json) {\n            const newFirst = new ConvertView(json[0]);\n            activeView.replace(newFirst);\n            newFirst.select(0);\n            const newSecond = new ConvertView(json[1]);\n            nextView.replace(newSecond);\n            newSecond.select(0);\n        }, {\n            sentence: sendString\n        });\n        return this;\n    }\n\n    /**\n     * 文節区切りをひとつ下にずらして変換し直します(非同期通信)\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    shiftDown() {\n        const activeView = this.activeView();\n        const nextView = activeView.next();\n\n        if (activeView.isLast()) {\n            return this;\n        }\n\n        // 次の文節の文字数が１文字だけなら融合して、１文節として変換する\n        if (nextView.kanaLength() === 1) {\n            const nextPhrase = this.inputBuffer().phrases(nextView.phraseNum())[0];\n            // 文節を区切られないよう、,を末尾に追加する\n            const sendString = activeView.hiragana() + nextView.hiragana() + ',';\n            Util.get('/tategaki/Convert', function (json) {\n                const newView = new ConvertView(json[0]);\n                activeView.replace(newView);\n                nextView.remove();\n                nextPhrase.remove();\n                newView.select(0);\n                this.inputBuffer().setPhraseNum();\n            }.bind(this), {\n                sentence: sendString\n            });\n            return this;\n        }\n\n        // 次の文節が二文字以上\n        // 次の文節の１文字目を選択文節に移動して、それぞれを変換し直す\n        const activeKana = activeView.hiragana();\n        const nextKana = nextView.hiragana();\n        const sendString = activeKana + nextKana.slice(0,1) + ',' + nextKana.slice(1);\n        Util.get('/tategaki/Convert', function (json) {\n            const newFirst = new ConvertView(json[0]);\n            activeView.replace(newFirst);\n            newFirst.select(0);\n            const newSecond = new ConvertView(json[1]);\n            nextView.replace(newSecond);\n            newSecond.select(0);\n        }, {\n            sentence: sendString\n        });\n        return this;\n    }\n\n    /**\n     * 入力中の文字が二文字以上あれば最後の１音のみ削除して選択文節を変換し直します(非同期通信)。\n     *     入力中の文字がひらがなにして１文字しかなければ全て破棄して入力を終了します\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    backSpace() {\n        const activeView = this.activeView();\n        // buffer文字がひらがなにして一文字しかない\n        // 文字を削除してinput終了\n        if (activeView.isOnlyChild() && activeView.kanaLength() === 1) {\n            this.empty();\n            this.inputBuffer().decreace();\n            return this;\n        }\n\n        // 文節がひらがなにして一文字しかない\n        // その文節を削除してひとつ前の文節を選択する\n        if (activeView.kanaLength() === 1) {\n            const phraseNum = activeView.phraseNum();\n            const phraseChar = this.inputBuffer().phrases(phraseNum)[0];\n            phraseChar.remove();\n            activeView.remove();\n            this.inputBuffer().setPhraseNum()\n                .select(phraseNum > 0 ? phraseNum - 1 : phraseNum); // 一つ前の文節がなければ、一つ次の文節\n            return this;\n        }\n\n        // 文節にひらがなにして二文字以上ある\n        // 最後の一字を削除して、その文節を変換し直す\n        const phraseNum = activeView.phraseNum();\n        const newString = activeView.hiragana().slice(0,-1) + ','; // 文節を区切られないよう、,を末尾に追加する\n        Util.get('/tategaki/Convert', function (json) {\n            this.replace(phraseNum,json);\n        }.bind(this), {\n            sentence: newString\n        });\n        return this;\n    }\n\n    /**\n     * インデックスがnumの文節の変換候補一覧を、新たなdataで入れ替えます\n     * @param {number} num 入れ替える文節のインデックス\n     * @param {object} data 変換候補を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     * [[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n     *\t</code>\n     *\t</pre>\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    replace(num,data) {\n        const oldView = this.views(num);\n        // 文節番号を振り直した後でないとview.select()できない(中でinsertPhrase()をしているため)ので、いったん新しいインスタンスを入れておく\n        const newViews = [];\n        // viewを入れ替え、bufferにはいったんひらがなを挿入する\n        for (let phraseData of data.entries()) {\n            // view\n            const newView = new ConvertView(phraseData[1]);\n            newViews.push(newView);\n            oldView.before(newView);\n            // input_buffer\n            // setPhraseNum()は、select()する前のviewではひらがなの長さを使って文節番号を割り振る。そのため、いったんひらがなをbufferに追加する\n            if (phraseData[0] === 0) { // ひとつめだけ入替えで、他はその後に追加していく\n                // 古いbuffer文字はここでなくなる\n                this.inputBuffer().insertPhrase(num,oldView.prev().hiragana());\n            } else {\n                // HACK:追加分の文字の順番がこの時点ではおかしくなるが、合計のひらがなの数は正しくなっているので、buffer.setPhraseNum()とnewView.select(0)で正しく文字が置き換わる\n                this.inputBuffer().insertPhraseAfter(num,oldView.prev().hiragana());\n            }\n        }\n        oldView.remove();\n\n        // 文節番号の振り直し\n        this.inputBuffer().setPhraseNum();\n        // 最初の候補で置き換える\n        for (let newView of newViews) {\n            newView.select(0);\n        }\n        if (oldView.isActive()) {\n            newViews[0].active();\n        }\n        return this;\n    }\n\n    /**\n     * 自身の最後に変換候補一覧を追加します\n     * @param {ConvertContainer} view 追加する変換候補一覧のインスタンス\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    append(view) {\n        this.elem().appendChild(view.elem());\n        if (this.hasChild()) {\n            this.lastChild().next(view);\n            view.prev(this.lastChild());\n        }\n        view.container(this);\n        this.pushChild(view);\n        return this;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * 漢字変換中のkeydownイベントリスナーを付加します。重ねがけは無効となります\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        this.inputBuffer().removeKeydownEventListener()\n            .container().removeKeydownEventListener();\n        super.addKeydownEventListener();\n        return this;\n    }\n\n    /**\n     * keydownイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     */\n    runKeydown(e,keycode) {\n        switch (keycode) {\n            case 8:\n                this.backSpace();\n                break;\n            case 13:\n                // Enter\n                this.print();\n                break;\n            case 32:\n            case 37:\n                // space\n                // Left\n                this.activeView().selectLeft();\n                break;\n            case 38:\n                // Up\n                if (e.shiftKey) {\n                    this.shiftUp();\n                } else {\n                    this.inputBuffer().selectPrev();\n                }\n                break;\n            case 39:\n                // Right\n                this.activeView().selectRight();\n                break;\n            case 40:\n                // Down\n                if (e.shiftKey) {\n                    this.shiftDown();\n                } else {\n                    this.inputBuffer().selectNext();\n                }\n                break;\n            case 118:\n                // F7\n                this.activeView().toKatakana();\n                break;\n            default:\n                break;\n        }\n    }//}}}\n}//}}}\n",
    "static": true,
    "longname": "js/input.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "InputChar",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~InputChar",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{InputChar}",
    "description": "入力文字を表すクラス",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "Char"
    ]
  },
  {
    "__docId__": 392,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#constructor",
    "access": null,
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文字を表すオブジェクト<br>\n例\n<pre>\n<code>\n{\n\t\"char\":\"あ\",\n\t\"decolation\":[\"decolation-color-blue\"]\n\t\"fontSize\": \"auto\"\n}\n</code>\n</pre>"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-1",
        "defaultRaw": -1,
        "name": "opt_phraseNum",
        "description": "文節のインデックス"
      }
    ]
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "isPhraseNum",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#isPhraseNum",
    "access": null,
    "description": "自身の文節番号がnumであるかどうかを返します",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "判定するインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の文節番号がnumであればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "isSelect",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#isSelect",
    "access": null,
    "description": "自身が選択されているかどうかを表します",
    "lineNumber": 49,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が選択されていればtrue、そうでなければfalse。漢字変換が一度もされていなければfalse"
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "phraseNum",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#phraseNum",
    "access": null,
    "description": "この文字の文節番号をopt_newNumに設定する、あるいは引数省略で現在の文節番号を取得します",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newNum",
        "description": "新たに設定する文節番号(０始まり)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputChar number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の文節のインデックス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "_phraseNum",
    "memberof": "js/input.js~InputChar",
    "static": false,
    "longname": "js/input.js~InputChar#_phraseNum",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "select",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#select",
    "access": null,
    "description": "この文字を選択状態にします",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "removeSelect",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#removeSelect",
    "access": null,
    "description": "この文字を非選択状態にします",
    "lineNumber": 85,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 399,
    "kind": "class",
    "name": "InputBuffer",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~InputBuffer",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{InputBuffer}",
    "description": "入力された文字をいったん保持するバッファーを表すクラス。\n    内部の子にInputCharのインスタンス群を持ちます。\n    また、一度も漢字変換がされず文節番号がすべて-1の場合と、漢字変換が行われ文節が分けられている場合と２つの状態がある",
    "lineNumber": 97,
    "interface": false,
    "extends": [
      "Row"
    ]
  },
  {
    "__docId__": 400,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "自身の属する文章コンテナのインスタンス"
      }
    ]
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "_container",
    "memberof": "js/input.js~InputBuffer",
    "static": false,
    "longname": "js/input.js~InputBuffer#_container",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "_convertContainer",
    "memberof": "js/input.js~InputBuffer",
    "static": false,
    "longname": "js/input.js~InputBuffer#_convertContainer",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "container",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#container",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを取得します",
    "lineNumber": 115,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナ"
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "cursor",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursor",
    "access": null,
    "description": "カーソルのインスタンスを取得します",
    "lineNumber": 123,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "カーソルのインスタンス"
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "cursorChar",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursorChar",
    "access": null,
    "description": "カーソルのある文字のインスタンスを取得します",
    "lineNumber": 131,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "convertContainer",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#convertContainer",
    "access": null,
    "description": "漢字変換コンテナのインスタンスを取得します",
    "lineNumber": 139,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "漢字変換コンテナのインスタンス"
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "phrases",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#phrases",
    "access": null,
    "description": "指定された文節番号の入力文字インスタンスを配列にして返します",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "集める入力文字の文節番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputChar[]"
      ],
      "spread": false,
      "description": "指定された文節番号の入力文字インスタンスの配列"
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "selectPhrases",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectPhrases",
    "access": null,
    "description": "選択中の文節の入力文字インスタンスを返します",
    "lineNumber": 162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar[]"
      ],
      "spread": false,
      "description": "選択中の入力文字インスタンスの配列。選択されていなければ空の配列"
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "isDisplay",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#isDisplay",
    "access": null,
    "description": "自身が可視化されている(文字入力中)かどうかを返します",
    "lineNumber": 178,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が可視化されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "setPhraseNum",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#setPhraseNum",
    "access": null,
    "description": "各入力文字に文節番号をふります。変換候補一覧群を作成した後で使用してください",
    "lineNumber": 188,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "selectIndex",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectIndex",
    "access": null,
    "description": "選択されている文節のインデックスを返します",
    "lineNumber": 204,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "選択文節のインデックス。選択されていなければ-1"
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "width",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#width",
    "access": null,
    "description": "自身の幅を取得します。文章内のRowと異なり回転されていないため、css上の幅と一致します",
    "lineNumber": 219,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "height",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#height",
    "access": null,
    "description": "自身の高さを取得します。文章内のRowと異なり回転されていないため、css上の高さと一致します",
    "lineNumber": 227,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "newWidth",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#newWidth",
    "access": "private",
    "description": "",
    "lineNumber": 236,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された幅のピクセル数"
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "newHeight",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#newHeight",
    "access": "private",
    "description": "",
    "lineNumber": 256,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された高さのピクセル数"
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "cursorX",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursorX",
    "access": null,
    "description": "カーソル位置のX座標を返します",
    "lineNumber": 275,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のX座標"
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "cursorY",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursorY",
    "access": null,
    "description": "カーソル位置のY座標を返します",
    "lineNumber": 283,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のY座標"
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "resize",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#resize",
    "access": null,
    "description": "自身の高さや幅を内部の各入力文字に合わせて調整します",
    "lineNumber": 291,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "move",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#move",
    "access": null,
    "description": "自身の表示位置をカーソルに合わせます",
    "lineNumber": 302,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "show",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#show",
    "access": null,
    "description": "自身を表示します",
    "lineNumber": 312,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "hide",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#hide",
    "access": null,
    "description": "自身を非表示にします",
    "lineNumber": 321,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "selectNext",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectNext",
    "access": null,
    "description": "選択文節を次の文節に変更します。最後の文節から実行されれば、最初の文節が選択されます",
    "lineNumber": 333,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "selectPrev",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectPrev",
    "access": null,
    "description": "選択文節を前の文節に変更します。最初の文節から実行されれば、最後の文節が選択されます",
    "lineNumber": 341,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "select",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#select",
    "access": null,
    "description": "文節番号がindexの文字を選択します。引数が負になれば最後の文節を、最大の文節番号を越えれば最初の文節を選択します",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "選択する文節のインデックス。負の数なら最後の文節、範囲より大きな数なら最初の文節が選択される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "empty",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#empty",
    "access": null,
    "description": "自身を空にして、文字入力を終了します",
    "lineNumber": 376,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "increace",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#increace",
    "access": null,
    "description": "keycodeを追加した場合の新たな文字列で入力文字を置き換えます",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "追加するキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "decreace",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#decreace",
    "access": null,
    "description": "bufferの最後の文字を削除します。内部に文字がなくなれば入力を終了します",
    "lineNumber": 407,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "削除した入力文字のインスタンス"
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "update",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#update",
    "access": null,
    "description": "内部の入力文字をstrで置き換えます",
    "lineNumber": 426,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "置き換える文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "print",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#print",
    "access": null,
    "description": "カーソル位置に文字を挿入し、後処理を行って入力状態を終了します",
    "lineNumber": 439,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "toKatakanaAll",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#toKatakanaAll",
    "access": null,
    "description": "入力文字をすべてカタカナに置き換えます",
    "lineNumber": 451,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "convert",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#convert",
    "access": null,
    "description": "入力文字すべてを漢字変換します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 461,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "insertPhrase",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#insertPhrase",
    "access": null,
    "description": "インデックスがnumである文節の入力文字をstrで入れ替えます",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "入れ替える文節のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "入れ替える文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "insertPhraseAfter",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#insertPhraseAfter",
    "access": null,
    "description": "インデックスがnumである文節の後ろにstrを追加します。追加した文字の文節番号は負の値になります",
    "lineNumber": 499,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "挿入位置の指定"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "挿入する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "_newString",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#_newString",
    "access": null,
    "description": "現在の文字列にkeycodeを加えて作られる文字列を取得します。\n    未定義のkeycodeの場合はundefinedが文字列内に含まれますので注意してください",
    "lineNumber": 522,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "追加するキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "keycodeを追加して作られた文字列"
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "_getKatakana",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#_getKatakana",
    "access": null,
    "description": "現在の入力文字をカタカナに変換した場合の文字列を返します。\n    変換できない文字があれば変換せずに元の文字をそのまま連結します",
    "lineNumber": 536,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "カタカナに置き換えた文字列"
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "tryTransfer",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#tryTransfer",
    "access": null,
    "description": "keyeventがSentenceContainerから移動するかどうかを判定して前処理を行います(キーコードをincreace()して入力文字ができれば入力モードに移行します)",
    "lineNumber": 558,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#addKeydownEventListener",
    "access": null,
    "description": "入力時のkeydownイベントリスナーを付加します",
    "lineNumber": 571,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#runKeydown",
    "access": null,
    "description": "入力時のkeydownイベントの実行内容です",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ]
  },
  {
    "__docId__": 439,
    "kind": "class",
    "name": "ConvertView",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~ConvertView",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{ConvertView}",
    "description": "漢字変換ビューを表すクラス。\n    それぞれ一つの文節を担当し、複数の漢字変換候補を持ちます。\n    また、内部には変換候補としてRowクラスのインスタンスを持ちます",
    "lineNumber": 614,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 440,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#constructor",
    "access": null,
    "description": "",
    "lineNumber": 628,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "変換候補を表すオブジェクト<br>\n例\n<pre>\n<code>\n[[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "container",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#container",
    "access": null,
    "description": "自分の属する漢字変換コンテナのインスタンスを新たに設定する、あるいは引数省略で現在属しているの漢字変換コンテナを取得します",
    "lineNumber": 647,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertContainer"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newContainer",
        "description": "新たに設定する漢字変換コンテナのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは所属する漢字変換コンテナ(引数を省略した場合)"
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "rows",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#rows",
    "access": null,
    "description": "指定されたインデックスの変換候補を表すインスタンス、あるいは引数省略で変換候補インスタンスの配列を取得します",
    "lineNumber": 656,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する変換候補のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Row[]"
      ],
      "spread": false,
      "description": "指定されたインデックスの変換候補インスタンス(引数を渡した場合)、あるいは変換候補インスタンスの配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "getSelect",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#getSelect",
    "access": null,
    "description": "現在選択中の行を取得します",
    "lineNumber": 664,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "現在選択中の行のインスタンス。選択行がなければ候補最後のひらがな行のインスタンス"
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "isActive",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#isActive",
    "access": null,
    "description": "この候補一覧が可視化されているかどうかを返します",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "可視化されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "hiragana",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#hiragana",
    "access": null,
    "description": "この候補一覧が担当する文節のひらがなを文字列で返します",
    "lineNumber": 689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "担当文節のひらがな"
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "kanaLength",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#kanaLength",
    "access": null,
    "description": "ひらがなでの文字数を返します",
    "lineNumber": 697,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ひらがなでの文字数"
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "phraseNum",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#phraseNum",
    "access": null,
    "description": "担当する文節のインデックスを返します",
    "lineNumber": 705,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "担当文節のインデックス(０始まり)"
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "active",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#active",
    "access": null,
    "description": "この漢字変換候補一覧を可視化します",
    "lineNumber": 715,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "selectLeft",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#selectLeft",
    "access": null,
    "description": "変換候補の選択をひとつ左に移動します",
    "lineNumber": 729,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "selectRight",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#selectRight",
    "access": null,
    "description": "変換候補の選択をひとつ右に移動します",
    "lineNumber": 739,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "select",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#select",
    "access": null,
    "description": "指定されたインデックスの変換候補を選択します",
    "lineNumber": 750,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "選択する候補のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "append",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#append",
    "access": null,
    "description": "自身の最後に変換候補を追加します",
    "lineNumber": 777,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "追加する変換候補"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "before",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#before",
    "access": null,
    "description": "自身の直前に変換候補一覧を挿入します",
    "lineNumber": 797,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "挿入する変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "after",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#after",
    "access": null,
    "description": "自身の直後に変換候補一覧を挿入します",
    "lineNumber": 824,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "挿入する変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "remove",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#remove",
    "access": null,
    "description": "自身を削除します",
    "lineNumber": 854,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "replace",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#replace",
    "access": null,
    "description": "自身をviewと入れ替えます",
    "lineNumber": 883,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "入れ替える変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "toKatakana",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#toKatakana",
    "access": null,
    "description": "自身が担当する文節をカタカナに変換します",
    "lineNumber": 895,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "_getKatakana",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#_getKatakana",
    "access": null,
    "description": "自身が担当する文節のカタカナを文字列で取得します",
    "lineNumber": 904,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "カタカナに変換した場合の文字列"
    }
  },
  {
    "__docId__": 459,
    "kind": "class",
    "name": "ConvertContainer",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~ConvertContainer",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{ConvertContainer}",
    "description": "変換候補一覧を束ねる漢字変換コンテナを表すクラス",
    "lineNumber": 923,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 460,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 929,
    "params": [
      {
        "nullable": null,
        "types": [
          "InputBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "inputBuffer",
        "description": "入力元のインスタンス"
      }
    ]
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "_inputBuffer",
    "memberof": "js/input.js~ConvertContainer",
    "static": false,
    "longname": "js/input.js~ConvertContainer#_inputBuffer",
    "access": null,
    "description": null,
    "lineNumber": 931,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "inputBuffer",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#inputBuffer",
    "access": null,
    "description": "入力元のインスタンスを取得します",
    "lineNumber": 940,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "入力元のインスタンス"
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "views",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#views",
    "access": null,
    "description": "指定された変換候補一覧、あるいは引数省略で変換候補一覧の配列を取得します",
    "lineNumber": 949,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する候補一覧のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView ConvertView[]"
      ],
      "spread": false,
      "description": "指定された候補一覧(引数を渡した場合)、あるいは候補一覧の配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "activeView",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#activeView",
    "access": null,
    "description": "現在アクティブになっている変換候補一覧のインスタンスを取得します",
    "lineNumber": 957,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "現在アクティブな変換候補一覧のインスタンス。なければnull"
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "isActive",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#isActive",
    "access": null,
    "description": "漢字変換が行われているところかどうかを返します",
    "lineNumber": 972,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "候補一覧がひとつでも内部にあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "reposition",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#reposition",
    "access": null,
    "description": "表示位置をカーソル横に移動します",
    "lineNumber": 982,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "cursorX",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#cursorX",
    "access": null,
    "description": "カーソル位置のX座標を返します",
    "lineNumber": 994,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のX座標"
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "cursorY",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#cursorY",
    "access": null,
    "description": "カーソル位置のY座標を返します",
    "lineNumber": 1002,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のY座標"
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "show",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#show",
    "access": null,
    "description": "自身を表示します",
    "lineNumber": 1010,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "hide",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#hide",
    "access": null,
    "description": "自身を非表示にします",
    "lineNumber": 1019,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "print",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#print",
    "access": null,
    "description": "カーソル位置から文字を挿入して、内部の変換候補一覧を破棄します",
    "lineNumber": 1031,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "createViews",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#createViews",
    "access": null,
    "description": "内部に変換候補一覧のインスタンス群を構築します",
    "lineNumber": 1047,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文節分け及び変換候補を示すオブジェクト<br>\n<pre>\n<code>\n // data形式例\n[[ひらがな,[漢字１,漢字２,漢字３]],[ひらがな２,[漢字４,漢字５]],[[ひらがな３,[漢字６,漢字７]]]]\n</code>\n</pre>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "convert",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#convert",
    "access": null,
    "description": "漢字変換を始めます(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1061,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "変換する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "shiftUp",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#shiftUp",
    "access": null,
    "description": "文節区切りをひとつ前にずらして変換し直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1087,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "shiftDown",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#shiftDown",
    "access": null,
    "description": "文節区切りをひとつ下にずらして変換し直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1130,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "backSpace",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#backSpace",
    "access": null,
    "description": "入力中の文字が二文字以上あれば最後の１音のみ削除して選択文節を変換し直します(非同期通信)。\n    入力中の文字がひらがなにして１文字しかなければ全て破棄して入力を終了します",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1180,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "replace",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#replace",
    "access": null,
    "description": "インデックスがnumの文節の変換候補一覧を、新たなdataで入れ替えます",
    "lineNumber": 1226,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "入れ替える文節のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "変換候補を表すオブジェクト<br>\n例\n<pre>\n<code>\n[[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n</code>\n</pre>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "append",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#append",
    "access": null,
    "description": "自身の最後に変換候補一覧を追加します",
    "lineNumber": 1265,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "追加する変換候補一覧のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#addKeydownEventListener",
    "access": null,
    "description": "漢字変換中のkeydownイベントリスナーを付加します。重ねがけは無効となります",
    "lineNumber": 1282,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容です",
    "lineNumber": 1294,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ]
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "js/other-classes.js",
    "content": "'use strict';\n/* global ColorDoMemory, BoldDoMemory, ItalicDoMemory, ElemCreator, PrintDoMemory, Char, DeleteDoMemory, LineBreakDoMemory, getSelection */  // jshint ignore:line\n/*\n *\tjQyeryの使用箇所:width(),height(),addwheelEventlistener(),removeWheelEventListener(),bootstrap関係\n */\n\n// Class\n/**\n * メニューバーを担当するクラス\n *     メニューバー上のボタンによるイベントを一括して請け負います\n */\nexport class Menu {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 対応する文章コンテナ\n     */\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._fontSizeInputElem = document.getElementById('fontsize_input');\n        this._confStrLenElem = document.getElementById('conf_str_len');\n        this._confRowLenElem = document.getElementById('conf_row_len');\n        this.addEventListeners();\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * このMenuが対応する文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} SentenceContainerのインスタンス\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * 設定モーダルの文字数inputフォームのDOM要素を返します\n     * @return {Element} 文字数設定inputフォームのDOM要素\n     */\n    confStrLenElem() {\n        return this._confStrLenElem;\n    }\n\n    /**\n     * 設定モーダルの行数inputフォームのDOM要素を返します\n     * @return {Element} 行数設定inputフォームのDOM要素\n     */\n    confRowLenElem() {\n        return this._confRowLenElem;\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * フォントサイズinputフォームに値を設定する、あるいは引数省略で現在のinputフォームの値を返します\n     * @param {number string} [opt_newSize] inputに設定する値(数値か、文字列の'auto')\n     * @return {Menu number string} 自身のインスタンス(引数を渡した場合)、\n     *     あるいは現在のinputフォームの値(引数を省略した場合。'auto'の場合は文字列で返す)\n     */\n    fontSizeInput(opt_newSize) {\n        if (opt_newSize === undefined) {\n            return this._fontSizeInputElem.value === 'auto' ?\n                'auto' : parseInt(this._fontSizeInputElem.value);\n        }\n\n        this._fontSizeInputElem.value = opt_newSize;\n        return this;\n    }\n\n    /**\n     * 現在アクティブになっている文字装飾のクラスを配列にします\n     * @return {string[]} 現在アクティブになっている文字装飾のクラスの配列\n     */\n    charDecolations() {\n        const ret = [];\n        if (this.boldButton()) {\n            ret.push('decolation-font-bold');\n        }\n        if (this.italicButton()) {\n            ret.push('decolation-font-italic');\n        }\n        if (this.colorButton() !== 'black') {\n            ret.push('decolation-color-'+ this.colorButton());\n        }\n        return ret;\n    }\n\n    /**\n     * 現在の設定情報を表すオブジェクトを作成します\n     * <pre>\n     * {\n     * \t\"strLen\": \"%d\",\n     * \t\"rowLen\" : \"%d\"\n     * }\n     * </pre>\n     * @return {object} 現在の設定情報を表すオブジェクト\n     */\n    configueData() {\n        const ret = {};\n        ret.strLen = this.confStrLenElem().value;\n        ret.rowLen = this.confRowLenElem().value;\n        return ret;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * 文字色ボタンに色を付けます\n     *     引数を省略すると現在の色を取得します\n     * @param {string} [opt_color] 文字色ボタンにつける色の名前\n     * @return {Menu string} 自身のインスタンス(引数を渡した場合) 現在の文字色ボタンに付いている色の名前(引数を省略した場合)\n     */\n    colorButton(opt_color) {\n        const eColorButton = document.getElementById('color_btn');\n        if(opt_color) {\n            const oldColor = eColorButton.className.match(/select-\\S+/);\n            const newColor = opt_color;\n            if (oldColor) {\n                eColorButton.classList.remove(oldColor[0]);\n            }\n            if (newColor === 'black') {\n                return this;\n            }\n            eColorButton.classList.add('select-'+ newColor);\n            return this;\n        }\n        if (opt_color === undefined) {\n            const color = eColorButton.className.match(/select-(\\S+)/);\n            return color ? color[1] : 'black';\n        }\n    }\n\n    /**\n     * 選択範囲の文字色を変えます\n     * @param {string} color 新しい文字色\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    addColor(color, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new ColorDoMemory(chars, color));\n        }\n        for (let char of chars) {\n            char.color(color);\n        }\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 太字ボタンのオンオフを切り替えます 引数省略で、現在の太字ボタンのオンオフをbool値で返します\n     * @param {boolean} [opt_bl] trueで太字ボタンをオンにする。falseでオフにする\n     * @return {Menu boolean} 自身のインスタンス(引数を渡した場合) 現在の太字ボタンの状態(引数省略の場合)\n     */\n    boldButton(opt_bl) {\n        const eButton = document.getElementById('btn-bold');\n        if (opt_bl === undefined) {\n            return eButton.classList.contains('active');\n        }\n\n        if (opt_bl) {\n            eButton.classList.add('active');\n        } else {\n            eButton.classList.remove('active');\n        }\n        return this;\n    }\n\n    /**\n     * 選択範囲を太字にします。または太字を外します\n     * @param {boolean} bl trueで太字にする。falseで外す\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    bold(bl, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new BoldDoMemory(chars, bl));\n        }\n        for (let char of chars) {\n            char.bold(bl);\n        }\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 斜体ボタンのオンオフを切り替えます 引数省略で、現在の斜体ボタンのオンオフをbool値で返します\n     * @param {boolean} [opt_bl] trueで太字ボタンをオンにする。falseでオフにする\n     * @return {Menu boolean} 自身のインスタンス(引数を渡した場合) 現在の斜体ボタンの状態(引数省略の場合)\n     */\n    italicButton(opt_bl) {\n        const eButton = document.getElementById('btn-italic');\n        if (opt_bl === undefined) {\n            return eButton.classList.contains('active');\n        }\n\n        if (opt_bl) {\n            eButton.classList.add('active');\n        } else {\n            eButton.classList.remove('active');\n        }\n        return this;\n    }\n\n    /**\n     * 選択範囲を斜体にします。または太字を外します\n     * @param {boolean} bl trueで斜体にする。falseで外す\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    italic(bl, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new ItalicDoMemory(chars, bl));\n        }\n        for (let char of chars) {\n            char.italic(bl);\n        }\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 選択範囲のフォントサイズを変更します\n     * @param {number} size 新しいフォントサイズ\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    fontSize(size, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(chars, size);\n        }\n        for (let char of chars) {\n            char.fontSize(size);\n        }\n        this.sentenceContainer()\n            .cordinate().checkKinsoku().changeDisplay().breakPage().printInfo().isChanged(true);\n        return this;\n    }\n\n    // 'center','left','right'\n    /**\n     * カーソルのある段落のtext-alignを変更します\n     * @param {string} align 'center','left','right'のいずれか\n     * @return {Menu} 自身のインスタンス\n     */\n    align(align) {\n        const cursorParagraph = this.sentenceContainer().cursor().getParagraph();\n        cursorParagraph.align(align);\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }//}}}\n\n    // イベントリスナー//{{{\n    /**\n     * メニューの各コンポーネントにイベントリスナーを付加します\n     *     newボタン、saveボタン、deleteボタン、開くボタン、モーダルの開閉、\n     *     文字色ボタン、文字色ドロップダウン、太字ボタン、斜体ボタン、\n     * \t text-alignボタン、フォントサイズのドロップダウン、設定モーダル\n     * @return {Menu} 自身のインスタンス\n     */\n    addEventListeners() {\n        // メニューボタン\n        document.getElementById('menu_new').addEventListener('click', function (e) {\n            this.sentenceContainer().newFile();\n        }.bind(this), false);\n        document.getElementById('menu_save').addEventListener('click', function (e) {\n            this.sentenceContainer().saveFile();\n        }.bind(this), false);\n        document.getElementById('menu_delete').addEventListener('click', function (e) {\n            this.sentenceContainer().fileList().currentFile().delete();\n        }.bind(this), false);\n        document.getElementById('modal_fileopen_link').addEventListener('click', function (e) {\n            const filterInputElem = this.sentenceContainer().fileList().filterInputElem();\n            // モーダルが開くのはブートストラップで行われるので、その前処理だけを行う\n            filterInputElem.value = '';\n            filterInputElem.focus();\n            this.sentenceContainer().fileList().resetList();\n        }.bind(this), false);\n\n        // モーダル開閉\n        $('div.modal').on('shown.bs.modal', function (e) {\n            this.sentenceContainer().removeKeydownEventListener();\n            if (this.sentenceContainer().inputBuffer().isDisplay()) {\n                this.sentenceContainer().inputBuffer().empty().hide();\n            }\n        }.bind(this));\n        $('div.modal').on('hidden.bs.modal', function (e) {\n            if (this.sentenceContainer().command().isActive()) { return; }\n            this.sentenceContainer().addKeydownEventListener();\n        }.bind(this));\n\n        // パレットボタン\n        // 文字色ボタン\n        document.getElementById('color_btn').addEventListener('click', function (e) {\n            this.addColor(this.colorButton(), true);\n        }.bind(this), false);\n        // 文字色ドロップダウン\n        this.addColorSelectClickEvent();\n\n        // bold italic\n        document.getElementById('btn-bold').addEventListener('click', function (e) {\n            const eBtn = document.getElementById('btn-bold');\n            eBtn.classList.toggle('active');\n            this.bold(this.boldButton(), true);\n        }.bind(this), false);\n        document.getElementById('btn-italic').addEventListener('click', function (e) {\n            const eBtn = document.getElementById('btn-italic');\n            eBtn.classList.toggle('active');\n            this.italic(this.italicButton(), true);\n        }.bind(this), false);\n\n        // align\n        this.addAlignClickEvent();\n\n        // font size\n        this.addFontSizeEvnet();\n\n        // configue modal\n        this.addConfigueEvent();\n\n        return this;\n    }\n\n    /**\n     * 文字色(ドロップダウンの方)をクリックするとボタンの色と選択範囲の文字色が変わるイベントを付加します\n     *     querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱う色を増やすことが可能\n     * @return {Menu} 自身のインスタンス\n     */\n    addColorSelectClickEvent() {\n        const eSelectColors = document.querySelectorAll('#color_dropdown a');\n        for (let i = 0, eSelColor; (eSelColor = eSelectColors[i]); i++) {\n            const color = eSelColor.dataset.color;\n            eSelColor.addEventListener('click',\n                this._addColorCallback(eSelColor, color).bind(this), false);\n        }\n        return this;\n    }\n\n    // ループ内で使われるため別に定義する(関数外の変数を内部で使わないようにするため)\n    // 即時関数に入れなければ、eSelColorとcolorの中身がクロージャ的に変化して\n    // すべての場合で最後の値が利用されてしまうおそれがある\n    _addColorCallback(eSelColor, color) {\n        return function (e) {\n            this.colorButton(color);\n            this.addColor(color, true);\n        };\n    }\n\n    /**\n     * text-alignボタンをクリックするとカーソルのある段落のtext-alignが変更されるイベントを付加します\n     * @return {Menu} 自身のインスタンス\n     */\n    addAlignClickEvent() {\n        const eAligns = document.querySelectorAll('#align_btns button');\n        for (let i = 0, eAlign; (eAlign = eAligns[i]); i++) {\n            const align = eAlign.id.match(/text_btn_(\\S+)/);\n            eAlign.addEventListener('click', this._addAlignCallback(align).bind(this), false);\n        }\n        return this;\n    }\n\n    _addAlignCallback(align) {\n        return function (e) {\n            this.align(align);\n        };\n    }\n\n    // font size\n\n    /**\n     * フォントサイズのドロップダウンをクリックするとフォントサイズのinputの数値が変更され、選択範囲の文字のフォントサイズが変更されるイベントを付加します\n     *     querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、\n     *     htmlとcssのみ変更することで扱うフォントサイズを増やすことが可能になります\n     * @return {Menu} 自身のインスタンス\n     */\n    addFontSizeEvnet() {\n        const eFontSizeDropdowns = document.querySelectorAll('#fontsize_dropdown a');\n        for (let i = 0,eFontSize; (eFontSize = eFontSizeDropdowns[i]); i++) {\n            eFontSize.addEventListener('click', this._addFontCallback().bind(this), false);\n        }\n        return this;\n    }\n\n    _addFontCallback() {\n        return function (e) {\n            const size = parseInt(e.target.dataset.size) || 'auto';\n            this.fontSizeInput(size);\n            this.fontSize(size);\n        };\n    }\n\n    /**\n     * 設定モーダルのinputフォームとsaveボタン、resetボタンにイベントを付加します\n     * @return {Menu} 自身のインスタンス\n     */\n    addConfigueEvent() {\n        document.getElementById('btn_conf_save').addEventListener('click', function (e) {\n            const strLen = parseInt(this.confStrLenElem().value || 18);\n            const rowLen = parseInt(this.confRowLenElem().value || 40);\n            this.sentenceContainer().strLenOnRow(strLen).rowLenOnPage(rowLen);\n            $('#configue_modal').modal('hide');\n        }.bind(this),false);\n\n        // html上でtype=\"reset\"にすると、元に戻すというよりinputを空にしてしまう\n        document.getElementById('btn_conf_reset').addEventListener('click', function (e) {\n            this.confStrLenElem().value = this.sentenceContainer().strLenOnRow();\n            this.confRowLenElem().value = this.sentenceContainer().rowLenOnPage();\n        }.bind(this),false);\n\n        // inputからフォーカスから外れた際に、不正な文字が入力されていたら元に戻す\n        this.confStrLenElem().addEventListener('focusout', function (e) {\n            if (!/^[0-9]+$/.test(this.confStrLenElem().value)) {\n                this.confStrLenElem().value = this.sentenceContainer().strLenOnRow();\n            }\n        }.bind(this),false);\n\n        this.confRowLenElem().addEventListener('focusout', function (e) {\n            if (!/^[0-9]+$/.test(this.confRowLenElem().value)) {\n                this.confRowLenElem().value = this.sentenceContainer().rowLenOnPage();\n            }\n        }.bind(this),false);\n\n        return this;\n    }//}}}\n} //}}}\n\n\n/**\n * コマンドラインを表すクラス\n *     コマンド操作を一括して請け負います\n */\nexport class CommandLine {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 対応する文章コンテナ\n     */\n    constructor(sentenceContainer) {\n        this._elem = document.getElementById('command');\n        this._sentenceContainer = sentenceContainer;\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 自身のHTML要素を返します\n     * @return {Element} 自身のHTML要素\n     */\n    elem() {\n        return this._elem;\n    }\n\n    /**\n     * 対応する文章コンテナの参照を返します\n     * @return {SentenceContainer} 対応する文章コンテナ\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * 操作するファイルリストの参照を返します\n     * @return {FileList} ファイルリストのインスタンス\n     */\n    fileList() {\n        return this.sentenceContainer().fileList();\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * コマンドラインがアクティブかどうかを返します\n     * @return {boolean} true=アクティブ、false=アクティブではない\n     */\n    isActive() {\n        return this.elem().classList.contains('active');\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * コマンドラインをアクティブにします\n     * @return {CommandLine} 自身のインスタンス\n     */\n    active() {\n        this.elem().classList.add('active');\n        return this;\n    }\n\n    /**\n     * コマンドラインを非アクティブにしまる\n     * @return {CommandLine} 自身のインスタンス\n     */\n    unActive() {\n        this.elem().classList.remove('active');\n        return this;\n    }\n\n    /**\n     * コマンドラインにフォーカスを与えます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    focus() {\n        this.elem().focus();\n        return this;\n    }\n\n    /**\n     * ファイルリストのモーダルをコマンドライン用に開きます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    displayFileModal() {\n        this.fileList().$modal().addClass('command-modal').modal();\n        // モーダルウィンドウ表示時の半透明背景を見えなくする\n        $('.modal-backdrop.fade.in').addClass('none_modal-backdrop');\n        return this;\n    }\n\n    /**\n     * コマンドライン用に開いたモーダルを閉じます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    hideFileModal() {\n        if (this.fileList().isOpen()) {\n            // あらかじめbootstrapより先回りしてstyle適用で非表示にしておかなければ、消える前に一瞬中央表示になってしまう\n            this.fileList().$modal()\n                .attr('style','display: none;')\n                .removeClass('command-modal')\n                .modal('hide');\n        }\n        this.fileList().resetList();\n\n        return this;\n    }//}}}\n\n    // --DOM {{{\n\n    /**\n     * コマンドラインに値を設定します\n     * @param {string} text コマンドラインに設定する値\n     * @return {CommandLine} 自身のインスタンス\n     */\n    val(text) {\n        if (text === undefined) {\n            return this.elem().value;\n        } else {\n            this.elem().value = text;\n            return this;\n        }\n    }\n\n    /**\n     * コマンドモードを始めます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    start() {\n        this.active();\n        this.sentenceContainer().removeKeydownEventListener();\n        this.focus().val(':');\n        this.addKeyupEventListener().addFocusoutEventListener();\n        return this;\n    }\n\n    /**\n     * コマンドモードを終了します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    stop() {\n        this.unActive();\n        this.removeKeyupEventListener().removeFocusoutEventListener();\n        this.sentenceContainer().addKeydownEventListener();\n        this.hideFileModal();\n        return this;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * コマンドのinputフォームにkeyupイベントを付加します。重ねがけは無効となります\n     * @return {CommandLine} 自身のインスタンス\n     */\n    addKeyupEventListener() {\n        if (this._keyupArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._keyupArg = this.onKeyup.bind(this);\n        document.addEventListener('keyup',this._keyupArg);\n        return this;\n    }\n\n    /**\n     * コマンドのinputフォームへのkeyupイベントを除去します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    removeKeyupEventListener() {\n        if (!this._keyupArg) {\n            return this;\n        }\n\n        document.removeEventListener('keyup', this._keyupArg);\n        this._keyupArg = null;\n        return this;\n    }\n\n    /**\n     * @private\n     * keyupイベントの前処理を行い、イベントを実行します\n     */\n    onKeyup(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 123) { return; } // F12のみブラウザショートカットキー\n        this.runKeyup(e,keycode);\n        // デフォルトの動作を無効化する\n        e.preventDefault();\n    }\n\n    /**\n     * コマンドのkeyupイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     */\n    runKeyup(e, keycode) {\n        if (keycode === 13) {\n            // enter\n            this.runCommand();\n            this.stop();\n            // 親要素へのイベントの伝播(バブリング)を止める。そうしなければ先にaddeventlistenerをしてしまっているので、documentにまでエンターキーが渡ってしまい改行されてしまう。\n            e.stopPropagation();\n        } else if (keycode === 27 || this.val() === '') {\n            // Esc\n            // あるいは全文字削除\n            this.stop();\n            e.stopPropagation();\n        } else {\n            // :eなどの後に途中まで引数を打てばファイルの検索ダイアログが出るようにする\n            // 全角スペースも区切りとして有効。ただし、半角スペースとの混在は現状不可\n            const command =\n                this.val().split(' ').length > 1 ? this.val().split(' ') : this.val().split('　');\n\n            switch (command[0]) {\n                case ':e':\n                case ':o':\n                case ':open':\n                case ':mv':\n                case ':delete':\n                case ':del':\n                case ':d':\n                case ':deldir':\n                case ':え':\n                case ':お':\n                case ':おぺｎ':\n                case ':ｍｖ':\n                case ':でぇて':\n                case ':でｌ':\n                case ':ｄ':\n                    if (keycode !== 8 && command[1] && !($('body').hasClass('modal-open'))) {\n                        // モーダルウィンドウを表示する\n                        this.displayFileModal();\n                        this.fileList().filter(command[1]);\n                    } else if (keycode === 8 && !(command[1])) {\n                        // BSを押した結果、引数がなくなった\n                        this.hideFileModal();\n                    } else if (command[1] && command[2]) {\n                        // 引数ふたつ目\n                        this.fileList().filter(command[2]);\n                    } else if (command[1]) {\n                        // 引数ひとつ\n                        this.fileList().filter(command[1]);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        e.preventDefault();\n    }\n\n    /**\n     * コマンドラインからフォーカスが外れた際のイベントを付加します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    addFocusoutEventListener() {\n        if (this._focusoutArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._focusoutArg = this.onFocusout.bind(this);\n        document.addEventListener('focusout',this._focusoutArg);\n        return this;\n    }\n\n    /**\n     * コマンドラインからフォーカスが外れた際のイベントを除去します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    removeFocusoutEventListener() {\n        if (!this._focusoutArg) {\n            return this;\n        }\n\n        document.removeEventListener('focusout',this._focusoutArg);\n        this._focusoutArg = null;\n        return this;\n    }\n\n    /**\n     * コマンドラインからフォーカスが外れた際のイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     */\n    onFocusout(e) {\n        this.stop();\n    }\n\n    /**\n     * コマンドの実行内容です\n     */\n    runCommand() {\n        // 半角スペースで区切られていないようなら、全角スペースの区切りでも可\n        const command =\n            this.val().split(' ').length > 1 ? this.val().split(' ') : this.val().split('　');\n\n        switch (command[0]) {\n            case ':w':\n            case ':save':\n            case ':s':\n            case ': ｗ':\n            case ':さヴぇ':\n            case ':ｓ':\n                if (command[1]) {\n                    this.sentenceContainer().fileId(-1).filename(command[1]).saveFile();\n                } else {\n                    this.sentenceContainer().saveFile();\n                }\n                break;\n            case ':e':\n            case ':o':\n            case ':open':\n            case ':え':\n            case ':お':\n            case ':おぺｎ':\n                if (command[1]) {\n                    const files = this.fileList().findFile(command[1]);\n                    if (files.length > 0) {\n                        files[0].open();\n                    }\n                } else {\n                    this.sentenceContainer().newFile();\n                }\n                break;\n            case ':jumpr':\n            case ':jumprow':\n            case ':jr':\n            case ':じゅｍｐｒ':\n            case ':じゅｍｐろｗ':\n            case ':ｊｒ':\n                if (command[1]) {\n                    this.sentenceContainer().cursor().jumpRow(parseInt(command[1]));\n                }\n                break;\n            case ':jumpp':\n            case ':jumppage':\n            case ':jp':\n            case ':じゅｍっｐ':\n            case ':じゅｍっぱげ':\n            case ':ｊｐ':\n                if (command[1]) {\n                    this.sentenceContainer().cursor().jumpPage(parseInt(command[1]));\n                }\n                break;\n            case ':new':\n            case ':n':\n            case ':ねｗ':\n            case ':ｎ':\n                this.sentenceContainer().newFile(command[1]);\n                break;\n            case ':delete':\n            case ':del':\n            case ':d':\n            case ':rm':\n            case ':でぇて':\n            case ':でｌ':\n            case ':ｄ':\n            case ':ｒｍ':\n                if (command[1]) {\n                    this.fileList().deleteFile(command[1]);\n                } else {\n                    const currentFile = this.fileList().currentFile();\n                    if (currentFile) {\n                        currentFile.delete();\n                    }\n                }\n                break;\n            case ':next':\n            case ':ねｘｔ':\n                // 次のファイルを開く\n                this.fileList().openNextFile();\n                break;\n            case ':prev':\n            case ':ｐれｖ':\n                // 前のファイルを開く\n                this.fileList().openPrevFile();\n                break;\n            case ':title':\n            case ':name':\n            case ':t':\n            case ':ちｔぇ':\n            case ':なめ':\n            case ':ｔ':\n                if (command[1]) {\n                    this.sentenceContainer().filename(command[1]);\n                }\n                break;\n            case ':mv':\n            case ':ｍｖ':\n                this.fileList().moveFile(command[1],command[2]);\n                break;\n            case ':mkdir':\n            case ':ｍｋぢｒ':\n                this.fileList().mkdir(command[1]);\n                break;\n            case ':deldir':\n            case ':でｌぢｒ':\n                this.fileList().deleteDirectory(command[1],true);\n                break;\n            case ':noh':\n            case ':のｈ':\n                this.sentenceContainer().stopSearchMode();\n                break;\n            case '::':\n                this.sentenceContainer().cursor().insert(':', true);\n                break;\n            case ':;':\n                this.sentenceContainer().cursor().insert(';', true);\n                break;\n            case ':/':\n                this.sentenceContainer().cursor().insert('/', true);\n                break;\n            case ':i':\n                if (command[1]) {\n                    this.sentenceContainer().cursor().insert(command[1], true);\n                }\n                break;\n            case ':bold':\n                this.sentenceContainer().menu()\n                    .boldButton(!this.sentenceContainer().menu().boldButton());\n                break;\n            case ':italic':\n                this.sentenceContainer().menu()\n                    .italicButton(!this.sentenceContainer().menu().italicButton());\n                break;\n            default:\n                break;\n        }\n    }//}}}\n}//}}}\n\n\n// 段落最後のEOL以外のEOLにカーソルは止まらない(EOLは基本、文字挿入のために存在)\n/**\n * カーソルを表すクラス\n *     カーソルを起点とした操作を一括して請け負います\n */\nexport class Cursor {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 対応する文章コンテナのインスタンス\n     */\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._cursorLineElem = document.getElementById('cursor_line');\n    }\n\n    /**\n     * カーソルを初期化して一文字目にカーソルを与えます\n     * @return {Cursor} 自身のインスタンス\n     */\n    init() {\n        const firstChar = this.sentenceContainer().firstChild().firstChild().firstChild();\n        this._char = firstChar;\n        this.createCursorLine();\n        this._char.addCursor().setPosMemory();\n        return this;\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 対応する文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} 対応する文章コンテナのインスタンス\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * カーソルのある文字のインスタンスを返します\n     * @return {Char} カーソル文字のインスタンス\n     */\n    getChar() {\n        return this._char;\n    }\n\n    /**\n     * カーソル行のインスタンスを返します\n     * @return {Row} カーソル行のインスタンス\n     */\n    getRow() {\n        return this.getChar().row();\n    }\n\n    /**\n     * カーソルのある段落のインスタンスを返します\n     * @return {Paragraph} カーソルのある段落のインスタンス\n     */\n    getParagraph() {\n        return this.getRow().paragraph();\n    }\n\n    /**\n     * カーソル位置を記憶するためのDOM要素を返します\n     * @return {Element} カーソル位置を記憶するための要素\n     */\n    cursorLineElem() {\n        return this._cursorLineElem;\n    }//}}}\n\n    // --参照操作 {{{\n\n    /**\n     * カーソル文字を変更します\n     * @param {Char} newChar 新しいカーソル文字\n     * @return {Cursor} 自身のインスタンス\n     */\n    setChar(newChar) {\n        if (this.getChar()) {\n            this.memorySelection();\n            this.getChar().removeClass('cursor');\n        }\n        newChar.addClass('cursor');\n        this._char = newChar;\n        return this;\n    }\n\n    /**\n     * カーソルを移動させます\n     * 加えて、与えられた文字の前の文字に文字装飾があれば対応する装飾ボタン等をその文字に合わせて変化させます\n     * また、シフトキーが押されながら(bShiftがtrue)カーソルが与えられた場合、選択範囲を拡張します\n     * @param {Char} char 新しいカーソル文字\n     * @param {boolean} [bShift] シフトキーが押された状態でカーソルが与えられたかどうか。\n     *     trueなら選択範囲を拡張する。falseなら解除する。省略(undefined)すると選択範囲には影響しない\n     * @return {Cursor} 自身のインスタンス\n     */\n    addCursor(char, bShift) {\n        this.setChar(char);\n\n        // 前の文字に装飾があれば、そのボタンをオンにする\n        const prevChar = char.prevCharOnParagraph();\n        const menu = this.sentenceContainer().menu();\n        menu.colorButton(prevChar ? prevChar.color() : 'black');\n        menu.boldButton(prevChar ? prevChar.bold() : false);\n        menu.italicButton(prevChar ? prevChar.italic() : false);\n        menu.fontSizeInput(prevChar ? prevChar.fontSize() : 'auto');\n\n        // シフトキーが押されながらなら、選択範囲を広げる\n        this.extendSelection(bShift);\n        this.sentenceContainer().printInfo();\n        return this;\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * カーソル位置を記憶するDOM要素から、記憶されたインデックスを返します\n     * @return {number} 記憶されたカーソル位置のインデックス。記憶された位置が見つからなければ-1\n     */\n    getPosMemory() {\n        const eCharPoses = this.cursorLineElem().children;\n        for (let i = 0,eCharPos; (eCharPos = eCharPoses[i]); i++) {\n            if (eCharPos.classList.contains('cursor-pos-memory')) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * カーソル位置を記憶するDOM要素に位置を記憶します\n     * @param {number} index 記憶する位置のインデックス\n     * @return {Cursor} 自身のインスタンス\n     */\n    setPosMemory(index) {\n        const oldPos = this.getPosMemory();\n        if (index === oldPos) {\n            return this;\n        }\n\n        const eCharPoses = this.cursorLineElem().children;\n        if (eCharPoses[oldPos]) {\n            eCharPoses[oldPos].classList.remove('cursor-pos-memory');\n        }\n        const maxIndex = eCharPoses.length - 1;\n        if (index > maxIndex) { // char-posの最大数を超える数値は覚えられない\n            index = maxIndex;\n        }\n        eCharPoses[index].classList.add('cursor-pos-memory');\n        return this;\n    }\n\n    /**\n     * 現在行のうち何文字目にカーソルがあるかを返します。行頭では１，EOLでは行の総文字数＋１が返ります\n     * @return {number} カーソルの位置。入力の始まる位置のインデックスと同じ\n     */\n    currentCharPos() {\n        return this.getChar().index() + 1;\n    }\n\n    /**\n     * 現在行の総文字数を返す\n     * @return {number} 現在行の総文字数\n     */\n    strLenOfRow() {\n        return this.getRow().charLen();\n    }\n\n    /**\n     * カーソル行がそのページで何行目かを返します\n     * @return {number} カーソル行がページ内で何行目か。改ページが見つからなければ-1\n     */\n    currentRowPos() {\n        for (let row = this.getRow(),cnt = 1; row; row = row.prev(),cnt++) {\n            if (row.isPageBreak()) {\n                return cnt;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 現在ページの総行数を返します。最終ページのみ設定行数と異なるため、正確に総行数を数えるために利用されます\n     * @return {number} 現在ページの総行数。ページの終わりが見つからなければ-1\n     */\n    rowLenOnPage() {\n        for (let row = this.getRow(),cnt = this.currentRowPos(); row; row = row.next(),cnt++) {\n            if (row.isPageLast()) {\n                return cnt;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 現在ページを返します\n     * @return {number} 現在ページ\n     */\n    currentPage() {\n        let cnt = 0;\n        for (let row = this.getRow(); row; row = row.prev()) {\n            if (row.isPageBreak()) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * カーソル位置を記憶するDOM要素を文章コンテナの標準文字数に合わせて構築します。主にカーソルの左右移動の際に、そのカーソルが何文字目の位置から移動してきたのかを記憶するために用いるものです\n     * @return {Cursor} 自身のインスタンス\n     */\n    createCursorLine() {\n        const eCursorLine = document.getElementById('cursor_line');\n        const eOldCharPoses = eCursorLine.children;\n        for (let eOldCharPos; (eOldCharPos = eOldCharPoses[0]);) {\n            eCursorLine.removeChild(eOldCharPos);\n        }\n        eCursorLine.appendChild(\n            ElemCreator.createCharPosElement(this.sentenceContainer().strLenOnRow()));\n        return this;\n    }\n\n    /**\n     * カーソル位置に文字を挿入します\n     *     文字列を渡した場合のみ、Undoスタックにプッシュされます\n     * @param {string Char[]} chars 挿入する文字列、あるいはCharオブジェクトの配列\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Cursor} 自身のインスタンス\n     */\n    insert(chars, useUndo) {\n        const cursorChar = this.getChar();\n        if (typeof chars === 'string') {\n            chars = this._charsFromString(chars);\n        }\n        if (useUndo) {\n            this.sentenceContainer().addDo(new PrintDoMemory(this, chars));\n        }\n\n        for (let char of chars) {\n            cursorChar.before(char);\n        }\n\n        cursorChar.paragraph().cordinate().checkKinsoku();\n        this.getChar().setPosMemory(); // cordinate()によってカーソル文字が変わっている可能性があるため、cursorCharは使えず取得しなおし\n        this.sentenceContainer().changeDisplay().breakPage().printInfo().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 文字列をCharオブジェクトの配列に変換します\n     * @param {string} str 変換する文字列\n     * @return {Char[]} 変換されたCharオブジェクトの配列\n     */\n    _charsFromString(str) {\n        const ret = [];\n        const cursorChar = this.getChar();\n        for (let char of str) {\n            const newChar = new Char(cursorChar.createData(char));\n            ret.push(newChar);\n        }\n        return ret;\n    }\n\n    /**\n     * カーソル位置でバックスペースを押下した時の処理を行います\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Cursor} 自身のインスタンス\n     */\n    backSpace(useUndo) {\n        const cursorChar = this.getChar();\n        if (!cursorChar.prev()) { // 文章先頭からのバックスペースは何もしない\n            return this;\n        }\n\n        // 段落先頭からのバックスペースでは、前の行に段落をつなげる\n        if (cursorChar.isFirst() && cursorChar.row().isFirst()) {\n            const cursorParagraph = cursorChar.row().paragraph();\n            const newParagraph = cursorParagraph.prev(); // 融合先の段落\n            for (let moveRow of cursorParagraph.rows()) {\n                moveRow.moveLastBefore();\n            }\n            newParagraph.cordinate().checkKinsoku();\n            // FIXME: 最終行が表示されている状態でbackSpace()すると、\n            //     カーソル行が表示されているために表示開始行が変わらず、行数が足りているにも関わらず表示行数が少なくなってしまう\n            this.sentenceContainer().changeDisplay().breakPage().printInfo().isChanged(true);\n            return this;\n        }\n\n        //  段落先頭以外からのバックスペース\n        //  カーソルの前の位置にある文字を削除する(行頭なら行をまたいで前の文字)\n        if (!(cursorChar.isFirst() && cursorChar.row().isFirst())) {\n            if (useUndo) {\n                this.sentenceContainer().addDo(new DeleteDoMemory(this, [cursorChar.prevChar()]));\n            }\n            cursorChar.prevChar().delete();\n            this.sentenceContainer().changeDisplay().breakPage().printInfo().isChanged(true);\n            return this;\n        }\n    }\n\n    /**\n     * カーソル位置で改行した時の処理を行います\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Cursor} 自身のインスタンス\n     */\n    lineBreak(useUndo) {\n        // 段落の分割\n        const cursorParagraph = this.getParagraph().divide(this.getChar());\n        // 新しくできた段落の最初の文字にカーソルを移動する\n        const newParagraph = cursorParagraph.next(); // divide()で新しく挿入された段落\n        newParagraph.firstChild().firstChild().addCursor().setPosMemory();\n        // HACK:changeDisplay()を二回続けている:新しい段落がdisplayされて表示されるので、最終表示行から改行した場合にカーソル行が表示から外れる(最終表示行とカーソル行が等しいため、表示開始行を変えずに表示)\n        // かといって新しい段落を非表示にしてから挿入すると、表示行が文章コンテナを埋めていない状態の時に改行すると表示開始行が毎回ひとつ後ろにずれる(カーソル行が最終表示行より後ろにあるため)という現象が起こるので、行数が十分にあっても表示行が不足してしまう\n        this.sentenceContainer()\n            .changeDisplay().changeDisplay().breakPage().printInfo().isChanged(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new LineBreakDoMemory(this));\n        }\n        return this;\n    }//}}}\n\n    // --カーソル操作 {{{\n\n    // カーソル移動\n    /**\n     * カーソルを下方向に一つ動かします。ひとつ下が段落途中のEOLなら、さらにその次に動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveNext(bShift) {\n        const nextChar = this.getChar().next();\n        if (!nextChar) {\n            return this;\n        }\n\n        nextChar.slideNextCursor().addCursor(bShift).setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * カーソルを上方向に一つ動かします。段落途中の行頭なら、前の行の最終文字に動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    movePrev(bShift) {\n        const prevChar = this.getChar().prev();\n        if (!prevChar) {\n            return this;\n        }\n\n        prevChar.slidePrevCursor().addCursor(bShift).setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * カーソルを右方向に一つ動かします。一つ右が段落途中のEOLなら、移動先の前の文字にさらに動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveRight(bShift) {\n        const prevRow = this.getChar().row().prev();\n        this.moveRow(prevRow,bShift);\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * カーソルを左方向に一つ動かします。一つ左が段落途中のEOLなら、移動先の前の文字にさらに動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveLeft(bShift) {\n        const nextRow = this.getChar().row().next();\n        this.moveRow(nextRow,bShift);\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * rowにカーソルを移動します。移動先の文字は記憶されたカーソル位置と同じインデックスの文字となりますが、それがEOLならその前の文字に移動します\n     * @param {Row} row 移動先の行のインスタンス\n     * @param {boolean} bShift シフトキーが押されているかどうか。trueなら、選択範囲を拡張する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveRow(row, bShift) {\n        const index = this.getPosMemory();\n        if (!row) {\n            return this;\n        }\n\n        // 同じインデックスの文字がprevRowに存在しなければ、children()内でlastChild()が選択される\n        const char = row.children(index);\n        char.slidePrevCursor().addCursor(bShift);\n        return this;\n    }\n\n    /**\n     * num行目の最初の文字にカーソルを移動します。移動先の行が中央となるように表示されます\n     * @param {number} num 移動先が何行目か。１から始まる。ページ内ではなく、文章全体で数える。０位下が渡されると最初の行に移動される\n     * @return {Cursor} 自身のインスタンス\n     */\n    jumpRow(num) {\n        if (typeof num !== 'number') {\n            return this;\n        }\n\n        const row = this.sentenceContainer().row(num);\n        if (row) {\n            row.firstChild().addCursor().setPosMemory();\n            this.sentenceContainer().changeDisplay('center');\n        }\n        return this;\n    }\n\n    /**\n     * numページ目の一行目最初の文字にカーソルが移動します。その行が最初の行となるように表示されます\n     * @param {number} num 何ページ目に移動するか\n     * @return {Cursor} 自身のインスタンス\n     */\n    jumpPage(num) {\n        if (typeof num !== 'number') {\n            return this;\n        }\n\n        const row = this.sentenceContainer().pageRow(num);\n        if (row) {\n            row.firstChild().addCursor().setPosMemory();\n            this.sentenceContainer().changeDisplay('right');\n        }\n        return this;\n    }\n\n    /**\n     * 次の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません\n     * @return {Cursor} 自身のインスタンス\n     */\n    nextSearch() {\n        const next = this._nextSearchChar();\n        if (!next) { return this; }\n        next.addCursor().setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * 次の検索語句を返します\n     * @return {Char} 次の検索語句の１文字目のインスタンス。見つからなければnull\n     */\n    _nextSearchChar() {\n        for (let char = this.getChar().nextChar() || this.sentenceContainer().firstChar();\n            !char.is(this.getChar());\n            char = char.nextChar() || this.sentenceContainer().firstChar()) {\n                if (char.hasClass('search-label')) {\n                    return char;\n                }\n            }\n        return null;\n    }\n\n    /**\n     * 前の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません\n     * @return {Cursor} 自身のインスタンス\n     */\n    prevSearch() {\n        const prev = this.prevSearchChar();\n        if (!prev) { return this; }\n        prev.addCursor().setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * @private\n     * 前の検索語句を返します\n     * @return {Char} 前の検索語句の１文字目のインスタンス。見つからなければnull\n     */\n    prevSearchChar() {\n        for (let char = this.getChar().prevChar() || this.sentenceContainer().lastChar();\n            !char.is(this.getChar());\n            char = char.prevChar() || this.sentenceContainer().lastChar()) {\n                if (char.hasClass('search-label')) {\n                    return char;\n                }\n            }\n        return null;\n    }\n\n    // カーソル移動前に、selectionにカーソル位置を覚えさせる\n    /**\n     * 何も選択されていない状態の場合に、Selectionにカーソル位置を覚えさせます\n     * @return {Cursor} 自身のインスタンス\n     */\n    memorySelection() {\n        const selection = getSelection();\n        if (selection.rangeCount === 0) {\n            selection.selectAllChildren(this.getChar().elem());\n        }\n        return this;\n    }\n\n    // 選択範囲を動かす(カーソル移動時)\n    /**\n     * bShiftがtrueなら選択範囲を拡張します\n     * @param {boolean} [opt_bShift] true=選択範囲を拡張する、false=選択範囲を解除する。省略されると何もしない\n     * @return {Cursor} 自身のインスタンス\n     */\n    extendSelection(opt_bShift) {\n        const selection = getSelection();\n        if (opt_bShift) {\n            // シフトキーが押されていれば、カーソルのオフセット０までselectionを拡張\n            selection.extend(this.getChar().elem(),0);\n        } else if (opt_bShift === false) {\n            // シフトキー無しでカーソルが動いたならselectionを解除する(省略でなく、明確にfalseが渡された場合)\n            selection.removeAllRanges();\n        }\n        return this;\n    }//}}}\n}//}}}\n",
    "static": true,
    "longname": "js/other-classes.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "class",
    "name": "Menu",
    "memberof": "js/other-classes.js",
    "static": true,
    "longname": "js/other-classes.js~Menu",
    "access": null,
    "export": true,
    "importPath": "./js/other-classes.js",
    "importStyle": "{Menu}",
    "description": "メニューバーを担当するクラス\n    メニューバー上のボタンによるイベントを一括して請け負います",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 483,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#constructor",
    "access": null,
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナ"
      }
    ]
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "_fontSizeInputElem",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_fontSizeInputElem",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "_confStrLenElem",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_confStrLenElem",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "_confRowLenElem",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_confRowLenElem",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#sentenceContainer",
    "access": null,
    "description": "このMenuが対応する文章コンテナのインスタンスを返します",
    "lineNumber": 32,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "SentenceContainerのインスタンス"
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "confStrLenElem",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#confStrLenElem",
    "access": null,
    "description": "設定モーダルの文字数inputフォームのDOM要素を返します",
    "lineNumber": 40,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "文字数設定inputフォームのDOM要素"
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "confRowLenElem",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#confRowLenElem",
    "access": null,
    "description": "設定モーダルの行数inputフォームのDOM要素を返します",
    "lineNumber": 48,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "行数設定inputフォームのDOM要素"
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "fontSizeInput",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#fontSizeInput",
    "access": null,
    "description": "フォントサイズinputフォームに値を設定する、あるいは引数省略で現在のinputフォームの値を返します",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newSize",
        "description": "inputに設定する値(数値か、文字列の'auto')"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu number string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、\n    あるいは現在のinputフォームの値(引数を省略した場合。'auto'の場合は文字列で返す)"
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "charDecolations",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#charDecolations",
    "access": null,
    "description": "現在アクティブになっている文字装飾のクラスを配列にします",
    "lineNumber": 74,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "現在アクティブになっている文字装飾のクラスの配列"
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "configueData",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#configueData",
    "access": null,
    "description": "現在の設定情報を表すオブジェクトを作成します\n<pre>\n{\n\t\"strLen\": \"%d\",\n\t\"rowLen\" : \"%d\"\n}\n</pre>",
    "lineNumber": 98,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "現在の設定情報を表すオブジェクト"
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "colorButton",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#colorButton",
    "access": null,
    "description": "文字色ボタンに色を付けます\n    引数を省略すると現在の色を取得します",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_color",
        "description": "文字色ボタンにつける色の名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の文字色ボタンに付いている色の名前(引数を省略した場合)"
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "addColor",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addColor",
    "access": null,
    "description": "選択範囲の文字色を変えます",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "新しい文字色"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "boldButton",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#boldButton",
    "access": null,
    "description": "太字ボタンのオンオフを切り替えます 引数省略で、現在の太字ボタンのオンオフをbool値で返します",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueで太字ボタンをオンにする。falseでオフにする"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の太字ボタンの状態(引数省略の場合)"
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "bold",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#bold",
    "access": null,
    "description": "選択範囲を太字にします。または太字を外します",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueで太字にする。falseで外す"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "italicButton",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#italicButton",
    "access": null,
    "description": "斜体ボタンのオンオフを切り替えます 引数省略で、現在の斜体ボタンのオンオフをbool値で返します",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueで太字ボタンをオンにする。falseでオフにする"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の斜体ボタンの状態(引数省略の場合)"
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "italic",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#italic",
    "access": null,
    "description": "選択範囲を斜体にします。または太字を外します",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueで斜体にする。falseで外す"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "fontSize",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#fontSize",
    "access": null,
    "description": "選択範囲のフォントサイズを変更します",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "新しいフォントサイズ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "align",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#align",
    "access": null,
    "description": "カーソルのある段落のtext-alignを変更します",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "align",
        "description": "'center','left','right'のいずれか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "addEventListeners",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addEventListeners",
    "access": null,
    "description": "メニューの各コンポーネントにイベントリスナーを付加します\n    newボタン、saveボタン、deleteボタン、開くボタン、モーダルの開閉、\n    文字色ボタン、文字色ドロップダウン、太字ボタン、斜体ボタン、\n\t text-alignボタン、フォントサイズのドロップダウン、設定モーダル",
    "lineNumber": 265,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "addColorSelectClickEvent",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addColorSelectClickEvent",
    "access": null,
    "description": "文字色(ドロップダウンの方)をクリックするとボタンの色と選択範囲の文字色が変わるイベントを付加します\n    querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱う色を増やすことが可能",
    "lineNumber": 333,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "_addColorCallback",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#_addColorCallback",
    "access": null,
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "eSelColor",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "addAlignClickEvent",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addAlignClickEvent",
    "access": null,
    "description": "text-alignボタンをクリックするとカーソルのある段落のtext-alignが変更されるイベントを付加します",
    "lineNumber": 357,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "_addAlignCallback",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#_addAlignCallback",
    "access": null,
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "align",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "addFontSizeEvnet",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addFontSizeEvnet",
    "access": null,
    "description": "フォントサイズのドロップダウンをクリックするとフォントサイズのinputの数値が変更され、選択範囲の文字のフォントサイズが変更されるイベントを付加します\n    querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、\n    htmlとcssのみ変更することで扱うフォントサイズを増やすことが可能になります",
    "lineNumber": 380,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "_addFontCallback",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#_addFontCallback",
    "access": null,
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "addConfigueEvent",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addConfigueEvent",
    "access": null,
    "description": "設定モーダルのinputフォームとsaveボタン、resetボタンにイベントを付加します",
    "lineNumber": 400,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 510,
    "kind": "class",
    "name": "CommandLine",
    "memberof": "js/other-classes.js",
    "static": true,
    "longname": "js/other-classes.js~CommandLine",
    "access": null,
    "export": true,
    "importPath": "./js/other-classes.js",
    "importStyle": "{CommandLine}",
    "description": "コマンドラインを表すクラス\n    コマンド操作を一括して請け負います",
    "lineNumber": 436,
    "interface": false
  },
  {
    "__docId__": 511,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#constructor",
    "access": null,
    "description": "",
    "lineNumber": 442,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナ"
      }
    ]
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "_elem",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_elem",
    "access": null,
    "description": null,
    "lineNumber": 443,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 444,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "elem",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#elem",
    "access": null,
    "description": "自身のHTML要素を返します",
    "lineNumber": 453,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身のHTML要素"
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#sentenceContainer",
    "access": null,
    "description": "対応する文章コンテナの参照を返します",
    "lineNumber": 461,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "対応する文章コンテナ"
    }
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#fileList",
    "access": null,
    "description": "操作するファイルリストの参照を返します",
    "lineNumber": 469,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "ファイルリストのインスタンス"
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "isActive",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#isActive",
    "access": null,
    "description": "コマンドラインがアクティブかどうかを返します",
    "lineNumber": 479,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true=アクティブ、false=アクティブではない"
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "active",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#active",
    "access": null,
    "description": "コマンドラインをアクティブにします",
    "lineNumber": 489,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "unActive",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#unActive",
    "access": null,
    "description": "コマンドラインを非アクティブにしまる",
    "lineNumber": 498,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "focus",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#focus",
    "access": null,
    "description": "コマンドラインにフォーカスを与えます",
    "lineNumber": 507,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "displayFileModal",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#displayFileModal",
    "access": null,
    "description": "ファイルリストのモーダルをコマンドライン用に開きます",
    "lineNumber": 516,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "hideFileModal",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#hideFileModal",
    "access": null,
    "description": "コマンドライン用に開いたモーダルを閉じます",
    "lineNumber": 527,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "val",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#val",
    "access": null,
    "description": "コマンドラインに値を設定します",
    "lineNumber": 547,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "コマンドラインに設定する値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "start",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#start",
    "access": null,
    "description": "コマンドモードを始めます",
    "lineNumber": 560,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "stop",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#stop",
    "access": null,
    "description": "コマンドモードを終了します",
    "lineNumber": 572,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "addKeyupEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#addKeyupEventListener",
    "access": null,
    "description": "コマンドのinputフォームにkeyupイベントを付加します。重ねがけは無効となります",
    "lineNumber": 586,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "_keyupArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "removeKeyupEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#removeKeyupEventListener",
    "access": null,
    "description": "コマンドのinputフォームへのkeyupイベントを除去します",
    "lineNumber": 601,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "_keyupArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 607,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "onKeyup",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#onKeyup",
    "access": "private",
    "description": "",
    "lineNumber": 615,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "runKeyup",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#runKeyup",
    "access": null,
    "description": "コマンドのkeyupイベントの実行内容です",
    "lineNumber": 636,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ]
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "addFocusoutEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#addFocusoutEventListener",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントを付加します",
    "lineNumber": 696,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "_focusoutArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_focusoutArg",
    "access": null,
    "description": null,
    "lineNumber": 702,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "removeFocusoutEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#removeFocusoutEventListener",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントを除去します",
    "lineNumber": 711,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "_focusoutArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_focusoutArg",
    "access": null,
    "description": null,
    "lineNumber": 717,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "onFocusout",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#onFocusout",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントの実行内容です",
    "lineNumber": 725,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "runCommand",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#runCommand",
    "access": null,
    "description": "コマンドの実行内容です",
    "lineNumber": 732,
    "params": []
  },
  {
    "__docId__": 538,
    "kind": "class",
    "name": "Cursor",
    "memberof": "js/other-classes.js",
    "static": true,
    "longname": "js/other-classes.js~Cursor",
    "access": null,
    "export": true,
    "importPath": "./js/other-classes.js",
    "importStyle": "{Cursor}",
    "description": "カーソルを表すクラス\n    カーソルを起点とした操作を一括して請け負います",
    "lineNumber": 878,
    "interface": false
  },
  {
    "__docId__": 539,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#constructor",
    "access": null,
    "description": "",
    "lineNumber": 884,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナのインスタンス"
      }
    ]
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 885,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "_cursorLineElem",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_cursorLineElem",
    "access": null,
    "description": null,
    "lineNumber": 886,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "init",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#init",
    "access": null,
    "description": "カーソルを初期化して一文字目にカーソルを与えます",
    "lineNumber": 893,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "_char",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_char",
    "access": null,
    "description": null,
    "lineNumber": 895,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#sentenceContainer",
    "access": null,
    "description": "対応する文章コンテナのインスタンスを返します",
    "lineNumber": 907,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "対応する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "getChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getChar",
    "access": null,
    "description": "カーソルのある文字のインスタンスを返します",
    "lineNumber": 915,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "getRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getRow",
    "access": null,
    "description": "カーソル行のインスタンスを返します",
    "lineNumber": 923,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "カーソル行のインスタンス"
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "getParagraph",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getParagraph",
    "access": null,
    "description": "カーソルのある段落のインスタンスを返します",
    "lineNumber": 931,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "カーソルのある段落のインスタンス"
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "cursorLineElem",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#cursorLineElem",
    "access": null,
    "description": "カーソル位置を記憶するためのDOM要素を返します",
    "lineNumber": 939,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "カーソル位置を記憶するための要素"
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "setChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#setChar",
    "access": null,
    "description": "カーソル文字を変更します",
    "lineNumber": 950,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "newChar",
        "description": "新しいカーソル文字"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "_char",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_char",
    "access": null,
    "description": null,
    "lineNumber": 956,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "addCursor",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#addCursor",
    "access": null,
    "description": "カーソルを移動させます\n加えて、与えられた文字の前の文字に文字装飾があれば対応する装飾ボタン等をその文字に合わせて変化させます\nまた、シフトキーが押されながら(bShiftがtrue)カーソルが与えられた場合、選択範囲を拡張します",
    "lineNumber": 969,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "新しいカーソル文字"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "bShift",
        "description": "シフトキーが押された状態でカーソルが与えられたかどうか。\n    trueなら選択範囲を拡張する。falseなら解除する。省略(undefined)すると選択範囲には影響しない"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "getPosMemory",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getPosMemory",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素から、記憶されたインデックスを返します",
    "lineNumber": 992,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "記憶されたカーソル位置のインデックス。記憶された位置が見つからなければ-1"
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "setPosMemory",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#setPosMemory",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素に位置を記憶します",
    "lineNumber": 1007,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "記憶する位置のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "currentCharPos",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#currentCharPos",
    "access": null,
    "description": "現在行のうち何文字目にカーソルがあるかを返します。行頭では１，EOLでは行の総文字数＋１が返ります",
    "lineNumber": 1029,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソルの位置。入力の始まる位置のインデックスと同じ"
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "strLenOfRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#strLenOfRow",
    "access": null,
    "description": "現在行の総文字数を返す",
    "lineNumber": 1037,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在行の総文字数"
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "currentRowPos",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#currentRowPos",
    "access": null,
    "description": "カーソル行がそのページで何行目かを返します",
    "lineNumber": 1045,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル行がページ内で何行目か。改ページが見つからなければ-1"
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "rowLenOnPage",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#rowLenOnPage",
    "access": null,
    "description": "現在ページの総行数を返します。最終ページのみ設定行数と異なるため、正確に総行数を数えるために利用されます",
    "lineNumber": 1058,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在ページの総行数。ページの終わりが見つからなければ-1"
    }
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "currentPage",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#currentPage",
    "access": null,
    "description": "現在ページを返します",
    "lineNumber": 1071,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在ページ"
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "createCursorLine",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#createCursorLine",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素を文章コンテナの標準文字数に合わせて構築します。主にカーソルの左右移動の際に、そのカーソルが何文字目の位置から移動してきたのかを記憶するために用いるものです",
    "lineNumber": 1087,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "insert",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#insert",
    "access": null,
    "description": "カーソル位置に文字を挿入します\n    文字列を渡した場合のみ、Undoスタックにプッシュされます",
    "lineNumber": 1105,
    "params": [
      {
        "nullable": null,
        "types": [
          "string Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chars",
        "description": "挿入する文字列、あるいはCharオブジェクトの配列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "_charsFromString",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#_charsFromString",
    "access": null,
    "description": "文字列をCharオブジェクトの配列に変換します",
    "lineNumber": 1129,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "変換する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char[]"
      ],
      "spread": false,
      "description": "変換されたCharオブジェクトの配列"
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "backSpace",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#backSpace",
    "access": null,
    "description": "カーソル位置でバックスペースを押下した時の処理を行います",
    "lineNumber": 1144,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "lineBreak",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#lineBreak",
    "access": null,
    "description": "カーソル位置で改行した時の処理を行います",
    "lineNumber": 1181,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "moveNext",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveNext",
    "access": null,
    "description": "カーソルを下方向に一つ動かします。ひとつ下が段落途中のEOLなら、さらにその次に動かします",
    "lineNumber": 1205,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "movePrev",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#movePrev",
    "access": null,
    "description": "カーソルを上方向に一つ動かします。段落途中の行頭なら、前の行の最終文字に動かします",
    "lineNumber": 1221,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "moveRight",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveRight",
    "access": null,
    "description": "カーソルを右方向に一つ動かします。一つ右が段落途中のEOLなら、移動先の前の文字にさらに動かします",
    "lineNumber": 1237,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "moveLeft",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveLeft",
    "access": null,
    "description": "カーソルを左方向に一つ動かします。一つ左が段落途中のEOLなら、移動先の前の文字にさらに動かします",
    "lineNumber": 1249,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "moveRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveRow",
    "access": null,
    "description": "rowにカーソルを移動します。移動先の文字は記憶されたカーソル位置と同じインデックスの文字となりますが、それがEOLならその前の文字に移動します",
    "lineNumber": 1262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "移動先の行のインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されているかどうか。trueなら、選択範囲を拡張する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "jumpRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#jumpRow",
    "access": null,
    "description": "num行目の最初の文字にカーソルを移動します。移動先の行が中央となるように表示されます",
    "lineNumber": 1279,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動先が何行目か。１から始まる。ページ内ではなく、文章全体で数える。０位下が渡されると最初の行に移動される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "jumpPage",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#jumpPage",
    "access": null,
    "description": "numページ目の一行目最初の文字にカーソルが移動します。その行が最初の行となるように表示されます",
    "lineNumber": 1297,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "何ページ目に移動するか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "nextSearch",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#nextSearch",
    "access": null,
    "description": "次の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません",
    "lineNumber": 1314,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "_nextSearchChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#_nextSearchChar",
    "access": null,
    "description": "次の検索語句を返します",
    "lineNumber": 1326,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "次の検索語句の１文字目のインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "prevSearch",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#prevSearch",
    "access": null,
    "description": "前の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません",
    "lineNumber": 1341,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "prevSearchChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#prevSearchChar",
    "access": "private",
    "description": "",
    "lineNumber": 1354,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "前の検索語句の１文字目のインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "memorySelection",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#memorySelection",
    "access": null,
    "description": "何も選択されていない状態の場合に、Selectionにカーソル位置を覚えさせます",
    "lineNumber": 1370,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "extendSelection",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#extendSelection",
    "access": null,
    "description": "bShiftがtrueなら選択範囲を拡張します",
    "lineNumber": 1384,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bShift",
        "description": "true=選択範囲を拡張する、false=選択範囲を解除する。省略されると何もしない"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 577,
    "kind": "file",
    "name": "js/test/test.js",
    "content": "'use strict';\n\nfunction startTest() {\n}\n",
    "static": true,
    "longname": "js/test/test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 578,
    "kind": "function",
    "name": "startTest",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~startTest",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 579,
    "kind": "file",
    "name": "js/undo-redo.js",
    "content": "'use strict';\n\n\n/**\n * Undo,Redoを担当するクラス\n *     Undo可能な操作を行った際に、addメソッドを使ってDoMemoryクラスの操作に対応するサブクラスを追加してください\n *     そうすることでDoManagerクラスのundoメソッド、redoメソッドで各操作に対するundo,redoを統一された操作によって行うことが可能になります\n */\nexport class DoManager {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} 対応する文章コンテナのインスタンス\n     */\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._undos = [];\n        this._redos = [];\n    }//}}}\n\n    /**\n     * Undo可能かどうかを検査します\n     * @return Undoのスタックに要素が残っていればtrue、そうでなければfalse\n     */\n    hasUndo() {\n        return this._undos.length > 0;\n    }\n\n    /**\n     * Redo可能かどうかを検査します\n     * @return Redoのスタックに要素が残っていればtrue、そうでなければfalse\n     */\n    hasRedo() {\n        return this._redos.length > 0;\n    }\n\n    /**\n     * Undoを実行し、使い終わったタスクをRedoスタックに再度積みます\n     * @return {DoManager} 自身のインスタンス\n     */\n    undo() {\n        const doMemory = this._undos.pop();\n        doMemory.undo();\n        this._redos.push(doMemory);\n        this._sentenceContainer.isChanged(true);\n        return this;\n    }\n\n    /**\n     * Redoを実行し、使い終わったタスクをUndoスタックに再度積みます\n     * @return {DoManager} 自身のインスタンス\n     */\n    redo() {\n        const doMemory = this._redos.pop();\n        doMemory.redo();\n        this._undos.push(doMemory);\n        this._sentenceContainer.isChanged(true);\n        return this;\n    }\n\n    /**\n     * undo可能な新たな操作を行った場合に、対応するDoMemoryオブジェクトを追加します\n     * @param {DoMemory} memory 追加するDoMemoryオブジェクト\n     * @return {DoManager} 自身のインスタンス\n     */\n    add(memory) {\n        this._undos.push(memory);\n        this._redos = [];\n        return this;\n    }\n\n    /**\n     * スタックを初期化します\n     * @return {DoManager} 自身のインスタンス\n     */\n    reset() {\n        this._undos = [];\n        this._redos = [];\n        return this;\n    }\n}//}}}\n\n\n/**\n * Undo, Redoを記憶するすべてのオブジェクトの基底クラス\n */\nexport class DoMemory {\n    //{{{\n    constructor() {\n    }\n\n    /**\n     * Undoします\n     * このメソッドは、サブクラスでオーバーライドする必要があります\n     */\n    undo() {\n        throw new Error('このメソッドは、サブクラスでオーバーライドする必要があります');\n    }\n\n    /**\n     * Redoします\n     * このメソッドは、サブクラスでオーバーライドする必要があります\n     */\n    redo() {\n        throw new Error('このメソッドは、サブクラスでオーバーライドする必要があります');\n    }\n}//}}}\n\n\n/**\n * 文字をカーソルから入力した際のUndo,Redoを担当するクラス\n */\nexport class PrintDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n\n    /**\n     * @param {Cursor} cursor カーソルオブジェクト\n     * @param {Char[]} targets 対象となる文字の配列\n     */\n    constructor(cursor, targets) {\n        super();\n        this._cursor = cursor;\n        this._memoryChar = cursor.getChar();\n        this._targets = targets;\n    }\n\n    undo() {\n        this._cursor.setChar(this._memoryChar);\n        for (let i = 0, len = this._targets.length; i < len; i++) {\n            this._cursor.backSpace();\n        }\n        return this;\n    }\n\n    redo() {\n        this._cursor.setChar(this._memoryChar);\n        this._cursor.insert(this._targets);\n        return this;\n    }\n}//}}}\n\n\n/**\n * 文字をカーソルから削除した際のUndo,Redoを担当するクラス\n */\nexport class DeleteDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    // TODO: backspaceで段落をつなげた際のUndo,Redoは別途作成すること\n    /**\n     * @param {Cursor} cursor カーソルオブジェクト\n     * @param {Char[]} targets 対象となる文字の配列\n     */\n    constructor(cursor, targets) {\n        super();\n        this._cursor = cursor;\n        this._memoryChar = cursor.getChar();\n        this._targets = targets;\n    }\n\n    undo() {\n        this._cursor.setChar(this._memoryChar);\n        this._cursor.insert(this._targets);\n        return this;\n    }\n\n    redo() {\n        this._cursor.setChar(this._memoryChar);\n        for (let i = 0, len = this._targets.length; i < len; i++) {\n            this._cursor.backSpace();\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class LineBreakDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n\n    /**\n     * @param {Cursor} cursor カーソルオブジェクト\n     */\n    constructor(cursor) {\n        super();\n        this._cursor = cursor;\n        this._memoryChar = cursor.getChar();\n    }\n\n    undo() {\n        this._cursor.setChar(this._memoryChar)\n            .backSpace();\n        return this;\n    }\n\n    redo() {\n        this._cursor.setChar(this._memoryChar)\n            .lineBreak();\n        return this;\n    }\n}//}}}\n\n\nexport class ColorDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い文字色も情報として必要となるので、必ず文字色変更前に作成してください\n     * @param {Char[]} 文字色を変更したCharインスタンスの配列\n     * @param {string} 変更後の文字色\n     */\n    constructor(targets, newColor) {\n        super();\n        this._targets = targets;\n        this._oldColors = targets.map(char => char.color());\n        this._newColor = newColor;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].color(this._oldColors[entry[0]]);\n        }\n        return this;\n    }\n    redo() {\n        for (let char of this._targets) {\n            char.color(this._newColor);\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class ItalicDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください\n     * @param {Char[]} targets 斜体に変更されたCharインスタンスの配列\n     * @param {boolean} 変更後の状態を表す真偽値\n     */\n    constructor(targets, blNew) {\n        super();\n        this._targets = targets;\n        this._olders = targets.map(char => char.italic());\n        this._blNew = blNew;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].italic(this._olders[entry[0]]);\n        }\n        return this;\n    }\n\n    redo() {\n        for (let char of this._targets) {\n            char.italic(this._blNew);\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class BoldDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください\n     * @param {Char[]} targets 太字に変更されたCharインスタンスの配列\n     * @param {boolean} 変更後の状態を表す真偽値\n     */\n    constructor(targets, blNew) {\n        super();\n        this._targets = targets;\n        this._olders = targets.map(char => char.bold());\n        this._blNew = blNew;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].bold(this._olders[entry[0]]);\n        }\n        return this;\n    }\n\n    redo() {\n        for (let char of this._targets) {\n            char.bold(this._blNew);\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class FontSizeDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください\n     * @param {Char[]} targets フォントサイズが変更されたCharインスタンスの配列\n     * @param {number string} newSize 変更後のフォントサイズ\n     */\n    constructor(targets, newSize) {\n        this._targets = targets;\n        this._olders = targets.map(char => char.fontSize());\n        this._newSize = newSize;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].fontSize(this._olders[entry[0]]);\n        }\n        return this;\n    }\n\n    redo() {\n        for (let char of this._targets) {\n            char.fontSize(this._newSize);\n        }\n        return this;\n    }\n\n    // TODO: align\n}//}}}\n",
    "static": true,
    "longname": "js/undo-redo.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 580,
    "kind": "class",
    "name": "DoManager",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~DoManager",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{DoManager}",
    "description": "Undo,Redoを担当するクラス\n    Undo可能な操作を行った際に、addメソッドを使ってDoMemoryクラスの操作に対応するサブクラスを追加してください\n    そうすることでDoManagerクラスのundoメソッド、redoメソッドで各操作に対するundo,redoを統一された操作によって行うことが可能になります",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 581,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "対応する文章コンテナのインスタンス",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "member",
    "name": "_undos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_undos",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "member",
    "name": "_redos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_redos",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "hasUndo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#hasUndo",
    "access": null,
    "description": "Undo可能かどうかを検査します",
    "lineNumber": 25,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Undoのスタックに要素が残っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "hasRedo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#hasRedo",
    "access": null,
    "description": "Redo可能かどうかを検査します",
    "lineNumber": 33,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Redoのスタックに要素が残っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#undo",
    "access": null,
    "description": "Undoを実行し、使い終わったタスクをRedoスタックに再度積みます",
    "lineNumber": 41,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#redo",
    "access": null,
    "description": "Redoを実行し、使い終わったタスクをUndoスタックに再度積みます",
    "lineNumber": 53,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "add",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#add",
    "access": null,
    "description": "undo可能な新たな操作を行った場合に、対応するDoMemoryオブジェクトを追加します",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "DoMemory"
        ],
        "spread": false,
        "optional": false,
        "name": "memory",
        "description": "追加するDoMemoryオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 590,
    "kind": "member",
    "name": "_redos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_redos",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "reset",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#reset",
    "access": null,
    "description": "スタックを初期化します",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 592,
    "kind": "member",
    "name": "_undos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_undos",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "member",
    "name": "_redos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_redos",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "class",
    "name": "DoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~DoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{DoMemory}",
    "description": "Undo, Redoを記憶するすべてのオブジェクトの基底クラス",
    "lineNumber": 87,
    "interface": false
  },
  {
    "__docId__": 595,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~DoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoMemory#constructor",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~DoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoMemory#undo",
    "access": null,
    "description": "Undoします\nこのメソッドは、サブクラスでオーバーライドする必要があります",
    "lineNumber": 96,
    "params": []
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~DoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoMemory#redo",
    "access": null,
    "description": "Redoします\nこのメソッドは、サブクラスでオーバーライドする必要があります",
    "lineNumber": 104,
    "params": []
  },
  {
    "__docId__": 598,
    "kind": "class",
    "name": "PrintDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~PrintDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{PrintDoMemory}",
    "description": "文字をカーソルから入力した際のUndo,Redoを担当するクラス",
    "lineNumber": 113,
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 599,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cursor"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "カーソルオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "対象となる文字の配列"
      }
    ]
  },
  {
    "__docId__": 600,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "member",
    "name": "_memoryChar",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#_memoryChar",
    "access": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "class",
    "name": "DeleteDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~DeleteDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{DeleteDoMemory}",
    "description": "文字をカーソルから削除した際のUndo,Redoを担当するクラス",
    "lineNumber": 146,
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 606,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cursor"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "カーソルオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "対象となる文字の配列"
      }
    ]
  },
  {
    "__docId__": 607,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "_memoryChar",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#_memoryChar",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "class",
    "name": "LineBreakDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~LineBreakDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{LineBreakDoMemory}",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 613,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cursor"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "カーソルオブジェクト"
      }
    ]
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "_memoryChar",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#_memoryChar",
    "access": null,
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "class",
    "name": "ColorDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~ColorDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{ColorDoMemory}",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 619,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い文字色も情報として必要となるので、必ず文字色変更前に作成してください",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "文字色を変更したCharインスタンスの配列",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "変更後の文字色",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "_oldColors",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#_oldColors",
    "access": null,
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "_newColor",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#_newColor",
    "access": null,
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "class",
    "name": "ItalicDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~ItalicDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{ItalicDoMemory}",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 626,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "斜体に変更されたCharインスタンスの配列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "変更後の状態を表す真偽値",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 627,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "_olders",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#_olders",
    "access": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "_blNew",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#_blNew",
    "access": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "class",
    "name": "BoldDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~BoldDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{BoldDoMemory}",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 633,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "太字に変更されたCharインスタンスの配列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "変更後の状態を表す真偽値",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 634,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "member",
    "name": "_olders",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#_olders",
    "access": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "member",
    "name": "_blNew",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#_blNew",
    "access": null,
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "class",
    "name": "FontSizeDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~FontSizeDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{FontSizeDoMemory}",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 640,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "フォントサイズが変更されたCharインスタンスの配列"
      },
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "newSize",
        "description": "変更後のフォントサイズ"
      }
    ]
  },
  {
    "__docId__": 641,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "_olders",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#_olders",
    "access": null,
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "_newSize",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#_newSize",
    "access": null,
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "file",
    "name": "js/utils.js",
    "content": "'use strict';\n// \t要素の再利用のため、要素作成のみクロージャで行う\n\n\nexport const Util = {  // jshint ignore:line\n    //{{{\n    /**\n     * baseArrayをcnt個ずつの配列に分割する\n     */\n    splitArray:function(baseArray,  cnt) {\n        const b = baseArray.length;\n        const newArray = [];\n\n        for (let i = 0,j,p; i < Math.ceil(b/cnt); i++) {\n            j = i * cnt;\n            p = baseArray.slice(j,j+cnt);\n            newArray.push(p);\n        }\n        return newArray;\n    },\n\n    copyArray:function (array) {\n        const retArray = [];\n        for (let value of array) {\n            retArray.push(value);\n        }\n        return retArray;\n    },\n\n    // ２点間の距離を計算する\n    computeDistanceP2P:function(x1, y1, x2, y2) {\n        // ２乗を使っているので、戻り値は必ず正の数になる\n        // √{(b.x - a.x)^2+ (b.y - a.y)^2}\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    },\n\n    post: function (url, data, callback) {\n        this._communicate(url, callback, 'POST', data);\n    },\n\n    get: function (url, callback, opt_data) {\n        this._communicate(url, callback, 'GET', opt_data);\n    },\n\n    _communicate: function (url, callback, methodType, opt_data) {\n        let sendData = '';\n        if (opt_data) {\n            for (let name in opt_data) {\n                if (sendData !== '') {\n                    sendData += '&';\n                }\n                sendData += name + '=' + encodeURI(opt_data[name]).replace(/&/g, '%26');\n            }\n        }\n\n        if (methodType === 'GET') {\n            url += '?' + sendData;  // GET通信ではsendの引数は無視されるのでurlにデータを追加する\n        }\n\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.open(methodType, url);\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n        xhr.addEventListener('load', function (e) {\n            if (xhr.response) {\n                callback(xhr.response);\n            } else {\n            }\n        });\n        xhr.addEventListener('abort', function (e) {\n            console.log('abort', e);\n        });\n        xhr.send(sendData);\n    }\n};//}}}\n\n\n/**\n * DOM要素を生成する関数の集まりです\n */\nexport const ElemCreator = {};//{{{\n\nElemCreator.createCharElement = (function () {//{{{\n    const eCharTemplate = document.createElement('span');\n    eCharTemplate.classList.add('char');\n    eCharTemplate.classList.add('display');\n\n    return function (data) {\n        const eChar = eCharTemplate.cloneNode(true);\n        const char = data.char;\n        const classArr = data.decolation;\n        const fontSize = data.fontSize;\n        eChar.textContent = char;\n        eChar.dataset.fontSize = fontSize || 'auto';\n        for (let decolation of classArr) {\n            eChar.classList.add(decolation);\n        }\n\n        // 文字の種類に応じて付与するクラス\n        if (/[。、,.,]/.test(char)) {\n            eChar.classList.add('vertical-dot');\n        } else if (/[「『]/.test(char)) {\n            eChar.classList.add('vertical-before-kagi-bracket');\n        } else if (/[」』]/.test(char)) {\n            eChar.classList.add('vertical-after-kagi-bracket');\n        } else if (/[（\\[<\\{【\\(［〈]/.test(char)) {\n            eChar.classList.add('vertical-before-bracket');\n        } else if (/[\\)\\]>\\}】）］〉]/.test(char)) {\n            eChar.classList.add('vertical-after-bracket');\n        } else if (/[-ー―〜]/.test(char)) {\n            eChar.classList.add('character-line');\n        } else if (/[a-z]/.test(char)) {\n            eChar.classList.add('alphabet');\n        } else if (/[１-９]/.test(char)) {\n            eChar.classList.add('number');\n        } else if (/[っゃゅょぁぃぅぇぉァィゥェォッャュョ]/.test(char)) {\n            eChar.classList.add('yoin');\n        }\n\n        return eChar;\n    };\n})();//}}}\n\nElemCreator.createRowElement = (function () {//{{{\n    /*\n     *\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n     *\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n     *\t\t\t\"char\":\"あ\",\n     *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t},\n     *\t\t{\n     *\t\t\t\"char\":\"い\",\n     *\t\t\t\"decolation\":null\n     *\t\t}\n     *\t]\n     */\n    const eRowTemplate = document.createElement('div');\n    eRowTemplate.classList.add('row');\n    eRowTemplate.classList.add('display');\n    const eEOL = document.createElement('span');\n    eEOL.classList.add('char');\n    eEOL.classList.add('EOL');\n    eEOL.classList.add('display');\n    eRowTemplate.appendChild(eEOL);\n\n    return function (data) {\n        const eRow = eRowTemplate.cloneNode(true);\n        return eRow;\n    };\n})();//}}}\n\nElemCreator.createParagraphElement = (function () {//{{{\n    /*\n     * \t\t\t[\n     * \t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n     * \t\t\t\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n     * \t\t\t\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n     * \t\t\t\t\t\t\"char\":\"あ\",\n     * \t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     * \t\t\t\t\t},\n     * \t\t\t\t\t{\n     * \t\t\t\t\t\t\"char\":\"い\",\n     * \t\t\t\t\t\t\"decolation\":[]\n     * \t\t\t\t\t}\n     * \t\t\t\t\t]\n     * \t\t\t]\n     */\n    const eParagraphTemplate = document.createElement('div');\n    eParagraphTemplate.classList.add('paragraph');\n\n    return function (data) {\n        const eParagraph = eParagraphTemplate.cloneNode(true);\n        // 段落そのものにクラスを付与する\n        for (let className of data[0]) {\n            eParagraph.classList.add(className);\n        }\n        return eParagraph;\n    };\n})();//}}}\n\nElemCreator.createCharPosElement = (function () {//{{{\n    const eCharPosTemplate = document.createElement('span');\n    eCharPosTemplate.classList.add('char-pos');\n\n    return function (strLen) {\n        const flagment = document.createDocumentFragment();\n        for (var i = 0; i <= strLen; i++) { // EOLの分も作成する\n            const eCharPos = eCharPosTemplate.cloneNode(true);\n            flagment.appendChild(eCharPos);\n        }\n        return flagment;\n    };\n})();//}}}\n\nElemCreator.createConvertViewElement = (function () {//{{{\n    const eViewTemplate = document.createElement('div');\n    eViewTemplate.classList.add('convert-view');\n\n    return function () {\n        const eView = eViewTemplate.cloneNode(true);\n        return eView;\n    };\n})();//}}}\n\n// file_listの中に入れるファイル行を作成する\nElemCreator.createFileElement = (function () {//{{{\n    /*\n     * 作成例\n     * <li>\n     * <a class=\"file\"\n     * data-type=\"file\"\n     * href=\"#\"\n     * data-file-id=\"1\"\n     * data-file-name=\"filename\"\n     * >\n     * filename\n     * </a>\n     * </li>\n     */\n    const eFileTemplate = document.createElement('li');\n    eFileTemplate.classList.add('fileLi');\n    const eFileLinkTemplate = document.createElement('a');\n    eFileLinkTemplate.classList.add('file');\n    eFileLinkTemplate.dataset.type = 'file';\n    eFileLinkTemplate.href = '#';\n\n    return function (id,filename) {\n        const eFile = eFileTemplate.cloneNode(true);\n        const eFileLink = eFileLinkTemplate.cloneNode(true);\n        eFileLink.dataset.fileId = id;\n        eFileLink.dataset.fileName = filename;\n        eFileLink.textContent = filename;\n        eFile.appendChild(eFileLink);\n        return eFile;\n    };\n})();//}}}\n\n// file_listの中に入れるディレクトリ行を作成する\nElemCreator.createDirectoryElement = (function () {//{{{\n    /*\n     * 作成例\n     * <li>\n     * \t<a class=\"directory\"\n     * \tdata-type=\"directory\"\n     * \tdata-toggle=\"collapse\"\n     * \tdata-directory-id=\"1\"\n     * \tdata-directory-name=\"filename.directoryname\"\n     * \thref=\"#directory1\"\n     * \t>\n     *\t\t<span\n     *\t\tclass=\"glyphicon glyphicon-folder-close\"\n     *\t\taria-hidden=\"true\">\n     *\t\t</span>\n     *\t\tfilename.directoryname\n     *\t\t</a>\n     *\n     *\t\t<div class=\"collapse\" id=\"directory1\">\n     *\t\t\t<div class=\"well\">\n     *\t\t\t\t<ul>\n     *\t\t\t\t\t<li>filename</li>\n     *\t\t\t\t\t<li>filename</li>\n     *\t\t\t\t\t<li>filename</li>\n     *\t\t\t\t</ul>\n     *\t\t\t</div>\n     *\t\t</div>\n     *\t</li>\n     */\n    const eDirectoryTemplete = document.createElement('li');\n    eDirectoryTemplete.classList.add('dirLi');\n    const eDirLinkTemplete = document.createElement('a');\n    eDirLinkTemplete.classList.add('directory');\n    eDirLinkTemplete.dataset.type = 'directory';\n    eDirLinkTemplete.dataset.toggle = 'collapse';\n    eDirLinkTemplete.innerHTML =\n        '<span class=\"glyphicon glyphicon-folder-close\" aria-hidden=\"true\"></span>'; // フォルダアイコン\n\n    const eCollapseTemplate = document.createElement('div');\n    const eInnerUlTemplate = document.createElement('ul');\n    const eWellTemplate = document.createElement('div');\n    eCollapseTemplate.classList.add('collapse');\n    eWellTemplate.classList.add('well');\n\n    return function (id,innerData) {\n        const eDirectory = eDirectoryTemplete.cloneNode(true);\n        const eDirLink = eDirLinkTemplete.cloneNode(true);\n        const directoryname = innerData.directoryname;\n        eDirLink.dataset.directoryId = id;\n        eDirLink.dataset.directoryName = directoryname;\n        eDirLink.href = '#directory' + id;\n        eDirLink.insertAdjacentHTML('beforeend',directoryname);\n\n        eDirectory.appendChild(eDirLink);\n\n        const eCollapse = eCollapseTemplate.cloneNode(true);\n        const eInnerUl = eInnerUlTemplate.cloneNode(true);\n        const eWell = eWellTemplate.cloneNode(true);\n        eCollapse.id = 'directory' + id;\n\n        // eInnerUl内にファイルリストを加える\n\n        eCollapse.appendChild(eWell);\n        eWell.appendChild(eInnerUl);\n\n        eDirectory.appendChild(eCollapse); // コラプスも加える\n        return eDirectory;\n    };\n})();//}}}//}}}\n\n\n/**\n * キーコードから日本語文字列を作成します\n */\nexport const KeyTable = {  // jshint ignore:line\n    //{{{\n    makeString : function (buffer_string, keycode) {//{{{\n        // bufferに文字なし キーコードの文字をそのまま返す\n        if (buffer_string.length === 0) {\n            return this.keyTable[keycode];\n        }\n        if(buffer_string.length === 1) {\n            return this.makeStringFromOnceBufferString(buffer_string, keycode);\n        }\n        return this.makeStringFromMultipleBufferString(buffer_string, keycode);\n    },\n\n    makeStringFromOnceBufferString : function (buffer_string, keycode) {\n        // bufferの文字がアルファベットでなければbufferの文字とキーコード文字を連結した文字列を返す\n        if (!this.convertable.includes(buffer_string)) {\n            return buffer_string + this.keyTable[keycode];\n        }\n\n        // bufferの文字が変換可能アルファベット\n        const s = this.keyTable[buffer_string]; // keytableからオブジェクト取得\n        // オブジェクトにキーコードを与えて、変換文字取得\n        const str =  s[keycode];\n        if (str) {\n            return str; // 変換できた場合 buffer文字をkeytableに与えて返ってきたオブジェクトにkeycodeを与えて得た文字を返す\n        }\n\n        // 変換文字が取得できないということは、アルファベット二文字が変換可能な組み合わせではないということ\n        const typestr = this.keyTable[keycode];\n        // 例えばzzと打つなど同じアルファベットの連続の場合、'っｚ'と返す\n        if (buffer_string === typestr) {\n            return 'っ' + typestr;\n        }\n\n        // 異なるアルファベットの場合、そのまま連結\n        return buffer_string + typestr;\n    },\n\n    makeStringFromMultipleBufferString : function (buffer_string, keycode) {\n        const noEncode = buffer_string.substring(0,buffer_string.length - 2); // 変換しない文字\n        const first = buffer_string.charAt(buffer_string.length - 2);\n        const second = buffer_string.charAt(buffer_string.length -1);\n\n        // bufferの後ろから二文字目がアルファベット\n        if (this.convertable.includes(first)) {\n            // 最後の文字がアルファベットでないならそのまま連結 'sた + r'などの場合\n            if (!this.convertable.includes(second)) {\n                return buffer_string + this.keyTable[keycode];\n            }\n\n            // bufferの最後に変換可能アルファベット二文字\n            const o = this.keyTable[first][second]; // 第一添字がアルファベットなら必ず第二添字のためのオブジェクトは返ってくる\n            if (o) {\n                const str = o[keycode];\n                // 三文字で１文字が完成した場合\n                // sy + a →  'しゃ' など\n                if (str) {\n                    return noEncode + str;\n                }\n            }\n        }\n\n        // 最後から二文字目が変換可能アルファベットではない\n        // 三文字で一文字が完成しない場合、後ろ二文字で１文字が完成する可能性 staの三文字で'sた'となる場合がある\n        //     後ろ二文字で１文字が完成しなければそのまま二文字が返ってくるので、やはりfirstを挟んで連結\n        return noEncode + first + this.makeStringFromOnceBufferString(second, keycode);\n    },//}}}\n\n    convertable :\n        ['k','s','t','n','h','m','y','r','w','g','z','d','b','p','j','f','l','x','c','v','q'],\n\n    katakana : {//{{{\n        'あ' : 'ア',\n        'い' : 'イ',\n        'う' : 'ウ',\n        'え' : 'エ',\n        'お' : 'オ',\n        'か' : 'カ',\n        'き' : 'キ',\n        'く' : 'ク',\n        'け' : 'ケ',\n        'こ' : 'コ',\n        'さ' : 'サ',\n        'し' : 'シ',\n        'す' : 'ス',\n        'せ' : 'セ',\n        'そ' : 'ソ',\n        'た' : 'タ',\n        'ち' : 'チ',\n        'つ' : 'ツ',\n        'て' : 'テ',\n        'と' : 'ト',\n        'な' : 'ナ',\n        'に' : 'ニ',\n        'ぬ' : 'ヌ',\n        'ね' : 'ネ',\n        'の' : 'ノ',\n        'は' : 'ハ',\n        'ひ' : 'ヒ',\n        'ふ' : 'フ',\n        'へ' : 'ヘ',\n        'ほ' : 'ホ',\n        'ま' : 'マ',\n        'み' : 'ミ',\n        'む' : 'ム',\n        'め' : 'メ',\n        'も' : 'モ',\n        'や' : 'ヤ',\n        'ゆ' : 'ユ',\n        'よ' : 'ヨ',\n        'ら' : 'ラ',\n        'り' : 'リ',\n        'る' : 'ル',\n        'れ' : 'レ',\n        'ろ' : 'ロ',\n        'わ' : 'ワ',\n        'を' : 'ヲ',\n        'ん' : 'ン',\n        'が' : 'ガ',\n        'ぎ' : 'ギ',\n        'ぐ' : 'グ',\n        'げ' : 'ゲ',\n        'ご' : 'ゴ',\n        'ざ' : 'ザ',\n        'じ' : 'ジ',\n        'ず' : 'ズ',\n        'ぜ' : 'ゼ',\n        'ぞ' : 'ゾ',\n        'だ' : 'ダ',\n        'ぢ' : 'ヂ',\n        'づ' : 'ヅ',\n        'で' : 'デ',\n        'ど' : 'ド',\n        'ば' : 'バ',\n        'び' : 'ビ',\n        'ぶ' : 'ブ',\n        'べ' : 'ベ',\n        'ぼ' : 'ボ',\n        'ゃ' : 'ャ',\n        'ゅ' : 'ュ',\n        'ょ' : 'ョ',\n        'ぁ' : 'ァ',\n        'ぃ' : 'ィ',\n        'ぅ' : 'ゥ',\n        'ぇ' : 'ェ',\n        'ぉ' : 'ォ',\n        'っ' : 'ッ'\n    },//}}}\n\n    shiftKey : {//{{{\n        '49' : '!',\n        '50' : '”',\n        '51' : '＃',\n        '52' : '＄',\n        '53' : '％',\n        '54' : '＆',\n        '55' : '\\’',\n        '56' : '（',\n        '57' : '）',\n        '187' : '〜',\n        '188' : '〈',\n        '190' : '〉',\n        '191' : '？',\n        '220' : '}',\n        '221' : '{',\n        '65': 'A',\n        '66': 'B',\n        '67': 'C',\n        '68': 'D',\n        '69': 'E',\n        '70': 'F',\n        '71': 'G',\n        '72': 'H',\n        '73': 'I',\n        '74': 'J',\n        '75': 'K',\n        '76': 'L',\n        '77': 'M',\n        '78': 'N',\n        '79': 'O',\n        '80': 'P',\n        '81': 'Q',\n        '82': 'R',\n        '83': 'S',\n        '84': 'T',\n        '85': 'U',\n        '86': 'V',\n        '87': 'W',\n        '88': 'X',\n        '89': 'Y',\n        '90': 'Z'\n    },//}}}\n\n    keyTable : {//{{{\n        '48': '０',//{{{\n        '49': '１',\n        '50': '２',\n        '51': '３',\n        '52': '４',\n        '53': '５',\n        '54': '６',\n        '55': '７',\n        '56': '８',\n        '57': '９',\n        '65': 'あ',\n        '73': 'い',\n        '85': 'う',\n        '69': 'え',\n        '79': 'お',\n        '75': 'k',\n        '83': 's',\n        '84': 't',\n        '78': 'n',\n        '72': 'h',\n        '77': 'm',\n        '89': 'y',\n        '82': 'r',\n        '87': 'w',\n        '71': 'g',\n        '90': 'z',\n        '68': 'd',\n        '66': 'b',\n        '80': 'p',\n        '74': 'j',\n        '70': 'f',\n        '76': 'l',\n        '88': 'x',\n        '67': 'c',\n        '86': 'v',\n        '81': 'q',\n        '188': '、',\n        '189': 'ー',\n        '190': '。',\n        '191': '・',\n        '219' : '＠',\n        '220' : '」',\n        '221' : '「',//}}}\n        'k': { '65': 'か', '73': 'き', '85': 'く', '69': 'け', '79': 'こ',//{{{\n            'y':{\n                '65': 'きゃ', '73': 'きぃ', '85': 'きゅ', '69': 'きぇ', '79': 'きょ'\n            }\n        },\n        's': {\n            '65': 'さ', '73': 'し', '85': 'す', '69': 'せ', '79': 'そ',\n            'y' : {\n                '65': 'しゃ', '73': 'しぃ', '85': 'しゅ', '69': 'しぇ', '79': 'しょ'\n            },\n            'h' : {\n                '65': 'しゃ', '73': 'し', '85': 'しゅ', '69': 'しぇ', '79': 'しょ'\n            }\n        } ,\n        't': { '65': 'た', '73': 'ち', '85': 'つ', '69': 'て', '79': 'と',\n            'y' : {\n                '65': 'ちゃ', '73': 'ちぃ', '85': 'ちゅ', '69': 'ちぇ', '79': 'ちょ'\n            }\n        },\n        'n': { '65': 'な', '73': 'に', '85': 'ぬ', '69': 'ね', '79': 'の','78': 'ん',\n            'y' : {\n                '65': 'にゃ', '73': 'にぃ', '85': 'にゅ', '69': 'にぇ', '79': 'にょ'\n            }\n        },\n        'h': { '65': 'は', '73': 'ひ', '85': 'ふ', '69': 'へ', '79': 'ほ',\n            'y' : {\n                '65': 'ひゃ', '73': 'ひぃ', '85': 'ひゅ', '69': 'ひぇ', '79': 'ひょ'\n            }\n        },\n        'm': { '65': 'ま', '73': 'み', '85': 'む', '69': 'め', '79': 'も',\n            'y' : {\n                '65': 'みゃ', '73': 'みぃ', '85': 'みゅ', '69': 'みぇ', '79': 'みょ'\n            }\n        },\n        'y': { '65': 'や', '73': 'い', '85': 'ゆ', '69': 'いぇ', '79': 'よ' },\n        'r': { '65': 'ら', '73': 'り', '85': 'る', '69': 'れ', '79': 'ろ',\n            'y' : {\n                '65': 'りゃ', '73': 'りぃ', '85': 'りゅ', '69': 'りぇ', '79': 'りょ'\n            }\n        },\n        'w': { '65': 'わ', '73': 'うぃ', '85': 'う', '69': 'うぇ', '79': 'を' },\n        'g': { '65': 'が', '73': 'ぎ', '85': 'ぐ', '69': 'げ', '79': 'ご',\n            'y' : {\n                '65': 'ぎゃ', '73': 'ぎぃ', '85': 'ぎゅ', '69': 'ぎぇ', '79': 'ぎょ'\n            }\n        },\n        'z': { '65': 'ざ', '73': 'じ', '85': 'ず', '69': 'ぜ', '79': 'ぞ',\n            'y' : {\n                '65': 'じゃ', '73': 'じぃ', '85': 'じゅ', '69': 'じぇ', '79': 'じょ'\n            }\n        },\n        'd': { '65': 'だ', '73': 'ぢ', '85': 'づ', '69': 'で', '79': 'ど',\n            'y' : {\n                '65': 'ぢゃ', '73': 'ぢぃ', '85': 'ぢゅ', '69': 'ぢぇ', '79': 'ぢょ'\n            }\n        },\n        'b': { '65': 'ば', '73': 'び', '85': 'ぶ', '69': 'べ', '79': 'ぼ',\n            'y' : {\n                '65': 'びゃ', '73': 'びぃ', '85': 'びゅ', '69': 'びぇ', '79': 'びょ'\n            }\n        },\n        'p': { '65': 'ぱ', '73': 'ぴ', '85': 'ぷ', '69': 'ぺ', '79': 'ぽ',\n            'y' : {\n                '65': 'ぴゃ', '73': 'ぴぃ', '85': 'ぴゅ', '69': 'ぴぇ', '79': 'ぴょ'\n            }\n        },\n        'j': { '65': 'じゃ', '73': 'じ', '85': 'じゅ', '69': 'じぇ', '79': 'じょ' },\n        'f': { '65': 'ふぁ', '73': 'ふぃ', '85': 'ふ', '69': 'ふぇ', '79': 'ふぉ' },\n        'l': { '65': 'ぁ', '73': 'ぃ', '85': 'ぅ', '69': 'ぇ', '79': 'ぉ' },\n        'x': { '65': 'ぁ', '73': 'ぃ', '85': 'ぅ', '69': 'ぇ', '79': 'ぉ' },\n        'c': { '65': 'か', '73': 'し', '85': 'く', '69': 'せ', '79': 'こ' },\n        'v': { '65': 'ヴァ', '73': 'ヴィ', '85': 'ヴ', '69': 'ヴェ', '79': 'ヴォ' },\n        'q': { '65': 'くぁ', '73': 'くぃ', '85': 'く', '69': 'くぇ', '79': 'くぉ' }//}}}\n    }//}}}\n};//}}}\n",
    "static": true,
    "longname": "js/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 647,
    "kind": "variable",
    "name": "Util",
    "memberof": "js/utils.js",
    "static": true,
    "longname": "js/utils.js~Util",
    "access": null,
    "export": true,
    "importPath": "./js/utils.js",
    "importStyle": "{Util}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"splitArray\": *, \"copyArray\": *, \"computeDistanceP2P\": *, \"post\": *, \"get\": *, \"_communicate\": *}"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "variable",
    "name": "ElemCreator",
    "memberof": "js/utils.js",
    "static": true,
    "longname": "js/utils.js~ElemCreator",
    "access": null,
    "export": true,
    "importPath": "./js/utils.js",
    "importStyle": "{ElemCreator}",
    "description": "DOM要素を生成する関数の集まりです",
    "lineNumber": 82,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "variable",
    "name": "KeyTable",
    "memberof": "js/utils.js",
    "static": true,
    "longname": "js/utils.js~KeyTable",
    "access": null,
    "export": true,
    "importPath": "./js/utils.js",
    "importStyle": "{KeyTable}",
    "description": "キーコードから日本語文字列を作成します",
    "lineNumber": 314,
    "type": {
      "types": [
        "{\"makeString\": *, \"makeStringFromOnceBufferString\": *, \"makeStringFromMultipleBufferString\": *, \"convertable\": *, \"katakana\": *, \"shiftKey\": *, \"keyTable\": *}"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 652,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 653,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 654,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 655,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 656,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 657,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 658,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 659,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 660,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 661,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 662,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 663,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 664,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 665,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 666,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 667,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 668,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 669,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 670,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 671,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 672,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 673,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 674,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 675,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 676,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 677,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 678,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 679,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 680,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 681,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 682,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 683,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 684,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 685,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 686,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 687,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 688,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 689,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 690,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 691,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 692,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 693,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 694,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 695,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 696,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 697,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 699,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 700,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 701,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 702,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 703,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 704,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 705,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 706,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]