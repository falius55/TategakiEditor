[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "js/abstract.js",
    "content": "'use strict';\n/* global Util */\n/**\n * ヒエラルキー構造を持つ各クラスの基底クラス\n * 木構造とは異なり、枝分かれしていても同列のオブジェクト間でポインタを持ち合います\n */\nexport class AbstractHierarchy {  // jshint ignore:line\n    // constructor {{{\n    /**\n     * @param {Element} elem 自身のDOM要素\n     */\n    constructor(elem) {\n        this._elem = elem;\n        this._parent = null;\n        this._next = null;\n        this._prev = null;\n        this._children = [];\n        this._width = null;\n        this._height = null;\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 自身のDOM要素を返します\n     * @return {Element} 自身のDOM要素\n     */\n    elem() {\n        return this._elem;\n    }\n\n    /**\n     * 自身の親を設定します。また、引数を省略すると自身の親を取得します\n     * @param {AbstractHierarchy} [opt_newParent] 新たに設定する親\n     * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)\n     */\n    parent(opt_newParent) {\n        if (opt_newParent === undefined) { // nullが渡されることもあるのでundefinedと厳密に比較\n            return this._parent;\n        }\n\n        this._parent = opt_newParent;\n        return this;\n    }\n\n    /**\n     * 自身の次にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の次にある同列のインスタンスを取得します\n     * @param {AbstractHierarchy} [opt_newNext] 新たに設定するインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の次にある同列のインスタンス(引数を省略した場合)、後者はなければnull\n     */\n    next(opt_newNext) {\n        if (opt_newNext === undefined) {\n            return this._next;\n        }\n\n        this._next = opt_newNext;\n        return this;\n    }\n\n    /**\n     * 自身の前にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の前にある同列のインスタンスを取得します\n     * @param {AbstractHierarchy} [opt_newPrev] 新たに設定するインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の前にある同列のインスタンス(引数を省略した場合)、後者はなければnull\n     */\n    prev(opt_newPrev) {\n        if (opt_newPrev === undefined) {\n            return this._prev;\n        }\n\n        this._prev = opt_newPrev;\n        return this;\n    }\n\n    /**\n     * 指定されたインデックスの子を取得します。また、引数省略で自身の子を配列で取得します\n     * @param {number} [opt_index] 取得する子のインデックス。範囲外ならundefinedが返される\n     * @return {AbstractHierarchy} indexで指定された子(引数を渡した場合)あるいは自身の子の配列(引数を省略した場合)\n     */\n    children(opt_index) {\n        if (opt_index === undefined) {\n            return Util.copyArray(this._children);\n        }\n\n        return this._children[opt_index];\n    }\n\n    /**\n     * 自身の最初の子を取得します\n     * @return {AbstractHierarchy} 自身の最初の子。子がいなければnull\n     */\n    firstChild() {\n        if (!this.hasChild()) {\n            return null;\n        }\n\n        return this._children[0];\n    }\n\n    /**\n     * 自身の最後の子を取得します\n     * @return {AbstractHierarchy} 自身の最後の子。子がいなければnull\n     */\n    lastChild() {\n        if (!this.hasChild()) {\n            return null;\n        }\n\n        return this._children[this.childLength()-1];\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * objが自身と同一のオブジェクトかどうかを返します\n     * @param {AbstractHierarchy} obj 比較するオブジェクト\n     * @return {boolean} objが自身と同一ならtrue、そうでなければfalse\n     */\n    is(obj) {\n        return obj === this;\n    }\n\n    /**\n     * 自身がクラスにclassNameを持っているかどうかを返します\n     * @param {string} className 判定するクラス名\n     * @return {boolean} 自身がclassNameを付与されていればtrue、そうでなければfalse\n     */\n    hasClass(className) {\n        return this._elem.classList.contains(className);\n    }\n\n    /**\n     * 自身が子を持っているかどうかを返します\n     * @return {boolean} 自身が子を持っていればtrue、そうでなければfalse\n     */\n    hasChild() {\n        return this._children.length > 0;\n    }\n\n    /**\n     * 自身が親にとって唯一の子であるかどうかを返します\n     * @return {boolean} 自身が親にとって唯一の子であればtrue、そうでなければfalse\n     */\n    isOnlyChild() {\n        return this.parent().childLength() === 1 && this.parent().children(0) === this;\n    }\n\n    /**\n     * 自身の子が空であるかどうかを返します\n     * @return {boolean} 自身が子を持っていなければtrue、そうでなければfalse\n     */\n    isEmpty() {\n        return this._children.length === 0;\n    }\n\n    /**\n     * 同一の親を持つ次の兄弟が存在するかどうかを返します\n     * @return {boolean} 自身の次のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse\n     */\n    hasNextSibling() {\n        if (this.next()) {\n            return this.next().parent() === this.parent();\n        }\n\n        return false;\n    }\n\n    /**\n     * 同一の親を持つ前の兄弟が存在するかどうかを返します\n     * @return {boolean} 自身の前のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse\n     */\n    hasPrevSibling() {\n        if (this.prev()) {\n            return this.prev().parent() === this.parent();\n        }\n\n        return false;\n    }\n\n    /**\n     * 自身が親の第一の子であるかどうかを返します\n     * @return {boolean} 自身の前のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse\n     */\n    isFirst() {\n        return !this.hasPrevSibling();\n    }\n\n    /**\n     * 自身が親の最後の子であるかどうかを返します。Charの場合は、EOLの前の文字とEOLの２つでtrueを返します\n     * @return {boolean} 自身の次のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse\n     */\n    isLast() {\n        return !this.hasNextSibling();\n    }//}}}\n\n    // --参照操作 {{{\n    /**\n     * childを自身の子の最後に加えます\n     * @param {AbstractHierarchy} child 自身の子の最後に加えるインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    pushChild(child) {\n        this._children.push(child);\n        return this;\n    }\n\n    /**\n     * 自身の子のpos番目にchildを加えます\n     * @param {number} pos childを加える位置のインデックス(０始まり)\n     * @param {AbstractHierarchy} child 子に加えるインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    insertChild(pos,child) {\n        // 配列の範囲外の数値を渡されたらpushに切り替える\n        if (pos < 0 || pos >= this._children.length) {\n            return this.pushChild(child);\n        }\n\n        this._children.splice(pos,0,child);\n        return this;\n    }\n\n    /**\n     * childを自身の子から削除します\n     * @param {AbstractHierarchy} child 自身の子から削除するインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    deleteChild(child) {\n        const pos = child.index();\n\n        this._children.splice(pos, 1);\n        child.parent(null);\n        return this;\n    }\n\n    /**\n     * 自身の子のoldChildを子から削除し、新たにnewChildを同じ位置に加えます\n     * @param {AbstractHierarchy} oldChild 入替えられる自身の子のインスタンス\n     * @param {AbstractHierarchy} newChild 入れ替える自身の子でなかったインスタンス\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    replaceChild(oldChild,newChild) {\n        const pos = oldChild.index();\n\n        this._children.splice(pos, 1, newChild);\n        return this;\n    }\n\n    /**\n     * 子の参照を自身から切り離して空にします。DOM要素には影響しません\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    emptyChild() {\n        this._children = [];\n        return this;\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 自身が表す文字列を返します\n     * @return {string} 自身の内部にある文字列\n     */\n    text() {\n        return this.elem().textContent;\n    }\n\n    /**\n     * 自身が表す文字列の文字数を返します\n     * @return {number} 自身の内部にある文字列の文字数\n     */\n    length() {\n        return this.text().length;\n    }\n\n    /**\n     * 同一の親を持つ兄弟の中でのインデックスを返します\n     * @return {number} 同一の親を持つ兄弟の中での０始まりのインデックス\n     */\n    index() {\n        const siblings = this.parent().children();\n        return siblings.indexOf(this);\n    }\n\n    /**\n     * 自身の子の数を返します\n     * @return {number} 自身の子の数\n     */\n    childLength() {\n        // Rowではchildren()の意味が違うので、混同しないようchildren()をさけて直接プロパティにアクセスする\n        return this._children.length;\n    }//}}}\n\n    // --Style {{{\n    /**\n     * 自身の持つクラスすべてをひとつの文字列で返します\n     * @return {string} 自身の持つすべてのクラス名\n     */\n    className() {\n        return this._elem.className || ''; // クラスがひとつもなければ空文字\n    }\n\n    /**\n     * 自身のクラスにclassNameを加えます\n     * @param {string} className 自身のクラスに加えるクラス名\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addClass(className) {\n        this._elem.classList.add(className);\n        return this;\n    }\n\n    /**\n     * 自身のクラスからclassNameを除去します\n     * @param {string} className 自身のクラスから除去するクラス名\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeClass(className) {\n        this._elem.classList.remove(className);\n        return this;\n    }\n\n    /**\n     * 自身の持つすべての子のクラスからclassNameを除去します\n     * @param {string} className 除去するクラス名\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeClassFromAllChild(className) {\n        for (let child of this._children) {\n            child.removeClass(className);\n        }\n        return this;\n    }\n\n    /**\n     * 自身の高さを取得します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の高さ\n     */\n    height(opt_useCache) {\n        // elementが不可視状態にあれば長さが０になったり、ブラウザごとに取得手段に違いがあったり直接指定されているstyleとcssでの指定の違い、cssでの指定が'auto'になっていると文字列が返ってきたりと\n        // javascriptでのcss値の取得は複雑で困難であることから、jQueryの使用が適していると判断した(不可視の要素は一時的に可視状態にしてから取得するので、レンダリングが発生する可能性は高い)\n        // 読み込み時には時間がかかるが、キャッシュすることで行移動などでは最低限の計算になると期待\n        if (opt_useCache === undefined) {\n            opt_useCache = true;\n        }\n\n        if (opt_useCache && this._height) {\n            return this._height;\n        }\n\n        this._height = parseInt($(this.elem()).css('height'));\n        return this._height;\n    }\n\n    /**\n     * 自身の幅を取得します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の幅\n     */\n    width(opt_useCache) {\n        if (opt_useCache === undefined) {\n            opt_useCache = true;\n        }\n\n        if (opt_useCache && this._width) {\n            return this._width;\n        }\n\n        this._width = parseInt($(this.elem()).css('width'));\n        return this._width;\n    }\n\n    /**\n     * 要素左上のX座標を返します\n     * @return {number} 要素左上のX座標\n     */\n    x() {\n        return this.elem().getBoundingClientRect().left + window.pageXOffset;\n    }\n\n    /**\n     * 要素左上のY座標を返します\n     * @return {number} 要素左上のY座標\n     */\n    y() {\n        return this.elem().getBoundingClientRect().top + window.pageYOffset;\n    }\n\n    /**\n     * ある点からオブジェクトの中心点までの距離を計算します\n     * @param {number} x 基準点のX座標\n     * @param {number} y 基準点のY座標\n     * @return {number} 計算された距離のピクセル数\n     */\n    computeDistanceFromPoint(x,y) {\n        const ownPos = this.computeCenterPoint();\n        return Util.computeDistanceP2P(x,y,ownPos.x,ownPos.y);\n    }\n\n    /**\n     * 中心点の座標を返します\n     * @return {object} プロバティxにX座標、プロパティyにY座標の入ったオブジェクト\n     */\n    computeCenterPoint() {\n        return {\n            x: this.x() + this.width()/2,\n            y: this.y() + this.height()/2\n        };\n    }//}}}\n\n    // --DOM操作関係 //{{{\n    /**\n     * 内部のエレメントを空にします。childrenとして持っていない要素(EOLなど)は削除されません\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    emptyElem() {\n        for (let child of this._children) {\n            this.elem().removeChild(child.elem());\n        }\n        return this;\n    }\n\n    /**\n     * 内部のエレメントに加え、内部の参照も空にします\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    empty() {\n        this.emptyElem();\n        this.emptyChild();\n        return this;\n    }//}}}\n\n    // --イベント //{{{\n    /**\n     * 自身にkeydownイベントリスナーを付加します。重ねがけは無効となります\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        if (this._keydownArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._keydownArg = this._onKeydown.bind(this);\n        document.addEventListener('keydown', this._keydownArg);\n        return this;\n    }\n\n    /**\n     * 自身のkeydownイベントリスナーを除去します\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeKeydownEventListener() {\n        if (!this._keydownArg) {\n            return this;\n        }\n\n        document.removeEventListener('keydown', this._keydownArg);\n        this._keydownArg = null;\n        return this;\n    }\n\n    /**\n     * keydownイベントの前処理を行い、イベントを実行します\n     * @param {object} e イベントオブジェクト\n     */\n    _onKeydown(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 123) { return; } // F12のみブラウザショートカットキー\n\n        this.runKeydown(e, keycode);\n        // デフォルトの動作を無効化する\n        e.preventDefault();\n    }\n\n    /**\n     * keydownイベントの実行内容。onkeydown()内で使用するために定義しておくが、内容はサブクラスで上書きします\n     * @param {object} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    runKeydown(e, keycode) {\n        return this;\n    }\n\n    /**\n     * 自身にクリックイベントを付加します。重ねがけは無効となります\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addClickEventListener() {\n        if (this._clickArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._clickArg = this._onClick.bind(this);\n        this.elem().addEventListener('click', this._clickArg);\n        return this;\n    }\n\n    /**\n     * 自身のクリックイベントを除去します\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeClickEventListener() {\n        if (!this._clickArg) {\n            return this;\n        }\n\n        this.elem().removeEventListener('click', this._clickArg);\n        this._clickArg = null;\n        return this;\n    }\n\n    /**\n     * クリックイベントを実行します\n     * @param {Event} e イベントオブジェクト\n     */\n    _onClick(e) {\n        this.runClick(e);\n    }\n\n    /**\n     * clickイベントの実行内容です。onClick()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります\n     * @param {object} e イベントオブジェクト\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    runClick(e) {\n        return this;\n    }\n\n    /**\n     * 自身にホイールイベントを付加します。重ねがけは無効となります\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    addWheelEventListener() {\n        if (this._wheelArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._wheelArg = this._onWheel.bind(this);\n        const selector = '#' + this.elem().id;\n        $('body').on('mousewheel', selector, this._wheelArg);\n        return this;\n    }\n\n    /**\n     * 自身のホイールイベントを除去します\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    removeWheelEventListener() {\n        if (!this._wheelArg) {\n            return this;\n        }\n\n        const selector = '#' + this.elem().id;\n        $('body').off('mousewheel', selector, this._wheelArg);\n        this._wheelArg = null;\n        return this;\n    }\n\n    /**\n     * keydownイベントの前処理を行い、イベントを実行します\n     * @param {object} e イベントオブジェクト\n     * @param {number} delta ホイールの移動量\n     * @param {number} deltaX\n     * @param {number} deltaY\n     */\n    _onWheel(e,delta,deltaX,deltaY) {\n        this.runWheel(e,delta > 0);\n    }\n\n    /**\n     * ホイールイベントの実行内容です。onWheel()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります\n     * @param {object} e イベントオブジェクト\n     * @param {boolean} isUp ホイールが上方向に動いたならtrue、そうでなければfalse\n     * @return {AbstractHierarchy} 自身のインスタンス\n     */\n    runWheel(e,isUp) {\n        return this;\n    }//}}}\n}",
    "static": true,
    "longname": "js/abstract.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "AbstractHierarchy",
    "memberof": "js/abstract.js",
    "static": true,
    "longname": "js/abstract.js~AbstractHierarchy",
    "access": null,
    "export": true,
    "importPath": "./js/abstract.js",
    "importStyle": "{AbstractHierarchy}",
    "description": "ヒエラルキー構造を持つ各クラスの基底クラス\n木構造とは異なり、枝分かれしていても同列のオブジェクト間でポインタを持ち合います",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "自身のDOM要素"
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "_elem",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_elem",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "_parent",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_parent",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "_next",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_next",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "_prev",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_prev",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "_children",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_children",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "_width",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_width",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "_height",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_height",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "elem",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#elem",
    "access": null,
    "description": "自身のDOM要素を返します",
    "lineNumber": 27,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身のDOM要素"
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "parent",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#parent",
    "access": null,
    "description": "自身の親を設定します。また、引数を省略すると自身の親を取得します",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newParent",
        "description": "新たに設定する親"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "_parent",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_parent",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "next",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#next",
    "access": null,
    "description": "自身の次にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の次にある同列のインスタンスを取得します",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newNext",
        "description": "新たに設定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の次にある同列のインスタンス(引数を省略した場合)、後者はなければnull"
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "_next",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_next",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "prev",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#prev",
    "access": null,
    "description": "自身の前にある同列のインスタンスを新たに設定します。また、引数を省略すると自身の前にある同列のインスタンスを取得します",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newPrev",
        "description": "新たに設定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の前にある同列のインスタンス(引数を省略した場合)、後者はなければnull"
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "_prev",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_prev",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "children",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#children",
    "access": null,
    "description": "指定されたインデックスの子を取得します。また、引数省略で自身の子を配列で取得します",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス。範囲外ならundefinedが返される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "indexで指定された子(引数を渡した場合)あるいは自身の子の配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "firstChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#firstChild",
    "access": null,
    "description": "自身の最初の子を取得します",
    "lineNumber": 90,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身の最初の子。子がいなければnull"
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "lastChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#lastChild",
    "access": null,
    "description": "自身の最後の子を取得します",
    "lineNumber": 102,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身の最後の子。子がいなければnull"
    }
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "is",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#is",
    "access": null,
    "description": "objが自身と同一のオブジェクトかどうかを返します",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "比較するオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "objが自身と同一ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "hasClass",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasClass",
    "access": null,
    "description": "自身がクラスにclassNameを持っているかどうかを返します",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "判定するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がclassNameを付与されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "hasChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasChild",
    "access": null,
    "description": "自身が子を持っているかどうかを返します",
    "lineNumber": 134,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "isOnlyChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isOnlyChild",
    "access": null,
    "description": "自身が親にとって唯一の子であるかどうかを返します",
    "lineNumber": 142,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が親にとって唯一の子であればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isEmpty",
    "access": null,
    "description": "自身の子が空であるかどうかを返します",
    "lineNumber": 150,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "hasNextSibling",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasNextSibling",
    "access": null,
    "description": "同一の親を持つ次の兄弟が存在するかどうかを返します",
    "lineNumber": 158,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の次のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "hasPrevSibling",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#hasPrevSibling",
    "access": null,
    "description": "同一の親を持つ前の兄弟が存在するかどうかを返します",
    "lineNumber": 170,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の前のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "isFirst",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isFirst",
    "access": null,
    "description": "自身が親の第一の子であるかどうかを返します",
    "lineNumber": 182,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の前のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "isLast",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#isLast",
    "access": null,
    "description": "自身が親の最後の子であるかどうかを返します。Charの場合は、EOLの前の文字とEOLの２つでtrueを返します",
    "lineNumber": 190,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の次のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "pushChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#pushChild",
    "access": null,
    "description": "childを自身の子の最後に加えます",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "自身の子の最後に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "insertChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#insertChild",
    "access": null,
    "description": "自身の子のpos番目にchildを加えます",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "childを加える位置のインデックス(０始まり)"
      },
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "子に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "deleteChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#deleteChild",
    "access": null,
    "description": "childを自身の子から削除します",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "自身の子から削除するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "replaceChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#replaceChild",
    "access": null,
    "description": "自身の子のoldChildを子から削除し、新たにnewChildを同じ位置に加えます",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "oldChild",
        "description": "入替えられる自身の子のインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "newChild",
        "description": "入れ替える自身の子でなかったインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "emptyChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#emptyChild",
    "access": null,
    "description": "子の参照を自身から切り離して空にします。DOM要素には影響しません",
    "lineNumber": 251,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "_children",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_children",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "text",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#text",
    "access": null,
    "description": "自身が表す文字列を返します",
    "lineNumber": 261,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身の内部にある文字列"
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "length",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#length",
    "access": null,
    "description": "自身が表す文字列の文字数を返します",
    "lineNumber": 269,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の内部にある文字列の文字数"
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "index",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#index",
    "access": null,
    "description": "同一の親を持つ兄弟の中でのインデックスを返します",
    "lineNumber": 277,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "同一の親を持つ兄弟の中での０始まりのインデックス"
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "childLength",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#childLength",
    "access": null,
    "description": "自身の子の数を返します",
    "lineNumber": 286,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の子の数"
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "className",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#className",
    "access": null,
    "description": "自身の持つクラスすべてをひとつの文字列で返します",
    "lineNumber": 296,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身の持つすべてのクラス名"
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "addClass",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addClass",
    "access": null,
    "description": "自身のクラスにclassNameを加えます",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "自身のクラスに加えるクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "removeClass",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeClass",
    "access": null,
    "description": "自身のクラスからclassNameを除去します",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "自身のクラスから除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "removeClassFromAllChild",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeClassFromAllChild",
    "access": null,
    "description": "自身の持つすべての子のクラスからclassNameを除去します",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "height",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#height",
    "access": null,
    "description": "自身の高さを取得します",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "_height",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_height",
    "access": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "width",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#width",
    "access": null,
    "description": "自身の幅を取得します",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "_width",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_width",
    "access": null,
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "x",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#x",
    "access": null,
    "description": "要素左上のX座標を返します",
    "lineNumber": 377,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "要素左上のX座標"
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "y",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#y",
    "access": null,
    "description": "要素左上のY座標を返します",
    "lineNumber": 385,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "要素左上のY座標"
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "computeDistanceFromPoint",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#computeDistanceFromPoint",
    "access": null,
    "description": "ある点からオブジェクトの中心点までの距離を計算します",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "基準点のX座標"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "基準点のY座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された距離のピクセル数"
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "computeCenterPoint",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#computeCenterPoint",
    "access": null,
    "description": "中心点の座標を返します",
    "lineNumber": 404,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "プロバティxにX座標、プロパティyにY座標の入ったオブジェクト"
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "emptyElem",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#emptyElem",
    "access": null,
    "description": "内部のエレメントを空にします。childrenとして持っていない要素(EOLなど)は削除されません",
    "lineNumber": 416,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "empty",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#empty",
    "access": null,
    "description": "内部のエレメントに加え、内部の参照も空にします",
    "lineNumber": 427,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addKeydownEventListener",
    "access": null,
    "description": "自身にkeydownイベントリスナーを付加します。重ねがけは無効となります",
    "lineNumber": 438,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_keydownArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_keydownArg",
    "access": null,
    "description": null,
    "lineNumber": 444,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "removeKeydownEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeKeydownEventListener",
    "access": null,
    "description": "自身のkeydownイベントリスナーを除去します",
    "lineNumber": 453,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_keydownArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_keydownArg",
    "access": null,
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_onKeydown",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_onKeydown",
    "access": null,
    "description": "keydownイベントの前処理を行い、イベントを実行します",
    "lineNumber": 467,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容。onkeydown()内で使用するために定義しておくが、内容はサブクラスで上書きします",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addClickEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addClickEventListener",
    "access": null,
    "description": "自身にクリックイベントを付加します。重ねがけは無効となります",
    "lineNumber": 498,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 504,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "removeClickEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeClickEventListener",
    "access": null,
    "description": "自身のクリックイベントを除去します",
    "lineNumber": 513,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 519,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_onClick",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_onClick",
    "access": null,
    "description": "クリックイベントを実行します",
    "lineNumber": 527,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "runClick",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#runClick",
    "access": null,
    "description": "clickイベントの実行内容です。onClick()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "addWheelEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#addWheelEventListener",
    "access": null,
    "description": "自身にホイールイベントを付加します。重ねがけは無効となります",
    "lineNumber": 544,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_wheelArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_wheelArg",
    "access": null,
    "description": null,
    "lineNumber": 550,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "removeWheelEventListener",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#removeWheelEventListener",
    "access": null,
    "description": "自身のホイールイベントを除去します",
    "lineNumber": 560,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_wheelArg",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_wheelArg",
    "access": null,
    "description": null,
    "lineNumber": 567,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_onWheel",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#_onWheel",
    "access": null,
    "description": "keydownイベントの前処理を行い、イベントを実行します",
    "lineNumber": 578,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "ホイールの移動量"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaY",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "runWheel",
    "memberof": "js/abstract.js~AbstractHierarchy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/abstract.js~AbstractHierarchy#runWheel",
    "access": null,
    "description": "ホイールイベントの実行内容です。onWheel()内で使用するために定義しておきますが、内容はサブクラスで上書きする必要があります",
    "lineNumber": 588,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUp",
        "description": "ホイールが上方向に動いたならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "js/character.js",
    "content": "'use strict';\n/* global AbstractHierarchy, ElemCreator, Util */\n\n/**\n * 文字を表すクラス\n */\nexport class Char extends AbstractHierarchy {\n    //{{{\n    /**\n     * @param {object} data 文字を表すオブジェクト<br>\n     * <pre>\n     * <code>\n     *  // 例\n     *\t\t{\n     *\t\t\t\"char\":\"あ\",\n     *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\t\"fontSize\": \"auto\"\n     *\t\t}\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        // dataオブジェクトにcharプロパティがなければEOLからの呼び出しで、dataにはエレメントが入っている\n        super(data.char ? ElemCreator.createCharElement(data) : data);\n        if (!('fontSize' in data)) {\n            this._fontSize = data.fontSize;\n        }\n    }\n\n    // --参照取得\n\n    /**\n     * 自身の親であるRowインスタンスをnewRowに設定します、あるいは引数省略で取得します\n     * @param {Row} [opt_newRow] 新たに設定する行のインスタンス\n     * @return {Char Row} 自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)\n     */\n    row(opt_newRow) {\n        return this.parent(opt_newRow);\n    }\n\n    /**\n     * 自身の属する段落のインスタンスを取得します\n     * @return {Paragraph} 自身の属する段落のインスタンス\n     */\n    paragraph() {\n        return this.row().paragraph();\n    }\n\n    /**\n     * 自身の属する文章コンテナのインスタンスを取得します\n     * @return {SentenceContainer} 自身の属する文章コンテナのインスタンス\n     */\n    sentenceContainer() {\n        return this.paragraph().container();\n    }\n\n    /**\n     * カーソルのインスタンスを取得します\n     * @return {Cursor} 自身の属する文章コンテナの持つカーソルのインスタンス\n     */\n    cursor() {\n        return this.row().paragraph().container().cursor();\n    }\n\n    // Cursor用\n    /**\n     * カーソル文字として自身が不適なら自身の次のCharを返します。具体的には、自身が段落途中のEOLならその次の文字となります\n     * @return {Char} 自身も含めた自身以降でカーソル文字として適したインスタンス\n     */\n    slideNextCursor() {\n        // 段落最後のEOL以外のEOLには止まらない\n        // 段落途中のEOLならその次の文字に変更する\n        if (this.isEOL() && this.row().hasNextSibling()) {\n            return this.next();\n        }\n\n        return this;\n    }\n\n    /**\n     * カーソル文字として自身が不適なら自身の前のCharを返します。具体的には、自身が段落途中のEOLならその前の文字となります\n     * @return {Char} 自身も含めた自身以前でカーソル文字として適したインスタンス\n     */\n    slidePrevCursor() {\n        // 段落最後のEOL以外のEOLには止まらない\n        // 段落途中のEOLならその前の文字に変更する\n        if (this.isEOL() && this.row().hasNextSibling()) {\n            return this.prev();\n        }\n\n        return this;\n    }\n\n    /**\n     * 自身の次の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します\n     * @return {Char} 自身の次のCharインスタンス。見つからなければnull\n     */\n    nextChar() {\n        if (this.next() && this.next().isEOL()) {\n            return this.next().nextChar();\n        }\n\n        return this.next();\n    }\n\n    /**\n     * 自身の前の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します\n     * @return {Char} 自身の前のCharインスタンス。見つからなければnull\n     */\n    prevChar() {\n        if (this.prev() && this.prev().isEOL()) {\n            return this.prev().prevChar();\n        }\n\n        return this.prev();\n    }\n\n    /**\n     * 同一段落内での次の文字を返します。EOLは含みません\n     * @return {Char} 同一段落内での次の文字のインスタンス。なければnull\n     */\n    nextCharOnParagraph() {\n        if (this.hasNextCharOnParagraph()) {\n            return this.nextChar();\n        }\n\n        return null;\n    }\n\n    /**\n     * 同一段落内での前の文字を返します。EOLは含みません\n     * @return {Char} 同一段落内での前の文字のインスタンス。なければnull\n     */\n    prevCharOnParagraph() {\n        if (this.hasPrevCharOnParagraph()) {\n            return this.prevChar();\n        }\n\n        return null;\n    }\n\n    // --判定\n\n    /**\n     * 自身がEOLであるかどうかを返します\n     * @return {boolean} オーバーライドされない限り常にfalse\n     */\n    isEOL() {\n        return false;\n    }\n\n    /**\n     * 自身にカーソルがあたっているかどうかを返します\n     * @return {boolean} 自身にカーソルがあればtrue、そうでなければfalse\n     */\n    hasCursor() {\n        return this.hasClass('cursor');\n    }\n\n    /**\n     * 自身が可視化されているかどうかを返します\n     * @return {boolean} 自身が可視化されていればtrue、そうでなければfalse\n     */\n    isDisplay() {\n        return this.hasClass('display');\n    }\n\n    /**\n     * 自身が同一行内で最終文字であるかどうかを返します。EOLは含みません(次の文字がEOLならfalse,自身がEOLの場合もfalse)\n     * @return {boolean} 同一行内で最終文字でなければtrue、最終文字ならfalse。\n     */\n    hasNextSibling() {\n        return !(this._isEOL || this.next().isEOL());\n    }\n\n    /**\n     * 同一段落内で次のCharがあるかどうかを返します\n     * @return {boolean} 同一段落内で次のCharがあればtrue、そうでなければfalse\n     */\n    hasNextCharOnParagraph() {\n        return this.nextChar() && this.nextChar().paragraph() === this.paragraph();\n    }\n\n    /**\n     * 同一段落内で前のCharがあるかどうかを返します\n     * @return {boolean} 同一段落内で前のCharがあればtrue、そうでなければfalse\n     */\n    hasPrevCharOnParagraph() {\n        return this.prevChar() && this.prevChar().paragraph() === this.paragraph();\n    }\n\n    /**\n     * この要素がrangeの中にあるかどうかを返します\n     * @param {Range} range 判定の基準となる範囲を表すRange\n     * @return {boolean} この要素がrangeの中にあればtrue、そうでなければfalse\n     */\n    isInRange(range) {\n        const charRange = document.createRange();\n        // 現在の要素を囲む範囲をcharRangeとして設定。selectNodeContentsをselectNodeにする、あるいは引数をテキストノードではなくspan要素にすると、選択中最初と最終文字が反応しないことがある\n        charRange.selectNodeContents(this.elem().childNodes.item(0));\n        // 開始位置が同じかselectの開始位置より文字の開始位置が後ろにあり、\n        // 終了位置が同じかselectの終了位置より文字の終了位置が前にある\n        if (charRange.compareBoundaryPoints(Range.START_TO_START,range) >= 0 &&\n            charRange.compareBoundaryPoints(Range.END_TO_END,range) <= 0) {\n                charRange.detach();\n                return true;\n            }\n\n        charRange.detach();\n        return false;\n    }\n\n    // --Status\n\n    /**\n     * この文字の状態を表す規定のオブジェクトを作成します\n     * @return {object} この文字の状態を表す規定のオブジェクト\n     */\n    data() {\n        const data = {};\n        data.char = this.text();\n        data.decolation = this.classArray();\n        data.fontSize = this.fontSize() + '';\n        return data;\n    }\n\n    /**\n     * この文字にかかっている装飾のクラスを配列にして返します\n     * @return {string[]} この文字にかかっている装飾のクラスの配列。文字装飾がかかっていなければ空の配列\n     */\n    classArray() {\n        return this.className().match(/decolation-\\S+/g) || [];\n    }\n\n    // --Style\n\n    /**\n     * この文字にカーソルを当てます\n     * @param {boolean} [opt_bShift] シフトキーが押されていればtrue、そうでなければfalse\n     * @return {Char} 自身のインスタンス\n     */\n    addCursor(opt_bShift) {\n        this.cursor().addCursor(this,opt_bShift);\n        return this;\n    }\n\n    /**\n     * この文字のフォントサイズを変更します。あるいは引数省略で現在のフォントサイズを取得します\n     * @param {number string} [opt_fontSize] 新たに設定するフォントサイズ(数値以外では'auto'が渡せる)\n     * @return {Char number string} 自身のインスタンス(引数を渡した場合)。\n     *     現在のフォントサイズ(引数を省略した場合)、フォントサイズが数値で設定されていなければ文字列の'auto'\n     */\n    fontSize(opt_fontSize) {\n        if (opt_fontSize) {\n            this._fontSize = opt_fontSize;\n            this._elem.dataset.fontSize = opt_fontSize;\n            // フォントサイズが変更されると行の幅が変わる可能性があるため、計算し直しておく\n            this.row().width(false);\n            return this;\n        }\n\n        if (this._fontSize === undefined) {\n            return 'auto';\n        }\n\n        if (this._fontSize === 'auto') {\n            return this._fontSize;\n        }\n        return parseInt(this._fontSize);\n    }\n\n    /**\n     * この文字に文字色を設定します。あるいは引数省略で現在の文字色を取得します\n     * @param {string boolean} [opt_color] 文字列ならその色に設定する、falseを渡せば文字色を解除する\n     * @return {Char string} 自身のインスタンス(引数を渡した場合)、あるいは現在の文字色(引数を省略した場合。文字色が設定されていなければ'black')\n     */\n    color(opt_color) {\n        if (opt_color) {\n            this._addColor(opt_color);\n            return this;\n        }\n\n        if (opt_color === false) {\n            this._removeColor();\n            return this;\n        }\n\n        if (opt_color === undefined) {\n            const color = this.className().match(/decolation-color-(\\S+)/);\n            return color ? color[1] : 'black';\n        }\n    }\n\n    /**\n     * この文字の太字を設定、解除します\n     *     または引数省略でこの文字が太字になっているかどうかを返します\n     * @param {boolean} [opt_bl] trueなら太字にする、falseなら太字を解除する\n     * @return {Char boolean} 自身のインスタンス(引数を渡した場合)、あるいは太字になっているかどうかの真偽値(引数を省略した場合)\n     */\n    bold(opt_bl) {\n        if (opt_bl === undefined) {\n            return this.hasClass('decolation-font-bold');\n        }\n\n        if (opt_bl) {\n            this.addClass('decolation-font-bold');\n        } else {\n            this.removeClass('decolation-font-bold');\n        }\n        return this;\n    }\n\n    /**\n     * この文字の斜体を設定、解除します\n     *     または引数省略でこの文字が斜体になっているかどうかを返します\n     * @param {boolean} [opt_bl] trueなら斜体にする、falseなら斜体を解除する\n     * @return {Char} 自身のインスタンス(引数を渡した場合)、あるいは斜体になっているかどうかの真偽値(引数を省略した場合)\n     */\n    italic(opt_bl) {\n        if (opt_bl === undefined) {\n            return this.hasClass('decolation-font-italic');\n        }\n\n        if (opt_bl) {\n            this.addClass('decolation-font-italic');\n        } else {\n            this.removeClass('decolation-font-italic');\n        }\n        return this;\n    }\n\n    /**\n     * 文字色を設定します\n     * @param {string} color 設定する文字色\n     * @return {Char} 自身のインスタンス\n     */\n    _addColor(color) {\n        // 同一種のクラスをすでに持っていたら外す\n        this.removeColor();\n        if (color === 'decolation-color-black') {\n            return; // ブラックなら外して終わり\n        }\n        this.addClass('decolation-color-'+ color);\n        return this;\n    }\n\n    /**\n     * 文字色を解除します\n     * @return {Char} 自身のインスタンス\n     */\n    _removeColor() {\n        const regexp = new RegExp('decolation-color-\\\\S+');\n        const rmClass = this.className().match(regexp);\n        if (rmClass) {\n            this.removeClass(rmClass[0]);\n        }\n        return this;\n    }\n\n    /**\n     * この文字から始まる文字列がstrと合致するなら、その文字列のCharにクラスを付与します\n     * @param {string} str 判定する文字列\n     * @return {Char} 自身のインスタンス\n     */\n    markSearchPhrase(str) {\n        // １文字ずつ比較し、渡された文字列の長さ分のループを終えるまでに異なる文字が現れるか段落に残りの文字がなくなればreturn\n        // 最初のループを無事に終えればこの文字から始まる文字列はstrに合致しているということなので、それぞれクラスを付与する\n\n        // 合致しているかの判定\n        // 合致しない文字が現れたか、文字列を比較し終える前に段落の最後に達したらreturn\n        for (let i = 0, len = str.length, char = this;\n            i < len; i++, char = char.nextCharOnParagraph()) {\n                if (!char || str.charAt(i) !== char.text()) {\n                    return this;\n                }\n            }\n\n        // クラスの付与\n        this.addClass('search-label');\n        for (let i = 0, len = str.length, char = this;\n            i < len; char = char.nextChar(),i++) {\n                char.addClass('search-word');\n            }\n        return this;\n    }\n\n    // --DOM操作関係\n\n    /**\n     * charを自身の直前に挿入します\n     * @param {Char} char 挿入するインスタンス\n     * @return {Char} 自身のインスタンス\n     */\n    before(char) {\n        // DOM\n        // this.elem().before(char.elem()); // before(),after()はまだサポートされず\n        this.row().elem().insertBefore(char.elem(),this.elem());\n\n        // ポインタ調整\n        // oldPrev - char - this\n\n        // char\n        const oldPrev = this.prev();\n        if (oldPrev) {\n            this.prev().next(char);\n        }\n        char.prev(oldPrev);\n        char.next(this);\n        this.prev(char);\n        // parent\n        char.row(this.row());\n        const pos = this.index();\n        this.row().insertChar(pos,char);\n        return this;\n    }\n\n    /**\n     * charを自身の直後に挿入します\n     * @param {Char} char 挿入するインスタンス\n     * @return {Char} 自身のインスタンス\n     */\n    after(char) {\n        if (this.isEOL()) {\n            throw new Error('couldn\\'t after from EOL');\n        }\n\n        // DOM\n        if (this.hasNextSibling()) {\n            this.row().elem().insertBefore(char.elem(),this.next().elem());\n        } else {\n            this.row().elem().appendChild(char.elem());\n        }\n\n        // ポインタ調整\n        // this - char - oldNextChar\n\n        // char\n        const oldNextChar = this.next();\n        this.next(char);\n        char.prev(this);\n        char.next(oldNextChar);\n        if (oldNextChar) {\n            oldNextChar.prev(char);\n        }\n        // parent\n        char.row(this.row());\n        const pos = this.index() + 1;\n        this.row().insertChar(pos,char);\n        return this;\n    }\n\n    /**\n     * 自身を削除します。文書整形は行いません\n     * @return {Char} 自身のインスタンス\n     */\n    remove() {\n        // 要素と参照の削除\n        if (this.isEOL()) {\n            throw new Error('counldn\\'t remove EOL');\n        }\n        const row = this.row();\n        row.elem().removeChild(this.elem());\n\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n        const oldPrev = this.prev();\n        const oldNext = this.next();\n        if (oldPrev) {\n            oldPrev.next(oldNext);\n        }\n        if (oldNext) {\n            oldNext.prev(oldPrev);\n        }\n        // 古い親の配列から削除\n        row.deleteChar(this);\n        return this;\n    }\n\n    /**\n     * 自身を削除し、文書整形を行います(空行ができたらその行も削除し、文字数調整や禁則処理を行います)\n     * @return {Char} 自身のインスタンス\n     */\n    delete() {\n        const row = this.row();\n        const paragraph = row.paragraph();\n        this.remove();\n\n        // 段落先頭以外の行で、文字を削除した結果行が空になった場合、その行を削除する\n        if (!row.isFirst() && row.isEmpty()) {\n            if (row.lastChild().hasCursor()) {\n                row.prev().EOL().addCursor().setPosMemory(); // 削除行にカーソルがあれば、その前の行のEOLにカーソルを移動する\n            }\n            row.remove();\n        }\n\n        paragraph.cordinate().checkKinsoku();\n        return this;\n    }\n\n    /**\n     * 自分自身をnewCharと入れ替えます\n     * @param {Char} newChar 自身と入れ替える文字のインスタンス\n     * @return {Char} 自身のインスタンス\n     */\n    replace(newChar) {\n        newChar.prev(this.prev());\n        newChar.next(this.next());\n        if (this.prev()) { this.prev().next(newChar); }\n        if (this.next()) { this.next().prev(newChar); }\n        this.prev(null);\n        this.next(null);\n        this.row().replaceChild(this,newChar);\n        this.row(null);\n        return this;\n    }\n\n    /**\n     * 前の行の最後に移動します。その結果空行ができたら削除し、カーソルがその行にあれば自身の次のEOLに移動します\n     *     段落はまたがず、移動前の自身が段落最初の文字であれば何もしません\n     * @return {Char} 自身のインスタンス\n     */\n    moveLastBefore() {\n        if (this.isEOL() || !this.isFirst()) { return this; } // 各行最初の文字でのみ有効\n        if (this.row().isFirst()) {\n            return this; // 段落はまたがない\n        }\n\n        const oldRow = this.row();\n        // delete()内でcordinate()を使い、cordinate()内でmoveLastBefore()を使っているので、ここでdelete()を使うと無限再帰の恐れあり\n        this.remove();\n        oldRow.prev().append(this);\n\n        // 移動した結果、空行ができたら削除する\n        if (oldRow.isEmpty()) {\n            if (oldRow.hasCursor()) {\n                this.next().addCursor(); // 削除行にカーソルが含まれていれば移動する\n            }\n            oldRow.remove();\n        }\n        this.setPosMemory();\n        return this;\n    }\n\n    /**\n     * 次の行の最初に移動します。次の行が同じ段落になければ新しく行を作り、カーソルは自身の次のEOLに移動します\n     * @return {Char} 自身のインスタンス\n     */\n    moveFirstAfter() {\n        if (this.isEOL() || !this.isLast()) {\n            return this; // 各行最後の文字でのみ有効\n        }\n\n        const oldRow = this.row();\n        // 次の行がなければ新しく作る(段落はまたがない)\n        if (oldRow.isLast()) {\n            const newRow = Row.createEmptyRow();\n            oldRow.after(newRow);\n            if (oldRow.EOL().hasCursor()) {\n                newRow.EOL().addCursor(); // 段落最後のEOLにカーソルがあれば動かないので、移動する\n            }\n        }\n\n        this.remove();\n        oldRow.next().prepend(this.display(true)); // displayしておかなければ、changeDisplay()での計算に狂いが生じる\n\n        this.setPosMemory(); // カーソルが付与されている文字は変わらないが、その文字の位置が変わる可能性があるためposMemoryを付け替える\n        return this;\n    }\n\n    // --Display関係\n    /**\n     * 自身の表示非表示を切り替えます\n     * @param {boolean} bDisplay trueなら表示、falseなら非表示\n     * @return {Char} 自身のインスタンス\n     */\n    display(bDisplay) {\n        if (bDisplay) {\n            this._elem.classList.add('display');\n        } else {\n            this._elem.classList.remove('display');\n        }\n        return this;\n    }\n\n    // Utility\n\n    /**\n     * 現在のメニューバーの状態に即してcを内容に持つ規定のオブジェクトを作成します。メソッドを持つ既存のCharインスタンスには影響しません\n     * @param {string} c 作成するオブジェクトが表す文字(１文字)\n     * @return {object} 文字データを表す規定のオブジェクト\n     */\n    createData(c) {\n        // Menuインスタンスを取得しやすくするため、インスタンスメソッドとして定義\n        const ret = {};\n        ret.char = c;\n        const menu = this.paragraph().container().menu();\n        ret.decolation = menu.charDecolations();\n        ret.fontSize = menu.fontSizeInput();\n        return ret;\n    }\n\n    /**\n     * 文字装飾のない文字の文字データを返します\n     * @param {string} c 作成するオブジェクトが表す文字(１文字)\n     * @return {object} 文字データを表す規定のオブジェクト\n     */\n    static createPlainCharData(c) {\n        const ret = {};\n        ret.char = c;\n        ret.decolation = [];\n        ret.fontSize = 'auto';\n        return ret;\n    }\n\n    // -- other\n\n    /**\n     * この文字のインデックスをカーソル位置として記憶します\n     * @return {Char} 自身のインスタンス\n     */\n    setPosMemory() {\n        const index = this.index();\n        this.cursor().setPosMemory(index);\n        return this;\n    }\n\n    /**\n     * 自分を含めて、自分以降で同じ段落内のChar全てに処理を行います(EOLは含まない)\n     * @param {function} func 処理内容が定義された関数オブジェクト\n     * @return {Char} 自身のインスタンス\n     */\n    afterEach(func) {\n        const index = this.index();\n        let cnt = 0;\n        for (let char of this.row().chars()) {\n            if (cnt >= index) {\n                func(char);\n            }\n            cnt++;\n        }\n        return this;\n    }\n}//}}}\n\n\n/**\n * 行の末端を表すクラス\n */\nexport class EOL extends Char {\n    //{{{\n    // Rowとともに要素を作ってしまうため、要素を引数に取る必要がある\n    /**\n     * @param {Element} elem 自身のDOM要素\n     */\n    constructor(elem) {\n        super(elem); // 最初にスーパークラスのコンストラクタを呼ばなければエラー\n    }\n\n    /**\n     * 自身がEOLであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isEOL() {\n        return true;\n    }\n\n    // -- Status\n\n    /**\n     * 自身のインデックスを返します\n     * @return {number} 自身は親の配列に入っていないので、親の配列の長さと同じ数値を返す\n     */\n    index() {\n        return this.row().childLength();\n    }\n\n    // --DOM操作\n\n    /**\n     * rowを親として紐付けます\n     * @param {Row} row 親となる行のインスタンス\n     * @return {EOL} 自身のインスタンス\n     */\n    appended(row) {\n        // EOLは各行一文字目であるのとDom要素が先に作られるためRowのappend()が利用できない\n        // EOLがappendedされるのはまだrowが文書内に組み込まれる前なので、nextとprevの操作は不要\n        row.elem().appendChild(this.elem());\n        this.row(row);\n        return this;\n    }\n}//}}}\n\n\n/**\n * 行を表すクラス\n */\nexport class Row extends AbstractHierarchy {\n    //{{{\n    /**\n     * @param {object} data 行を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     *\t// 各文字のオブジェクトが配列で格納される\n     *\t[\n     *\t\t{\t // 文字を表すオブジェクト\n     *\t\t\t\"char\":\"あ\",\n     *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\t\"fontSize\":\"auto\"\n     *\t\t},\n     *\t\t{\n     *\t\t\t\"char\":\"い\",\n     *\t\t\t\"decolation\":null\n     *\t\t\t\"fontSize\":\"18\"\n     *\t\t}\n     *\t]\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        // 配列が渡されたら新しく要素を作り、そうでなければ要素が渡されたとしてそれを元にインスタンスを作る\n        if (Array.isArray(data)) {\n            super(ElemCreator.createRowElement(data));\n        } else {\n            // InputBufferの場合\n            super(data);\n            data = [];\n        }\n        this._EOL = new EOL(this._elem.lastElementChild);\n        this._EOL.appended(this);\n        if (!Array.isArray(data)) {\n            return;\n        }\n        for (let charData of data) {\n            const char = new Char(charData);\n            this.append(char);\n        }\n\n        this.addClickEventListener();\n    }\n\n    // --参照取得\n\n    /**\n     * 自身のEOLのインスタンスを返します\n     * @return {EOL} 自身のEOLのインスタンス\n     */\n    EOL() {\n        return this._EOL;\n    }\n\n    /**\n     * 自身の属する文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} 自身の属する文章コンテナのインスタンス\n     */\n    container() {\n        return this.paragraph().container();\n    }\n\n    /**\n     * 自身の親の段落を新たに設定する、あるいは現在の親段落を取得します\n     * @param {Paragraph} [opt_newParagraph] 新たに設定する親段落\n     * @return {Row Paragraph} 自身のインスタンス(引数を渡した場合)あるいは自身の親段落のインスタンス(引数を省略した場合)\n     */\n    paragraph(opt_newParagraph) {\n        return this.parent(opt_newParagraph);\n    }\n\n    /**\n     * カーソルを持つ文字のインスタンスを取得します\n     * @return {Char} カーソルを持つ文字のインスタンス\n     */\n    cursorChar() {\n        return this.paragraph().container().cursor().getChar();\n    }\n\n    /**\n     * 自身の内部にある最初のインスタンスを返します\n     * @return {Char} 自身の第一文字のインスタンス。それがなければ自身のEOLのインスタンス\n     */\n    firstChild() {\n        // 空行ではEOLが選択されるため、firstChar()ではなくfirstChild()\n        // RowではEOLが絡むためオーバーライドする\n        if (this.hasChar()) {\n            return this.chars()[0];\n        } else {\n            return this.EOL();\n        }\n    }\n    /**\n     * 自身の内部にある最後のインスタンスであるEOLのインスタンスを返します\n     * @return {Char} 自身のEOLのインスタンス\n     */\n    lastChild() {\n        return this.EOL();\n    }\n\n    /**\n     * 自身の最終文字のインスタンスを返します\n     * @return {Char} 自身の最終文字のインスタンス。空行であればnull\n     */\n    lastChar() {\n        return super.lastChild();\n    }\n\n    /**\n     * 指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します。EOLは含まれません\n     * @param {number} [opt_index] 取得する子のインデックス\n     * @return {Char Char[]} 指定された子のインスタンス(引数を渡した場合。範囲外の数値ならundefined)、\n     *     あるいは子のインスタンスの配列(引数を省略した場合。子がいなければ空の配列)\n     */\n    chars(opt_index) { // EOLは含まれない\n        return super.children(opt_index);\n    }\n\n    /**\n     * EOLを含む、指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する子のインデックス\n     * @return {Char} 指定された子のインスタンス(引数を渡した場合。範囲外のインデックスならEOL)、\n     *     あるいはEOLを含む子のインスタンスの配列(引数を省略した場合。子がいなければ要素がEOLのみである配列)\n     */\n    children(opt_index) { // EOLを含む\n        if (opt_index === undefined) {\n            const ret = super.children(); // push()の戻り値はlenghtプロパティの値なので、一旦変数に入れる必要あり\n            ret.push(this.EOL());\n            return ret;\n        }\n        return super.children(opt_index) || this.EOL();\n    }\n\n    // --判定\n\n    /**\n     * 内部に文字があるかどうかを返します\n     * @return {boolean} 内部に文字があればtrue、EOLのみの空行ならfalse\n     */\n    hasChar() {\n        return super.hasChild();\n    }\n\n    /**\n     * 行内にカーソルがあるかどうかを返します\n     * @return {boolean} 行内にカーソルが含まれていればtrue、そうでなければfalse\n     */\n    hasCursor() {\n        for (let char of this.children()) {\n            if (char.hasCursor()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * この要素が可視化されているかどうかを返します\n     * @return {boolean} 可視化されていたらtrue、そうでなければfalse\n     */\n    isDisplay() {\n        return this.hasClass('display');\n    }\n\n    /**\n     * objが行内に含まれているかどうかを返します\n     * @param {Char} obj 判定するインスタンス\n     * @return {Char} objが行内にあるCharおよびEOLのいずれかに一致するとtrue、そうでなければfalse\n     */\n    contains(obj) {\n        if (!(obj instanceof Char)) {\n            return false;\n        }\n\n        for (let char of this.children()) {\n            if (char.is(obj)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * ページ内で最初の行であるかどうかを返します\n     * @return {boolean} ページ内で最初の行であればtrue、そうでなければfalse\n     */\n    isPageBreak() {\n        return this.hasClass('page-break');\n    }\n\n    /**\n     * ページ内で最終行であるかどうかを返します\n     * @return {boolean} ページ内で最終行ならtrue、そうでなければfalse\n     */\n    isPageLast() {\n        return this.hasClass('page-last-row');\n    }\n\n    // --参照操作\n\n    /**\n     * charを自身の子の最後に加えます\n     * @param {Char} char 子に加える文字のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    pushChar(char) {\n        return this.pushChild(char);\n    }\n\n    /**\n     * charを自身の子の指定された位置に加えます\n     * @param {number} pos 加える位置のインデックス\n     * @param {Char} char 加える子のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    insertChar(pos,char) {\n        return this.insertChild(pos,char);\n    }\n\n    /**\n     * charを自身の子から削除します\n     * @param {Char} char 削除する子のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    deleteChar(char) {\n        return this.deleteChild(char);\n    }\n\n    // --Status\n\n    /**\n     * この行の状態を表す規定のオブジェクトを作成します\n     * @return {object[]} この行の状態を表す規定のオブジェクト\n     */\n    data() {\n        const data = [];\n        for (let char of this.chars()) {\n            data.push(char.data());\n        }\n        return data;\n    }\n\n    /**\n     * この行の文字数を返します。EOLは含みません\n     * @return {number} この行の文字数。空行なら０\n     */\n    charLen() {\n        return super.childLength();\n    }\n\n    /**\n     * この行の内部にある文字のうち、最も大きいフォントサイズを返します。'auto'は18として計算します\n     * @return {number} 最大のフォント数\n     */\n    maxFont() {\n        let max = 0; // 空行では０になる\n        for (let char of this.chars()) {\n            max = Math.max(max, char.fontSize() === 'auto' ? 18 : char.fontSize());\n        }\n        return max;\n    }\n\n    // --Style\n\n    /**\n     * この行の横幅を返します。行は９０度回転しているため、ここでいう幅はcss上の高さを表します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の幅\n     */\n    width(opt_useCache) {\n        return super.height(opt_useCache);\n    }\n\n    /**\n     * この行の高さを返します。行は９０度回転しているため、ここでいう高さはcss上の幅を表します\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の高さ\n     */\n    height(opt_useCache) {\n        return super.width(opt_useCache);\n    }\n\n    // --DOM操作関係\n\n    /**\n     * 子を空にして参照を整えます\n     * @return {Row} 自身のインスタンス\n     */\n    empty() {\n        // emptyElem()に加え、オブジェクト参照も切り離す\n        this.emptyElem();\n        const prevRow = this.prev();\n\n        if (prevRow) {\n            this.EOL().prev(prevRow.lastChild());\n            prevRow.lastChild().next(this.EOL());\n        } else {\n            this.EOL().prev(null);\n        }\n        this.emptyChild();\n        return this;\n    }\n\n    /**\n     * 自身の最初にcharを挿入します\n     * @param {Char} char 挿入する文字のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    prepend(char) {\n        this.firstChild().before(char);\n        return this;\n    }\n\n    /**\n     * 自身の最後(EOLの直前)にcharを挿入します\n     * @param {Char} char 挿入する文字のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    append(char) {\n        this.EOL().before(char);\n        return this;\n    }\n\n    /**\n     * 自身の直前にrowを挿入します\n     * @param {Row} row 挿入する行のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    before(row) {\n        // DOM\n        this.paragraph().elem().insertBefore(row.elem(),this.elem());\n\n        // ポインタ調整\n        // oldPrev - row - this\n\n        // row\n        const oldPrev = this.prev();\n        if (oldPrev !== null) {\n            oldPrev.next(row);\n        }\n        row.prev(oldPrev);\n        row.next(this);\n        this.prev(row);\n        // char\n        if (oldPrev) {\n            oldPrev.lastChild().next(row.firstChild());\n            row.firstChild().prev(oldPrev.lastChild());\n        }\n        row.lastChild().next(this.firstChild());\n        this.firstChild().prev(row.lastChild());\n        // parent\n        row.paragraph(this.paragraph());\n        const pos = this.index();\n        this.paragraph().insertRow(pos,row);\n        return this;\n    }\n\n    /**\n     * 自身の直後にrowを挿入します\n     * @param {Row} row 挿入する行のインスタンス\n     * @return {Row} 自身のインスタンス\n     */\n    after(row) {\n        // DOM\n        if (this.hasNextSibling()) {\n            this.paragraph().elem().insertBefore(row.elem(),this.next().elem());\n        } else {\n            this.paragraph().elem().appendChild(row.elem());\n        }\n\n        // ポインタ調整\n        // this - row - oldNext\n\n        // row\n        const oldNext = this.next();\n        this.next(row);\n        row.prev(this);\n        row.next(oldNext);\n        if (oldNext !== null) {\n            oldNext.prev(row);\n        }\n        // char\n        this.lastChild().next(row.firstChild());\n        row.firstChild().prev(this.lastChild());\n        if (oldNext !== null) {\n            row.lastChild().next(oldNext.firstChild());\n            oldNext.firstChild().prev(row.lastChild());\n        }\n        // parent\n        row.paragraph(this.paragraph());\n        const pos = this.index() + 1;\n        this.paragraph().insertRow(pos,row);\n        return this;\n    }\n\n    /**\n     * 自身を削除します。文書整形は行われません\n     * @return {Row} 自身のインスタンス\n     */\n    remove() {\n        // 段落に自分しか行がない場合、段落ごと削除する\n        if (this.isOnlyChild()) {\n            this.paragraph().remove();\n            return this;\n        }\n\n        this.paragraph().elem().removeChild(this.elem());\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n        // row\n        const oldPrevRow = this.prev();\n        const oldNextRow = this.next();\n        if (oldPrevRow) {\n            oldPrevRow.next(oldNextRow);\n        }\n        if (oldNextRow) {\n            oldNextRow.prev(oldPrevRow);\n        }\n        // char\n        const oldPrevChar = oldPrevRow && oldPrevRow.lastChild();\n        const oldNextChar = oldNextRow && oldNextRow.firstChild();\n        if (oldPrevChar) {\n            oldPrevChar.next(oldNextChar);\n        }\n        if (oldNextChar) {\n            oldNextChar.prev(oldPrevChar);\n        }\n\n        this.paragraph().deleteRow(this);\n\n        this.next(null);\n        this.prev(null);\n        this.firstChild().prev(null);\n        this.lastChild().next(null);\n        return this;\n    }\n\n    /**\n     * 自身を削除し、文書整形を行います(カーソルが含まれていれば前の行、前の行がなければ次の行にカーソルを移動します)\n     * @return {Row} 自身のインスタンス\n     */\n    delete() {\n        // カーソルを動かしたくなければremove()を使う\n        const oldPrevRow = this.prev();\n        const oldNextRow = this.next();\n\n        this.remove();\n\n        // カーソルが削除行に含まれていれば、その前の行にカーソルを移動する\n        if (this.hasCursor()) {\n            if (oldPrevRow) {\n                this.cursor().moveRow(oldPrevRow);\n            } else {\n                this.cursor().moveRow(oldNextRow);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 前の段落の最終行として移動します。各段落最初の行でのみ有効です。自身が空行であれば削除されます\n     * @return {Row} 自身のインスタンス\n     */\n    moveLastBefore() {\n        if (!this.isFirst()) { // 各段落最初の行でのみ有効\n            return this;\n        }\n        if (this.paragraph().isFirst()) {\n            return this; // 文章先頭では無効\n        }\n\n        const prevParagraph = this.paragraph().prev();\n\n        // 空行を移動しようとした時の処理\n        if (this.isEmpty()) {\n            // 前の段落に移動せず削除する\n            // カーソルが含まれていれば、カーソルを前の行のEOLに移動\n            this.remove();\n            if (this.hasCursor()) {\n                prevParagraph.lastChild().EOL().addCursor().setPosMemory();\n            }\n            return this;\n        }\n\n        this.remove(); // カーソルはいじる必要なし\n        prevParagraph.append(this);\n        return this;\n    }\n\n    /**\n     * 次のRowの第一文字を、自らの最後に移動します。段落内でのみ有効となります\n     * @return {Row} 自身のインスタンス\n     */\n    bringChar() {\n        if (this.isLast()) {\n            return this;\n        }\n        this.next().firstChild().moveLastBefore();\n        return this;\n    }\n\n    /**\n     * 次のRowの最初のnum文字を、自らの最後に移動します。段落内でのみ有効となります。また、文字同士の順番に変化はありません\n     * @param {number} num 移動する文字数\n     * @return {Row} 自身のインスタンス\n     */\n    bringChars(num) {\n        for (let i = 0; i < num; i++) {\n            this.bringChar();\n        }\n        return this;\n    }\n\n    /**\n     * 自分の最後の文字を、次の行の最初に移動します。次の行がなければ新しく作成されます\n     * @return {Row} 自身のインスタンス\n     */\n    takeChar() {\n        if (!this.hasChar()) { // lastChar()でnullが取得される可能性があるため\n            return this;\n        }\n        this.lastChar().moveFirstAfter(); // lastChild()では毎回EOLが取得されるのでlastChar()\n        return this;\n    }\n\n    /**\n     * 自分の最後のnum文字を、次の行の最初に移動します。次の行がなければ新しく作成されます\n     * @param {number} num 移動する文字数\n     * @return {Row} 自身のインスタンス\n     */\n    takeChars(num) {\n        for (let i = 0; i < num; i++) {\n            this.takeChar();\n        }\n        return this;\n    }\n\n    /**\n     * 引数の文字列から作成された装飾のない文字のインスタンスを自らの最後に追加します\n     * @return {Row} 自身のインスタンス\n     */\n    createPlainContent(str) {\n        for (let c of str) {\n            this.append(new Char(Char.createPlainCharData(c)));\n        }\n        return this;\n    }\n\n    // --文章整理\n\n    /**\n     * 指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n     *     標準以外のフォントサイズの文字があれば文字数はフォントサイズに合わせて調整されます。\n     *     また、自身が空段落以外での空行であれば削除します\n     * @return {Row} 自身のインスタンス\n     */\n    cordinate() {\n        if (this.index() > 0 && this.isEmpty()) {\n            return this.delete(); // 空段落以外での空行は削除する\n        }\n\n        const confLen = this.container().strLenOnRow();\n        const len = this.charLen();\n        if (len < confLen) {\n            this.bringChars(confLen - len);\n        }\n\n        // 多すぎる文字数は減らす\n        // フォントの異なる文字が混ざっている場合、他の行と高さが異なってしまうため、その行の文字を変える必要がある\n        const maxSize = confLen * 18; // 標準フォント×文字数の数値が基準\n        let sum = 0;\n        for (let array of this.chars().entries()) {\n            const char = array[1];\n            sum += char.fontSize() === 'auto' ? 18 : char.fontSize();\n            if (sum > maxSize) {\n                const index = array[0];\n                this.takeChars(this.charLen() - index);\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 行内の禁則処理を行います\n     * @return {Row} 自身のインスタンス\n     */\n    checkKinsoku() {\n        if (this.isEmpty()) { return this; }\n        // 行頭にあるべきではないもの\n        for (let firstText = this.firstChild().text();\n            !this.isFirst() && /[」』）。、？]/.test(firstText); firstText = this.firstChild().text()) {\n                this.firstChild().moveLastBefore();\n            }\n        // 行末にあるべきではないもの\n        for (let lastText = this.lastChar().text();\n            !this.isLast() && /[「『（]/.test(lastText); lastText = this.lastChar().text()) {\n                this.lastChar().moveFirstAfter();\n            }\n        return this;\n    }\n\n    // --Display関係\n\n    /**\n     * 自身と子のCharを表示、あるいは非表示にします。内部の文字はfirst文字以降で自身に収まる文字を表示し、それ以外の文字は非表示にします\n     * @param {boolean} bDisplay trueであれば自身を表示し、falseで非表示にする\n     * @param {number} first 自身内部のCharを何文字目から表示するかのインデックス(０始まり)\n     * @return {Row} 自身のインスタンス\n     */\n    display(bDisplay,first) {\n        if (!bDisplay) {\n            this.elem().classList.remove('display');\n            return this;\n        }\n\n        this.elem().classList.add('display');\n        const dispHeight = this.height();\n        let heightSum = 0;\n        for (let array of this.chars().entries()) {\n            const index = array[0];\n            const char = array[1];\n            if (index < first) {\n                char.display(false);\n                continue;\n            }\n            const fontHeight = char.fontSize(); // sizeの取得はDOMにアクセスせずに行っているため、ここではレンダリングは発生しない\n            heightSum += fontHeight === 'auto' ? 18 : fontHeight;\n            char.display(index >= first && heightSum < dispHeight); // trueになれば表示、falseになれば非表示\n        }\n        return this;\n    }\n\n    /**\n     * カーソル位置を基準にして、文字を何文字目から表示すべきかの計算結果を返します\n     * @return {number} 文字の表示開始位置のインデックス\n     */\n    computeDisplayCharPos() {\n        const cursorIndex = this.cursorChar().index();\n        const currentFirst = this.firstDisplayCharPos();\n        const currentEnd = this.lastDisplayCharPos();\n        // カーソルが前にある\n        if (cursorIndex <= currentFirst) {\n            return cursorIndex;\n        }\n        // カーソルが後ろにある\n        if ( cursorIndex > currentEnd) {\n            return currentFirst + (cursorIndex - currentEnd);\n        }\n        return currentFirst;\n    }\n\n    /**\n     * この行が何文字目から表示されているかのインデックスを返します\n     * @return {number} EOL含め最初に表示された文字のインデックス。文字が全て非表示になっていれば-1\n     */\n    firstDisplayCharPos() {\n        for (let char of this.children()) {\n            if (char.isDisplay()) {\n                return char.index();\n            }\n        }\n        return -1; // displayがひとつもない(EOLは常にdisplayなので、ここまで来たら異常)\n    }\n\n    /**\n     * この行が何文字目まで表示されているかのインデックスを返します\n     * @return {number} EOL含め最後に表示された文字のインデックス。文字が全て非表示になっていれば-1\n     */\n    lastDisplayCharPos() {\n        if (!this.hasChar) {\n            return 0;\n        }\n        for (let i = this.charLen()-1,char; (char = this.chars(i)); i--) {\n            if (char.isDisplay()) {\n                return char.next().isEOL() ? i + 1 : i; // すべての文字がdisplayしていればEOLのインデックスを返す\n            }\n        }\n        return -1;\n    }\n\n    // --イベント\n\n    /**\n     * 行のクリックイベントの実行内容です。行をクリックすると最も近い文字にカーソルが当たります\n     * @param {Event} e イベントオブジェクト\n     */\n    runClick(e) {\n        if (this.container().inputBuffer().isDisplay()) {\n            return;\n        }\n\n        const clickX = e.pageX;\n        const clickY = e.pageY;\n        let min = Number.MAX_VALUE;\n        let closestChar;\n\n        for (let char of this.children()) {\n            const distance = char.computeDistanceFromPoint(clickX,clickY);\n            if (distance < min) {\n                min = distance;\n                closestChar = char;\n            }\n        }\n        closestChar.slidePrevCursor().addCursor().setPosMemory();\n    }\n\n    // --静的メソッド\n\n    /**\n     * 空行のRowインスタンスを新たに作成します\n     * @return {Row} 作成されたインスタンス\n     */\n    static createEmptyRow() {\n        return new Row([]);\n    }\n\n    // -- other\n\n    /**\n     * 同一段落で自分以降の行に処理を行います。\n     *     処理中に同一段落の行でなくなったなどしても影響せず、実行時時点で処理対象であった行すべてが処理されますので注意してください\n     * @param {function} func 処理が定義された関数オブジェクト\n     * @return {Row} 自身のインスタンス\n     */\n    afterEach(func) {\n        const index = this.index();\n        let cnt = 0;\n        for (let row of this.paragraph().rows()) {\n            if (cnt >= index) {\n                func(row);\n            }\n            cnt++;\n        }\n        return this;\n    }\n}//}}}\n\n\n/**\n * 段落を表すクラス\n */\nexport class Paragraph extends AbstractHierarchy {\n    //{{{\n    /**\n     * @param {object} data 段落を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     *  // 段落のクラスと各文字オブジェクトの配列の入った配列\n     *\t[\n     *\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n     *\t\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n     *\t\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n     *\t\t\t\t\"char\":\"あ\",\n     *\t\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\t\t\"fontSize\":\"auto\"\n     *\t\t\t},\n     *\t\t\t{\n     *\t\t\t\t\"char\":\"い\",\n     *\t\t\t\t\"decolation\":[]\n     *\t\t\t\t\"fontSize\":\"30\"\n     *\t\t\t}\n     *\t\t\t]\n     *\t]\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        super(ElemCreator.createParagraphElement(data));\n        const strLen = 40;\n        const spArray = Util.splitArray(data[1],strLen); // data[1]が空配列なら、spArrayにも空配列が入る\n        for (let charArray of spArray) {\n            this.append(new Row(charArray));\n        }\n        // data[1]が空配列 = 空段落(空行)の場合は上記for文が実行されないので、別に空行を作成して連結する\n        if (spArray.length === 0) {\n            this.append(Row.createEmptyRow());\n        }\n    }\n\n    // --参照取得\n\n    /**\n     * 親の文章コンテナを設定、または引数省略で取得します\n     * @param {SentenceContainer} [opt_newContainer] 新たに設定する、自身の属する文章コンテナのインスタンス\n     * @return {Paragraph SentenceContainer} 自身のインスタンス(引数を渡した場合)、あるいは自身の親の文章コンテナのインスタンス\n     */\n    container(opt_newContainer) {\n        return this.parent(opt_newContainer);\n    }\n\n    /**\n     * 指定された行のインスタンス、あるいは引数省略で子のインスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する子のインスタンスのインデックス\n     * @return {Row Row[]} 指定された行のインスタンス(引数を渡した場合)、あるいは子の配列(引数を省略した場合)\n     */\n    rows(opt_index) {\n        return this.children(opt_index);\n    }\n\n    // --判定\n\n    /**\n     * 自身が内部に行を持っているかどうかを返します\n     * @return {boolean} 自身が子を持っていればtrue、そうでなければfalse\n     */\n    hasRow() {\n        return this.hasChild();\n    }\n\n    /**\n     * 自身が空段落であるかどうかを返します。\n     *     空行がひとつだけあってもtrueを返します(空行は空段落にしか存在しないのが正常であるため)\n     * @return {boolean} 内部に行が存在しないか、空行が一つだけならtrue\n     */\n    isEmpty() {\n        return !this.hasChild() || this.firstChild().isEmpty();\n    }\n\n    /**\n     * 段落内にカーソルが含まれているかどうかを返します\n     * @return {boolean} 段落内にカーソルが含まれていればtrue、そうでなければfalse\n     */\n    hasCursor() {\n        for (let row of this.rows()) {\n            if (row.hasCursor()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するかどうかを返します\n     * @param {AbstractHierarchy} obj 判定するインスタンス\n     * @return {boolean} 引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するとtrue、そうでなければfalse\n     */\n    contains(obj) {\n        for (let row of this.rows()) {\n            if (row.is(obj)) {\n                return true;\n            }\n            if (row.contains(obj)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // --参照操作\n\n    /**\n     * 自身の子の最後にrowを加えます\n     * @param {Row} row 自身の子の最後に加えるインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    pushRow(row) {\n        return this.pushChild(row);\n    }\n\n    /**\n     * 自身の子の指定された位置にrowを挿入します\n     * @param {number} pos rowを挿入する位置のインデックス\n     * @param {Row} row 挿入するインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    insertRow(pos, row) {\n        return this.insertChild(pos,row);\n    }\n\n    /**\n     * 自身の子からrowを削除します\n     * @param {Row} row 削除する子のインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    deleteRow(row) {\n        return this.deleteChild(row);\n    }\n\n    // --Status\n\n    /**\n     * この段落の状態を表す規定のオブジェクトを作成します\n     * @return {object[]} この段落の状態を表す規定のオブジェクト\n     */\n    data() {\n        const data = [];\n        data[0] = this.classArray();\n        const charArray = [];\n        for (let row of this.rows()) {\n            for (let char of row.chars()) {\n                charArray.push(char.data());\n            }\n        }\n        data[1] = charArray;\n        return data;\n    }\n\n    /**\n     * この段落の装飾のクラスを文字列の配列にします\n     * @return {string[]} 装飾関係のクラスの配列。なければ空の配列\n     */\n    classArray() {\n        return this.elem().className.match(/decolation-\\S+/g) || [];\n    }\n\n    /**\n     * 段落内の文字数を数えます\n     * @return {number} 段落内の文字数\n     */\n    countChar() {\n        let cnt = 0;\n        for (let row of this.rows()) {\n            cnt += row.charLen();\n        }\n        return cnt;\n    }\n\n    // --Style\n\n    /**\n     * 段落にtext-alignを設定する、あるいは引数省略で現在のtext-alignの状態を取得します\n     * @param {string boolean} [opt_align] 新たに設定する'left','center','right'の文字列。\n     *     'left'あるいはfalseならalignを解除する\n     * @return {Paragraph string} 自身のインスタンス(引数を渡した場合)、\n     *     あるいは現在のtext-alignの状態(引数を省略した場合)\n     */\n    align(opt_align) {\n        if (opt_align === undefined) {\n            const align = this.className().match(/decolation-textalign-(\\S+)/);\n            return align ? align[1] : 'left';\n        }\n\n        const oldAlign = this.className().match(/decolation-textalign-\\S+/);\n        if (oldAlign) {\n            this.removeClass(oldAlign[0]);\n        }\n\n        if (opt_align && opt_align !== 'left') {\n            this.addClass('decolation-textalign-'+ opt_align);\n        }\n        return this;\n    }\n\n    /**\n     * 自身内部にあるすべてのCharから指定クラスを除去します\n     * @return {Paragraph} 自身のインスタンス\n     */\n    removeClassFromAllChar(className) {\n        for (let row of this.rows()) {\n            row.removeClassFromAllChild(className);\n        }\n        return this;\n    }\n\n    /**\n     * 自身内部にある文字にstrと合致する文字列があればsearch-labelクラスとsearch-wordクラスを付与します\n     * @param {string} str 判定する文字列\n     * @return {Paragraph} 自身のインスタンス\n     */\n    search(str) {\n        this.removeClassFromAllChar('search-label');\n        this.removeClassFromAllChar('search-word');\n        for (let row of this.rows()) {\n            for (let char of row.chars()) {\n                char.markSearchPhrase(str);\n            }\n        }\n        return this;\n    }\n\n    // --DOM操作関係\n\n    /**\n     * 自身の最後にrowを追加します\n     * @param {Row} row 追加するインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    append(row) {\n        this.elem().appendChild(row.elem());\n        row.paragraph(this);\n        const nextParagraph = this.next();\n        // rowの後側接続\n        if (nextParagraph) {\n            // row\n            const nextRow = nextParagraph.firstChild();\n            nextRow.prev(row);\n            row.next(nextRow);\n            // char\n            nextRow.firstChild().prev(row.lastChild());\n            row.lastChild().next(nextRow.firstChild());\n        }\n\n        // rowの前側接続\n        // 自段落の最終行　→　前の段落の最終行　→　null\n        const oldLastRow = this.hasRow() ?\n            this.lastChild() : (this.prev() ? this.prev().lastChild() : null);\n\n        this.pushRow(row);\n        if (oldLastRow === null) {\n            // 一行も存在しない状態からのappend\n            return this;\n        }\n        // row\n        oldLastRow.next(row);\n        row.prev(oldLastRow);\n        // char\n        oldLastRow.lastChild().next(row.firstChild());\n        row.firstChild().prev(oldLastRow.lastChild());\n\n        return this;\n    }\n\n    /**\n     * 自身の直後にparagraphを挿入します\n     * @param {Paragraph} paragraph 挿入するインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    after(paragraph) {\n        // DOM\n        if (this.hasNextSibling()) {\n            this.container().elem().insertBefore(paragraph.elem(),this.next().elem());\n        } else {\n            this.container().elem().appendChild(paragraph.elem());\n        }\n\n        // ポインタ調整\n        // this - paragraph - oldNext\n\n        // paragraph\n        const oldNext = this.next();\n        this.next(paragraph);\n        paragraph.prev(this);\n        paragraph.next(oldNext);\n        if (oldNext) {\n            oldNext.prev(paragraph);\n        }\n        // row\n        this.lastChild().next(paragraph.firstChild());\n        paragraph.firstChild().prev(this.lastChild());\n        if (oldNext) {\n            paragraph.lastChild().next(oldNext.firstChild());\n            oldNext.firstChild().prev(paragraph.lastChild());\n        }\n        // char\n        this.lastChild().lastChild().next(paragraph.firstChild().firstChild());\n        paragraph.firstChild().firstChild().prev(this.lastChild().lastChild());\n        if (oldNext) {\n            paragraph.lastChild().lastChild().next(oldNext.firstChild().firstChild());\n            oldNext.firstChild().firstChild().prev(paragraph.lastChild().lastChild());\n        }\n        // parent\n        paragraph.container(this.container());\n        const pos = this.index() + 1;\n        this.container().insertParagraph(pos,paragraph);\n        return this;\n    }\n\n    /**\n     * 自身を削除します。文書整形は行われません\n     * @return {Paragraph} 自身のインスタンス\n     */\n    remove() {\n        this.container().elem().removeChild(this.elem());\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n\n        // paragraph\n        // oldPrevParagraph - oldNextParagraph\n        const oldPrevParagraph = this.prev();\n        const oldNextParagraph = this.next();\n        if (oldPrevParagraph) {\n            oldPrevParagraph.next(oldNextParagraph);\n        }\n        if (oldNextParagraph) {\n            oldNextParagraph.prev(oldPrevParagraph);\n        }\n\n        // row\n        // oldPrevParagraph.lastChild() - oldNextParagraph.firstChild();\n        // oldPrevRow - oldNextRow\n        const oldPrevRow = oldPrevParagraph && oldPrevParagraph.lastChild();\n        const oldNextRow = oldNextParagraph && oldNextParagraph.firstChild();\n        if (oldPrevRow) {\n            oldPrevRow.next(oldNextRow);\n        }\n        if (oldNextRow) {\n            oldNextRow.prev(oldPrevRow);\n        }\n\n        // char\n        // oldPrevRow.lastChild() - oldNextRow.lastChild();\n        // oldPrevChar - oldNextChar\n        const oldPrevChar = oldPrevRow && oldPrevRow.lastChild();\n        const oldNextChar = oldNextRow && oldNextRow.firstChild();\n        if (oldPrevChar) {\n            oldPrevChar.next(oldNextChar);\n        }\n        if (oldNextChar) {\n            oldNextChar.prev(oldPrevChar);\n        }\n\n        this.container().deleteParagraph(this);\n        if (this.prev(null).firstChild()) {\n            if (this.firstChild().prev(null).firstChild()) {\n                this.firstChild().firstChild().prev(null);\n            }\n        }\n        if (this.next(null).lastChild()) {\n            if (this.lastChild().next(null).lastChild()) {\n                this.lastChild().lastChild().next(null);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 自身を削除し、文書を整形します(内部にカーソルがあれば直前の行に平行移動します。直前の行がなければ直後の行に移動します)\n     * @return {Paragraph} 自身のインスタンス\n     */\n    delete() {\n        const oldPrevRow = this.prev() && this.prev().lastChild();\n        const oldNextRow = this.next() && this.next().firstChild();\n\n        this.remove();\n\n        if (this.hasCursor()) {\n            if (oldPrevRow) {\n                this.cursor().moveRow(oldPrevRow);\n            } else { // 直前の行がなければ直後\n                this.cursor().moveRow(oldNextRow);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 渡された文字以降を新しい段落に移動して、段落を２つに分けます\n     * @param {Char} char 段落分割の基準文字のインスタンス\n     * @return {Paragraph} 自身のインスタンス\n     */\n    divide(char) {\n        /*\n         *\n         * 新しい段落を作成し、基準文字以降を新しい段落に移動する。\n         *  基準文字の属していた行以降の同段落の行を新しい段落に移動する。\n         *  新しい段落を基準文字のあった段落の直後に挿入する。cordinate()で文字の調整を行う\n         *\n         *  段落先頭から:一行目の文字が丸々新しい行に移って次の段落の一行目となる。\n         *               二行目以降は行ごと次の段落へ\n         *               →　基準文字のあった行は空行となりもともとの段落の唯一の行となるため、\n         *                   あたかも空段落が基準行の前に挿入されたようになる\n         *  行頭から:基準行の文字がまるまる新しい行に移って次の段落の一行目になる。\n         *           基準行以降の行は行ごと新しい段落に移る。\n         *           →　基準行以降が新しい段落に移り、それ以前の行はもともとの段落に残るため、段落が２つに別れる。\n         *           この時点では、もともとの段落の最後に空行が残っている状態なので、cordinate()で対応する\n         *  行の途中から:基準文字以降の同じ行の文字が新しい行に移って次の段落の一行目になる。\n         *               それ以降は行ごと次の段落に移る。\n         *               →　基準文字以降が新しい段落になる。この時点では一行目の文字数がおかしいので、cordinate()で調整する\n         *  段落最後のEOLから: 基準文字のインデックスが同一行の他の文字より大きいため、afterEach()が一度も実行されない。\n         *                     次の行も存在しないのでnextRowが存在せず、nextRow.afterEach()は実行されない。\n         *                     ただし、新しい行はnewParagraphを作成した時点で存在している。\n         *                     →　新しい段落が今いる段落の後ろに追加されるだけ\n         */\n        if (!this.contains(char)) {\n            return this;\n        }\n        const paragraph = char.row().paragraph();\n        // 作成時点で空行が含まれている 段落にテキストアラインが付与されていれば、新しい段落も同様にする\n        const newParagraph = Paragraph.createEmptyParagraph().align(paragraph.align());\n        const nextRow = char.row().hasNextSibling() ? char.row().next() : null; // この行以降を新しい段落に移動\n        // 一行目\n        // 基準文字以降を新しい行に移し、新しい段落に挿入する\n        // 元々の行は空になってもそのまま\n        const newRow = newParagraph.firstChild();\n        char.afterEach(function (c) {\n            c.remove();\n            newRow.append(c);\n        });\n\n        // 二行目以降\n        // 行ごと新しい段落に移動\n        if (nextRow) {\n            nextRow.afterEach(function (row) {\n                row.remove();\n                newParagraph.append(row);\n            });\n        }\n\n        this.after(newParagraph);\n        paragraph.cordinate().checkKinsoku();\n        newParagraph.cordinate().checkKinsoku();\n        return this;\n    }\n\n    // --文章整理\n\n    /**\n     * 内部行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n     *     標準以外のフォントサイズの文字があれば文字数はそのサイズに合わせて調整されます。\n     *     また、自身が空段落ではなく内部に空行があれば削除します\n     * @return {Paragraph} 自身のインスタンス\n     */\n    cordinate() {\n        // エラー原因まとめ\n        // ここで一旦rows()の内容が保存され、そこから一つ一つrowを取り出す(rows()はコピーされた配列が返される)\n        // row.cordinate()内のbringChar()によって、最終行が削除されることがある\n        // 削除された最終行でも、先に保存されていたためrow.cordinate()が実行される\n        // 削除行の参照は保持されているのでcordinate()はエラーが起きずに実行される\n        // ただしremove()された時にparentにnullが代入されているので、内部でparagraph().container()が実行されるときにNullPointer\n        for (let row of this.rows()) {\n            if (!row.paragraph()) {\n                continue; // cordinate()内で行が削除された場合の対策\n            }\n            row.cordinate();\n        }\n        return this;\n    }\n\n    /**\n     * 段落内に禁則処理を施します\n     * @return {Paragraph} 自身のインスタンス\n     */\n    checkKinsoku() {\n        for (let row of this.rows()) {\n            if (!row.paragraph()) {\n                continue;\n            }\n            row.checkKinsoku();\n        }\n        return this;\n    }\n\n    /**\n     * 内部にあるすべての行の表示非表示を切り替えます\n     * @param {boolean} bDisplay 表示するならtrue、そうでなければfalseを指定する\n     * @return {Paragraph} 自身のインスタンス\n     */\n    display(bDisplay) {\n        for (let row of this.rows()) {\n            row.display(bDisplay);\n        }\n        return this;\n    }\n\n    /**\n     * 空段落のインスタンスを新たに作成します\n     * @return {Paragraph} 空段落のインスタンス\n     */\n    static createEmptyParagraph() {\n        const arg = [];\n        arg[0] = [];\n        arg[1] = [];\n        return new Paragraph(arg);\n    }\n}//}}}",
    "static": true,
    "longname": "js/character.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Char",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~Char",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{Char}",
    "description": "文字を表すクラス",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#constructor",
    "access": null,
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文字を表すオブジェクト<br>\n<pre>\n<code>\n // 例\n\t{\n\t\t\"char\":\"あ\",\n\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\"fontSize\": \"auto\"\n\t}\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_fontSize",
    "memberof": "js/character.js~Char",
    "static": false,
    "longname": "js/character.js~Char#_fontSize",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "row",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#row",
    "access": null,
    "description": "自身の親であるRowインスタンスをnewRowに設定します、あるいは引数省略で取得します",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newRow",
        "description": "新たに設定する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char Row"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "paragraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#paragraph",
    "access": null,
    "description": "自身の属する段落のインスタンスを取得します",
    "lineNumber": 45,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身の属する段落のインスタンス"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#sentenceContainer",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを取得します",
    "lineNumber": 53,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "cursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#cursor",
    "access": null,
    "description": "カーソルのインスタンスを取得します",
    "lineNumber": 61,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナの持つカーソルのインスタンス"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "slideNextCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#slideNextCursor",
    "access": null,
    "description": "カーソル文字として自身が不適なら自身の次のCharを返します。具体的には、自身が段落途中のEOLならその次の文字となります",
    "lineNumber": 70,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身も含めた自身以降でカーソル文字として適したインスタンス"
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "slidePrevCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#slidePrevCursor",
    "access": null,
    "description": "カーソル文字として自身が不適なら自身の前のCharを返します。具体的には、自身が段落途中のEOLならその前の文字となります",
    "lineNumber": 84,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身も含めた自身以前でカーソル文字として適したインスタンス"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "nextChar",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#nextChar",
    "access": null,
    "description": "自身の次の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します",
    "lineNumber": 98,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の次のCharインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "prevChar",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#prevChar",
    "access": null,
    "description": "自身の前の文字を表すCharインスタンスを返します。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返します",
    "lineNumber": 110,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の前のCharインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "nextCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#nextCharOnParagraph",
    "access": null,
    "description": "同一段落内での次の文字を返します。EOLは含みません",
    "lineNumber": 122,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "同一段落内での次の文字のインスタンス。なければnull"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "prevCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#prevCharOnParagraph",
    "access": null,
    "description": "同一段落内での前の文字を返します。EOLは含みません",
    "lineNumber": 134,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "同一段落内での前の文字のインスタンス。なければnull"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "isEOL",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#isEOL",
    "access": null,
    "description": "自身がEOLであるかどうかを返します",
    "lineNumber": 148,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "オーバーライドされない限り常にfalse"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "hasCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasCursor",
    "access": null,
    "description": "自身にカーソルがあたっているかどうかを返します",
    "lineNumber": 156,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身にカーソルがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "isDisplay",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#isDisplay",
    "access": null,
    "description": "自身が可視化されているかどうかを返します",
    "lineNumber": 164,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が可視化されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "hasNextSibling",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasNextSibling",
    "access": null,
    "description": "自身が同一行内で最終文字であるかどうかを返します。EOLは含みません(次の文字がEOLならfalse,自身がEOLの場合もfalse)",
    "lineNumber": 172,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一行内で最終文字でなければtrue、最終文字ならfalse。"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "hasNextCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasNextCharOnParagraph",
    "access": null,
    "description": "同一段落内で次のCharがあるかどうかを返します",
    "lineNumber": 180,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一段落内で次のCharがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "hasPrevCharOnParagraph",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#hasPrevCharOnParagraph",
    "access": null,
    "description": "同一段落内で前のCharがあるかどうかを返します",
    "lineNumber": 188,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一段落内で前のCharがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "isInRange",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#isInRange",
    "access": null,
    "description": "この要素がrangeの中にあるかどうかを返します",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "Range"
        ],
        "spread": false,
        "optional": false,
        "name": "range",
        "description": "判定の基準となる範囲を表すRange"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "この要素がrangeの中にあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "data",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#data",
    "access": null,
    "description": "この文字の状態を表す規定のオブジェクトを作成します",
    "lineNumber": 219,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "この文字の状態を表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "classArray",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#classArray",
    "access": null,
    "description": "この文字にかかっている装飾のクラスを配列にして返します",
    "lineNumber": 231,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "この文字にかかっている装飾のクラスの配列。文字装飾がかかっていなければ空の配列"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "addCursor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#addCursor",
    "access": null,
    "description": "この文字にカーソルを当てます",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "fontSize",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#fontSize",
    "access": null,
    "description": "この文字のフォントサイズを変更します。あるいは引数省略で現在のフォントサイズを取得します",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_fontSize",
        "description": "新たに設定するフォントサイズ(数値以外では'auto'が渡せる)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char number string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)。\n    現在のフォントサイズ(引数を省略した場合)、フォントサイズが数値で設定されていなければ文字列の'auto'"
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_fontSize",
    "memberof": "js/character.js~Char",
    "static": false,
    "longname": "js/character.js~Char#_fontSize",
    "access": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "color",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#color",
    "access": null,
    "description": "この文字に文字色を設定します。あるいは引数省略で現在の文字色を取得します",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "string boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_color",
        "description": "文字列ならその色に設定する、falseを渡せば文字色を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の文字色(引数を省略した場合。文字色が設定されていなければ'black')"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "bold",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#bold",
    "access": null,
    "description": "この文字の太字を設定、解除します\n    または引数省略でこの文字が太字になっているかどうかを返します",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueなら太字にする、falseなら太字を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは太字になっているかどうかの真偽値(引数を省略した場合)"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "italic",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#italic",
    "access": null,
    "description": "この文字の斜体を設定、解除します\n    または引数省略でこの文字が斜体になっているかどうかを返します",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueなら斜体にする、falseなら斜体を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは斜体になっているかどうかの真偽値(引数を省略した場合)"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "_addColor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#_addColor",
    "access": null,
    "description": "文字色を設定します",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "設定する文字色"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_removeColor",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#_removeColor",
    "access": null,
    "description": "文字色を解除します",
    "lineNumber": 351,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "markSearchPhrase",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#markSearchPhrase",
    "access": null,
    "description": "この文字から始まる文字列がstrと合致するなら、その文字列のCharにクラスを付与します",
    "lineNumber": 365,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "判定する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "before",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#before",
    "access": null,
    "description": "charを自身の直前に挿入します",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "after",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#after",
    "access": null,
    "description": "charを自身の直後に挿入します",
    "lineNumber": 422,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "remove",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#remove",
    "access": null,
    "description": "自身を削除します。文書整形は行いません",
    "lineNumber": 456,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "delete",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#delete",
    "access": null,
    "description": "自身を削除し、文書整形を行います(空行ができたらその行も削除し、文字数調整や禁則処理を行います)",
    "lineNumber": 482,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "replace",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#replace",
    "access": null,
    "description": "自分自身をnewCharと入れ替えます",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "newChar",
        "description": "自身と入れ替える文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "moveLastBefore",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#moveLastBefore",
    "access": null,
    "description": "前の行の最後に移動します。その結果空行ができたら削除し、カーソルがその行にあれば自身の次のEOLに移動します\n    段落はまたがず、移動前の自身が段落最初の文字であれば何もしません",
    "lineNumber": 521,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "moveFirstAfter",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#moveFirstAfter",
    "access": null,
    "description": "次の行の最初に移動します。次の行が同じ段落になければ新しく行を作り、カーソルは自身の次のEOLに移動します",
    "lineNumber": 547,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "display",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#display",
    "access": null,
    "description": "自身の表示非表示を切り替えます",
    "lineNumber": 575,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "trueなら表示、falseなら非表示"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "createData",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#createData",
    "access": null,
    "description": "現在のメニューバーの状態に即してcを内容に持つ規定のオブジェクトを作成します。メソッドを持つ既存のCharインスタンスには影響しません",
    "lineNumber": 591,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "作成するオブジェクトが表す文字(１文字)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文字データを表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "createPlainCharData",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/character.js~Char.createPlainCharData",
    "access": null,
    "description": "文字装飾のない文字の文字データを返します",
    "lineNumber": 606,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "作成するオブジェクトが表す文字(１文字)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文字データを表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "setPosMemory",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#setPosMemory",
    "access": null,
    "description": "この文字のインデックスをカーソル位置として記憶します",
    "lineNumber": 620,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "afterEach",
    "memberof": "js/character.js~Char",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Char#afterEach",
    "access": null,
    "description": "自分を含めて、自分以降で同じ段落内のChar全てに処理を行います(EOLは含まない)",
    "lineNumber": 631,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "処理内容が定義された関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "EOL",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~EOL",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{EOL}",
    "description": "行の末端を表すクラス",
    "lineNumber": 648,
    "interface": false,
    "extends": [
      "Char"
    ]
  },
  {
    "__docId__": 116,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#constructor",
    "access": null,
    "description": "",
    "lineNumber": 654,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "自身のDOM要素"
      }
    ]
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "isEOL",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#isEOL",
    "access": null,
    "description": "自身がEOLであるかどうかを返します",
    "lineNumber": 662,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "index",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#index",
    "access": null,
    "description": "自身のインデックスを返します",
    "lineNumber": 672,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身は親の配列に入っていないので、親の配列の長さと同じ数値を返す"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "appended",
    "memberof": "js/character.js~EOL",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~EOL#appended",
    "access": null,
    "description": "rowを親として紐付けます",
    "lineNumber": 683,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "親となる行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Row",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~Row",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{Row}",
    "description": "行を表すクラス",
    "lineNumber": 696,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#constructor",
    "access": null,
    "description": "",
    "lineNumber": 719,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "行を表すオブジェクト<br>\n例\n<pre>\n<code>\n// 各文字のオブジェクトが配列で格納される\n[\n\t{\t // 文字を表すオブジェクト\n\t\t\"char\":\"あ\",\n\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\"fontSize\":\"auto\"\n\t},\n\t{\n\t\t\"char\":\"い\",\n\t\t\"decolation\":null\n\t\t\"fontSize\":\"18\"\n\t}\n]\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_EOL",
    "memberof": "js/character.js~Row",
    "static": false,
    "longname": "js/character.js~Row#_EOL",
    "access": null,
    "description": null,
    "lineNumber": 728,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "EOL",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#EOL",
    "access": null,
    "description": "自身のEOLのインスタンスを返します",
    "lineNumber": 747,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "自身のEOLのインスタンス"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "container",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#container",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを返します",
    "lineNumber": 755,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "paragraph",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#paragraph",
    "access": null,
    "description": "自身の親の段落を新たに設定する、あるいは現在の親段落を取得します",
    "lineNumber": 764,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newParagraph",
        "description": "新たに設定する親段落"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親段落のインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "cursorChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#cursorChar",
    "access": null,
    "description": "カーソルを持つ文字のインスタンスを取得します",
    "lineNumber": 772,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソルを持つ文字のインスタンス"
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "firstChild",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#firstChild",
    "access": null,
    "description": "自身の内部にある最初のインスタンスを返します",
    "lineNumber": 780,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の第一文字のインスタンス。それがなければ自身のEOLのインスタンス"
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "lastChild",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#lastChild",
    "access": null,
    "description": "自身の内部にある最後のインスタンスであるEOLのインスタンスを返します",
    "lineNumber": 793,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のEOLのインスタンス"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "lastChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#lastChar",
    "access": null,
    "description": "自身の最終文字のインスタンスを返します",
    "lineNumber": 801,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の最終文字のインスタンス。空行であればnull"
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "chars",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#chars",
    "access": null,
    "description": "指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します。EOLは含まれません",
    "lineNumber": 811,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char Char[]"
      ],
      "spread": false,
      "description": "指定された子のインスタンス(引数を渡した場合。範囲外の数値ならundefined)、\n    あるいは子のインスタンスの配列(引数を省略した場合。子がいなければ空の配列)"
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "children",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#children",
    "access": null,
    "description": "EOLを含む、指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得します",
    "lineNumber": 821,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "指定された子のインスタンス(引数を渡した場合。範囲外のインデックスならEOL)、\n    あるいはEOLを含む子のインスタンスの配列(引数を省略した場合。子がいなければ要素がEOLのみである配列)"
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "hasChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#hasChar",
    "access": null,
    "description": "内部に文字があるかどうかを返します",
    "lineNumber": 836,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内部に文字があればtrue、EOLのみの空行ならfalse"
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "hasCursor",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#hasCursor",
    "access": null,
    "description": "行内にカーソルがあるかどうかを返します",
    "lineNumber": 844,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "行内にカーソルが含まれていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "isDisplay",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#isDisplay",
    "access": null,
    "description": "この要素が可視化されているかどうかを返します",
    "lineNumber": 857,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "可視化されていたらtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "contains",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#contains",
    "access": null,
    "description": "objが行内に含まれているかどうかを返します",
    "lineNumber": 866,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "判定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "objが行内にあるCharおよびEOLのいずれかに一致するとtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "isPageBreak",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#isPageBreak",
    "access": null,
    "description": "ページ内で最初の行であるかどうかを返します",
    "lineNumber": 884,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ページ内で最初の行であればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "isPageLast",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#isPageLast",
    "access": null,
    "description": "ページ内で最終行であるかどうかを返します",
    "lineNumber": 892,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ページ内で最終行ならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "pushChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#pushChar",
    "access": null,
    "description": "charを自身の子の最後に加えます",
    "lineNumber": 903,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "子に加える文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "insertChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#insertChar",
    "access": null,
    "description": "charを自身の子の指定された位置に加えます",
    "lineNumber": 913,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "加える位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "加える子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "deleteChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#deleteChar",
    "access": null,
    "description": "charを自身の子から削除します",
    "lineNumber": 922,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "削除する子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "data",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#data",
    "access": null,
    "description": "この行の状態を表す規定のオブジェクトを作成します",
    "lineNumber": 932,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "この行の状態を表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "charLen",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#charLen",
    "access": null,
    "description": "この行の文字数を返します。EOLは含みません",
    "lineNumber": 944,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "この行の文字数。空行なら０"
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "maxFont",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#maxFont",
    "access": null,
    "description": "この行の内部にある文字のうち、最も大きいフォントサイズを返します。'auto'は18として計算します",
    "lineNumber": 952,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "最大のフォント数"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "width",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#width",
    "access": null,
    "description": "この行の横幅を返します。行は９０度回転しているため、ここでいう幅はcss上の高さを表します",
    "lineNumber": 968,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "height",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#height",
    "access": null,
    "description": "この行の高さを返します。行は９０度回転しているため、ここでいう高さはcss上の幅を表します",
    "lineNumber": 978,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "empty",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#empty",
    "access": null,
    "description": "子を空にして参照を整えます",
    "lineNumber": 988,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "prepend",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#prepend",
    "access": null,
    "description": "自身の最初にcharを挿入します",
    "lineNumber": 1008,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入する文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "append",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#append",
    "access": null,
    "description": "自身の最後(EOLの直前)にcharを挿入します",
    "lineNumber": 1018,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入する文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "before",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#before",
    "access": null,
    "description": "自身の直前にrowを挿入します",
    "lineNumber": 1028,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "after",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#after",
    "access": null,
    "description": "自身の直後にrowを挿入します",
    "lineNumber": 1062,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "remove",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#remove",
    "access": null,
    "description": "自身を削除します。文書整形は行われません",
    "lineNumber": 1099,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "delete",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#delete",
    "access": null,
    "description": "自身を削除し、文書整形を行います(カーソルが含まれていれば前の行、前の行がなければ次の行にカーソルを移動します)",
    "lineNumber": 1140,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "moveLastBefore",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#moveLastBefore",
    "access": null,
    "description": "前の段落の最終行として移動します。各段落最初の行でのみ有効です。自身が空行であれば削除されます",
    "lineNumber": 1162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "bringChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#bringChar",
    "access": null,
    "description": "次のRowの第一文字を、自らの最後に移動します。段落内でのみ有効となります",
    "lineNumber": 1192,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "bringChars",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#bringChars",
    "access": null,
    "description": "次のRowの最初のnum文字を、自らの最後に移動します。段落内でのみ有効となります。また、文字同士の順番に変化はありません",
    "lineNumber": 1205,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動する文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "takeChar",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#takeChar",
    "access": null,
    "description": "自分の最後の文字を、次の行の最初に移動します。次の行がなければ新しく作成されます",
    "lineNumber": 1216,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "takeChars",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#takeChars",
    "access": null,
    "description": "自分の最後のnum文字を、次の行の最初に移動します。次の行がなければ新しく作成されます",
    "lineNumber": 1229,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動する文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "createPlainContent",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#createPlainContent",
    "access": null,
    "description": "引数の文字列から作成された装飾のない文字のインスタンスを自らの最後に追加します",
    "lineNumber": 1240,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "cordinate",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#cordinate",
    "access": null,
    "description": "指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n    標準以外のフォントサイズの文字があれば文字数はフォントサイズに合わせて調整されます。\n    また、自身が空段落以外での空行であれば削除します",
    "lineNumber": 1255,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "checkKinsoku",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#checkKinsoku",
    "access": null,
    "description": "行内の禁則処理を行います",
    "lineNumber": 1286,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "display",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#display",
    "access": null,
    "description": "自身と子のCharを表示、あるいは非表示にします。内部の文字はfirst文字以降で自身に収まる文字を表示し、それ以外の文字は非表示にします",
    "lineNumber": 1309,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "trueであれば自身を表示し、falseで非表示にする"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "自身内部のCharを何文字目から表示するかのインデックス(０始まり)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "computeDisplayCharPos",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#computeDisplayCharPos",
    "access": null,
    "description": "カーソル位置を基準にして、文字を何文字目から表示すべきかの計算結果を返します",
    "lineNumber": 1336,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文字の表示開始位置のインデックス"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "firstDisplayCharPos",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#firstDisplayCharPos",
    "access": null,
    "description": "この行が何文字目から表示されているかのインデックスを返します",
    "lineNumber": 1355,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "EOL含め最初に表示された文字のインデックス。文字が全て非表示になっていれば-1"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "lastDisplayCharPos",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#lastDisplayCharPos",
    "access": null,
    "description": "この行が何文字目まで表示されているかのインデックスを返します",
    "lineNumber": 1368,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "EOL含め最後に表示された文字のインデックス。文字が全て非表示になっていれば-1"
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "runClick",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#runClick",
    "access": null,
    "description": "行のクリックイベントの実行内容です。行をクリックすると最も近い文字にカーソルが当たります",
    "lineNumber": 1386,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "createEmptyRow",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/character.js~Row.createEmptyRow",
    "access": null,
    "description": "空行のRowインスタンスを新たに作成します",
    "lineNumber": 1412,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "作成されたインスタンス"
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "afterEach",
    "memberof": "js/character.js~Row",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Row#afterEach",
    "access": null,
    "description": "同一段落で自分以降の行に処理を行います。\n    処理中に同一段落の行でなくなったなどしても影響せず、実行時時点で処理対象であった行すべてが処理されますので注意してください",
    "lineNumber": 1424,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "処理が定義された関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "Paragraph",
    "memberof": "js/character.js",
    "static": true,
    "longname": "js/character.js~Paragraph",
    "access": null,
    "export": true,
    "importPath": "./js/character.js",
    "importStyle": "{Paragraph}",
    "description": "段落を表すクラス",
    "lineNumber": 1441,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#constructor",
    "access": null,
    "description": "",
    "lineNumber": 1467,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "段落を表すオブジェクト<br>\n例\n<pre>\n<code>\n // 段落のクラスと各文字オブジェクトの配列の入った配列\n[\n\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n\t\t\t\"char\":\"あ\",\n\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\t\"fontSize\":\"auto\"\n\t\t},\n\t\t{\n\t\t\t\"char\":\"い\",\n\t\t\t\"decolation\":[]\n\t\t\t\"fontSize\":\"30\"\n\t\t}\n\t\t]\n]\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "container",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#container",
    "access": null,
    "description": "親の文章コンテナを設定、または引数省略で取得します",
    "lineNumber": 1487,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newContainer",
        "description": "新たに設定する、自身の属する文章コンテナのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の親の文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "rows",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#rows",
    "access": null,
    "description": "指定された行のインスタンス、あるいは引数省略で子のインスタンスの配列を取得します",
    "lineNumber": 1496,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインスタンスのインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Row[]"
      ],
      "spread": false,
      "description": "指定された行のインスタンス(引数を渡した場合)、あるいは子の配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "hasRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#hasRow",
    "access": null,
    "description": "自身が内部に行を持っているかどうかを返します",
    "lineNumber": 1506,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#isEmpty",
    "access": null,
    "description": "自身が空段落であるかどうかを返します。\n    空行がひとつだけあってもtrueを返します(空行は空段落にしか存在しないのが正常であるため)",
    "lineNumber": 1515,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内部に行が存在しないか、空行が一つだけならtrue"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "hasCursor",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#hasCursor",
    "access": null,
    "description": "段落内にカーソルが含まれているかどうかを返します",
    "lineNumber": 1523,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "段落内にカーソルが含まれていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "contains",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#contains",
    "access": null,
    "description": "引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するかどうかを返します",
    "lineNumber": 1537,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "判定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するとtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "pushRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#pushRow",
    "access": null,
    "description": "自身の子の最後にrowを加えます",
    "lineNumber": 1556,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "自身の子の最後に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "insertRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#insertRow",
    "access": null,
    "description": "自身の子の指定された位置にrowを挿入します",
    "lineNumber": 1566,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "rowを挿入する位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "deleteRow",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#deleteRow",
    "access": null,
    "description": "自身の子からrowを削除します",
    "lineNumber": 1575,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "削除する子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "data",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#data",
    "access": null,
    "description": "この段落の状態を表す規定のオブジェクトを作成します",
    "lineNumber": 1585,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "この段落の状態を表す規定のオブジェクト"
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "classArray",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#classArray",
    "access": null,
    "description": "この段落の装飾のクラスを文字列の配列にします",
    "lineNumber": 1602,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "装飾関係のクラスの配列。なければ空の配列"
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "countChar",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#countChar",
    "access": null,
    "description": "段落内の文字数を数えます",
    "lineNumber": 1610,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "段落内の文字数"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "align",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#align",
    "access": null,
    "description": "段落にtext-alignを設定する、あるいは引数省略で現在のtext-alignの状態を取得します",
    "lineNumber": 1627,
    "params": [
      {
        "nullable": null,
        "types": [
          "string boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_align",
        "description": "新たに設定する'left','center','right'の文字列。\n    'left'あるいはfalseならalignを解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、\n    あるいは現在のtext-alignの状態(引数を省略した場合)"
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "removeClassFromAllChar",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#removeClassFromAllChar",
    "access": null,
    "description": "自身内部にあるすべてのCharから指定クラスを除去します",
    "lineNumber": 1648,
    "params": [
      {
        "name": "className",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "search",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#search",
    "access": null,
    "description": "自身内部にある文字にstrと合致する文字列があればsearch-labelクラスとsearch-wordクラスを付与します",
    "lineNumber": 1660,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "判定する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "append",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#append",
    "access": null,
    "description": "自身の最後にrowを追加します",
    "lineNumber": 1678,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "追加するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "after",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#after",
    "access": null,
    "description": "自身の直後にparagraphを挿入します",
    "lineNumber": 1718,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "remove",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#remove",
    "access": null,
    "description": "自身を削除します。文書整形は行われません",
    "lineNumber": 1762,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "delete",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#delete",
    "access": null,
    "description": "自身を削除し、文書を整形します(内部にカーソルがあれば直前の行に平行移動します。直前の行がなければ直後の行に移動します)",
    "lineNumber": 1819,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "divide",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#divide",
    "access": null,
    "description": "渡された文字以降を新しい段落に移動して、段落を２つに分けます",
    "lineNumber": 1840,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "段落分割の基準文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "cordinate",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#cordinate",
    "access": null,
    "description": "内部行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n    標準以外のフォントサイズの文字があれば文字数はそのサイズに合わせて調整されます。\n    また、自身が空段落ではなく内部に空行があれば削除します",
    "lineNumber": 1902,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "checkKinsoku",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#checkKinsoku",
    "access": null,
    "description": "段落内に禁則処理を施します",
    "lineNumber": 1922,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "display",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/character.js~Paragraph#display",
    "access": null,
    "description": "内部にあるすべての行の表示非表示を切り替えます",
    "lineNumber": 1937,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "表示するならtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "createEmptyParagraph",
    "memberof": "js/character.js~Paragraph",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/character.js~Paragraph.createEmptyParagraph",
    "access": null,
    "description": "空段落のインスタンスを新たに作成します",
    "lineNumber": 1948,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "空段落のインスタンス"
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "js/container.js",
    "content": "'use strict';\n/* global AbstractHierarchy, Paragraph, Cursor, InputBuffer, CommandLine, Menu, DoManager, Util, getSelection */  // jshint ignore:line\n\n\n/**\n * 語句検索モードを担当するクラス\n */\nexport class SearchMode {  // jshint ignore:line\n    //{{{\n    constructor(sentenceContainer) {\n        this._elem = document.getElementById('search');\n        this._sentenceContainer = sentenceContainer;\n    }\n\n    /**\n     * 渡された文字列を本文内から探し、見つかった文字列にsearch-wordクラスを付与します。\n     *     さらに、見つかった文字列の先頭文字にsearch-labelクラスを付与します\n     *  @param {string} str 検索文字列\n     *  @return {SentenceContainer} 自身のインスタンス\n     */\n    _search(str) {\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            paragraph.search(str);\n        }\n        return this;\n    }\n\n    /**\n     * 文書内語句検索を始めます\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    start() {\n        this._elem.classList.add('active');\n        this._elem.focus();\n        this._elem.value = '/';\n        this._sentenceContainer.removeKeydownEventListener();\n        if (!this._keyupArg) {\n            this._keyupArg = this._onKeyup.bind(this);\n            this._elem.addEventListener('keyup', this._keyupArg, false);\n            this._elem.addEventListener('focusin', this._onFocusin.bind(this));\n            this._elem.addEventListener('focusout', this._onFocusout.bind(this));\n        }\n        return this;\n    }\n\n    /**\n     * 文書内語句検索を完全に終了します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    stop() {\n        this._sentenceContainer.addKeydownEventListener();\n        this._elem.value = '';\n        this._elem.classList.remove('active');\n        this._sentenceContainer\n            .removeClassFromAllChar('search-label').removeClassFromAllChar('search-word');\n        return this;\n    }\n\n    /**\n     * 語句検索inputフォームのkeyupイベントです\n     * @param {Event} e イベントオブジェクト\n     */\n    _onKeyup(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 13) {\n            // enter\n            this._elem.blur(); // enterを押しただけではフォーカスが外れない\n            return;\n        }\n\n        // 中身が空になればsearchモードを完全に終了する\n        if (this._elem.value === '') {\n            this._elem.blur();\n            this.stop();\n            return;\n        }\n\n        this._search(this._elem.value.slice(1));\n    }\n\n    /**\n     * 語句検索inputフォームからフォーカスが外れた際のイベント実行内容です。\n     *     文書コンテナ本体にkeydownイベントを戻します\n     */\n    _onFocusout() {\n        this._sentenceContainer.addKeydownEventListener();\n    }\n\n    /**\n     * 語句検索inputフォームにフォーカスがあたった際のイベント実行内容です。\n     *     文書コンテナ本体のkeydownイベントを外します\n     */\n    _onFocusin() {\n        this._sentenceContainer.removeKeydownEventListener();\n    }\n}//}}}\n\n\n/**\n * 文書内の文字選択を担当するクラス\n */\nexport class SelectRange {  // jshint ignore:line\n    //{{{\n\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._cursor = sentenceContainer.cursor();\n    }\n\n    /**\n     * 選択範囲にある文字インスタンスを配列で返します\n     * @param {boolean} [opt_bl] 選択範囲を解除するならtrueを指定する\n     * @return {Char[]} 選択範囲内にある文字インスタンスの配列\n     */\n    selectChars(opt_bl) {\n        const ret = [];\n        const selection = getSelection();\n        if (this._selectText().length === 0) {\n            return ret; // rangeCount===0とすると、EOLのみ選択されることがある\n        }\n\n        const selRange = selection.getRangeAt(0);\n        for (let char = this._sentenceContainer.firstChar(); char; char = char.nextChar()) {\n            if (char.isInRange(selRange)) {\n                ret.push(char);\n            }\n        }\n\n        selRange.detach();\n        if (opt_bl) {\n            selection.removeAllRanges(); // 選択を解除する\n        }\n        return ret;\n    }\n\n    /**\n     * 選択範囲内にある文字列をローカルストレージに保存します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    copySelectText() {\n        localStorage.clipBoard = this._selectText();\n        return this;\n    }\n\n    // ペースト\n    /**\n     * ローカルストレージに保存した文字列をカーソル位置から挿入します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    pasteText() {\n        this._cursor.insert(localStorage.clipBoard);\n        return this;\n    }\n\n    /**\n     * 選択範囲内にある文字列を返します\n     * @return {string} 選択範囲内の文字列\n     */\n    _selectText() {\n        const selection = getSelection();\n        let ret = '';\n        for (let i = 0, cnt = selection.rangeCount; i < cnt; i++) {\n            const selRange = selection.getRangeAt(i);\n            ret += selRange.toString();\n        }\n        return ret;\n    }\n\n    /**\n     * マウスで選択範囲を変更した際のイベントを与えます。選択範囲最後の文字の次の文字にカーソルを当てます\n     */\n    addSelectEvent() {\n        this._sentenceContainer.elem().addEventListener('mouseup', function (e) {\n            const selChars = this.selectChars();\n            // 選択範囲の直後にカーソルを当てる\n            if (selChars.length > 0) {\n                const lastCharOnSelect = selChars[selChars.length -1];\n                const newCursor =\n                    lastCharOnSelect.hasNextSibling() ? lastCharOnSelect.next() : lastCharOnSelect;\n                newCursor.addCursor().setPosMemory();\n            }\n        }.bind(this),false);\n    }\n}//}}}\n\n\n/**\n * 文字や行の表示および非表示を担当するクラス\n */\nexport class Displayer { // jshint ignore:line\n    //{{{\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n    }\n\n    /**\n     * 文書を１行目の１文字目から表示します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    resetDisplay() {\n        this._addDisplay(0,0);\n        return this;\n    }\n\n    // strPos: 'center','right'\n    /**\n     * カーソル位置を基準として文書を表示し直します\n     * @param {string} [opt_pos] 表示後のカーソル位置を指定する。'center'と'right'に対応。\n     *     省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    changeDisplay(opt_pos) {\n        const cursorChar = this._sentenceContainer.cursorChar();\n        const rowPos = this._computeDisplayRowPos(opt_pos);\n        const charPos = cursorChar.row().computeDisplayCharPos();\n        this._addDisplay(rowPos, charPos);\n        return this;\n    }\n\n    /**\n     * 表示を一行分右に動かします\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    shiftRightDisplay() {\n        const charPos = this._sentenceContainer.cursorRow().computeDisplayCharPos();\n        const firstDisplay = this._firstDisplayRow();\n        if (!firstDisplay.prev()) {\n            return this;\n        }\n\n        firstDisplay.prev().display(true, charPos);\n        this._lastDisplayRow().display(false);\n        return this;\n    }\n\n    /**\n     * 表示を一行分左に動かします\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    shiftLeftDisplay() {\n        const charPos = this._sentenceContainer.cursorRow().computeDisplayCharPos();\n        const lastDisplay = this._lastDisplayRow();\n        if (!lastDisplay.next()) {\n            return this;\n        }\n\n        lastDisplay.next().display(true, charPos);\n        this._firstDisplayRow().display(false);\n        return this;\n    }\n\n    /**\n     * firstRow行目以降を表示します。\n     *     文字はfirstChar文字目以降が表示されます\n     * @param {number} firstRow 表示される最初の行のインデックス\n     * @param {number} firstChar 表示される最初の文字のインデックス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    _addDisplay(firstRow, firstChar) {\n        const dispWidth = this._sentenceContainer.width();\n        const cache = {};\n        let cnt = 0; // 総行数をカウントする\n        let sum = 0; // 表示行の幅合計\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (cnt < firstRow) {\n                    row.display(false);\n                    cnt++;\n                    continue;\n                }\n\n                // 行の幅は子の最大のフォントによって決まると考え、最大フォントごとの行幅をキャッシュする(レンダリング頻度の削減)\n                const maxFont = row.maxFont();\n                if (cache[maxFont]) {\n                    const rowWidth = cache[maxFont];\n                    sum += rowWidth + 2; // 2はボーダーの幅\n                } else {\n                    cache[maxFont] = row.width();\n                    const rowWidth = cache[maxFont];\n                    sum += rowWidth + 2; // 2はボーダーの幅\n                }\n                row.display((sum < dispWidth), firstChar);\n                cnt++;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * カーソル位置を基準に、最初に表示されるべき行のインデックスを返します\n     * @param {string} [opt_pos] 表示後のカーソル位置を指定する。\n     *     'center'なら、カーソル位置を中央にする。'right'なら、カーソル位置が最も右になるよう表示される。\n     *     省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n     *     (現在のカーソル位置が現在表示されている画面から一行後ろにあれば一行分表示位置が後ろにずれる、といった形)\n     * @return {number} 計算された最初に表示されるべき行のインデックス\n     */\n    _computeDisplayRowPos(opt_pos) {\n        const currentFirst = this._firstDisplayRowPos();\n        const cursorIndex = this._cursorRowPos();\n        const currentEnd = this._lastDisplayRowPos();\n\n        // カーソル位置を中央にする\n        // HACK:計算前のdisplayの数を基準にするので、フォントの大きさなどによってずれもありうる\n        if (opt_pos === 'center') {\n            const harfRange = (currentEnd - currentFirst) / 2;\n            const ret = cursorIndex - harfRange;\n            return ret >= 0 ? ret : 0;\n        }\n\n        if (opt_pos === 'right') {\n            return cursorIndex;\n        }\n\n        // カーソルが前にある\n        if (cursorIndex < currentFirst) {\n            return cursorIndex;\n        }\n\n        // カーソルが後ろにある\n        if (cursorIndex > currentEnd) {\n            return currentFirst + (cursorIndex - currentEnd);\n        }\n\n        // displayに囲まれた部分にdisplayでない行がある場合\n        // 途中行数変化\n        return currentFirst;\n    }\n\n    /**\n     * 現在表示されている行の最初の行のインデックスを返します\n     * @return {number} 現在表示されている行の最初の行のインデックス。表示行がなければ-1\n     */\n    _firstDisplayRowPos() {\n        let cnt = 0;\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (row.isDisplay()) {\n                    return cnt;\n                }\n                cnt++;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 現在表示されている行の最後の行のインデックスを返します\n     * @return {number} 現在表示されている行の最後の行のインデックス。表示行がなければ-1\n     */\n    _lastDisplayRowPos() {\n        for (let row = this._sentenceContainer.lastRow(),\n            index = this._sentenceContainer.countRow() -1;\n            row; row = row.prev(), index--) {\n                if (row.isDisplay()) {\n                    return index;\n                }\n            }\n        return -1;\n    }\n\n    /**\n     * カーソル行が文書全体で何行目かを返します\n     * @return {number} カーソル行の文書全体でのインデックス。文書内に段落がない、あるいはカーソル行がなければ-1\n     */\n    _cursorRowPos() {\n        const cursorRow = this._sentenceContainer.cursorRow();\n        let cnt = 0;\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (row.is(cursorRow)) {\n                    return cnt;\n                }\n                cnt++;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 表示されている行のうち最初の行のインスタンスを返します\n     * @return {Row} 最初の表示行のインスタンス。表示行がなければnull\n     */\n    _firstDisplayRow() {\n        for (let paragraph of this._sentenceContainer.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (row.isDisplay()) {\n                    return row;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 表示されている行のうち最後の行のインスタンスを返します\n     * @return {Row} 最後の表示行のインスタンス。表示行がなければnull\n     */\n    _lastDisplayRow() {\n        for (let row = this._sentenceContainer.lastRow(); row; row = row.prev()) {\n            if (row.isDisplay()) {\n                return row;\n            }\n        }\n        return null;\n    }\n}//}}}\n\n\n/**\n * 文章コンテナを表すクラス\n */\nexport class SentenceContainer extends AbstractHierarchy {  // jshint ignore:line\n\n    // constructor {{{\n    /**\n     * @param {object} [opt_data] 文書情報のオブジェクト\n     * <pre>\n     * {\n     * \t\"filename\": \"sampleFile\",\n     * \t\"fileId\": \"12\",\n     *\t\t\"saved\": \"2016-08-23 02:13:05\",\n     *\t\t\"userId\": \"7\",\n     *\t\t\"data\": {\n     *\t\t\t\"conf\": { // 文書全体に関する設定情報\n     *\t\t\t\t\"strLen\": \"36\",\n     *\t\t\t\t\"rowLen\": \"42\"\n     *\t\t\t},\n     *\t\t\t\"text\":[ // 各段落の情報が入った配列の配列\n     *\t\t\t\t\t\t[ // 段落の情報が入った配列\n     *\t\t\t\t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n     *\t\t\t\t\t\t\t[\t // 各文字のオブジェクトが配列で格納される\n     *\t\t\t\t\t\t\t\t{\t // 文字を表すオブジェクト\n     *\t\t\t\t\t\t\t\t\t\"char\":\"あ\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"],\n     *\t\t\t\t\t\t\t\t\t\"fontSize\":\"auto\"\n     *\t\t\t\t\t\t\t\t},\n     *\t\t\t\t\t\t\t\t{\n     *\t\t\t\t\t\t\t\t\t\"char\":\"い\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[]\n     *\t\t\t\t\t\t\t\t}\n     *\t\t\t\t\t\t\t]\n     *\t\t\t\t\t\t],\n     *\t\t\t\t\t\t[\n     *\t\t\t\t\t\t\t[],\n     *\t\t\t\t\t\t\t[\n     *\t\t\t\t\t\t\t\t{\n     *\t\t\t\t\t\t\t\t\t\"char\":\"い\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n     *\t\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n     *\t\t\t\t\t\t\t\t},\n     *\t\t\t\t\t\t\t\t{\n     *\t\t\t\t\t\t\t\t\t\"char\":\"う\",\n     *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n     *\t\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n     *\t\t\t\t\t\t\t\t}\n     *\t\t\t\t\t\t\t]\n     *\t\t\t\t\t\t]\n     *\t\t\t]\n     *\t\t}\n     * }\n     * </pre>\n     */\n    constructor(opt_data) {\n        super(document.getElementById('sentence_container'));\n        if (opt_data) {\n            this.init(opt_data);\n        }\n        this._titleElem = document.getElementById('file_title');\n        this._announceElem = document.getElementById('user_info');\n        this._changedElem = document.getElementById('changed');\n\n        this._cursor = new Cursor(this);\n        this._inputBuffer = new InputBuffer(this);\n        this._fileList = new FileList(this);\n        this._command = new CommandLine(this);\n        this._menu = new Menu(this);\n        this._doManager = new DoManager(this);\n        this._displayer = new Displayer(this);\n        this._searchMode = new SearchMode(this);\n        this._selectRange = new SelectRange(this);\n\n        this.addFileTitleEvent();\n        this._selectRange.addSelectEvent();\n\n        if (!opt_data) {\n            this.newFile();\n        }\n    }\n\n    /**\n     * 文書をコンテナに展開します\n     * @param {object} data 文書情報のオブジェクト\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    init(data) {\n        this.empty();\n        // 文書情報\n        this.filename(data.filename);\n        this.fileId(data.fileId);\n        this.saved(\n            data.saved ||\n                (new Date(Date.now()).toLocaleDateString() + ' ' +\n                    new Date(Date.now()).toLocaleTimeString()).replace(/\\//g,'-'));\n        this._strLenOnRow = data.data.conf.strLen || 40; // １行の文字数\n        this._rowLenOnPage = data.data.conf.rowLen || 40; // １ページの行数\n        this.menu().confStrLenElem().value = this._strLenOnRow;\n        this.menu().confRowLenElem().value = this._rowLenOnPage;\n        // DOMの構築\n        for (let paraData of data.data.text) {\n            this.append(new Paragraph(paraData));\n        }\n\n        this.cursor().init();\n        this.cordinate();\n        this._displayer.resetDisplay();\n        this.breakPage().printInfo();\n        this.addKeydownEventListener();\n        this.addWheelEventListener();\n        this._doManager.reset();\n        return this;\n    }\n    // }}}\n\n    // --参照取得 {{{\n\n    /**\n     * 指定された段落のインスタンス、あるいは引数省略で子の段落のインスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する段落のインデックス\n     * @return {Paragraph Paragraph[]} 指定された段落のインスタンス。あるいは引数省略で段落のインスタンスの配列(子がなければ空の配列)\n     */\n    paragraphs(opt_index) {\n        return this.children(opt_index);\n    }\n\n    /**\n     * 文章内の最初の行のインスタンスを返します\n     * @return {Row} 最初の行のインスタンス\n     */\n    firstRow() {\n        return this.firstChild().firstChild();\n    }\n\n    /**\n     * 文章内の最終行のインスタンスを返します\n     * @return {Row} 最終行のインスタンス\n     */\n    lastRow() {\n        return this.lastChild().lastChild();\n    }\n\n    /**\n     * num行目のRowを取得します。\n     *     numが負の数なら最初の行、numが行数以上の数値であれば最終行のインスタンスが取得されます\n     * @param {number} num 取得する行のインデックス\n     * @return {Row} 見つかった行のインスタンス\n     */\n    row(num) {\n        if (num <= 0) {\n            return this.firstRow();\n        }\n\n        let cnt = 0;\n        for (let row = this.firstRow(); row; row = row.next()) {\n            cnt++;\n            if (cnt === num) {\n                return row;\n            }\n        }\n        return this.lastRow();\n    }\n\n    /**\n     * numページ目の第一行目のRowを取得します。\n     *     numが負の数なら最初の行、numがページ数以上の数値であれば最終行のインスタンスが取得されます\n     * @param {number} num 何ページ目か\n     * @return {Row} 見つかった行のインスタンス\n     */\n    pageRow(num) {\n        if (num <= 0) {\n            return this.firstRow();\n        }\n\n        let cnt = 0;\n        for (let row = this.firstRow(); row; row = row.next()) {\n            if (row.isPageBreak()) {\n                cnt++;\n                if (cnt === num) {\n                    return row;\n                }\n            }\n        }\n        return this.lastRow();\n    }\n\n    /**\n     * 文書内で最初の文字(あるいはEOL)のインスタンスを返します\n     * @return {Char EOL} 見つかった文字のインスタンス\n     */\n    firstChar() {\n        return this.firstRow().firstChild();\n    }\n\n    /**\n     * 文書内で最終文字(EOLは除く)のインスタンスを返します\n     * @return {Char} 見つかった文字のインスタンス\n     */\n    lastChar() {\n        return this.lastEOL().prevChar();\n    }\n\n    /**\n     * 文書内で最終行のEOLを返します\n     * @return {EOL} 最後のEOL\n     */\n    lastEOL() {\n        return this.lastRow().lastChild();\n    }\n\n    /**\n     * カーソルのインスタンスを返します\n     * @return {Cursor} 文書内のカーソルのインスタンス\n     */\n    cursor() {\n        return this._cursor;\n    }\n\n    /**\n     * この文書内でカーソルのあたっている文字のインスタンスを返します\n     * @return {Char} カーソル文字のインスタンス\n     */\n    cursorChar() {\n        return this.cursor().getChar();\n    }\n\n    /**\n     * この文書内でカーソルのある行のインスタンスを返します\n     * @return {Row} カーソル行のインスタンス\n     */\n    cursorRow() {\n        return this.cursorChar().row();\n    }\n\n    /**\n     * この文書に入力する際に使用する入力バッファーのインスタンスを返します\n     * @return {InputBuffer} 入力バッファーのインスタンス\n     */\n    inputBuffer() {\n        return this._inputBuffer;\n    }\n\n    /**\n     * この文書コンテナを使用するファイルリストのインスタンスを返します\n     * @return {FileList} ファイルリストのインスタンス\n     */\n    fileList() {\n        return this._fileList;\n    }\n\n    /**\n     * コマンドラインのインスタンスを返します\n     * @return {CommandLine} コマンドラインのインスタンス\n     */\n    command() {\n        return this._command;\n    }\n\n    /**\n     * この文書を操作するMenuクラスのインスタンスを返します\n     * @return {Menu} メニューバーのインスタンス\n     */\n    menu() {\n        return this._menu;\n    }\n    // }}}\n\n    // --判定 {{{\n    /**\n     * この文書内に段落が存在するかどうかを返します\n     * @return {boolean} 段落が存在するならtrue、そうでなければfalse\n     */\n    hasParagraph() {\n        return this.hasChild();\n    }\n\n    // --参照操作\n\n    /**\n     * 子の最後にparagraphを追加します\n     * @param {Paragraph} paragraph 追加する段落のインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    pushParagraph(paragraph) {\n        return this.pushChild(paragraph);\n    }\n\n    /**\n     * 子の指定された位置にparagraphを挿入します\n     * @param {number} pos 挿入する位置のインデックス\n     * @param {Paragraph} paragraph 挿入するインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    insertParagraph(pos,paragraph) {\n        return this.insertChild(pos,paragraph);\n    }\n\n    /**\n     * 子からparagraphを削除します\n     * @param {Paragraph} paragraph 削除する段落のインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    deleteParagraph(paragraph) {\n        return this.deleteChild(paragraph);\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 文書の内容を表したオブジェクトのjson文字列を作成します\n     * @return {string} 文書内容を表すオブジェクトのjson文字列\n     */\n    data() {\n        const data = {};\n        data.conf = this.menu().configueData();\n        const paraArr = [];\n        for (let paragraph of this.paragraphs()) {\n            paraArr.push(paragraph.data());\n        }\n        data.text = paraArr;\n\n        return JSON.stringify(data);\n    }\n\n    /**\n     * この文書内に展開しているファイル名を変更する、あるいは引数省略で現在のファイル名を取得します\n     * @param {string} [opt_newFilename] 新たに設定するファイル名\n     * @return {SentenceContainer string} 自身のインスタンス(引数を渡した場合)、あるいは現在のファイル名(引数を省略した場合)\n     */\n    filename(opt_newFilename) {\n        if (opt_newFilename === undefined) {\n            return this._filename;\n        }\n\n        this._filename = opt_newFilename;\n        this._titleElem.value = opt_newFilename;\n        this._titleElem.dataset.filename = opt_newFilename;\n        return this;\n    }\n\n    /**\n     * 現在のファイルに新たなIDを与える、あるいは引数省略で現在のファイルIDを取得します\n     * @param {number} [opt_newId] 新たに設定するID\n     * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在のファイルID(引数を省略した場合)\n     */\n    fileId(opt_newId) {\n        if (opt_newId === undefined) {\n            return this._fileId;\n        }\n\n        const newId = opt_newId;\n        this._fileId = newId;\n        this._titleElem.dataset.fileId = newId;\n        return this;\n    }\n\n    /**\n     * 最終更新日時を設定、あるいは引数省略で最終更新日時を取得します\n     * @param {string} [opt_newSaved] 新たに設定する最終更新日時の文字列\n     * @return {SentenceContainer string} 自身のインスタンス(引数を渡した場合)、あるいは現在の最終更新日時の文字列(引数を省略した場合)\n     */\n    saved(opt_newSaved) {\n        if (opt_newSaved === undefined) {\n            return this._saved;\n        }\n\n        const newSaved = opt_newSaved;\n        this._saved = newSaved;\n        document.getElementById('saved').textContent = newSaved;\n        return this;\n    }\n\n    /**\n     * 最後の保存から変更があったのかどうかを示すマーク([+]記号)を設定、あるいは引数省略で現在設定されているのかどうかを取得します\n     * @param {boolean} [opt_bl] 設定する場合はtrue、外す場合はfalse\n     * @return {SentenceContainer boolean} 自身のインスタンス(引数を渡した場合)、あるいは現在の設定状態の真偽値(引数を省略した場合)\n     */\n    isChanged(opt_bl) {\n        if (opt_bl === undefined) {\n            return this._changedElem.classList.contains('active');\n        }\n\n        if (opt_bl === true) {\n            this._changedElem.classList.add('active');\n            return this;\n        }\n        if (opt_bl === false) {\n            this._changedElem.classList.remove('active');\n            return this;\n        }\n    }\n\n    /**\n     * 一行の文字数を変更する、あるいは引数省略で現在の設定上の一行の文字数を取得します\n     * @param {number} [opt_newStrLen] 新たに設定する行内文字数\n     * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在の設定上の行内文字数(引数を省略した場合)\n     */\n    strLenOnRow(opt_newStrLen) {\n        if (opt_newStrLen === undefined) {\n            return this._strLenOnRow;\n        }\n\n        const newStrLen = opt_newStrLen;\n        this._strLenOnRow = newStrLen;\n        this.cordinate().checkKinsoku().changeDisplay().breakPage().printInfo();\n        this.cursor().createCursorLine();\n        return this;\n    }\n\n    // 設定上のページ内行数\n    /**\n     * 一ページの行数を変更する、あるいは引数省略で現在の一ページの行数を取得します\n     * @param {number} [opt_newRowLen] 新たに設定するページ内行数\n     * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在のページ内行数(引数を省略した場合)\n     */\n    rowLenOnPage(opt_newRowLen) {\n        if (opt_newRowLen === undefined) {\n            return this._rowLenOnPage;\n        }\n\n        const newRowLen = opt_newRowLen;\n        this._rowLenOnPage = newRowLen;\n        this.breakPage().printInfo();\n        return this;\n    }\n\n    /**\n     * 文書内文字数を数えます\n     * @return {number} 文書内の総文字数\n     */\n    countChar() {\n        let cnt = 0;\n        for (let paragraph of this.paragraphs()) {\n            cnt += paragraph.countChar();\n        }\n        return cnt;\n    }\n\n    // 全行数\n    /**\n     * 文書内行数を数えます\n     * @return {number} 文書内の総行数\n     */\n    countRow() {\n        let cnt = 0;\n        for (let paragraph of this.paragraphs()) {\n            cnt += paragraph.childLength();\n        }\n        return cnt;\n    }\n\n    /**\n     * 文書内のページ数を数えます\n     * @return {number} 文書内の総ページ数\n     */\n    countPage() {\n        let cnt = 0;\n        for (let row = this.firstRow(); row; row = row.next()) {\n            if (row.isPageBreak()) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * この文書コンテナの横幅を返えます。\n     *     文書コンテナは９０度回転しているため、css上は高さと同様です\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の幅\n     */\n    width(opt_useCache) {\n        return super.height(opt_useCache);\n    }\n\n    /**\n     * この文書コンテナの高さを返します。\n     *     文書コンテナは９０度回転しているため、css上は横幅と同様です\n     * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。\n     *     省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n     * @return {number} 自身の高さ\n     */\n    height(opt_useCache) {\n        return super.width(opt_useCache);\n    }\n\n    /**\n     * 文書内すべての文字から、指定されたクラスを除去します\n     * @param {string} className 除去するクラス名\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    removeClassFromAllChar(className) {\n        for (let paragraph of this.paragraphs()) {\n            paragraph.removeClassFromAllChar(className);\n        }\n        return this;\n    } //}}}\n\n    // --DOM操作関係 {{{\n    /**\n     * 子を空にし、入力モード、語句検索モードは終了します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    empty() {\n        this.emptyElem();\n        this.emptyChild();\n        this.removeKeydownEventListener();\n        this.removeWheelEventListener();\n        if (this.inputBuffer().isDisplay()) {\n            this.inputBuffer().empty().hide();\n        }\n        this._searchMode.stop();\n        return this;\n    }\n\n    /**\n     * この文章コンテナの末尾にparagraphを追加します\n     * @param {Paragraph} paragraph 追加する段落のインスタンス\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    append(paragraph) {\n        this.elem().appendChild(paragraph.elem());\n        paragraph.container(this);\n        if (!this.hasParagraph()) {\n            this.pushParagraph(paragraph);\n            return this;\n        }\n\n        // paragraph\n        this.lastChild().next(paragraph);\n        paragraph.prev(this.lastChild());\n        // row\n        const lastRow = this.lastChild().lastChild();\n        lastRow.next(paragraph.firstChild());\n        paragraph.firstChild().prev(lastRow);\n        // char\n        const lastChar = lastRow.lastChild();\n        lastChar.next(paragraph.firstChild().firstChild());\n        paragraph.firstChild().firstChild().prev(lastChar);\n\n        this.pushParagraph(paragraph);\n        return this;\n    }//}}}\n\n    // printInfo {{{\n    /**\n     * 文書情報を表示します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    printInfo() {\n        document.getElementById('str_pos').textContent = this.cursor().currentCharPos();\n        document.getElementById('str_len').textContent = this.cursor().strLenOfRow();\n        document.getElementById('row_pos').textContent = this.cursor().currentRowPos();\n        document.getElementById('row_len').textContent = this.cursor().rowLenOnPage();\n        document.getElementById('page_pos').textContent = this.cursor().currentPage();\n        document.getElementById('page_len').textContent = this.countPage();\n        return this;\n    }//}}}\n\n    // --文章整理 {{{\n    /**\n     * 各行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n     *     標準以外のフォントサイズの文字があればフォントサイズに合わせて文字数は調整されます。\n     *     また、空段落以外に空行があれば削除します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    cordinate() {\n        for (let paragraph of this.paragraphs()) {\n            paragraph.cordinate();\n        }\n        return this;\n    }\n\n    /**\n     * 禁則処理を行います。\n     *     各行の文字数への変化が伴うため、cordinate()の後に実行してください\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    checkKinsoku() {\n        for (let paragraph of this.paragraphs()) {\n            paragraph.checkKinsoku();\n        }\n        return this;\n    }//}}}\n\n    // 改ページ {{{\n    /**\n     * ページの最初の行と最終行に目印となるクラスを与えます\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    breakPage() {\n        const pageNum = this.rowLenOnPage();\n        // page-break\n        let cntBreak = 0;\n        for (let paragraph of this.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if (cntBreak === 0 || cntBreak % pageNum === 0) { // １行目とpageNumの倍数行目\n                    row.addClass('page-break');\n                } else {\n                    row.removeClass('page-break');\n                }\n                cntBreak++;\n            }\n        }\n        // page-last-row\n        let cntLast = 0;\n        const lastRow = this.countRow() -1;\n        for (let paragraph of this.paragraphs()) {\n            for (let row of paragraph.rows()) {\n                if ((cntLast + 1) % pageNum === 0 || cntLast === lastRow) { // (pageNumの倍数-1)行目と最終行\n                    row.addClass('page-last-row');\n                }\n                else {\n                    row.removeClass('page-last-row');\n                }\n                cntLast++;\n            }\n        }\n        return this;\n    }//}}}\n\n    // announce {{{\n    /**\n     * ユーザーへの情報を表示します\n     * @param {string} str 表示する情報\n     * @param {string} [opt_color='black'] 黒文字以外の文字色で表示する場合に色名を指定する\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    announce(str, opt_color) {\n        this._announceElem.textContent = str;\n        if (opt_color) {\n            this._announceElem.style.color = opt_color;\n        } else {\n            this._announceElem.style.color = '';\n        }\n        return this;\n    }//}}}\n\n    // --ファイル操作 {{{\n    /**\n     * 指定されたファイルを開きます(非同期通信)\n     * @param {number} fileId 開くファイルのID\n     * @return {SentenceContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/ReadJsonFile.html\n     */\n    readFile(fileId) {\n        const file = this.fileList().findFile(fileId)[0];\n        file.open();\n        return this;\n    }\n\n    /**\n     * 現在開いているファイルを上書き保存します。\n     *     newFile()されて初めての保存なら名前をつけて保存します。(ともに非同期通信)\n     * @return {SentenceContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileDataServlet.html\n     */\n    saveFile() {\n        this.announce('保存中');\n        Util.post('/tategaki-editor/FileData',{\n            file_id: this.fileId(),\n            filename: this.filename(),\n            json: this.data(),\n            saved: Date.now()\n        }, function (json) {\n            if (json.result === 'true') {\n                this.saved(json.saved).announce('保存しました');\n                this.fileId(json.fileID);\n                this.fileList().read();\n                this.isChanged(false);\n            } else {\n                this.announce('保存エラー');\n            }\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * 新しいファイルを開きます\n     * @param {string='newfile'} filename 新しいファイル名\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    newFile(filename) {\n        if (filename === undefined) {\n            filename = 'newfile';\n        }\n        this.init({\n            fileId: -1,\n            filename: filename,\n            data: {\n                conf:{},\n                text:[[[],[]]]\n            }\n        }); // 空段落のデータ\n        return this;\n    }//}}}\n\n    // --Display関係 {{{\n    changeDisplay(opt_pos) {\n        this._displayer.changeDisplay(opt_pos);\n        return this;\n    } // }}}\n\n    // undo redo {{{\n    /**\n     * DoMemoryをアンドゥスタックに積みます\n     * @param {DoMemory} doMemory アンドゥスタックに積むDoMemory\n     */\n    addDo(doMemory) {\n        this._doManager.add(doMemory);\n        return this;\n    }\n\n    /**\n     * アンドゥします\n     */\n    undo() {\n        if (this._doManager.hasUndo()) {\n            this._doManager.undo();\n        } else {\n            this.announce('すでに一番古い変更です');\n        }\n        return this;\n    }\n\n    /**\n     * リドゥします\n     */\n    redo() {\n        if (this._doManager.hasRedo()) {\n            this._doManager.redo();\n        } else {\n            this.announce('すでに一番新しい変更です');\n        }\n        return this;\n    }//}}}\n\n    // --イベント {{{\n    // keydown\n    /**\n     * この文書コンテナにkeydownイベントリスナーを付加します\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        this.inputBuffer().removeKeydownEventListener()\n            .convertContainer().removeKeydownEventListener();\n        super.addKeydownEventListener();\n        return this;\n    }\n\n    /**\n     * keydownイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    runKeydown(e, keycode) {\n        this.announce('');\n        if (e.ctrlKey) {\n            return this.runControlKeyDown(e,keycode);\n        }\n\n        switch (keycode) {\n            case 8:\n                // backspace\n                this.cursor().backSpace(true);\n                break;\n            case 13:\n                // Enter\n                this.cursor().lineBreak(true);\n                break;\n            case 32:\n                // space\n                this.cursor().insert('　', true);\n                break;\n            case 37:\n                // Left\n                this.cursor().moveLeft(e.shiftKey);\n                break;\n            case 38:\n                // Up\n                this.cursor().movePrev(e.shiftKey);\n                break;\n            case 39:\n                // Right\n                this.cursor().moveRight(e.shiftKey);\n                break;\n            case 40:\n                // Down\n                this.cursor().moveNext(e.shiftKey);\n                break;\n            case 58: // firefox developer edition\n            case 186: // chrome\n                // :\n                this.command().start();\n                break;\n            case 191:\n                // /\n                this._searchMode.start();\n                break;\n            default:\n                this.inputBuffer().tryTransfer(keycode, e.shiftKey);\n                break;\n        }\n        return this;\n    }\n\n    /**\n     * @private\n     * コントロールキーを押されていた場合のkeydownイベントの実行内容です\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    runControlKeyDown(e,keycode) {\n        switch (keycode) {\n            case 67:\n                // c\n                this._selectRange.copySelectText();\n                break;\n            case 18:\n            case 70:\n                // f\n                this.fileList().showModal();\n                break;\n            case 72:\n                // h\n                this.cursor().moveLeft(e.shiftKey);\n                break;\n            case 73:\n                // i\n                this.fileList().openNextFile();\n                break;\n            case 74:\n                // j\n                this.cursor().moveNext(e.shiftKey);\n                break;\n            case 75:\n                // k\n                this.cursor().movePrev(e.shiftKey);\n                break;\n            case 76:\n                // l\n                this.cursor().moveRight(e.shiftKey);\n                break;\n            case 79:\n                // o\n                this.fileList().openPrevFile();\n                break;\n            case 82:\n                //r\n                this.redo();\n                break;\n            case 83:\n                // s\n                this.saveFile();\n                break;\n            case 85:\n                //u\n                this.undo();\n                break;\n            case 86:\n                // v\n                this._selectRange.pasteText();\n                break;\n            case 188:\n                // ,\n                this.cursor().nextSearch();\n                break;\n            case 190:\n                // .\n                this.cursor().prevSearch();\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n\n    // wheel\n    /**\n     * ホイールイベントの実行内容です(表示を４行分移動する)\n     * @param {Event} e イベントオブジェクト\n     * @param {boolean} isUp 上方向にホイールが動かされたならtrue、そうでなければfalse\n     * @return {SentenceContainer} 自身のインスタンス\n     */\n    runWheel(e, isUp) {\n        const mvRowNum = 4; // 一度に動かす行数\n        if (isUp) {\n            for (let i = 0; i < mvRowNum; i++) {\n                this._displayer.shiftRightDisplay();\n            }\n        } else {\n            for (let i = 0; i < mvRowNum; i++) {\n                this._displayer.shiftLeftDisplay();\n            }\n        }\n        return this;\n    }\n\n    // ファイル名input\n    /**\n     * ファイル名inputフォームにイベントを付加します(主に、フォーカスがあたった際と外れた際のイベント)。\n     */\n    addFileTitleEvent() {\n        // 与えっぱなし。実行内容もここで定義\n        this._titleElem.addEventListener('focusin',function (e) {\n            if (this.inputBuffer().isDisplay) {\n                this.inputBuffer().empty().hide();\n            }\n            this.removeKeydownEventListener();\n        }.bind(this),false);\n\n        this._titleElem.addEventListener('focusout',function (e) {\n            if (this._titleElem.value === '') {\n                this.announce('ファイル名が入力されていません','red');\n                this._titleElem.value = this._titleElem.dataset.filename;\n            }\n            this.addKeydownEventListener();\n        }.bind(this),false);\n    }\n\n    //}}}\n}",
    "static": true,
    "longname": "js/container.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "SearchMode",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~SearchMode",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{SearchMode}",
    "description": "語句検索モードを担当するクラス",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sentenceContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_elem",
    "memberof": "js/container.js~SearchMode",
    "static": false,
    "longname": "js/container.js~SearchMode#_elem",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/container.js~SearchMode",
    "static": false,
    "longname": "js/container.js~SearchMode#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_search",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_search",
    "access": null,
    "description": "渡された文字列を本文内から探し、見つかった文字列にsearch-wordクラスを付与します。\n    さらに、見つかった文字列の先頭文字にsearch-labelクラスを付与します",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "検索文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "start",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#start",
    "access": null,
    "description": "文書内語句検索を始めます",
    "lineNumber": 32,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_keyupArg",
    "memberof": "js/container.js~SearchMode",
    "static": false,
    "longname": "js/container.js~SearchMode#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "stop",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#stop",
    "access": null,
    "description": "文書内語句検索を完全に終了します",
    "lineNumber": 50,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "_onKeyup",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_onKeyup",
    "access": null,
    "description": "語句検索inputフォームのkeyupイベントです",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_onFocusout",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_onFocusout",
    "access": null,
    "description": "語句検索inputフォームからフォーカスが外れた際のイベント実行内容です。\n    文書コンテナ本体にkeydownイベントを戻します",
    "lineNumber": 93,
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_onFocusin",
    "memberof": "js/container.js~SearchMode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SearchMode#_onFocusin",
    "access": null,
    "description": "語句検索inputフォームにフォーカスがあたった際のイベント実行内容です。\n    文書コンテナ本体のkeydownイベントを外します",
    "lineNumber": 101,
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "SelectRange",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~SelectRange",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{SelectRange}",
    "description": "文書内の文字選択を担当するクラス",
    "lineNumber": 110,
    "interface": false
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#constructor",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sentenceContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/container.js~SelectRange",
    "static": false,
    "longname": "js/container.js~SelectRange#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/container.js~SelectRange",
    "static": false,
    "longname": "js/container.js~SelectRange#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "selectChars",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#selectChars",
    "access": null,
    "description": "選択範囲にある文字インスタンスを配列で返します",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "選択範囲を解除するならtrueを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char[]"
      ],
      "spread": false,
      "description": "選択範囲内にある文字インスタンスの配列"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "copySelectText",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#copySelectText",
    "access": null,
    "description": "選択範囲内にある文字列をローカルストレージに保存します",
    "lineNumber": 148,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "pasteText",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#pasteText",
    "access": null,
    "description": "ローカルストレージに保存した文字列をカーソル位置から挿入します",
    "lineNumber": 158,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_selectText",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#_selectText",
    "access": null,
    "description": "選択範囲内にある文字列を返します",
    "lineNumber": 167,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "選択範囲内の文字列"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "addSelectEvent",
    "memberof": "js/container.js~SelectRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SelectRange#addSelectEvent",
    "access": null,
    "description": "マウスで選択範囲を変更した際のイベントを与えます。選択範囲最後の文字の次の文字にカーソルを当てます",
    "lineNumber": 180,
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "Displayer",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~Displayer",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{Displayer}",
    "description": "文字や行の表示および非表示を担当するクラス",
    "lineNumber": 198,
    "interface": false
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "sentenceContainer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/container.js~Displayer",
    "static": false,
    "longname": "js/container.js~Displayer#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "resetDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#resetDisplay",
    "access": null,
    "description": "文書を１行目の１文字目から表示します",
    "lineNumber": 208,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "changeDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#changeDisplay",
    "access": null,
    "description": "カーソル位置を基準として文書を表示し直します",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_pos",
        "description": "表示後のカーソル位置を指定する。'center'と'right'に対応。\n    省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "shiftRightDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#shiftRightDisplay",
    "access": null,
    "description": "表示を一行分右に動かします",
    "lineNumber": 232,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "shiftLeftDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#shiftLeftDisplay",
    "access": null,
    "description": "表示を一行分左に動かします",
    "lineNumber": 248,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_addDisplay",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_addDisplay",
    "access": null,
    "description": "firstRow行目以降を表示します。\n    文字はfirstChar文字目以降が表示されます",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "表示される最初の行のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstChar",
        "description": "表示される最初の文字のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "_computeDisplayRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_computeDisplayRowPos",
    "access": null,
    "description": "カーソル位置を基準に、最初に表示されるべき行のインデックスを返します",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_pos",
        "description": "表示後のカーソル位置を指定する。\n    'center'なら、カーソル位置を中央にする。'right'なら、カーソル位置が最も右になるよう表示される。\n    省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n    (現在のカーソル位置が現在表示されている画面から一行後ろにあれば一行分表示位置が後ろにずれる、といった形)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された最初に表示されるべき行のインデックス"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "_firstDisplayRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_firstDisplayRowPos",
    "access": null,
    "description": "現在表示されている行の最初の行のインデックスを返します",
    "lineNumber": 341,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在表示されている行の最初の行のインデックス。表示行がなければ-1"
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "_lastDisplayRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_lastDisplayRowPos",
    "access": null,
    "description": "現在表示されている行の最後の行のインデックスを返します",
    "lineNumber": 358,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在表示されている行の最後の行のインデックス。表示行がなければ-1"
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "_cursorRowPos",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_cursorRowPos",
    "access": null,
    "description": "カーソル行が文書全体で何行目かを返します",
    "lineNumber": 373,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル行の文書全体でのインデックス。文書内に段落がない、あるいはカーソル行がなければ-1"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "_firstDisplayRow",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_firstDisplayRow",
    "access": null,
    "description": "表示されている行のうち最初の行のインスタンスを返します",
    "lineNumber": 391,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最初の表示行のインスタンス。表示行がなければnull"
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "_lastDisplayRow",
    "memberof": "js/container.js~Displayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~Displayer#_lastDisplayRow",
    "access": null,
    "description": "表示されている行のうち最後の行のインスタンスを返します",
    "lineNumber": 406,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最後の表示行のインスタンス。表示行がなければnull"
    }
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "SentenceContainer",
    "memberof": "js/container.js",
    "static": true,
    "longname": "js/container.js~SentenceContainer",
    "access": null,
    "export": true,
    "importPath": "./js/container.js",
    "importStyle": "{SentenceContainer}",
    "description": "文章コンテナを表すクラス",
    "lineNumber": 420,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_data",
        "description": "文書情報のオブジェクト\n<pre>\n{\n\t\"filename\": \"sampleFile\",\n\t\"fileId\": \"12\",\n\t\"saved\": \"2016-08-23 02:13:05\",\n\t\"userId\": \"7\",\n\t\"data\": {\n\t\t\"conf\": { // 文書全体に関する設定情報\n\t\t\t\"strLen\": \"36\",\n\t\t\t\"rowLen\": \"42\"\n\t\t},\n\t\t\"text\":[ // 各段落の情報が入った配列の配列\n\t\t\t\t\t[ // 段落の情報が入った配列\n\t\t\t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t\t\t\t\t\t[\t // 各文字のオブジェクトが配列で格納される\n\t\t\t\t\t\t\t{\t // 文字を表すオブジェクト\n\t\t\t\t\t\t\t\t\"char\":\"あ\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"auto\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t\t\t\t\t\t\t\t\"decolation\":[]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t[],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"う\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t]\n\t}\n}\n</pre>"
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "_titleElem",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_titleElem",
    "access": null,
    "description": null,
    "lineNumber": 476,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "_announceElem",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_announceElem",
    "access": null,
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "_changedElem",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_changedElem",
    "access": null,
    "description": null,
    "lineNumber": 478,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "_inputBuffer",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_inputBuffer",
    "access": null,
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "_fileList",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_fileList",
    "access": null,
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_command",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_command",
    "access": null,
    "description": null,
    "lineNumber": 483,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "_menu",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_menu",
    "access": null,
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "_doManager",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_doManager",
    "access": null,
    "description": null,
    "lineNumber": 485,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "_displayer",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_displayer",
    "access": null,
    "description": null,
    "lineNumber": 486,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_searchMode",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_searchMode",
    "access": null,
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "_selectRange",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_selectRange",
    "access": null,
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "init",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#init",
    "access": null,
    "description": "文書をコンテナに展開します",
    "lineNumber": 503,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文書情報のオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "_strLenOnRow",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_strLenOnRow",
    "access": null,
    "description": null,
    "lineNumber": 512,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "_rowLenOnPage",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_rowLenOnPage",
    "access": null,
    "description": null,
    "lineNumber": 513,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "paragraphs",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#paragraphs",
    "access": null,
    "description": "指定された段落のインスタンス、あるいは引数省略で子の段落のインスタンスの配列を取得します",
    "lineNumber": 539,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する段落のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph Paragraph[]"
      ],
      "spread": false,
      "description": "指定された段落のインスタンス。あるいは引数省略で段落のインスタンスの配列(子がなければ空の配列)"
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "firstRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#firstRow",
    "access": null,
    "description": "文章内の最初の行のインスタンスを返します",
    "lineNumber": 547,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最初の行のインスタンス"
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "lastRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#lastRow",
    "access": null,
    "description": "文章内の最終行のインスタンスを返します",
    "lineNumber": 555,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最終行のインスタンス"
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "row",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#row",
    "access": null,
    "description": "num行目のRowを取得します。\n    numが負の数なら最初の行、numが行数以上の数値であれば最終行のインスタンスが取得されます",
    "lineNumber": 565,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "取得する行のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "見つかった行のインスタンス"
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "pageRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#pageRow",
    "access": null,
    "description": "numページ目の第一行目のRowを取得します。\n    numが負の数なら最初の行、numがページ数以上の数値であれば最終行のインスタンスが取得されます",
    "lineNumber": 586,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "何ページ目か"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "見つかった行のインスタンス"
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "firstChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#firstChar",
    "access": null,
    "description": "文書内で最初の文字(あるいはEOL)のインスタンスを返します",
    "lineNumber": 607,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char EOL"
      ],
      "spread": false,
      "description": "見つかった文字のインスタンス"
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "lastChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#lastChar",
    "access": null,
    "description": "文書内で最終文字(EOLは除く)のインスタンスを返します",
    "lineNumber": 615,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "見つかった文字のインスタンス"
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "lastEOL",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#lastEOL",
    "access": null,
    "description": "文書内で最終行のEOLを返します",
    "lineNumber": 623,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "最後のEOL"
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "cursor",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cursor",
    "access": null,
    "description": "カーソルのインスタンスを返します",
    "lineNumber": 631,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "文書内のカーソルのインスタンス"
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "cursorChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cursorChar",
    "access": null,
    "description": "この文書内でカーソルのあたっている文字のインスタンスを返します",
    "lineNumber": 639,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "cursorRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cursorRow",
    "access": null,
    "description": "この文書内でカーソルのある行のインスタンスを返します",
    "lineNumber": 647,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "カーソル行のインスタンス"
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "inputBuffer",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#inputBuffer",
    "access": null,
    "description": "この文書に入力する際に使用する入力バッファーのインスタンスを返します",
    "lineNumber": 655,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "入力バッファーのインスタンス"
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#fileList",
    "access": null,
    "description": "この文書コンテナを使用するファイルリストのインスタンスを返します",
    "lineNumber": 663,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "ファイルリストのインスタンス"
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "command",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#command",
    "access": null,
    "description": "コマンドラインのインスタンスを返します",
    "lineNumber": 671,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "コマンドラインのインスタンス"
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "menu",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#menu",
    "access": null,
    "description": "この文書を操作するMenuクラスのインスタンスを返します",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "メニューバーのインスタンス"
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "hasParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#hasParagraph",
    "access": null,
    "description": "この文書内に段落が存在するかどうかを返します",
    "lineNumber": 689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "段落が存在するならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "pushParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#pushParagraph",
    "access": null,
    "description": "子の最後にparagraphを追加します",
    "lineNumber": 700,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "追加する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "insertParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#insertParagraph",
    "access": null,
    "description": "子の指定された位置にparagraphを挿入します",
    "lineNumber": 710,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "挿入する位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "deleteParagraph",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#deleteParagraph",
    "access": null,
    "description": "子からparagraphを削除します",
    "lineNumber": 719,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "削除する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "data",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#data",
    "access": null,
    "description": "文書の内容を表したオブジェクトのjson文字列を作成します",
    "lineNumber": 728,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "文書内容を表すオブジェクトのjson文字列"
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "filename",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#filename",
    "access": null,
    "description": "この文書内に展開しているファイル名を変更する、あるいは引数省略で現在のファイル名を取得します",
    "lineNumber": 745,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newFilename",
        "description": "新たに設定するファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のファイル名(引数を省略した場合)"
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "_filename",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_filename",
    "access": null,
    "description": null,
    "lineNumber": 750,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "fileId",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#fileId",
    "access": null,
    "description": "現在のファイルに新たなIDを与える、あるいは引数省略で現在のファイルIDを取得します",
    "lineNumber": 761,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newId",
        "description": "新たに設定するID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のファイルID(引数を省略した場合)"
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "_fileId",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_fileId",
    "access": null,
    "description": null,
    "lineNumber": 767,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "saved",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#saved",
    "access": null,
    "description": "最終更新日時を設定、あるいは引数省略で最終更新日時を取得します",
    "lineNumber": 777,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newSaved",
        "description": "新たに設定する最終更新日時の文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の最終更新日時の文字列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "_saved",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_saved",
    "access": null,
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "isChanged",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#isChanged",
    "access": null,
    "description": "最後の保存から変更があったのかどうかを示すマーク([+]記号)を設定、あるいは引数省略で現在設定されているのかどうかを取得します",
    "lineNumber": 793,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "設定する場合はtrue、外す場合はfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の設定状態の真偽値(引数を省略した場合)"
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "strLenOnRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#strLenOnRow",
    "access": null,
    "description": "一行の文字数を変更する、あるいは引数省略で現在の設定上の一行の文字数を取得します",
    "lineNumber": 813,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newStrLen",
        "description": "新たに設定する行内文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の設定上の行内文字数(引数を省略した場合)"
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "_strLenOnRow",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_strLenOnRow",
    "access": null,
    "description": null,
    "lineNumber": 819,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "rowLenOnPage",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#rowLenOnPage",
    "access": null,
    "description": "一ページの行数を変更する、あるいは引数省略で現在の一ページの行数を取得します",
    "lineNumber": 831,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newRowLen",
        "description": "新たに設定するページ内行数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のページ内行数(引数を省略した場合)"
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "_rowLenOnPage",
    "memberof": "js/container.js~SentenceContainer",
    "static": false,
    "longname": "js/container.js~SentenceContainer#_rowLenOnPage",
    "access": null,
    "description": null,
    "lineNumber": 837,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "countChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#countChar",
    "access": null,
    "description": "文書内文字数を数えます",
    "lineNumber": 846,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総文字数"
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "countRow",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#countRow",
    "access": null,
    "description": "文書内行数を数えます",
    "lineNumber": 859,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総行数"
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "countPage",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#countPage",
    "access": null,
    "description": "文書内のページ数を数えます",
    "lineNumber": 871,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総ページ数"
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "width",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#width",
    "access": null,
    "description": "この文書コンテナの横幅を返えます。\n    文書コンテナは９０度回転しているため、css上は高さと同様です",
    "lineNumber": 890,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "height",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#height",
    "access": null,
    "description": "この文書コンテナの高さを返します。\n    文書コンテナは９０度回転しているため、css上は横幅と同様です",
    "lineNumber": 901,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。\n    省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "removeClassFromAllChar",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#removeClassFromAllChar",
    "access": null,
    "description": "文書内すべての文字から、指定されたクラスを除去します",
    "lineNumber": 910,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "empty",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#empty",
    "access": null,
    "description": "子を空にし、入力モード、語句検索モードは終了します",
    "lineNumber": 922,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "append",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#append",
    "access": null,
    "description": "この文章コンテナの末尾にparagraphを追加します",
    "lineNumber": 939,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "追加する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "printInfo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#printInfo",
    "access": null,
    "description": "文書情報を表示します",
    "lineNumber": 968,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "cordinate",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#cordinate",
    "access": null,
    "description": "各行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節します。\n    標準以外のフォントサイズの文字があればフォントサイズに合わせて文字数は調整されます。\n    また、空段落以外に空行があれば削除します",
    "lineNumber": 985,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "checkKinsoku",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#checkKinsoku",
    "access": null,
    "description": "禁則処理を行います。\n    各行の文字数への変化が伴うため、cordinate()の後に実行してください",
    "lineNumber": 997,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "breakPage",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#breakPage",
    "access": null,
    "description": "ページの最初の行と最終行に目印となるクラスを与えます",
    "lineNumber": 1009,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "announce",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#announce",
    "access": null,
    "description": "ユーザーへの情報を表示します",
    "lineNumber": 1047,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示する情報"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'black'",
        "defaultRaw": "'black'",
        "name": "opt_color",
        "description": "黒文字以外の文字色で表示する場合に色名を指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "readFile",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#readFile",
    "access": null,
    "description": "指定されたファイルを開きます(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/ReadJsonFile.html"
    ],
    "lineNumber": 1064,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fileId",
        "description": "開くファイルのID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "saveFile",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#saveFile",
    "access": null,
    "description": "現在開いているファイルを上書き保存します。\n    newFile()されて初めての保存なら名前をつけて保存します。(ともに非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileDataServlet.html"
    ],
    "lineNumber": 1076,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "newFile",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#newFile",
    "access": null,
    "description": "新しいファイルを開きます",
    "lineNumber": 1101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string='newfile'"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "新しいファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "changeDisplay",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#changeDisplay",
    "access": null,
    "description": null,
    "lineNumber": 1117,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "opt_pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "addDo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#addDo",
    "access": null,
    "description": "DoMemoryをアンドゥスタックに積みます",
    "lineNumber": 1127,
    "params": [
      {
        "nullable": null,
        "types": [
          "DoMemory"
        ],
        "spread": false,
        "optional": false,
        "name": "doMemory",
        "description": "アンドゥスタックに積むDoMemory"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "undo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#undo",
    "access": null,
    "description": "アンドゥします",
    "lineNumber": 1135,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "redo",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#redo",
    "access": null,
    "description": "リドゥします",
    "lineNumber": 1147,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#addKeydownEventListener",
    "access": null,
    "description": "この文書コンテナにkeydownイベントリスナーを付加します",
    "lineNumber": 1162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容です",
    "lineNumber": 1175,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "runControlKeyDown",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#runControlKeyDown",
    "access": "private",
    "description": "",
    "lineNumber": 1231,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "keycode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "runWheel",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#runWheel",
    "access": null,
    "description": "ホイールイベントの実行内容です(表示を４行分移動する)",
    "lineNumber": 1303,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUp",
        "description": "上方向にホイールが動かされたならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "addFileTitleEvent",
    "memberof": "js/container.js~SentenceContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/container.js~SentenceContainer#addFileTitleEvent",
    "access": null,
    "description": "ファイル名inputフォームにイベントを付加します(主に、フォーカスがあたった際と外れた際のイベント)。",
    "lineNumber": 1321,
    "params": []
  },
  {
    "__docId__": 302,
    "kind": "file",
    "name": "js/filelist.js",
    "content": "'use strict';\n/* global AbstractHierarchy, ElemCreator, Util */\n\n/**\n * ユーザーのファイル情報のひとつを扱うクラス\n */\nexport class File extends AbstractHierarchy {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {number} id ファイルのID\n     * @param {string} filename ファイル名\n     */\n    constructor(id, filename) {\n        super(ElemCreator.createFileElement(id, filename));\n        this._link = this.elem().getElementsByTagName('a')[0];\n        this._id = id;\n        this._name = filename;\n        this._nextFile = null;\n        this._prevFile = null;\n        this.addClickEventListener();\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 自身の属するファイルリストの参照を探して取得します\n     * @return {FileList} 自身の属するファイルリストのインスタンス。見つからなければnull\n     */\n    fileList() {\n        for (let parentDir = this.parent(); parentDir ;parentDir = parentDir.parent() ) {\n            if (parentDir.isRoot()) {\n                return parentDir;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 内部のaタグのDOM要素を取得します\n     * @return {Element} 自身の持つaタグのDOM要素\n     */\n    link() {\n        return this._link;\n    }\n\n    /**\n     * 自身の次に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n     *     通常のnext()はディレクトリも含め同階層のみをつなぎますが、nextFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます\n     * @param {File} [opt_file] 新たに設定するファイルのインスタンス\n     * @return {File} 自身のインスタンス(引数を渡した場合)、あるいは自身の次のファイルのインスタンス(引数を省略した場合)\n     */\n    nextFile(opt_file) {\n        if (opt_file === undefined) {\n            return this._nextFile;\n        }\n\n        this._nextFile = opt_file;\n        return this;\n    }\n\n    /**\n     * 自身の前に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n     *     通常のやprev()はディレクトリも含め同階層のみをつなぎますが、prevFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます\n     * @param {File} [opt_file] 新たに設定するファイルのインスタンス\n     * @return {File} 自身のインスタンス(引数を渡した場合)、あるいは自身の前のファイルのインスタンス(引数を省略した場合)\n     */\n    prevFile(opt_file) {\n        if (opt_file === undefined) {\n            return this._prevFile;\n        }\n\n        this._prevFile = opt_file;\n        return this;\n    }//}}}\n\n    // --判定 {{{\n    /**\n     * 自身がFileListのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isRoot() {\n        return false;\n    }\n\n    /**\n     * 自身がディレクトリのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isDirectory() {\n        return false;\n    }\n\n    /**\n     * 自身がファイルのインスタンスであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isFile() {\n        return true;\n    }\n\n    /**\n     * 自身が最初のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最初のファイルであるかどうか)\n     * @return {boolean} 自身がファイルリストの中で最初のファイルならtrue、そうでなければfalse\n     */\n    isFirstFile() {\n        return this.prevFile() === null;\n    }\n\n    /**\n     * 自身が最後のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最後のファイルであるかどうか)\n     * @return {boolean} 自身がファイルリストの中で最後のファイルならtrue、そうでなければfalse\n     */\n    isLastFile() {\n        return this.nextFile() === null;\n    }\n\n    /**\n     * 自身が表すファイルが文章コンテナに読み込まれているかどうかを返します\n     * @return {boolean} 自身が現在読み込まれていればtrue、そうでなければfalse\n     */\n    isOpen() {\n        return this.fileList().sentenceContainer().fileId() === this.id();\n    }\n\n    /**\n     * 自身が表すファイルが文章コンテナに読み込まれていないかどうかを返します\n     * @return {boolean} 自身が現在読み込まれていなければtrue、そうでなければfalse\n     */\n    isClose() {\n        return this.fileList().sentenceContainer().fileId() !== this.id();\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 自身のファイルIDを返します\n     * @return {number} 自身のファイルID\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * 自身のファイル名を返します\n     * @return {string} 自身のファイル名\n     */\n    name() {\n        return this._name;\n    }//}}}\n\n    // --DOM操作 {{{\n    /**\n     * 文章コンテナに自身のファイルを非同期で読み込みます\n     * @return {File} 自身のインスタンス\n     */\n    open() {\n        const sentenceContainer = this.fileList().sentenceContainer();\n        if (sentenceContainer.isChanged()) {\n            sentenceContainer.announce('最後の変更が保存されていません');\n            return this;\n        }\n\n        const data = {};\n        data.file_id = this.id();\n        sentenceContainer.announce('読込中');\n        Util.get('/tategaki-editor/FileData',\n            json => sentenceContainer.init(json).isChanged(false).announce('読み込み完了'),\n            data);\n        return this;\n    }\n\n    /**\n     * 自身の要素及び自身への参照を削除し、自身が表すファイルを削除します(非同期通信)\n     * @return {File} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/DeleteServlet.html\n     */\n    delete() {\n        Util.post('/tategaki-editor/Delete',{\n            file_id: this.id()\n        },function (json) {\n            if (json.result === 'false' || json.result === false) {\n                console.log('ファイル削除エラーです(ファイル番号：'+ this.id() + ')');\n                return;\n            }\n\n            const fileList = this.fileList();\n            const sentenceContainer = fileList.sentenceContainer();\n            // 現在開いているファイルを削除したなら、前後どちらかのファイルを開く\n            // 同じディレクトリに他のファイルがなければ新しいファイルを開く\n            // 最後に、ファイルリストを作り直す\n            if (fileList.currentFile() === this) {\n                const nextFile = this.nextFile() || this.prevFile();\n                if (nextFile) {\n                    nextFile.open();\n                    fileList.read();\n                    return;\n                }\n                if (!nextFile) {\n                    sentenceContainer.newFile();\n                    fileList.read();\n                    return;\n                }\n            }\n            fileList.read();\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * 自身をnewParentDirの中に移動し、ファイルリストを作り直します(非同期通信)\n     * @param {Directory} newParentDir 自身の親となるディレクトリのインスタンス\n     * @return {File} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    move(newParentDir) {\n        const fileList = this.fileList();\n        Util.post('/tategaki-editor/FileList',{\n            file_id: this.id(),\n            new_parent_id: newParentDir.id()\n        }, data => fileList.read());\n        return this;\n    }//}}}\n\n    // --イベント {{{\n    // liタグの要素ではなくaタグ要素にクリックイベントを設定するためオーバーライド\n    /**\n     * 自身のリンクにクリックイベントを付加します\n     * @return {File} 自身のインスタンス\n     */\n    addClickEventListener() {\n        this._clickArg = this._onClick.bind(this);\n        this.link().addEventListener('click',this._clickArg);\n        return this;\n    }\n\n    /**\n     * 自身のリンクへのクリックイベントを除去します\n     * @return {File} 自身のインスタンス\n     */\n    removeClickEventListener() {\n        if (!this._clickArg) {\n            return this;\n        }\n        this.link().removeEventListener('click',this._clickArg);\n        this._clickArg = null;\n        return this;\n    }\n\n    /**\n     * 自身のリンクへのクリックイベントの内容です(クリックするとファイルが読み込まれる)\n     * @param {Event} e イベントオブジェクト\n     */\n    runClick(e) {\n        this.open();\n        $('#file_list_modal').modal('hide');\n    }//}}}\n}//}}}\n\n\n/**\n * ユーザーのディレクトリ情報のひとつを扱うクラス\n */\nexport class Directory extends AbstractHierarchy {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {number} dirId ディレクトリID\n     * @param {object} data ディレクトリの情報を持つオブジェクト\n     * <pre>\n     * <code>\n     *  // データの内容例\n     * {\n     *\t\t\"directoryname\": \"dirname\",\n     *\t\t\"4\":\"indirfile\",\n     *\t\t\"9\":\"file\",\n     *\t\t\"12\": {\n     *\t\t\t\"directoryname\": \"seconddir\",\n     *\t\t\t\"17\": \"file\"\n     *\t\t}\n     *\t}\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(dirId,data) {\n        /*\n         * dataの中身例(rootから見て)\n         * data = {\n         * \t\"directoryname\": \"root\",\n         * \t\"1\":\"sample\",\n         * \t\"8\":\"file\",\n         * \t\"6\": {\n         * \t\t\"directoryname\": \"dirname\",\n         * \t\t\"4\":\"indirfile\",\n         * \t\t\"9\":\"file\",\n         * \t\t\"12\": {\n         * \t\t\t\"directoryname\": \"seconddir\",\n         * \t\t\t\"17\": \"file\"\n         * \t\t}\n         * \t}\n         * }\n         * fileId:filename\n         */\n        super(ElemCreator.createDirectoryElement(dirId,data));\n        this._link = this.elem().getElementsByTagName('a')[0];\n        this._innerList = this.elem().getElementsByTagName('ul')[0];\n\n        this._id = parseInt(dirId);\n        this._name = data.directoryname;\n        for (let id in data) {\n            if (id === 'directoryname') {\n                continue;\n            }\n            if (typeof data[id] === 'string') {\n                this.append(new File(id,data[id]));\n            }\n            if (typeof data[id] === 'object') {\n                this.append(new Directory(id,data[id]));\n            }\n        }\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 内部のaタグのDOM要素を取得します\n     * @return {Element} 自身の持つaタグのDOM要素\n     */\n    link() {\n        return this._link;\n    }\n\n    /**\n     * 自身の内部の要素の構築先であるDOM要素(コラプスの内容の格納先)を返します\n     * @return {Element} 自身の内部リストのDOM要素\n     */\n    innerList() {\n        return this._innerList;\n    }\n\n    /**\n     * 自身の属するファイルリストの参照を探して取得します\n     * @return {FileList} 自身の属するファイルリストのインスタンス。見つからなければnull\n     */\n    fileList() {\n        for (let parentDir = this.parent(); parentDir; parentDir = parentDir.parent()) {\n            if (parentDir.isRoot()) {\n                return parentDir;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 自分の次のファイル(ディレクトリ、内部のファイルを除く)を探す\n     * @return {File} 自分の次のファイル(ディレクトリ、内部のファイルを除く)。自分の後方にファイルがなければnull\n     */\n    findNextFile() {\n        for (let fileList = this.fileList(), nextFile = fileList.findNextFile(this);\n            nextFile; nextFile = fileList.findNextFile(nextFile)) {\n                if (!this.contains(nextFile)) {\n                    return nextFile;\n                }\n            }\n        return null;\n    }//}}}\n\n    // --判定 {{{\n    /**\n     * 自身がFileListのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isRoot() {\n        return false;\n    }\n\n    /**\n     * 自身がDirectoryのインスタンスであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isDirectory() {\n        return true;\n    }\n\n    /**\n     * 自身がFileのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isFile() {\n        return false;\n    }\n\n    /**\n     * fileOrDirectoryがこのディレクトリ内にあるかどうかを判定します\n     * @param {File Directory} fileOrDirectory 判定するファイル、またはディレクトリ\n     * @return {boolean} 引数がこのディレクトリの中にあればtrue、そうでなければfalse\n     */\n    contains(fileOrDirectory) {\n        for (let fileList = this.fileList(), parents = fileOrDirectory.parent();\n            parents !== fileList; parents = parents.parent()) {\n                if (parents === this) {\n                    return true;\n                }\n            }\n        return false;\n    }//}}}\n\n    // --Status {{{\n    /**\n     * 自身のIDを返します\n     * @return {number} 自身のID\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * 自身のディレクトリ名を返します\n     * @return {string} 自身のディレクトリ名\n     */\n    name() {\n        return this._name;\n    }//}}}\n\n    // --DOM操作 {{{\n    /**\n     * 自身の内部の最後にfileを追加します\n     * @param {File Directory} file 追加するファイル、あるいはディレクトリのインスタンス\n     * @return {Directory} 自身のインスタンス\n     */\n    append(file) {\n        // DOM\n        this.appendElem(file);\n\n        // ポインタ調整\n        // 最初の要素と最後の要素はつなげる\n\n        if (this.hasChild()) {\n            this.lastChild().next(file);\n            file.prev(this.lastChild());\n        }\n        file.parent(this);\n        this.pushChild(file);\n        return this;\n    }\n\n    /**\n     * 自身の内部リストの内部の最後にfileのDOM要素を追加します\n     * @param {File Directory} file 追加するファイル、あるいはディレクトリのインスタンス\n     * @return {Directory} 自身のインスタンス\n     */\n    appendElem(file) {\n        this.innerList().appendChild(file.elem());\n        return this;\n    }\n\n    /**\n     * 自身を削除します(非同期通信)\n     * @param {boolean} [opt_bl=false] 自身の内部にファイルがあるとき、強制的に中のファイルごと削除するならtrue、そうでなければfalseを指定する\n     * @return {Directory} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/DeleteServlet.html\n     */\n    delete(opt_bl) {\n        const bl = opt_bl || false; // 引数省略の場合でも、明確にfalseを入れる\n        Util.post('/tategaki-editor/Delete',{\n            directory_id: this.id(),\n            option: bl\n        }, function (data) {\n            const fileList = this.fileList();\n            fileList.read();\n            if (data.result === 'false') {\n                alert('削除できませんでした。');\n                return;\n            }\n\n            // 現在開いているファイルが自分の中にある場合、自分の次のファイルを開く\n            // 自分以降にファイルがなければ最初のファイル、それもなければ新しいファイルを開く\n            if (this.contains(fileList.currentFile())) {\n                const nextFile = this.findNextFile() || fileList.firstFile();\n                if (nextFile) {\n                    nextFile.open();\n                } else {\n                    fileList.sentenceContainer().newFile();\n                }\n            }\n\n        }.bind(this));\n        return this;\n    }//}}}\n}//}}}\n\n\n/**\n * ファイルやディレクトリを一覧にするファイルリストを表すクラス\n */\nexport class FileList extends AbstractHierarchy {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 自身のファイルを展開する文章コンテナのインスタンス\n     * @param {object} [opt_data] ファイルやディレクトリの情報を扱うオブジェクト。省略した場合は、init()にdataを渡して参照やDOMの構築を行う\n     * <pre>\n     * <code>\n     *  // dataの中身例\n     * {\n     * \t\"directoryname\": \"root\",\n     * \t\"1\":\"sample\",\n     * \t\"8\":\"file\",\n     * \t\"6\": {\n     * \t\t\"directoryname\": \"dirname\",\n     * \t\t\"4\":\"indirfile\",\n     * \t\t\"9\":\"file\",\n     * \t\t\"12\": {\n     * \t\t\t\"directoryname\": \"seconddir\",\n     * \t\t\t\"17\": \"file\"\n     * \t\t}\n     * \t}\n     * }\n     * </code>\n     * </pre>\n     */\n    constructor(sentenceContainer, opt_data) {\n        super(document.getElementById('file_list'));\n        this._sentenceContainer = sentenceContainer;\n        this._$modal = $('#file_list_modal');\n        this._filterInputElem = document.getElementById('file_list_filter');\n        this.addEventListenerOnInput();\n        if (opt_data) {\n            this.init(opt_data);\n        } else {\n            this.read();\n        }\n    }\n\n    /**\n     * 参照やDOMの構築を行います\n     * @param {object} data ファイルやディレクトリの情報を扱うオブジェクト。詳細はconstructorの説明へ\n     * @return {FileList} 自身のインスタンス\n     */\n    init(data) {\n        this.empty();\n        for (let id in data) {\n            if (id === 'directoryname') {\n                continue;\n            }\n\n            if (typeof data[id] === 'string') {\n                this.append(new File(id,data[id]));\n            }\n            if (typeof data[id] === 'object') {\n                this.append(new Directory(id,data[id]));\n            }\n        }\n        this.chainFile();\n        return this;\n    }//}}}\n\n    // --参照取得 {{{\n    /**\n     * 文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} 自身のファイルを展開する文章コンテナのインスタンス\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * 自身の子のうち、最初のファイルのインスタンスを取得します\n     * @return {File} 最初のファイルのインスタンス\n     */\n    firstFile() {\n        return this.findNextFile(this);\n    }\n\n    /**\n     * 自身の子のうち、最後のファイルのインスタンスを取得します\n     * @return {File} 最後のファイルのインスタンス\n     */\n    lastFile() {\n        for (let file = this.firstFile(); file; file = file.nextFile()) {\n            if (file.isLastFile()) {\n                return file;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 現在文章コンテナに展開されているファイルのインスタンスを返します\n     * @return {File} 現在開かれているファイルのインスタンス\n     */\n    currentFile() {\n        for (let file = this.firstFile(); file; file = file.nextFile()) {\n            if (file.isOpen()) {\n                return file;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * ファイルリストのモーダルのjQueryオブジェクトを返します\n     * @return {jQuery} ファイルリストモーダルのjQueryオブジェクト\n     */\n    $modal() {\n        return this._$modal;\n    }\n\n    /**\n     * ファイルリストモーダル下部にある検索ボックスのDOM要素を返します\n     * @return {Element} 検索用InputのDOM要素\n     */\n    filterInputElem() {\n        return this._filterInputElem;\n    }\n\n    /**\n     * 指定されたファイルのインスタンスを探索して返します。\n     *     同じ名前を持つファイルが複数見つかる場合もあるので、結果は配列にして返します\n     * @param {number string} idOrName 対象ファイルのID、もしくはファイル名\n     * @return {File[]} 見つかったファイルインスタンスの配列\n     */\n    findFile(idOrName) {\n        const ret = [];\n        this.each(file => {\n            if (file.isDirectory()) {\n                return;\n            }\n\n            if (file.id() === idOrName ||\n                (typeof idOrName === 'string' && new RegExp('^'+ idOrName +'$','i')\n                    .test(file.name()))) {\n                        ret.push(file);\n                    }\n        });\n        return ret;\n    }\n\n    /**\n     * 指定されたディレクトリのインスタンスを探索して返します。\n     *     同じ名前を持つディレクトリが複数見つかる場合もあるので、結果は配列にして返します\n     * @param {number string} idOrName 対象ディレクトリのID、もしくはディレクトリ名\n     * @return {Directory[]} 見つかったディレクトリインスタンスの配列\n     */\n    findDirectory(idOrName) {\n        const ret = [];\n        this.each(dir => {\n            if (dir.isFile()) {\n                return;\n            }\n\n            if (dir.id() === idOrName ||\n                (typeof idOrName === 'string' && new RegExp('^'+ idOrName +'$','i')\n                    .test(dir.name()))) {\n                        ret.push(dir);\n                    }\n        });\n        return ret;\n    }//}}}\n\n    // --判定 {{{\n    /**\n     * 自身がFileListのインスタンスであるかどうかを返します\n     * @return {boolean} 常にtrue\n     */\n    isRoot() {\n        return true;\n    }\n\n    /**\n     * 自身がDirectoryのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isFile() {\n        return false;\n    }\n\n    /**\n     * 自身がFileのインスタンスであるかどうかを返します\n     * @return {boolean} 常にfalse\n     */\n    isDirectory() {\n        return false;\n    }\n\n    /**\n     * ファイルリストのモーダルが開いているかどうかを返します\n     * @return {boolean} ファイルリストのモーダルが開いていればtrue、そうでなければfalse\n     */\n    isOpen() {\n        return this.$modal().hasClass('in');\n    }\n\n    /**\n     * 自身の内部にファイルがあるかどうかを返します\n     * @return {boolean} ファイルがあればtrue、そうでなければfalse\n     */\n    hasFile() {\n        return this.firstFile() !== null;\n    }//}}}\n\n    // --参照操作 {{{\n    /**\n     * 内部のFile同士を参照でつなぎます\n     * @return {FileList} 自身のインスタンス\n     */\n    chainFile() {\n        let prev;\n        this.each(file => {\n            if (!file.isFile()) {\n                return;\n            }\n\n            if (prev) {\n                prev.nextFile(file);\n            }\n            file.prevFile(prev);\n            prev = file;\n        });\n        return this;\n    }\n\n    /**\n     * リストで上からファイルだけを数えた場合の、引数の次のファイルを返します\n     * @param {FileList File Directory} file 基準とするインスタンス\n     * @return {File} 見つかったファイルのインスタンス。引数の次のファイルが見つからなければnull\n     */\n    findNextFile(file) {\n        /*\n         *\n         *  チェックする順番は、ファイルならその次のファイルをチェックし、ディレクトリなら下に潜って最初に見つけたファイルをチェックする\n         *  -- 全要素を順に探索していくための道のり --\n         *  引数がファイルなら。引数の次を確認する\n         *  引数がディレクトリなら、その最初の子を確認する(FileListはディレクトリ扱い)\n         *  空ディレクトリ(firstChild()===null)なら、引数の次を確認する\n         *  引数の次が同じ階層になければ(ディレクトリ内の最後と判断する)、親ディレクトリの次を確認する(それでもなければ、さらに上の親ディレクトリの次、と繰り返す)\n         *  引数の次の要素が見つからず親をたどっていく過程でルートディレクトリ(FileList)に辿り着いた場合は、探索が最後に達したとしてnullを返す\n         *  -- ここまでで確認要素を取得 --\n         *  取得した確認要素がディレクトリなら、さらに潜って探索を次に進めるため再帰する\n         *  取得した確認要素がファイルなら、その要素が引数の次のファイルなので返す\n         */\n        if (file.isEmpty() && file.isRoot()) {\n            return null;\n        }\n        let check;\n        if (file.isFile()) {\n            check = file.next();\n        }\n        if (file.isDirectory() || file.isRoot()) {\n            check = file.firstChild() || file.next();\n        }\n        if (!check) {\n            for (let parentDir = file.parent();\n                !(check = parentDir.next()); parentDir = parentDir.parent()) {\n                    if (parentDir.isRoot()) {\n                        return null;\n                    }\n                }\n        }\n        if (check.isDirectory()) {\n            return this.findNextFile(check);\n        }\n        if (check.isFile()) {\n            return check;\n        }\n        return null;\n    }\n\n    /**\n     * すべてのファイルとディレクトリを順に引数にして関数を実行します\n     * @param {function} func 実行する関数オブジェクト\n     * @return {FileList} 自身のインスタンス\n     */\n    each(func) {\n        if (this.firstChild() === null) { // ファイルやディレクトリがひとつもない場合\n            return this;\n        }\n\n        // fileに子があれば子に進み、なければ次に進む(子のあるディレクトリなら最初の子、fileか空ディレクトリなら次に進む)\n        // 次がなければ親の次に進む。それでもなければさらに親の次、と繰り返す\n        // その過程でルートディレクトリが見つかれば探索終了\n        for (let file = this.firstChild(), temp = this;; temp = file,\n            file = file.hasChild() ? file.firstChild() : file.next()) {\n                if (file) {\n                    func(file);\n                    continue;\n                }\n\n                for (let parentDir = temp.parent();\n                    !(file = parentDir.next()); parentDir = parentDir.parent()) {\n                        if (parentDir.isRoot()) {\n                            return this;\n                        }\n                    }\n                func(file);\n            }\n        return this;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * ファイルリストのモーダルを開きます。その際、ファイル検索ボックスに自動的にフォーカスを当てます\n     * @return {FileList} 自身のインスタンス\n     */\n    showModal() {\n        this.filterInputElem().value = '';\n        this.filterInputElem().focus();\n        this.resetList();\n        this.$modal().modal();\n        return this;\n    }\n\n    /**\n     * ファイルリストのモーダルを閉じます\n     * @return {FileList} 自身のインスタンス\n     */\n    hideModal() {\n        this.$modal().modal('hide');\n        return this;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * ファイルリストの末端にファイル、またはディレクトリを追加します\n     * @param {File Directory} file 追加するファイル、またはディレクトリ\n     * @return {FileList} 自身のインスタンス\n     */\n    append(file) {\n        // DOM\n        this.appendElem(file);\n\n        // ポインタ調整\n        // 最初の要素と最後の要素はつなげる\n\n        if (this.hasChild()) {\n            this.lastChild().next(file);\n            file.prev(this.lastChild());\n        }\n        file.parent(this);\n        this.pushChild(file);\n        return this;\n    }\n\n    /**\n     * 自身のDOM要素の内部の最後にfileのDOM要素を追加します\n     * @param {File Directory} file 追加するファイル、またはディレクトリのインスタンス\n     * @return {FileList} 自身のインスタンス\n     */\n    appendElem(file) {\n        this.elem().appendChild(file.elem());\n        return this;\n    }\n\n    /**\n     * 内部のエレメントを空にします\n     * @return {FileList} 自身のインスタンス\n     */\n    emptyElem() {\n        // FileListは内部のエレメントが参照とは独立して変動するため、参照として保持しているエレメントを削除する方式では\n        // 存在しないエレメントを削除しようとすることになりエラーが起こるため、オーバーライドする\n        const children = this.elem().children;\n        let child;\n        while ((child = children[0])) {\n            this.elem().removeChild(child);\n        }\n        return this;\n    }\n\n    /**\n     * 各インスタンスの参照はそのままで、DOM要素のみを構築し直します\n     * @return {FileList} 自身のインスタンス\n     */\n    resetList() {\n        this.emptyElem();\n        this.each(file => {\n            file.parent().appendElem(file);\n        });\n        return this;\n    }\n\n    /**\n     * ファイルリストの内容をstrから始まる名前を持つファイル・ディレクトリのみに置き換えます(各インスタンスの参照はそのままで、DOM要素のみを変更します)\n     * @param {string} str この文字列から始まる名前を持つファイル、ディレクトリだけがファイルリスト内に表示される\n     * @return {FileList} 自身のインスタンス\n     */\n    filter(str) {\n        this.emptyElem();\n        const regexp = new RegExp('^'+ str +'.*','i');\n        this.each(file => {\n            if (regexp.test(file.name())) {\n                this.elem().appendChild(file.elem());\n            }\n        });\n        if (this.elem().children.length === 0) {\n            const li = document.createElement('li');\n            li.textContent = '該当するファイルは見つかりませんでした。';\n            this.elem().appendChild(li);\n        }\n        return this;\n    }//}}}\n\n    // ファイル操作(非同期通信)//{{{\n\n    /**\n     * ファイルリストをサーバーから読み込み、各インスタンスを構築し直します(非同期通信)\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    read() {\n        Util.get('/tategaki-editor/FileList',\n            function (json) {\n                this.init(json);\n            }.bind(this));\n        return this;\n    }\n\n    /**\n     * 現在開いているファイルの次のファイルを読み込み、文章コンテナに展開します\n     * @return {FileList} 自身のインスタンス\n     */\n    openNextFile() {\n        const currentFile = this.currentFile();\n        const file = currentFile && currentFile.nextFile();\n        if (file) {\n            file.open();\n        } else if(this.hasFile()) {\n            this.firstFile().open();\n        }\n        return this;\n    }\n\n    /**\n     * 現在開いているファイルの前のファイルを読み込み、文章コンテナに展開します\n     * @return {FileList} 自身のインスタンス\n     */\n    openPrevFile() {\n        const currentFile = this.currentFile();\n        const file = currentFile && currentFile.prevFile();\n        if (file) {\n            file.open();\n        } else if (this.hasFile()) {\n            this.lastFile().open();\n        }\n        return this;\n    }\n\n    /**\n     * 名前で指定されたファイルを削除します(非同期通信)。同名のファイルが複数見つかった場合は確認します\n     * @param {string} filename 削除するファイルの名前\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/DeleteFile.html\n     */\n    deleteFile(filename) {\n        const files = this.findFile(filename);\n        const fileLength = files.length;\n        if (fileLength === 0) {\n            this.sentenceContainer().announce('存在しないファイルです','red');\n            return this;\n        }\n\n        if (fileLength === 1) {\n            files[0].delete();\n            return this;\n        }\n\n        if (fileLength > 0) {\n            if (window.confirm('同一名のファイルが複数存在します。\\n' +\n                'すべてのファイルを削除しますか。\\n' +\n                    'このうちのどれかのファイルを削除する場合はキャンセルし、個別に削除してください。')) {\n                        for (let i = 0,file; (file = files[i]); i++) {\n                            file.delete();\n                        }\n                    } else {\n                        console.log('[複数ファイル]削除できませんでした。:' + filename);\n                    }\n        }\n        return this;\n    }\n\n    /**\n     * 指定された名前でディレクトリを作成します(非同期通信)\n     * @param {string} dirname 新しく作成されるディレクトリの名前\n     * @param {number} [opt_parentID] 親ディレクトリのID。指定しなければroot直下\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    mkdir(dirname, opt_parentID) {\n        if (!dirname) {\n            return this;\n        }\n\n        Util.post('/tategaki-editor/FileList',{\n            name: dirname,\n            new_parent_id: opt_parentID || -1,\n            saved: Date.now()\n        },function (data) {\n            if (data.result === 'true') {\n                this.sentenceContainer().announce('ディレクトリを作成しました:'+ dirname);\n                this.read();\n            } else {\n                this.sentenceContainer().announce('ディレクトリ作成エラー');\n            }\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * 指定された名前のディレクトリを削除します(非同期通信)\n     * @param {string} dirname 削除するディレクトリの名前\n     * @param {boolean} isForce ディレクトリ内にファイル等があっても強制的に中身ごと削除するならtrue、そうでなければfalse\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/Delete.html\n     */\n    deleteDirectory(dirname, isForce) {\n        const dirs = this.findDirectory(dirname);\n        if (dirs.length === 0) {\n            return this;\n        }\n\n        dirs[0].delete(isForce);\n        return this;\n    }\n\n    /**\n     * 指定されたファイルを指定されたディレクトリ内に移動します(非同期通信)\n     * @param {string} filename 移動するファイル名。同名のファイルが見つかった場合は、最初に見つかったファイルが選択される\n     * @param {string} dirname 移動先のディレクトリ名。同名のディレクトリが見つかった場合は、最初に見つかったディレクトリが選択される\n     * @return {FileList} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/FileListServlet.html\n     */\n    moveFile(filename, dirname) {\n        const files = this.findFile(filename);\n        const dirs = this.findDirectory(dirname);\n        if (files.length === 0 || dirs.length === 0) {\n            return this;\n        }\n\n        files[0].move(dirs[0]);\n        return this;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * ファイルリストのモーダル内にあるファイル検索ボックス関係のイベントを付加します\n     */\n    addEventListenerOnInput() {\n        // モーダルが開くと、検索欄にフォーカスが移動する\n        this.$modal().on('shown.bs.modal',function (e) {\n            this.filterInputElem().focus();\n        }.bind(this));\n        // ファイル検索欄\n        this.filterInputElem().addEventListener('keyup',this.onKeyupOnInput.bind(this));\n    }\n\n    /**\n     * ファイル検索ボックスのkeyupイベントの内容です\n     * @param {Event} e イベントオブジェクト\n     */\n    onKeyupOnInput(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 123) { return; } // F12のみブラウザショートカットキー\n        if (keycode === 13) {\n            // enter\n            const file = this.findFile(this.filterInputElem().value)[0];\n            if (file) {\n                file.open();\n            }\n            this.hideModal();\n            this.resetList();\n        } else if (this.filterInputElem().value.length === 0) {\n            this.resetList();\n        } else {\n            this.filter(this.filterInputElem().value);\n        }\n    }//}}}\n}//}}}",
    "static": true,
    "longname": "js/filelist.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "File",
    "memberof": "js/filelist.js",
    "static": true,
    "longname": "js/filelist.js~File",
    "access": null,
    "export": true,
    "importPath": "./js/filelist.js",
    "importStyle": "{File}",
    "description": "ユーザーのファイル情報のひとつを扱うクラス",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ファイルのID"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "ファイル名"
      }
    ]
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "_link",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_link",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "_id",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_id",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "_name",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_name",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "_nextFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_nextFile",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "_prevFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_prevFile",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#fileList",
    "access": null,
    "description": "自身の属するファイルリストの参照を探して取得します",
    "lineNumber": 29,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身の属するファイルリストのインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "link",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#link",
    "access": null,
    "description": "内部のaタグのDOM要素を取得します",
    "lineNumber": 42,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の持つaタグのDOM要素"
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "nextFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#nextFile",
    "access": null,
    "description": "自身の次に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n    通常のnext()はディレクトリも含め同階層のみをつなぎますが、nextFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_file",
        "description": "新たに設定するファイルのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の次のファイルのインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "_nextFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_nextFile",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "prevFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#prevFile",
    "access": null,
    "description": "自身の前に位置するファイルのインスタンスを新たに設定、または引数省略で取得します。\n    通常のやprev()はディレクトリも含め同階層のみをつなぎますが、prevFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぎます",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_file",
        "description": "新たに設定するファイルのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の前のファイルのインスタンス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_prevFile",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_prevFile",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "isRoot",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返します",
    "lineNumber": 81,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isDirectory",
    "access": null,
    "description": "自身がディレクトリのインスタンスであるかどうかを返します",
    "lineNumber": 89,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "isFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isFile",
    "access": null,
    "description": "自身がファイルのインスタンスであるかどうかを返します",
    "lineNumber": 97,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "isFirstFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isFirstFile",
    "access": null,
    "description": "自身が最初のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最初のファイルであるかどうか)",
    "lineNumber": 105,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がファイルリストの中で最初のファイルならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "isLastFile",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isLastFile",
    "access": null,
    "description": "自身が最後のファイルであるかどうかを返します(ディレクトリ単位ではなく、ファイルリスト全体の中で最後のファイルであるかどうか)",
    "lineNumber": 113,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がファイルリストの中で最後のファイルならtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "isOpen",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isOpen",
    "access": null,
    "description": "自身が表すファイルが文章コンテナに読み込まれているかどうかを返します",
    "lineNumber": 121,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が現在読み込まれていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "isClose",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#isClose",
    "access": null,
    "description": "自身が表すファイルが文章コンテナに読み込まれていないかどうかを返します",
    "lineNumber": 129,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が現在読み込まれていなければtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "id",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#id",
    "access": null,
    "description": "自身のファイルIDを返します",
    "lineNumber": 138,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身のファイルID"
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "name",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#name",
    "access": null,
    "description": "自身のファイル名を返します",
    "lineNumber": 146,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身のファイル名"
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "open",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#open",
    "access": null,
    "description": "文章コンテナに自身のファイルを非同期で読み込みます",
    "lineNumber": 155,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "delete",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#delete",
    "access": null,
    "description": "自身の要素及び自身への参照を削除し、自身が表すファイルを削除します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/DeleteServlet.html"
    ],
    "lineNumber": 176,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "move",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#move",
    "access": null,
    "description": "自身をnewParentDirの中に移動し、ファイルリストを作り直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "newParentDir",
        "description": "自身の親となるディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "addClickEventListener",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#addClickEventListener",
    "access": null,
    "description": "自身のリンクにクリックイベントを付加します",
    "lineNumber": 229,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "removeClickEventListener",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#removeClickEventListener",
    "access": null,
    "description": "自身のリンクへのクリックイベントを除去します",
    "lineNumber": 239,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "_clickArg",
    "memberof": "js/filelist.js~File",
    "static": false,
    "longname": "js/filelist.js~File#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "runClick",
    "memberof": "js/filelist.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~File#runClick",
    "access": null,
    "description": "自身のリンクへのクリックイベントの内容です(クリックするとファイルが読み込まれる)",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "Directory",
    "memberof": "js/filelist.js",
    "static": true,
    "longname": "js/filelist.js~Directory",
    "access": null,
    "export": true,
    "importPath": "./js/filelist.js",
    "importStyle": "{Directory}",
    "description": "ユーザーのディレクトリ情報のひとつを扱うクラス",
    "lineNumber": 262,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dirId",
        "description": "ディレクトリID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ディレクトリの情報を持つオブジェクト\n<pre>\n<code>\n // データの内容例\n{\n\t\"directoryname\": \"dirname\",\n\t\"4\":\"indirfile\",\n\t\"9\":\"file\",\n\t\"12\": {\n\t\t\"directoryname\": \"seconddir\",\n\t\t\"17\": \"file\"\n\t}\n}\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "_link",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_link",
    "access": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "_innerList",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_innerList",
    "access": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "_id",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_id",
    "access": null,
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "_name",
    "memberof": "js/filelist.js~Directory",
    "static": false,
    "longname": "js/filelist.js~Directory#_name",
    "access": null,
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "link",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#link",
    "access": null,
    "description": "内部のaタグのDOM要素を取得します",
    "lineNumber": 326,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の持つaタグのDOM要素"
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "innerList",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#innerList",
    "access": null,
    "description": "自身の内部の要素の構築先であるDOM要素(コラプスの内容の格納先)を返します",
    "lineNumber": 334,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の内部リストのDOM要素"
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#fileList",
    "access": null,
    "description": "自身の属するファイルリストの参照を探して取得します",
    "lineNumber": 342,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身の属するファイルリストのインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "findNextFile",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#findNextFile",
    "access": null,
    "description": "自分の次のファイル(ディレクトリ、内部のファイルを除く)を探す",
    "lineNumber": 355,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自分の次のファイル(ディレクトリ、内部のファイルを除く)。自分の後方にファイルがなければnull"
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "isRoot",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返します",
    "lineNumber": 370,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#isDirectory",
    "access": null,
    "description": "自身がDirectoryのインスタンスであるかどうかを返します",
    "lineNumber": 378,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "isFile",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#isFile",
    "access": null,
    "description": "自身がFileのインスタンスであるかどうかを返します",
    "lineNumber": 386,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "contains",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#contains",
    "access": null,
    "description": "fileOrDirectoryがこのディレクトリ内にあるかどうかを判定します",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "fileOrDirectory",
        "description": "判定するファイル、またはディレクトリ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "引数がこのディレクトリの中にあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "id",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#id",
    "access": null,
    "description": "自身のIDを返します",
    "lineNumber": 410,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身のID"
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "name",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#name",
    "access": null,
    "description": "自身のディレクトリ名を返します",
    "lineNumber": 418,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身のディレクトリ名"
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "append",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#append",
    "access": null,
    "description": "自身の内部の最後にfileを追加します",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、あるいはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "appendElem",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#appendElem",
    "access": null,
    "description": "自身の内部リストの内部の最後にfileのDOM要素を追加します",
    "lineNumber": 449,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、あるいはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "delete",
    "memberof": "js/filelist.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~Directory#delete",
    "access": null,
    "description": "自身を削除します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/DeleteServlet.html"
    ],
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opt_bl",
        "description": "自身の内部にファイルがあるとき、強制的に中のファイルごと削除するならtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "FileList",
    "memberof": "js/filelist.js",
    "static": true,
    "longname": "js/filelist.js~FileList",
    "access": null,
    "export": true,
    "importPath": "./js/filelist.js",
    "importStyle": "{FileList}",
    "description": "ファイルやディレクトリを一覧にするファイルリストを表すクラス",
    "lineNumber": 493,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#constructor",
    "access": null,
    "description": "",
    "lineNumber": 519,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "自身のファイルを展開する文章コンテナのインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_data",
        "description": "ファイルやディレクトリの情報を扱うオブジェクト。省略した場合は、init()にdataを渡して参照やDOMの構築を行う\n<pre>\n<code>\n // dataの中身例\n{\n\t\"directoryname\": \"root\",\n\t\"1\":\"sample\",\n\t\"8\":\"file\",\n\t\"6\": {\n\t\t\"directoryname\": \"dirname\",\n\t\t\"4\":\"indirfile\",\n\t\t\"9\":\"file\",\n\t\t\"12\": {\n\t\t\t\"directoryname\": \"seconddir\",\n\t\t\t\"17\": \"file\"\n\t\t}\n\t}\n}\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/filelist.js~FileList",
    "static": false,
    "longname": "js/filelist.js~FileList#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "_$modal",
    "memberof": "js/filelist.js~FileList",
    "static": false,
    "longname": "js/filelist.js~FileList#_$modal",
    "access": null,
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "_filterInputElem",
    "memberof": "js/filelist.js~FileList",
    "static": false,
    "longname": "js/filelist.js~FileList#_filterInputElem",
    "access": null,
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "init",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#init",
    "access": null,
    "description": "参照やDOMの構築を行います",
    "lineNumber": 537,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ファイルやディレクトリの情報を扱うオブジェクト。詳細はconstructorの説明へ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#sentenceContainer",
    "access": null,
    "description": "文章コンテナのインスタンスを返します",
    "lineNumber": 560,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のファイルを展開する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "firstFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#firstFile",
    "access": null,
    "description": "自身の子のうち、最初のファイルのインスタンスを取得します",
    "lineNumber": 568,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "最初のファイルのインスタンス"
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "lastFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#lastFile",
    "access": null,
    "description": "自身の子のうち、最後のファイルのインスタンスを取得します",
    "lineNumber": 576,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "最後のファイルのインスタンス"
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "currentFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#currentFile",
    "access": null,
    "description": "現在文章コンテナに展開されているファイルのインスタンスを返します",
    "lineNumber": 589,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "現在開かれているファイルのインスタンス"
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "$modal",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#$modal",
    "access": null,
    "description": "ファイルリストのモーダルのjQueryオブジェクトを返します",
    "lineNumber": 602,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "jQuery"
      ],
      "spread": false,
      "description": "ファイルリストモーダルのjQueryオブジェクト"
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "filterInputElem",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#filterInputElem",
    "access": null,
    "description": "ファイルリストモーダル下部にある検索ボックスのDOM要素を返します",
    "lineNumber": 610,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "検索用InputのDOM要素"
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "findFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#findFile",
    "access": null,
    "description": "指定されたファイルのインスタンスを探索して返します。\n    同じ名前を持つファイルが複数見つかる場合もあるので、結果は配列にして返します",
    "lineNumber": 620,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrName",
        "description": "対象ファイルのID、もしくはファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File[]"
      ],
      "spread": false,
      "description": "見つかったファイルインスタンスの配列"
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "findDirectory",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#findDirectory",
    "access": null,
    "description": "指定されたディレクトリのインスタンスを探索して返します。\n    同じ名前を持つディレクトリが複数見つかる場合もあるので、結果は配列にして返します",
    "lineNumber": 642,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrName",
        "description": "対象ディレクトリのID、もしくはディレクトリ名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory[]"
      ],
      "spread": false,
      "description": "見つかったディレクトリインスタンスの配列"
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "isRoot",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返します",
    "lineNumber": 663,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "isFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isFile",
    "access": null,
    "description": "自身がDirectoryのインスタンスであるかどうかを返します",
    "lineNumber": 671,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "isDirectory",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isDirectory",
    "access": null,
    "description": "自身がFileのインスタンスであるかどうかを返します",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "isOpen",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#isOpen",
    "access": null,
    "description": "ファイルリストのモーダルが開いているかどうかを返します",
    "lineNumber": 687,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ファイルリストのモーダルが開いていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "hasFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#hasFile",
    "access": null,
    "description": "自身の内部にファイルがあるかどうかを返します",
    "lineNumber": 695,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ファイルがあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "chainFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#chainFile",
    "access": null,
    "description": "内部のFile同士を参照でつなぎます",
    "lineNumber": 704,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "findNextFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#findNextFile",
    "access": null,
    "description": "リストで上からファイルだけを数えた場合の、引数の次のファイルを返します",
    "lineNumber": 725,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileList File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "基準とするインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "見つかったファイルのインスタンス。引数の次のファイルが見つからなければnull"
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "each",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#each",
    "access": null,
    "description": "すべてのファイルとディレクトリを順に引数にして関数を実行します",
    "lineNumber": 771,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "実行する関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "showModal",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#showModal",
    "access": null,
    "description": "ファイルリストのモーダルを開きます。その際、ファイル検索ボックスに自動的にフォーカスを当てます",
    "lineNumber": 803,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "hideModal",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#hideModal",
    "access": null,
    "description": "ファイルリストのモーダルを閉じます",
    "lineNumber": 815,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "append",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#append",
    "access": null,
    "description": "ファイルリストの末端にファイル、またはディレクトリを追加します",
    "lineNumber": 827,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、またはディレクトリ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "appendElem",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#appendElem",
    "access": null,
    "description": "自身のDOM要素の内部の最後にfileのDOM要素を追加します",
    "lineNumber": 848,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、またはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "emptyElem",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#emptyElem",
    "access": null,
    "description": "内部のエレメントを空にします",
    "lineNumber": 857,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "resetList",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#resetList",
    "access": null,
    "description": "各インスタンスの参照はそのままで、DOM要素のみを構築し直します",
    "lineNumber": 872,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "filter",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#filter",
    "access": null,
    "description": "ファイルリストの内容をstrから始まる名前を持つファイル・ディレクトリのみに置き換えます(各インスタンスの参照はそのままで、DOM要素のみを変更します)",
    "lineNumber": 885,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "この文字列から始まる名前を持つファイル、ディレクトリだけがファイルリスト内に表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "read",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#read",
    "access": null,
    "description": "ファイルリストをサーバーから読み込み、各インスタンスを構築し直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 908,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "openNextFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#openNextFile",
    "access": null,
    "description": "現在開いているファイルの次のファイルを読み込み、文章コンテナに展開します",
    "lineNumber": 920,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "openPrevFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#openPrevFile",
    "access": null,
    "description": "現在開いているファイルの前のファイルを読み込み、文章コンテナに展開します",
    "lineNumber": 935,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "deleteFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#deleteFile",
    "access": null,
    "description": "名前で指定されたファイルを削除します(非同期通信)。同名のファイルが複数見つかった場合は確認します",
    "see": [
      "../WEB-INF/classes/doc/DeleteFile.html"
    ],
    "lineNumber": 952,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "削除するファイルの名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "mkdir",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#mkdir",
    "access": null,
    "description": "指定された名前でディレクトリを作成します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 986,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "新しく作成されるディレクトリの名前"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_parentID",
        "description": "親ディレクトリのID。指定しなければroot直下"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "deleteDirectory",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#deleteDirectory",
    "access": null,
    "description": "指定された名前のディレクトリを削除します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/Delete.html"
    ],
    "lineNumber": 1013,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "削除するディレクトリの名前"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isForce",
        "description": "ディレクトリ内にファイル等があっても強制的に中身ごと削除するならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "moveFile",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#moveFile",
    "access": null,
    "description": "指定されたファイルを指定されたディレクトリ内に移動します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/FileListServlet.html"
    ],
    "lineNumber": 1030,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "移動するファイル名。同名のファイルが見つかった場合は、最初に見つかったファイルが選択される"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "移動先のディレクトリ名。同名のディレクトリが見つかった場合は、最初に見つかったディレクトリが選択される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "addEventListenerOnInput",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#addEventListenerOnInput",
    "access": null,
    "description": "ファイルリストのモーダル内にあるファイル検索ボックス関係のイベントを付加します",
    "lineNumber": 1046,
    "params": []
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "onKeyupOnInput",
    "memberof": "js/filelist.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/filelist.js~FileList#onKeyupOnInput",
    "access": null,
    "description": "ファイル検索ボックスのkeyupイベントの内容です",
    "lineNumber": 1059,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "js/input.js",
    "content": "'use strict';\n/* global AbstractHierarchy, Char, Row, KeyTable, ElemCreator, Util */\n// classは巻き上げが起こらないため、Char・Rowの下に作る必要がある。ただし、SentenceContainer内で利用するのでSentenceContainerよりは上になければならない\n\n\n/**\n * 入力文字を表すクラス\n */\nexport class InputChar extends Char {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {object} data 文字を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     *\t{\n     *\t\t\"char\":\"あ\",\n     *\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t\"fontSize\": \"auto\"\n     *\t}\n     *\t</code>\n     *\t</pre>\n     *\t@param {number} [opt_phraseNum=-1] 文節のインデックス\n     */\n    constructor(data, opt_phraseNum) {\n        super(data);\n        if (opt_phraseNum === undefined) {\n            opt_phraseNum = -1;\n        }\n        this.phraseNum(opt_phraseNum);\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * 自身の文節番号がnumであるかどうかを返します\n     * @param {number} num 判定するインデックス\n     * @return {boolean} 自身の文節番号がnumであればtrue、そうでなければfalse\n     */\n    isPhraseNum(num) {\n        return num === this.phraseNum();\n    }\n\n    /**\n     * 自身が選択されているかどうかを表します\n     * @return {boolean} 自身が選択されていればtrue、そうでなければfalse。漢字変換が一度もされていなければfalse\n     */\n    isSelect() {\n        return this.hasClass('select-phrase');\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * この文字の文節番号をopt_newNumに設定する、あるいは引数省略で現在の文節番号を取得します\n     * @param {number} [opt_newNum] 新たに設定する文節番号(０始まり)\n     * @return {InputChar number} 自身のインスタンス(引数を渡した場合)、あるいは現在の文節のインデックス(引数を省略した場合)\n     */\n    phraseNum(opt_newNum) {\n        if (opt_newNum === undefined) {\n            return this._phraseNum;\n        }\n\n        this.elem().dataset.phraseNum = opt_newNum;\n        this._phraseNum = opt_newNum;\n        return this;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * この文字を選択状態にします\n     * @return {InputChar} 自身のインスタンス\n     */\n    select() {\n        this.addClass('select-phrase');\n        return this;\n    }\n\n    /**\n     * この文字を非選択状態にします\n     * @return {InputChar} 自身のインスタンス\n     */\n    removeSelect() {\n        this.removeClass('select-phrase');\n        return this;\n    }//}}}\n}//}}}\n\n\n/**\n * 入力された文字をいったん保持するバッファーを表すクラス。\n *     内部の子にInputCharのインスタンス群を持ちます。\n *     また、一度も漢字変換がされず文節番号がすべて-1の場合と、漢字変換が行われ文節が分けられている場合と２つの状態がある\n */\nexport class InputBuffer extends Row {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} container 自身の属する文章コンテナのインスタンス\n     */\n    constructor(container) {\n        super(document.getElementById('input_buffer'));\n        this._container = container;\n        this._convertContainer = new ConvertContainer(this);\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 自身の属する文章コンテナのインスタンスを取得します\n     * @return {SentenceContainer} 自身の属する文章コンテナ\n     */\n    container() {\n        return this._container;\n    }\n\n    /**\n     * カーソルのインスタンスを取得します\n     * @return {Cursor} カーソルのインスタンス\n     */\n    cursor() {\n        return this.container().cursor();\n    }\n\n    /**\n     * カーソルのある文字のインスタンスを取得します\n     * @return {Char} カーソル文字のインスタンス\n     */\n    cursorChar() {\n        return this.cursor().getChar();\n    }\n\n    /**\n     * 漢字変換コンテナのインスタンスを取得します\n     * @return {ConvertContainer} 漢字変換コンテナのインスタンス\n     */\n    convertContainer() {\n        return this._convertContainer;\n    }\n\n    /**\n     * 指定された文節番号の入力文字インスタンスを配列にして返します\n     * @param {number} num 集める入力文字の文節番号\n     * @return {InputChar[]} 指定された文節番号の入力文字インスタンスの配列\n     */\n    phrases(num) {\n        const ret = [];\n        for (let char of this.chars()) {\n            if (char.isPhraseNum(num)) {\n                ret.push(char);\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * 選択中の文節の入力文字インスタンスを返します\n     * @return {InputChar[]} 選択中の入力文字インスタンスの配列。選択されていなければ空の配列\n     */\n    selectPhrases() {\n        const ret = [];\n        for (let char of this.chars()) {\n            if (char.isSelect()) {\n                ret.push(char);\n            }\n        }\n        return ret;\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * 自身が可視化されている(文字入力中)かどうかを返します\n     * @return {boolean} 自身が可視化されていればtrue、そうでなければfalse\n     */\n    isDisplay() {\n        return this.elem().style.display === 'block';\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * 各入力文字に文節番号をふります。変換候補一覧群を作成した後で使用してください\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    setPhraseNum() {\n        let cnt = 0;\n        for (let view of this.convertContainer().views()) {\n            const num = view.phraseNum();\n            const len = view.getSelect().length(); // 選択行がなければひらがなを使って計算\n            for (let i = 0; i < len; i++, cnt++) {\n                this.chars(cnt).phraseNum(num);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * 選択されている文節のインデックスを返します\n     * @return {number} 選択文節のインデックス。選択されていなければ-1\n     */\n    selectIndex() {\n        for (let char of this.chars()) {\n            if (char.isSelect()) {\n                return char.phraseNum();\n            }\n        }\n        return -1;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * 自身の幅を取得します。文章内のRowと異なり回転されていないため、css上の幅と一致します\n     * @return {number} 自身の幅\n     */\n    width() {\n        return super.super.width();\n    }\n\n    /**\n     * 自身の高さを取得します。文章内のRowと異なり回転されていないため、css上の高さと一致します\n     * @return {number} 自身の高さ\n     */\n    height() {\n        return super.super.height();\n    }\n\n    /**\n     * @private\n     * 内部の入力文字を元に、適切な幅を計算します\n     * @return {number} 計算された幅のピクセル数\n     */\n    newWidth() {\n        const cache = {};\n        let width = 0;\n        for (let char of this.chars()) {\n            const size = char.fontSize();\n            if (cache[size]) {\n                width = Math.max(width,cache[size]);\n            } else {\n                cache[size] = char.width();\n                width = Math.max(width,char.width());\n            }\n        }\n        return width + 5; // 5px余裕をもたせる\n    }\n\n    /**\n     * @private\n     * 内部の入力文字を元に、適切な高さを計算します\n     * @return {number} 計算された高さのピクセル数\n     */\n    newHeight() {\n        const cache = {};\n        let height = 0;\n        for (let char of this.chars()) {\n            const size = char.fontSize();\n            if (cache[size]) {\n                height += cache[size];\n            } else {\n                cache[size] = char.height();\n                height += cache[size];\n            }\n        }\n        return height + 5; // 5px余裕をもたせる\n    }\n\n    /**\n     * カーソル位置のX座標を返します\n     * @return {number} カーソル位置のX座標\n     */\n    cursorX() {\n        return this.cursorChar().x();\n    }\n\n    /**\n     * カーソル位置のY座標を返します\n     * @return {number} カーソル位置のY座標\n     */\n    cursorY() {\n        return this.cursorChar().y();\n    }\n\n    /**\n     * 自身の高さや幅を内部の各入力文字に合わせて調整します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    resize() {\n        const style = this.elem().style;\n        style.width = this.newWidth() + 'px';\n        style.height = this.newHeight() + 'px';\n        return this;\n    }\n\n    /**\n     * 自身の表示位置をカーソルに合わせます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    move() {\n        this.elem().style.left = this.cursorX() + 'px';\n        this.elem().style.top = this.cursorY() + 'px';\n        return this;\n    }\n\n    /**\n     * 自身を表示します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    show() {\n        this.elem().style.display = 'block';\n        return this;\n    }\n\n    /**\n     * 自身を非表示にします\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    hide() {\n        this.elem().style.display = 'none';\n        this.removeKeydownEventListener();\n        return this;\n    }//}}}\n\n    // 選択 {{{\n\n    /**\n     * 選択文節を次の文節に変更します。最後の文節から実行されれば、最初の文節が選択されます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    selectNext() {\n        return this.select(this.selectIndex() + 1);\n    }\n\n    /**\n     * 選択文節を前の文節に変更します。最初の文節から実行されれば、最後の文節が選択されます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    selectPrev() {\n        return this.select(this.selectIndex() - 1);\n    }\n\n    /**\n     * 文節番号がindexの文字を選択します。引数が負になれば最後の文節を、最大の文節番号を越えれば最初の文節を選択します\n     * @param {number} index 選択する文節のインデックス。負の数なら最後の文節、範囲より大きな数なら最初の文節が選択される\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    select(index) {\n        const maxIndex = this.lastChar().phraseNum();\n        if (index < 0) {\n            index = maxIndex;\n        }\n        if (index > maxIndex) {\n            index = 0;\n        }\n\n        for (let char of this.chars()) {\n            if (char.phraseNum() === index) {\n                char.select();\n            } else {\n                char.removeSelect();\n            }\n        }\n        this.convertContainer().views(index).active();\n        return this;\n    }//}}}\n\n    // --文字操作 {{{\n\n    /**\n     * 自身を空にして、文字入力を終了します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    empty() {\n        super.empty();\n        if (this.convertContainer().isActive()) {\n            this.convertContainer().empty().hide();\n        }\n        return this;\n    }\n\n    /**\n     * keycodeを追加した場合の新たな文字列で入力文字を置き換えます\n     * @param {number} keycode 追加するキーのキーコード\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    increace(keycode, bShift) {\n        const newInputStr = this._newString(keycode,bShift);\n\n        if (newInputStr === undefined || newInputStr.indexOf('undefined') !== -1) {\n            // 未定義文字(alt,ctrl,tabなど)はreturn\n            return this;\n        }\n\n        this.update(newInputStr);\n        this.resize();\n        return this;\n    }\n\n    /**\n     * bufferの最後の文字を削除します。内部に文字がなくなれば入力を終了します\n     * @return {InputChar} 削除した入力文字のインスタンス\n     */\n    decreace() {\n        if (!this.hasChar) {\n            return this;\n        }\n\n        const ret = this.lastChar().remove();\n        this.resize();\n        if (!this.hasChar()) {\n            this.hide();\n            this.container().addKeydownEventListener();\n        }\n        return ret;\n    }\n\n    /**\n     * 内部の入力文字をstrで置き換えます\n     * @param {string} str 置き換える文字列\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    update(str) {\n        this.empty();\n        for (let char of str) {\n            this.append(new InputChar(this.cursorChar().createData(char)));\n        }\n        this.show();\n        return this;\n    }\n\n    /**\n     * カーソル位置に文字を挿入し、後処理を行って入力状態を終了します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    print() {\n        this.cursor().insert(this.text(), true);\n        this.empty().hide();\n        this.container().addKeydownEventListener();\n        this.container().changeDisplay();\n        return this;\n    }\n\n    /**\n     * 入力文字をすべてカタカナに置き換えます\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    toKatakanaAll() {\n        this.update(this._getKatakana());\n        return this;\n    }\n\n    /**\n     * 入力文字すべてを漢字変換します(非同期通信)\n     * @return {InputBuffer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    convert() {\n        this.convertContainer().convert(this.text());\n        return this;\n    }\n\n    /**\n     * インデックスがnumである文節の入力文字をstrで入れ替えます\n     * @param {number} num 入れ替える文節のインデックス\n     * @param {string} str 入れ替える文字列\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    insertPhrase(num, str) {\n        const phrases = this.phrases(num);\n        if (phrases.length === 0) { // 指定された文節番号の文字が見つからなかった\n            return this;\n        }\n        // 新しいInputCharをもともとあった文字の前に挿入していく\n        for (let c of str) {\n            const newChar = new InputChar(this.cursorChar().createData(c),num);\n            phrases[0].before(newChar);\n            if (phrases[0].isSelect()) { // 選択中の文節なら入替え文字も選択\n                newChar.select();\n            }\n        }\n        // 古い文字を削除\n        for (let old of phrases) {\n            old.remove();\n        }\n        this.resize();\n        return this;\n    }\n\n    /**\n     * インデックスがnumである文節の後ろにstrを追加します。追加した文字の文節番号は負の値になります\n     * @param {number} num 挿入位置の指定\n     * @param {string} str 挿入する文字列\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    insertPhraseAfter(num, str) {\n        const phrases = this.phrases(num);\n        if (phrases.length === 0) { // 指定された文節番号の文字が見つからなかった\n            return this;\n        }\n\n        const nextChar = phrases[phrases.length -1].next(); // 挿入用の文字。最後にはEOLがあるので、必ず存在する\n        for (let c of str) {\n            nextChar.before(new InputChar(this.cursorChar().createData(c),-num));\n        }\n        this.resize();\n        return this;\n    }\n\n    // --外からの情報取得\n\n    /**\n     * 現在の文字列にkeycodeを加えて作られる文字列を取得します。\n     *     未定義のkeycodeの場合はundefinedが文字列内に含まれますので注意してください\n     * @param {number} keycode 追加するキーのキーコード\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n     * @return {string} keycodeを追加して作られた文字列\n     */\n    _newString(keycode,bShift) {\n        const inputStr = this.text(); //もともとの文字列\n        if (bShift) {\n            return inputStr + KeyTable.shiftKey[keycode];\n        }\n\n        return KeyTable.makeString(inputStr,keycode); //keycodeを加えた新しい文字列\n    }\n\n    /**\n     * 現在の入力文字をカタカナに変換した場合の文字列を返します。\n     *     変換できない文字があれば変換せずに元の文字をそのまま連結します\n     * @return {string} カタカナに置き換えた文字列\n     */\n    _getKatakana() {\n        const str = this.text();\n        let rtnKatakana = '';\n        for (let char of str) {\n            const cKatakana = KeyTable.katakana[char];\n            if (cKatakana) {\n                rtnKatakana += cKatakana;\n            } else {\n                rtnKatakana += char; // 変換できなければ元の文字をそのまま連結\n            }\n        }\n        return rtnKatakana;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * keyeventがSentenceContainerから移動するかどうかを判定して前処理を行います(キーコードをincreace()して入力文字ができれば入力モードに移行します)\n     * @param {number} keycode 押下されたキーのキーコード\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    tryTransfer(keycode,bShift) {\n        this.increace(keycode,bShift);\n        if (this.hasChar()) {\n            this.addKeydownEventListener();\n            this.move();\n        }\n        return this;\n    }\n\n    /**\n     * 入力時のkeydownイベントリスナーを付加します\n     * @return {InputBuffer} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        this.container().removeKeydownEventListener();\n        this.convertContainer().removeKeydownEventListener();\n        super.addKeydownEventListener();\n        return this;\n    }\n\n    /**\n     * 入力時のkeydownイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     */\n    runKeydown(e,keycode) {\n        switch (keycode) {\n            case 8:\n                // backspace\n                this.decreace();\n                break;\n            case 13:\n                // enter\n                this.print();\n                break;\n            case 32:\n                // space\n                this.convert();\n                break;\n            case 118:\n                // F7\n                this.toKatakanaAll();\n                break;\n            default:\n                this.increace(keycode,e.shiftKey);\n                break;\n        }\n    }//}}}\n}//}}}\n\n\n/**\n * 漢字変換ビューを表すクラス。\n *     それぞれ一つの文節を担当し、複数の漢字変換候補を持ちます。\n *     また、内部には変換候補としてRowクラスのインスタンスを持ちます\n */\nexport class ConvertView extends AbstractHierarchy {\n    //{{{\n    // 文節番号は、ConvertViewのindex()と同じ\n\n    // constructor {{{\n    /**\n     * @param {object} data 変換候補を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     * [[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n     *\t</code>\n     *\t</pre>\n     */\n    constructor(data) {\n        super(ElemCreator.createConvertViewElement());\n        data[1].push(data[0]); // 末尾に明確にひらがなを入れる\n        for (let str of data[1]) {\n            const row = Row.createEmptyRow();\n            row.createPlainContent(str);\n            this.append(row);\n        }\n        this.removeClass('paragraph');\n        this.addClass('convert-view');\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 自分の属する漢字変換コンテナのインスタンスを新たに設定する、あるいは引数省略で現在属しているの漢字変換コンテナを取得します\n     * @param {ConvertContainer} [opt_newContainer] 新たに設定する漢字変換コンテナのインスタンス\n     * @return {ConvertView ConvertContainer} 自身のインスタンス(引数を渡した場合)、あるいは所属する漢字変換コンテナ(引数を省略した場合)\n     */\n    container(opt_newContainer) {\n        return this.parent(opt_newContainer);\n    }\n\n    /**\n     * 指定されたインデックスの変換候補を表すインスタンス、あるいは引数省略で変換候補インスタンスの配列を取得します\n     * @param {number} [opt_index] 取得する変換候補のインデックス\n     * @return {Row Row[]} 指定されたインデックスの変換候補インスタンス(引数を渡した場合)、あるいは変換候補インスタンスの配列(引数を省略した場合)\n     */\n    rows(opt_index) {\n        return this.children(opt_index);\n    }\n\n    /**\n     * 現在選択中の行を取得します\n     * @return {Row} 現在選択中の行のインスタンス。選択行がなければ候補最後のひらがな行のインスタンス\n     */\n    getSelect() {\n        for (let row of this.rows()) {\n            if (row.hasClass('select')) {\n                return row;\n            }\n        }\n        return this.lastChild(); // 選択行がなければひらがな行\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * この候補一覧が可視化されているかどうかを返します\n     * @return {boolean} 可視化されていればtrue、そうでなければfalse\n     */\n    isActive() {\n        return this.hasClass('active');\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * この候補一覧が担当する文節のひらがなを文字列で返します\n     * @return {string} 担当文節のひらがな\n     */\n    hiragana() {\n        return this.lastChild().text(); // 最終行は必ずひらがな\n    }\n\n    /**\n     * ひらがなでの文字数を返します\n     * @return {number} ひらがなでの文字数\n     */\n    kanaLength() {\n        return this.hiragana().length;\n    }\n\n    /**\n     * 担当する文節のインデックスを返します\n     * @return {number} 担当文節のインデックス(０始まり)\n     */\n    phraseNum() {\n        return this.index();\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * この漢字変換候補一覧を可視化します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    active() {\n        for (let view of this.container().views()) {\n            if (view.hasClass('active')) {\n                view.removeClass('active');\n            }\n        }\n        this.addClass('active');\n        return this;\n    }\n\n    /**\n     * 変換候補の選択をひとつ左に移動します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    selectLeft() {\n        const index = this.getSelect().index() + 1;\n        this.select(index);\n        return this;\n    }\n\n    /**\n     * 変換候補の選択をひとつ右に移動します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    selectRight() {\n        const index = this.getSelect().index() - 1;\n        this.select(index);\n        return this;\n    }\n\n    /**\n     * 指定されたインデックスの変換候補を選択します\n     * @param {number} index 選択する候補のインデックス\n     * @return {ConvertView} 自身のインスタンス\n     */\n    select(index) {\n        if (index < 0) {\n            index = 0;\n        }\n        if (index >= this.childLength()) {\n            index = this.childLength() - 1;\n        }\n\n        for (let row of this.rows()) {\n            if (row.hasClass('select')) {\n                row.removeClass('select');\n            }\n        }\n\n        const newRow = this.rows(index);\n        newRow.addClass('select');\n        this.container().inputBuffer().insertPhrase(this.phraseNum(),newRow.text());\n        return this;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * 自身の最後に変換候補を追加します\n     * @param {Row} row 追加する変換候補\n     * @return {ConvertView} 自身のインスタンス\n     */\n    append(row) {\n        // DOM\n        this.elem().appendChild(row.elem());\n        // ポインタ調整\n        // view\n        if (this.hasChild()) {\n            this.lastChild().next(row);\n            row.prev(this.lastChild());\n        }\n        // parent\n        row.parent(this);\n        this.pushChild(row);\n        return this;\n    }\n\n    /**\n     * 自身の直前に変換候補一覧を挿入します\n     * @param {ConvertView} view 挿入する変換候補一覧\n     * @return {ConvertView} 自身のインスタンス\n     */\n    before(view) {\n        // DOM\n        this.container().elem().insertBefore(view.elem(),this.elem());\n\n        // 参照調整\n        // oldPrev - view - this\n\n        // view\n        const oldPrev = this.prev();\n        if (oldPrev) {\n            oldPrev.next(view);\n        }\n        view.prev(oldPrev);\n        view.next(this);\n        this.prev(view);\n        // paretn\n        view.container(this.container());\n        const pos = this.index();\n        this.container().insertChild(pos,view);\n        return this;\n    }\n\n    /**\n     * 自身の直後に変換候補一覧を挿入します\n     * @param {ConvertView} view 挿入する変換候補一覧\n     * @return {ConvertView} 自身のインスタンス\n     */\n    after(view) {\n        // DOM\n        if (this.hasNextSibling()) {\n            this.container().elem().insertBefore(view.elem(),this.next().elem());\n        } else {\n            this.container().elem().appendChild(view.elem());\n        }\n\n        // 参照調整\n        // this - view - oldNext\n\n        // view\n        const oldNext = this.next();\n        this.next(view);\n        view.prev(this);\n        view.next(oldNext);\n        if (oldNext) {\n            oldNext.prev(view);\n        }\n        // parent\n        view.container(this.container());\n        const pos = this.index() + 1;\n        this.container().insertChild(pos,view);\n        return this;\n    }\n\n    /**\n     * 自身を削除します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    remove() {\n        // DOM\n        this.container().elem().removeChild(this.elem());\n\n        // 参照調整\n        // oldPrev - this - oldNext →　oldPrev - oldNext\n\n        // view\n        const oldPrev = this.prev();\n        const oldNext = this.next();\n        if (oldPrev) {\n            oldPrev.next(oldNext);\n        }\n        if (oldNext) {\n            oldNext.prev(oldPrev);\n        }\n        this.prev(null);\n        this.next(null);\n        // parent\n        this.container().deleteChild(this);\n        this.container(null);\n        return this;\n    }\n\n    /**\n     * 自身をviewと入れ替えます\n     * @param {ConvertView} view 入れ替える変換候補一覧\n     * @return {ConvertView} 自身のインスタンス\n     */\n    replace(view) {\n        this.before(view);\n        if (this.isActive()) {\n            view.active();\n        }\n        return this.remove();\n    }\n\n    /**\n     * 自身が担当する文節をカタカナに変換します\n     * @return {ConvertView} 自身のインスタンス\n     */\n    toKatakana() {\n        this.container().inputBuffer().insertPhrase(this.phraseNum(),this._getKatakana());\n        return this;\n    }\n\n    /**\n     * 自身が担当する文節のカタカナを文字列で取得します\n     * @return {string} カタカナに変換した場合の文字列\n     */\n    _getKatakana() {\n        const str = this.hiragana();\n        let rtnKatakana = '';\n        for (let char of str) {\n            const cKatakana = KeyTable.katakana[char];\n            if (cKatakana) {\n                rtnKatakana += cKatakana;\n            } else {\n                rtnKatakana += char; // 変換できなければ元の文字をそのまま連結\n            }\n        }\n        return rtnKatakana;\n    }//}}}\n}//}}}\n\n\n/**\n * 変換候補一覧を束ねる漢字変換コンテナを表すクラス\n */\nexport class ConvertContainer extends AbstractHierarchy {\n    //{{{\n    // constructor {{{\n    /**\n     * @param {InputBuffer} inputBuffer 入力元のインスタンス\n     */\n    constructor(inputBuffer) {\n        super(document.getElementById('convert_container'));\n        this._inputBuffer = inputBuffer;\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 入力元のインスタンスを取得します\n     * @return {InputBuffer} 入力元のインスタンス\n     */\n    inputBuffer() {\n        return this._inputBuffer;\n    }\n\n    /**\n     * 指定された変換候補一覧、あるいは引数省略で変換候補一覧の配列を取得します\n     * @param {number} [opt_index] 取得する候補一覧のインデックス\n     * @return {ConvertView ConvertView[]} 指定された候補一覧(引数を渡した場合)、あるいは候補一覧の配列(引数を省略した場合)\n     */\n    views(opt_index) {\n        return super.children(opt_index);\n    }\n\n    /**\n     * 現在アクティブになっている変換候補一覧のインスタンスを取得します\n     * @return {ConvertView} 現在アクティブな変換候補一覧のインスタンス。なければnull\n     */\n    activeView() {\n        for (let view of this.views()) {\n            if (view.isActive()) {\n                return view;\n            }\n        }\n        return null;\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * 漢字変換が行われているところかどうかを返します\n     * @return {boolean} 候補一覧がひとつでも内部にあればtrue、そうでなければfalse\n     */\n    isActive() {\n        return this.childLength() > 0;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * 表示位置をカーソル横に移動します\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    reposition() {\n        const x = this.cursorX();\n        const y = this.cursorY();\n        this.elem().style.top = y + 'px';\n        this.elem().style.left = (x - this.width()) + 'px';\n        return this;\n    }\n\n    /**\n     * カーソル位置のX座標を返します\n     * @return {number} カーソル位置のX座標\n     */\n    cursorX() {\n        return this.inputBuffer().cursorX();\n    }\n\n    /**\n     * カーソル位置のY座標を返します\n     * @return {number} カーソル位置のY座標\n     */\n    cursorY() {\n        return this.inputBuffer().cursorY();\n    }\n\n    /**\n     * 自身を表示します\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    show() {\n        this.elem().style.display = 'block';\n        return this;\n    }\n\n    /**\n     * 自身を非表示にします\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    hide() {\n        this.elem().style.display = 'none';\n        this.removeKeydownEventListener();\n        return this;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * カーソル位置から文字を挿入して、内部の変換候補一覧を破棄します\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    print() {\n        this.inputBuffer().print();\n        return this;\n    }\n\n    /**\n     * 内部に変換候補一覧のインスタンス群を構築します\n     * @param {object} data 文節分け及び変換候補を示すオブジェクト<br>\n     * <pre>\n     * <code>\n     *  // data形式例\n     * [[ひらがな,[漢字１,漢字２,漢字３]],[ひらがな２,[漢字４,漢字５]],[[ひらがな３,[漢字６,漢字７]]]]\n     * </code>\n     * </pre>\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    createViews(data) {\n        this.empty();\n        for (let phraseData of data) {\n            this.append(new ConvertView(phraseData));\n        }\n        return this;\n    }\n\n    /**\n     * 漢字変換を始めます(非同期通信)\n     * @param {string} str 変換する文字列\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    convert(str) {\n        Util.get('/tategaki-editor/Convert', function (json) {\n            this.createViews(json);\n            this.inputBuffer().setPhraseNum();\n            // すべて変換第一候補を選択する\n            for (let view of this.views()) {\n                view.select(0);\n            }\n            // 最初の文節を選択\n            this.inputBuffer().select(0);\n\n            this.reposition();\n            this.addKeydownEventListener();\n        }.bind(this), {\n            sentence: str\n        });\n        this.show();\n\n        return this;\n    }\n\n    /**\n     * 文節区切りをひとつ前にずらして変換し直します(非同期通信)\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    shiftUp() {\n        const activeView = this.activeView();\n\n        if (activeView.kanaLength() === 1) {\n            return this;\n        }\n\n        // 最終文節から\n        // 最後の一字を分離して、二文節を変換し直す\n        if (activeView.isLast()) {\n            const activeKana = activeView.hiragana();\n            const sendString = activeKana.slice(0, -1) + ',' + activeKana.slice(-1);\n            Util.get('/tategaki-editor/Convert', function (json) {\n                this.replace(activeView.phraseNum(),json);\n            }.bind(this), {\n                sentence: sendString\n            });\n            return this;\n        }\n\n        // 選択文字列から最後の一文字を取り除き、その次の文節の頭につなげてそれぞれを変換し直す\n        const activeKana = activeView.hiragana();\n        const nextView = activeView.next();\n        const nextKana = nextView.hiragana();\n        const sendString = activeKana.slice(0,-1) + ',' + activeKana.slice(-1) + nextKana;\n        Util.get('/tategaki-editor/Convert', function (json) {\n            const newFirst = new ConvertView(json[0]);\n            activeView.replace(newFirst);\n            newFirst.select(0);\n            const newSecond = new ConvertView(json[1]);\n            nextView.replace(newSecond);\n            newSecond.select(0);\n        }, {\n            sentence: sendString\n        });\n        return this;\n    }\n\n    /**\n     * 文節区切りをひとつ下にずらして変換し直します(非同期通信)\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    shiftDown() {\n        const activeView = this.activeView();\n        const nextView = activeView.next();\n\n        if (activeView.isLast()) {\n            return this;\n        }\n\n        // 次の文節の文字数が１文字だけなら融合して、１文節として変換する\n        if (nextView.kanaLength() === 1) {\n            const nextPhrase = this.inputBuffer().phrases(nextView.phraseNum())[0];\n            // 文節を区切られないよう、,を末尾に追加する\n            const sendString = activeView.hiragana() + nextView.hiragana() + ',';\n            Util.get('/tategaki-editor/Convert', function (json) {\n                const newView = new ConvertView(json[0]);\n                activeView.replace(newView);\n                nextView.remove();\n                nextPhrase.remove();\n                newView.select(0);\n                this.inputBuffer().setPhraseNum();\n            }.bind(this), {\n                sentence: sendString\n            });\n            return this;\n        }\n\n        // 次の文節が二文字以上\n        // 次の文節の１文字目を選択文節に移動して、それぞれを変換し直す\n        const activeKana = activeView.hiragana();\n        const nextKana = nextView.hiragana();\n        const sendString = activeKana + nextKana.slice(0,1) + ',' + nextKana.slice(1);\n        Util.get('/tategaki-editor/Convert', function (json) {\n            const newFirst = new ConvertView(json[0]);\n            activeView.replace(newFirst);\n            newFirst.select(0);\n            const newSecond = new ConvertView(json[1]);\n            nextView.replace(newSecond);\n            newSecond.select(0);\n        }, {\n            sentence: sendString\n        });\n        return this;\n    }\n\n    /**\n     * 入力中の文字が二文字以上あれば最後の１音のみ削除して選択文節を変換し直します(非同期通信)。\n     *     入力中の文字がひらがなにして１文字しかなければ全て破棄して入力を終了します\n     * @return {ConvertContainer} 自身のインスタンス\n     * @see ../WEB-INF/classes/doc/JapaneseConvertServlet.html\n     */\n    backSpace() {\n        const activeView = this.activeView();\n        // buffer文字がひらがなにして一文字しかない\n        // 文字を削除してinput終了\n        if (activeView.isOnlyChild() && activeView.kanaLength() === 1) {\n            this.empty();\n            this.inputBuffer().decreace();\n            return this;\n        }\n\n        // 文節がひらがなにして一文字しかない\n        // その文節を削除してひとつ前の文節を選択する\n        if (activeView.kanaLength() === 1) {\n            const phraseNum = activeView.phraseNum();\n            const phraseChar = this.inputBuffer().phrases(phraseNum)[0];\n            phraseChar.remove();\n            activeView.remove();\n            this.inputBuffer().setPhraseNum()\n                .select(phraseNum > 0 ? phraseNum - 1 : phraseNum); // 一つ前の文節がなければ、一つ次の文節\n            return this;\n        }\n\n        // 文節にひらがなにして二文字以上ある\n        // 最後の一字を削除して、その文節を変換し直す\n        const phraseNum = activeView.phraseNum();\n        const newString = activeView.hiragana().slice(0,-1) + ','; // 文節を区切られないよう、,を末尾に追加する\n        Util.get('/tategaki-editor/Convert', function (json) {\n            this.replace(phraseNum,json);\n        }.bind(this), {\n            sentence: newString\n        });\n        return this;\n    }\n\n    /**\n     * インデックスがnumの文節の変換候補一覧を、新たなdataで入れ替えます\n     * @param {number} num 入れ替える文節のインデックス\n     * @param {object} data 変換候補を表すオブジェクト<br>\n     * 例\n     * <pre>\n     * <code>\n     * [[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n     *\t</code>\n     *\t</pre>\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    replace(num,data) {\n        const oldView = this.views(num);\n        // 文節番号を振り直した後でないとview.select()できない(中でinsertPhrase()をしているため)ので、いったん新しいインスタンスを入れておく\n        const newViews = [];\n        // viewを入れ替え、bufferにはいったんひらがなを挿入する\n        for (let phraseData of data.entries()) {\n            // view\n            const newView = new ConvertView(phraseData[1]);\n            newViews.push(newView);\n            oldView.before(newView);\n            // input_buffer\n            // setPhraseNum()は、select()する前のviewではひらがなの長さを使って文節番号を割り振る。そのため、いったんひらがなをbufferに追加する\n            if (phraseData[0] === 0) { // ひとつめだけ入替えで、他はその後に追加していく\n                // 古いbuffer文字はここでなくなる\n                this.inputBuffer().insertPhrase(num,oldView.prev().hiragana());\n            } else {\n                // HACK:追加分の文字の順番がこの時点ではおかしくなるが、合計のひらがなの数は正しくなっているので、buffer.setPhraseNum()とnewView.select(0)で正しく文字が置き換わる\n                this.inputBuffer().insertPhraseAfter(num,oldView.prev().hiragana());\n            }\n        }\n        oldView.remove();\n\n        // 文節番号の振り直し\n        this.inputBuffer().setPhraseNum();\n        // 最初の候補で置き換える\n        for (let newView of newViews) {\n            newView.select(0);\n        }\n        if (oldView.isActive()) {\n            newViews[0].active();\n        }\n        return this;\n    }\n\n    /**\n     * 自身の最後に変換候補一覧を追加します\n     * @param {ConvertContainer} view 追加する変換候補一覧のインスタンス\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    append(view) {\n        this.elem().appendChild(view.elem());\n        if (this.hasChild()) {\n            this.lastChild().next(view);\n            view.prev(this.lastChild());\n        }\n        view.container(this);\n        this.pushChild(view);\n        return this;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * 漢字変換中のkeydownイベントリスナーを付加します。重ねがけは無効となります\n     * @return {ConvertContainer} 自身のインスタンス\n     */\n    addKeydownEventListener() {\n        this.inputBuffer().removeKeydownEventListener()\n            .container().removeKeydownEventListener();\n        super.addKeydownEventListener();\n        return this;\n    }\n\n    /**\n     * keydownイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     */\n    runKeydown(e,keycode) {\n        switch (keycode) {\n            case 8:\n                this.backSpace();\n                break;\n            case 13:\n                // Enter\n                this.print();\n                break;\n            case 32:\n            case 37:\n                // space\n                // Left\n                this.activeView().selectLeft();\n                break;\n            case 38:\n                // Up\n                if (e.shiftKey) {\n                    this.shiftUp();\n                } else {\n                    this.inputBuffer().selectPrev();\n                }\n                break;\n            case 39:\n                // Right\n                this.activeView().selectRight();\n                break;\n            case 40:\n                // Down\n                if (e.shiftKey) {\n                    this.shiftDown();\n                } else {\n                    this.inputBuffer().selectNext();\n                }\n                break;\n            case 118:\n                // F7\n                this.activeView().toKatakana();\n                break;\n            default:\n                break;\n        }\n    }//}}}\n}//}}}",
    "static": true,
    "longname": "js/input.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "InputChar",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~InputChar",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{InputChar}",
    "description": "入力文字を表すクラス",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "Char"
    ]
  },
  {
    "__docId__": 392,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#constructor",
    "access": null,
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文字を表すオブジェクト<br>\n例\n<pre>\n<code>\n{\n\t\"char\":\"あ\",\n\t\"decolation\":[\"decolation-color-blue\"]\n\t\"fontSize\": \"auto\"\n}\n</code>\n</pre>"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-1",
        "defaultRaw": -1,
        "name": "opt_phraseNum",
        "description": "文節のインデックス"
      }
    ]
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "isPhraseNum",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#isPhraseNum",
    "access": null,
    "description": "自身の文節番号がnumであるかどうかを返します",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "判定するインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の文節番号がnumであればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "isSelect",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#isSelect",
    "access": null,
    "description": "自身が選択されているかどうかを表します",
    "lineNumber": 49,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が選択されていればtrue、そうでなければfalse。漢字変換が一度もされていなければfalse"
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "phraseNum",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#phraseNum",
    "access": null,
    "description": "この文字の文節番号をopt_newNumに設定する、あるいは引数省略で現在の文節番号を取得します",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newNum",
        "description": "新たに設定する文節番号(０始まり)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputChar number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の文節のインデックス(引数を省略した場合)"
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "_phraseNum",
    "memberof": "js/input.js~InputChar",
    "static": false,
    "longname": "js/input.js~InputChar#_phraseNum",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "select",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#select",
    "access": null,
    "description": "この文字を選択状態にします",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "removeSelect",
    "memberof": "js/input.js~InputChar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputChar#removeSelect",
    "access": null,
    "description": "この文字を非選択状態にします",
    "lineNumber": 85,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 399,
    "kind": "class",
    "name": "InputBuffer",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~InputBuffer",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{InputBuffer}",
    "description": "入力された文字をいったん保持するバッファーを表すクラス。\n    内部の子にInputCharのインスタンス群を持ちます。\n    また、一度も漢字変換がされず文節番号がすべて-1の場合と、漢字変換が行われ文節が分けられている場合と２つの状態がある",
    "lineNumber": 97,
    "interface": false,
    "extends": [
      "Row"
    ]
  },
  {
    "__docId__": 400,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "自身の属する文章コンテナのインスタンス"
      }
    ]
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "_container",
    "memberof": "js/input.js~InputBuffer",
    "static": false,
    "longname": "js/input.js~InputBuffer#_container",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "_convertContainer",
    "memberof": "js/input.js~InputBuffer",
    "static": false,
    "longname": "js/input.js~InputBuffer#_convertContainer",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "container",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#container",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを取得します",
    "lineNumber": 115,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナ"
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "cursor",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursor",
    "access": null,
    "description": "カーソルのインスタンスを取得します",
    "lineNumber": 123,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "カーソルのインスタンス"
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "cursorChar",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursorChar",
    "access": null,
    "description": "カーソルのある文字のインスタンスを取得します",
    "lineNumber": 131,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "convertContainer",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#convertContainer",
    "access": null,
    "description": "漢字変換コンテナのインスタンスを取得します",
    "lineNumber": 139,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "漢字変換コンテナのインスタンス"
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "phrases",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#phrases",
    "access": null,
    "description": "指定された文節番号の入力文字インスタンスを配列にして返します",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "集める入力文字の文節番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputChar[]"
      ],
      "spread": false,
      "description": "指定された文節番号の入力文字インスタンスの配列"
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "selectPhrases",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectPhrases",
    "access": null,
    "description": "選択中の文節の入力文字インスタンスを返します",
    "lineNumber": 162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar[]"
      ],
      "spread": false,
      "description": "選択中の入力文字インスタンスの配列。選択されていなければ空の配列"
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "isDisplay",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#isDisplay",
    "access": null,
    "description": "自身が可視化されている(文字入力中)かどうかを返します",
    "lineNumber": 178,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が可視化されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "setPhraseNum",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#setPhraseNum",
    "access": null,
    "description": "各入力文字に文節番号をふります。変換候補一覧群を作成した後で使用してください",
    "lineNumber": 188,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "selectIndex",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectIndex",
    "access": null,
    "description": "選択されている文節のインデックスを返します",
    "lineNumber": 204,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "選択文節のインデックス。選択されていなければ-1"
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "width",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#width",
    "access": null,
    "description": "自身の幅を取得します。文章内のRowと異なり回転されていないため、css上の幅と一致します",
    "lineNumber": 219,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "height",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#height",
    "access": null,
    "description": "自身の高さを取得します。文章内のRowと異なり回転されていないため、css上の高さと一致します",
    "lineNumber": 227,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "newWidth",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#newWidth",
    "access": "private",
    "description": "",
    "lineNumber": 236,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された幅のピクセル数"
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "newHeight",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#newHeight",
    "access": "private",
    "description": "",
    "lineNumber": 256,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された高さのピクセル数"
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "cursorX",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursorX",
    "access": null,
    "description": "カーソル位置のX座標を返します",
    "lineNumber": 275,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のX座標"
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "cursorY",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#cursorY",
    "access": null,
    "description": "カーソル位置のY座標を返します",
    "lineNumber": 283,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のY座標"
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "resize",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#resize",
    "access": null,
    "description": "自身の高さや幅を内部の各入力文字に合わせて調整します",
    "lineNumber": 291,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "move",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#move",
    "access": null,
    "description": "自身の表示位置をカーソルに合わせます",
    "lineNumber": 302,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "show",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#show",
    "access": null,
    "description": "自身を表示します",
    "lineNumber": 312,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "hide",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#hide",
    "access": null,
    "description": "自身を非表示にします",
    "lineNumber": 321,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "selectNext",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectNext",
    "access": null,
    "description": "選択文節を次の文節に変更します。最後の文節から実行されれば、最初の文節が選択されます",
    "lineNumber": 333,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "selectPrev",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#selectPrev",
    "access": null,
    "description": "選択文節を前の文節に変更します。最初の文節から実行されれば、最後の文節が選択されます",
    "lineNumber": 341,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "select",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#select",
    "access": null,
    "description": "文節番号がindexの文字を選択します。引数が負になれば最後の文節を、最大の文節番号を越えれば最初の文節を選択します",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "選択する文節のインデックス。負の数なら最後の文節、範囲より大きな数なら最初の文節が選択される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "empty",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#empty",
    "access": null,
    "description": "自身を空にして、文字入力を終了します",
    "lineNumber": 376,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "increace",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#increace",
    "access": null,
    "description": "keycodeを追加した場合の新たな文字列で入力文字を置き換えます",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "追加するキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "decreace",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#decreace",
    "access": null,
    "description": "bufferの最後の文字を削除します。内部に文字がなくなれば入力を終了します",
    "lineNumber": 407,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "削除した入力文字のインスタンス"
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "update",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#update",
    "access": null,
    "description": "内部の入力文字をstrで置き換えます",
    "lineNumber": 426,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "置き換える文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "print",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#print",
    "access": null,
    "description": "カーソル位置に文字を挿入し、後処理を行って入力状態を終了します",
    "lineNumber": 439,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "toKatakanaAll",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#toKatakanaAll",
    "access": null,
    "description": "入力文字をすべてカタカナに置き換えます",
    "lineNumber": 451,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "convert",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#convert",
    "access": null,
    "description": "入力文字すべてを漢字変換します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 461,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "insertPhrase",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#insertPhrase",
    "access": null,
    "description": "インデックスがnumである文節の入力文字をstrで入れ替えます",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "入れ替える文節のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "入れ替える文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "insertPhraseAfter",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#insertPhraseAfter",
    "access": null,
    "description": "インデックスがnumである文節の後ろにstrを追加します。追加した文字の文節番号は負の値になります",
    "lineNumber": 499,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "挿入位置の指定"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "挿入する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "_newString",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#_newString",
    "access": null,
    "description": "現在の文字列にkeycodeを加えて作られる文字列を取得します。\n    未定義のkeycodeの場合はundefinedが文字列内に含まれますので注意してください",
    "lineNumber": 522,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "追加するキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "keycodeを追加して作られた文字列"
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "_getKatakana",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#_getKatakana",
    "access": null,
    "description": "現在の入力文字をカタカナに変換した場合の文字列を返します。\n    変換できない文字があれば変換せずに元の文字をそのまま連結します",
    "lineNumber": 536,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "カタカナに置き換えた文字列"
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "tryTransfer",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#tryTransfer",
    "access": null,
    "description": "keyeventがSentenceContainerから移動するかどうかを判定して前処理を行います(キーコードをincreace()して入力文字ができれば入力モードに移行します)",
    "lineNumber": 558,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#addKeydownEventListener",
    "access": null,
    "description": "入力時のkeydownイベントリスナーを付加します",
    "lineNumber": 571,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/input.js~InputBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~InputBuffer#runKeydown",
    "access": null,
    "description": "入力時のkeydownイベントの実行内容です",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ]
  },
  {
    "__docId__": 439,
    "kind": "class",
    "name": "ConvertView",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~ConvertView",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{ConvertView}",
    "description": "漢字変換ビューを表すクラス。\n    それぞれ一つの文節を担当し、複数の漢字変換候補を持ちます。\n    また、内部には変換候補としてRowクラスのインスタンスを持ちます",
    "lineNumber": 614,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 440,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#constructor",
    "access": null,
    "description": "",
    "lineNumber": 628,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "変換候補を表すオブジェクト<br>\n例\n<pre>\n<code>\n[[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n</code>\n</pre>"
      }
    ]
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "container",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#container",
    "access": null,
    "description": "自分の属する漢字変換コンテナのインスタンスを新たに設定する、あるいは引数省略で現在属しているの漢字変換コンテナを取得します",
    "lineNumber": 647,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertContainer"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newContainer",
        "description": "新たに設定する漢字変換コンテナのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは所属する漢字変換コンテナ(引数を省略した場合)"
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "rows",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#rows",
    "access": null,
    "description": "指定されたインデックスの変換候補を表すインスタンス、あるいは引数省略で変換候補インスタンスの配列を取得します",
    "lineNumber": 656,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する変換候補のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Row[]"
      ],
      "spread": false,
      "description": "指定されたインデックスの変換候補インスタンス(引数を渡した場合)、あるいは変換候補インスタンスの配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "getSelect",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#getSelect",
    "access": null,
    "description": "現在選択中の行を取得します",
    "lineNumber": 664,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "現在選択中の行のインスタンス。選択行がなければ候補最後のひらがな行のインスタンス"
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "isActive",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#isActive",
    "access": null,
    "description": "この候補一覧が可視化されているかどうかを返します",
    "lineNumber": 679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "可視化されていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "hiragana",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#hiragana",
    "access": null,
    "description": "この候補一覧が担当する文節のひらがなを文字列で返します",
    "lineNumber": 689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "担当文節のひらがな"
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "kanaLength",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#kanaLength",
    "access": null,
    "description": "ひらがなでの文字数を返します",
    "lineNumber": 697,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ひらがなでの文字数"
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "phraseNum",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#phraseNum",
    "access": null,
    "description": "担当する文節のインデックスを返します",
    "lineNumber": 705,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "担当文節のインデックス(０始まり)"
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "active",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#active",
    "access": null,
    "description": "この漢字変換候補一覧を可視化します",
    "lineNumber": 715,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "selectLeft",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#selectLeft",
    "access": null,
    "description": "変換候補の選択をひとつ左に移動します",
    "lineNumber": 729,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "selectRight",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#selectRight",
    "access": null,
    "description": "変換候補の選択をひとつ右に移動します",
    "lineNumber": 739,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "select",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#select",
    "access": null,
    "description": "指定されたインデックスの変換候補を選択します",
    "lineNumber": 750,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "選択する候補のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "append",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#append",
    "access": null,
    "description": "自身の最後に変換候補を追加します",
    "lineNumber": 777,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "追加する変換候補"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "before",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#before",
    "access": null,
    "description": "自身の直前に変換候補一覧を挿入します",
    "lineNumber": 797,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "挿入する変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "after",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#after",
    "access": null,
    "description": "自身の直後に変換候補一覧を挿入します",
    "lineNumber": 824,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "挿入する変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "remove",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#remove",
    "access": null,
    "description": "自身を削除します",
    "lineNumber": 854,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "replace",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#replace",
    "access": null,
    "description": "自身をviewと入れ替えます",
    "lineNumber": 883,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "入れ替える変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "toKatakana",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#toKatakana",
    "access": null,
    "description": "自身が担当する文節をカタカナに変換します",
    "lineNumber": 895,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "_getKatakana",
    "memberof": "js/input.js~ConvertView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertView#_getKatakana",
    "access": null,
    "description": "自身が担当する文節のカタカナを文字列で取得します",
    "lineNumber": 904,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "カタカナに変換した場合の文字列"
    }
  },
  {
    "__docId__": 459,
    "kind": "class",
    "name": "ConvertContainer",
    "memberof": "js/input.js",
    "static": true,
    "longname": "js/input.js~ConvertContainer",
    "access": null,
    "export": true,
    "importPath": "./js/input.js",
    "importStyle": "{ConvertContainer}",
    "description": "変換候補一覧を束ねる漢字変換コンテナを表すクラス",
    "lineNumber": 923,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 460,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 929,
    "params": [
      {
        "nullable": null,
        "types": [
          "InputBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "inputBuffer",
        "description": "入力元のインスタンス"
      }
    ]
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "_inputBuffer",
    "memberof": "js/input.js~ConvertContainer",
    "static": false,
    "longname": "js/input.js~ConvertContainer#_inputBuffer",
    "access": null,
    "description": null,
    "lineNumber": 931,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "inputBuffer",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#inputBuffer",
    "access": null,
    "description": "入力元のインスタンスを取得します",
    "lineNumber": 940,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "入力元のインスタンス"
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "views",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#views",
    "access": null,
    "description": "指定された変換候補一覧、あるいは引数省略で変換候補一覧の配列を取得します",
    "lineNumber": 949,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する候補一覧のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView ConvertView[]"
      ],
      "spread": false,
      "description": "指定された候補一覧(引数を渡した場合)、あるいは候補一覧の配列(引数を省略した場合)"
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "activeView",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#activeView",
    "access": null,
    "description": "現在アクティブになっている変換候補一覧のインスタンスを取得します",
    "lineNumber": 957,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "現在アクティブな変換候補一覧のインスタンス。なければnull"
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "isActive",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#isActive",
    "access": null,
    "description": "漢字変換が行われているところかどうかを返します",
    "lineNumber": 972,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "候補一覧がひとつでも内部にあればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "reposition",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#reposition",
    "access": null,
    "description": "表示位置をカーソル横に移動します",
    "lineNumber": 982,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "cursorX",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#cursorX",
    "access": null,
    "description": "カーソル位置のX座標を返します",
    "lineNumber": 994,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のX座標"
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "cursorY",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#cursorY",
    "access": null,
    "description": "カーソル位置のY座標を返します",
    "lineNumber": 1002,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のY座標"
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "show",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#show",
    "access": null,
    "description": "自身を表示します",
    "lineNumber": 1010,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "hide",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#hide",
    "access": null,
    "description": "自身を非表示にします",
    "lineNumber": 1019,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "print",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#print",
    "access": null,
    "description": "カーソル位置から文字を挿入して、内部の変換候補一覧を破棄します",
    "lineNumber": 1031,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "createViews",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#createViews",
    "access": null,
    "description": "内部に変換候補一覧のインスタンス群を構築します",
    "lineNumber": 1047,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文節分け及び変換候補を示すオブジェクト<br>\n<pre>\n<code>\n // data形式例\n[[ひらがな,[漢字１,漢字２,漢字３]],[ひらがな２,[漢字４,漢字５]],[[ひらがな３,[漢字６,漢字７]]]]\n</code>\n</pre>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "convert",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#convert",
    "access": null,
    "description": "漢字変換を始めます(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1061,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "変換する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "shiftUp",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#shiftUp",
    "access": null,
    "description": "文節区切りをひとつ前にずらして変換し直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1087,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "shiftDown",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#shiftDown",
    "access": null,
    "description": "文節区切りをひとつ下にずらして変換し直します(非同期通信)",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1130,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "backSpace",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#backSpace",
    "access": null,
    "description": "入力中の文字が二文字以上あれば最後の１音のみ削除して選択文節を変換し直します(非同期通信)。\n    入力中の文字がひらがなにして１文字しかなければ全て破棄して入力を終了します",
    "see": [
      "../WEB-INF/classes/doc/JapaneseConvertServlet.html"
    ],
    "lineNumber": 1180,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "replace",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#replace",
    "access": null,
    "description": "インデックスがnumの文節の変換候補一覧を、新たなdataで入れ替えます",
    "lineNumber": 1226,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "入れ替える文節のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "変換候補を表すオブジェクト<br>\n例\n<pre>\n<code>\n[[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n</code>\n</pre>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "append",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#append",
    "access": null,
    "description": "自身の最後に変換候補一覧を追加します",
    "lineNumber": 1265,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "追加する変換候補一覧のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "addKeydownEventListener",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#addKeydownEventListener",
    "access": null,
    "description": "漢字変換中のkeydownイベントリスナーを付加します。重ねがけは無効となります",
    "lineNumber": 1282,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "runKeydown",
    "memberof": "js/input.js~ConvertContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/input.js~ConvertContainer#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容です",
    "lineNumber": 1294,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ]
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "js/other-classes.js",
    "content": "'use strict';\n/* global ColorDoMemory, BoldDoMemory, ItalicDoMemory, ElemCreator, PrintDoMemory, Char, DeleteDoMemory, LineBreakDoMemory, getSelection */  // jshint ignore:line\n\n/**\n * メニューバーを担当するクラス\n *     メニューバー上のボタンによるイベントを一括して請け負います\n */\nexport class Menu {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 対応する文章コンテナ\n     */\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._fontSizeInputElem = document.getElementById('fontsize_input');\n        this._confStrLenElem = document.getElementById('conf_str_len');\n        this._confRowLenElem = document.getElementById('conf_row_len');\n        this.addEventListeners();\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * このMenuが対応する文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} SentenceContainerのインスタンス\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * 設定モーダルの文字数inputフォームのDOM要素を返します\n     * @return {Element} 文字数設定inputフォームのDOM要素\n     */\n    confStrLenElem() {\n        return this._confStrLenElem;\n    }\n\n    /**\n     * 設定モーダルの行数inputフォームのDOM要素を返します\n     * @return {Element} 行数設定inputフォームのDOM要素\n     */\n    confRowLenElem() {\n        return this._confRowLenElem;\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * フォントサイズinputフォームに値を設定する、あるいは引数省略で現在のinputフォームの値を返します\n     * @param {number string} [opt_newSize] inputに設定する値(数値か、文字列の'auto')\n     * @return {Menu number string} 自身のインスタンス(引数を渡した場合)、\n     *     あるいは現在のinputフォームの値(引数を省略した場合。'auto'の場合は文字列で返す)\n     */\n    fontSizeInput(opt_newSize) {\n        if (opt_newSize === undefined) {\n            return this._fontSizeInputElem.value === 'auto' ?\n                'auto' : parseInt(this._fontSizeInputElem.value);\n        }\n\n        this._fontSizeInputElem.value = opt_newSize;\n        return this;\n    }\n\n    /**\n     * 現在アクティブになっている文字装飾のクラスを配列にします\n     * @return {string[]} 現在アクティブになっている文字装飾のクラスの配列\n     */\n    charDecolations() {\n        const ret = [];\n        if (this.boldButton()) {\n            ret.push('decolation-font-bold');\n        }\n        if (this.italicButton()) {\n            ret.push('decolation-font-italic');\n        }\n        if (this.colorButton() !== 'black') {\n            ret.push('decolation-color-'+ this.colorButton());\n        }\n        return ret;\n    }\n\n    /**\n     * 現在の設定情報を表すオブジェクトを作成します\n     * <pre>\n     * {\n     * \t\"strLen\": \"%d\",\n     * \t\"rowLen\" : \"%d\"\n     * }\n     * </pre>\n     * @return {object} 現在の設定情報を表すオブジェクト\n     */\n    configueData() {\n        const ret = {};\n        ret.strLen = this.confStrLenElem().value;\n        ret.rowLen = this.confRowLenElem().value;\n        return ret;\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * 文字色ボタンに色を付けます\n     *     引数を省略すると現在の色を取得します\n     * @param {string} [opt_color] 文字色ボタンにつける色の名前\n     * @return {Menu string} 自身のインスタンス(引数を渡した場合) 現在の文字色ボタンに付いている色の名前(引数を省略した場合)\n     */\n    colorButton(opt_color) {\n        const eColorButton = document.getElementById('color_btn');\n        if(opt_color) {\n            const oldColor = eColorButton.className.match(/select-\\S+/);\n            const newColor = opt_color;\n            if (oldColor) {\n                eColorButton.classList.remove(oldColor[0]);\n            }\n            if (newColor === 'black') {\n                return this;\n            }\n            eColorButton.classList.add('select-'+ newColor);\n            return this;\n        }\n        if (opt_color === undefined) {\n            const color = eColorButton.className.match(/select-(\\S+)/);\n            return color ? color[1] : 'black';\n        }\n    }\n\n    /**\n     * 選択範囲の文字色を変えます\n     * @param {string} color 新しい文字色\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    addColor(color, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new ColorDoMemory(chars, color));\n        }\n        for (let char of chars) {\n            char.color(color);\n        }\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 太字ボタンのオンオフを切り替えます 引数省略で、現在の太字ボタンのオンオフをbool値で返します\n     * @param {boolean} [opt_bl] trueで太字ボタンをオンにする。falseでオフにする\n     * @return {Menu boolean} 自身のインスタンス(引数を渡した場合) 現在の太字ボタンの状態(引数省略の場合)\n     */\n    boldButton(opt_bl) {\n        const eButton = document.getElementById('btn-bold');\n        if (opt_bl === undefined) {\n            return eButton.classList.contains('active');\n        }\n\n        if (opt_bl) {\n            eButton.classList.add('active');\n        } else {\n            eButton.classList.remove('active');\n        }\n        return this;\n    }\n\n    /**\n     * 選択範囲を太字にします。または太字を外します\n     * @param {boolean} bl trueで太字にする。falseで外す\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    bold(bl, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new BoldDoMemory(chars, bl));\n        }\n        for (let char of chars) {\n            char.bold(bl);\n        }\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 斜体ボタンのオンオフを切り替えます 引数省略で、現在の斜体ボタンのオンオフをbool値で返します\n     * @param {boolean} [opt_bl] trueで太字ボタンをオンにする。falseでオフにする\n     * @return {Menu boolean} 自身のインスタンス(引数を渡した場合) 現在の斜体ボタンの状態(引数省略の場合)\n     */\n    italicButton(opt_bl) {\n        const eButton = document.getElementById('btn-italic');\n        if (opt_bl === undefined) {\n            return eButton.classList.contains('active');\n        }\n\n        if (opt_bl) {\n            eButton.classList.add('active');\n        } else {\n            eButton.classList.remove('active');\n        }\n        return this;\n    }\n\n    /**\n     * 選択範囲を斜体にします。または太字を外します\n     * @param {boolean} bl trueで斜体にする。falseで外す\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    italic(bl, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new ItalicDoMemory(chars, bl));\n        }\n        for (let char of chars) {\n            char.italic(bl);\n        }\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 選択範囲のフォントサイズを変更します\n     * @param {number} size 新しいフォントサイズ\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Menu} 自身のインスタンス\n     */\n    fontSize(size, useUndo) {\n        const chars = this.sentenceContainer().selectChars(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(chars, size);\n        }\n        for (let char of chars) {\n            char.fontSize(size);\n        }\n        this.sentenceContainer()\n            .cordinate().checkKinsoku().changeDisplay().breakPage().printInfo().isChanged(true);\n        return this;\n    }\n\n    // 'center','left','right'\n    /**\n     * カーソルのある段落のtext-alignを変更します\n     * @param {string} align 'center','left','right'のいずれか\n     * @return {Menu} 自身のインスタンス\n     */\n    align(align) {\n        const cursorParagraph = this.sentenceContainer().cursor().getParagraph();\n        cursorParagraph.align(align);\n        this.sentenceContainer().isChanged(true);\n        return this;\n    }//}}}\n\n    // イベントリスナー//{{{\n    /**\n     * メニューの各コンポーネントにイベントリスナーを付加します\n     *     newボタン、saveボタン、deleteボタン、開くボタン、モーダルの開閉、\n     *     文字色ボタン、文字色ドロップダウン、太字ボタン、斜体ボタン、\n     * \t text-alignボタン、フォントサイズのドロップダウン、設定モーダル\n     * @return {Menu} 自身のインスタンス\n     */\n    addEventListeners() {\n        // メニューボタン\n        document.getElementById('menu_new').addEventListener('click', function (e) {\n            this.sentenceContainer().newFile();\n        }.bind(this), false);\n        document.getElementById('menu_save').addEventListener('click', function (e) {\n            this.sentenceContainer().saveFile();\n        }.bind(this), false);\n        document.getElementById('menu_delete').addEventListener('click', function (e) {\n            this.sentenceContainer().fileList().currentFile().delete();\n        }.bind(this), false);\n        document.getElementById('modal_fileopen_link').addEventListener('click', function (e) {\n            const filterInputElem = this.sentenceContainer().fileList().filterInputElem();\n            // モーダルが開くのはブートストラップで行われるので、その前処理だけを行う\n            filterInputElem.value = '';\n            filterInputElem.focus();\n            this.sentenceContainer().fileList().resetList();\n        }.bind(this), false);\n\n        // モーダル開閉\n        $('div.modal').on('shown.bs.modal', function (e) {\n            this.sentenceContainer().removeKeydownEventListener();\n            if (this.sentenceContainer().inputBuffer().isDisplay()) {\n                this.sentenceContainer().inputBuffer().empty().hide();\n            }\n        }.bind(this));\n        $('div.modal').on('hidden.bs.modal', function (e) {\n            if (this.sentenceContainer().command().isActive()) { return; }\n            this.sentenceContainer().addKeydownEventListener();\n        }.bind(this));\n\n        // パレットボタン\n        // 文字色ボタン\n        document.getElementById('color_btn').addEventListener('click', function (e) {\n            this.addColor(this.colorButton(), true);\n        }.bind(this), false);\n        // 文字色ドロップダウン\n        this.addColorSelectClickEvent();\n\n        // bold italic\n        document.getElementById('btn-bold').addEventListener('click', function (e) {\n            const eBtn = document.getElementById('btn-bold');\n            eBtn.classList.toggle('active');\n            this.bold(this.boldButton(), true);\n        }.bind(this), false);\n        document.getElementById('btn-italic').addEventListener('click', function (e) {\n            const eBtn = document.getElementById('btn-italic');\n            eBtn.classList.toggle('active');\n            this.italic(this.italicButton(), true);\n        }.bind(this), false);\n\n        // align\n        this.addAlignClickEvent();\n\n        // font size\n        this.addFontSizeEvnet();\n\n        // configue modal\n        this.addConfigueEvent();\n\n        return this;\n    }\n\n    /**\n     * 文字色(ドロップダウンの方)をクリックするとボタンの色と選択範囲の文字色が変わるイベントを付加します\n     *     querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱う色を増やすことが可能\n     * @return {Menu} 自身のインスタンス\n     */\n    addColorSelectClickEvent() {\n        const eSelectColors = document.querySelectorAll('#color_dropdown a');\n        for (let i = 0, eSelColor; (eSelColor = eSelectColors[i]); i++) {\n            const color = eSelColor.dataset.color;\n            eSelColor.addEventListener('click',\n                this._addColorCallback(eSelColor, color).bind(this), false);\n        }\n        return this;\n    }\n\n    // ループ内で使われるため別に定義する(関数外の変数を内部で使わないようにするため)\n    // 即時関数に入れなければ、eSelColorとcolorの中身がクロージャ的に変化して\n    // すべての場合で最後の値が利用されてしまうおそれがある\n    _addColorCallback(eSelColor, color) {\n        return function (e) {\n            this.colorButton(color);\n            this.addColor(color, true);\n        };\n    }\n\n    /**\n     * text-alignボタンをクリックするとカーソルのある段落のtext-alignが変更されるイベントを付加します\n     * @return {Menu} 自身のインスタンス\n     */\n    addAlignClickEvent() {\n        const eAligns = document.querySelectorAll('#align_btns button');\n        for (let i = 0, eAlign; (eAlign = eAligns[i]); i++) {\n            const align = eAlign.id.match(/text_btn_(\\S+)/);\n            eAlign.addEventListener('click', this._addAlignCallback(align).bind(this), false);\n        }\n        return this;\n    }\n\n    _addAlignCallback(align) {\n        return function (e) {\n            this.align(align);\n        };\n    }\n\n    // font size\n\n    /**\n     * フォントサイズのドロップダウンをクリックするとフォントサイズのinputの数値が変更され、選択範囲の文字のフォントサイズが変更されるイベントを付加します\n     *     querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、\n     *     htmlとcssのみ変更することで扱うフォントサイズを増やすことが可能になります\n     * @return {Menu} 自身のインスタンス\n     */\n    addFontSizeEvnet() {\n        const eFontSizeDropdowns = document.querySelectorAll('#fontsize_dropdown a');\n        for (let i = 0,eFontSize; (eFontSize = eFontSizeDropdowns[i]); i++) {\n            eFontSize.addEventListener('click', this._addFontCallback().bind(this), false);\n        }\n        return this;\n    }\n\n    _addFontCallback() {\n        return function (e) {\n            const size = parseInt(e.target.dataset.size) || 'auto';\n            this.fontSizeInput(size);\n            this.fontSize(size);\n        };\n    }\n\n    /**\n     * 設定モーダルのinputフォームとsaveボタン、resetボタンにイベントを付加します\n     * @return {Menu} 自身のインスタンス\n     */\n    addConfigueEvent() {\n        document.getElementById('btn_conf_save').addEventListener('click', function (e) {\n            const strLen = parseInt(this.confStrLenElem().value || 18);\n            const rowLen = parseInt(this.confRowLenElem().value || 40);\n            this.sentenceContainer().strLenOnRow(strLen).rowLenOnPage(rowLen);\n            $('#configue_modal').modal('hide');\n        }.bind(this),false);\n\n        // html上でtype=\"reset\"にすると、元に戻すというよりinputを空にしてしまう\n        document.getElementById('btn_conf_reset').addEventListener('click', function (e) {\n            this.confStrLenElem().value = this.sentenceContainer().strLenOnRow();\n            this.confRowLenElem().value = this.sentenceContainer().rowLenOnPage();\n        }.bind(this),false);\n\n        // inputからフォーカスから外れた際に、不正な文字が入力されていたら元に戻す\n        this.confStrLenElem().addEventListener('focusout', function (e) {\n            if (!/^[0-9]+$/.test(this.confStrLenElem().value)) {\n                this.confStrLenElem().value = this.sentenceContainer().strLenOnRow();\n            }\n        }.bind(this),false);\n\n        this.confRowLenElem().addEventListener('focusout', function (e) {\n            if (!/^[0-9]+$/.test(this.confRowLenElem().value)) {\n                this.confRowLenElem().value = this.sentenceContainer().rowLenOnPage();\n            }\n        }.bind(this),false);\n\n        return this;\n    }//}}}\n} //}}}\n\n\n/**\n * コマンドラインを表すクラス\n *     コマンド操作を一括して請け負います\n */\nexport class CommandLine {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 対応する文章コンテナ\n     */\n    constructor(sentenceContainer) {\n        this._elem = document.getElementById('command');\n        this._sentenceContainer = sentenceContainer;\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 自身のHTML要素を返します\n     * @return {Element} 自身のHTML要素\n     */\n    elem() {\n        return this._elem;\n    }\n\n    /**\n     * 対応する文章コンテナの参照を返します\n     * @return {SentenceContainer} 対応する文章コンテナ\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * 操作するファイルリストの参照を返します\n     * @return {FileList} ファイルリストのインスタンス\n     */\n    fileList() {\n        return this.sentenceContainer().fileList();\n    }//}}}\n\n    // --判定 {{{\n\n    /**\n     * コマンドラインがアクティブかどうかを返します\n     * @return {boolean} true=アクティブ、false=アクティブではない\n     */\n    isActive() {\n        return this.elem().classList.contains('active');\n    }//}}}\n\n    // --Style {{{\n\n    /**\n     * コマンドラインをアクティブにします\n     * @return {CommandLine} 自身のインスタンス\n     */\n    active() {\n        this.elem().classList.add('active');\n        return this;\n    }\n\n    /**\n     * コマンドラインを非アクティブにしまる\n     * @return {CommandLine} 自身のインスタンス\n     */\n    unActive() {\n        this.elem().classList.remove('active');\n        return this;\n    }\n\n    /**\n     * コマンドラインにフォーカスを与えます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    focus() {\n        this.elem().focus();\n        return this;\n    }\n\n    /**\n     * ファイルリストのモーダルをコマンドライン用に開きます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    displayFileModal() {\n        this.fileList().$modal().addClass('command-modal').modal();\n        // モーダルウィンドウ表示時の半透明背景を見えなくする\n        $('.modal-backdrop.fade.in').addClass('none_modal-backdrop');\n        return this;\n    }\n\n    /**\n     * コマンドライン用に開いたモーダルを閉じます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    hideFileModal() {\n        if (this.fileList().isOpen()) {\n            // あらかじめbootstrapより先回りしてstyle適用で非表示にしておかなければ、消える前に一瞬中央表示になってしまう\n            this.fileList().$modal()\n                .attr('style','display: none;')\n                .removeClass('command-modal')\n                .modal('hide');\n        }\n        this.fileList().resetList();\n\n        return this;\n    }//}}}\n\n    // --DOM {{{\n\n    /**\n     * コマンドラインに値を設定します\n     * @param {string} text コマンドラインに設定する値\n     * @return {CommandLine} 自身のインスタンス\n     */\n    val(text) {\n        if (text === undefined) {\n            return this.elem().value;\n        } else {\n            this.elem().value = text;\n            return this;\n        }\n    }\n\n    /**\n     * コマンドモードを始めます\n     * @return {CommandLine} 自身のインスタンス\n     */\n    start() {\n        this.active();\n        this.sentenceContainer().removeKeydownEventListener();\n        this.focus().val(':');\n        this.addKeyupEventListener().addFocusoutEventListener();\n        return this;\n    }\n\n    /**\n     * コマンドモードを終了します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    stop() {\n        this.unActive();\n        this.removeKeyupEventListener().removeFocusoutEventListener();\n        this.sentenceContainer().addKeydownEventListener();\n        this.hideFileModal();\n        return this;\n    }//}}}\n\n    // --イベント {{{\n\n    /**\n     * コマンドのinputフォームにkeyupイベントを付加します。重ねがけは無効となります\n     * @return {CommandLine} 自身のインスタンス\n     */\n    addKeyupEventListener() {\n        if (this._keyupArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._keyupArg = this.onKeyup.bind(this);\n        document.addEventListener('keyup',this._keyupArg);\n        return this;\n    }\n\n    /**\n     * コマンドのinputフォームへのkeyupイベントを除去します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    removeKeyupEventListener() {\n        if (!this._keyupArg) {\n            return this;\n        }\n\n        document.removeEventListener('keyup', this._keyupArg);\n        this._keyupArg = null;\n        return this;\n    }\n\n    /**\n     * @private\n     * keyupイベントの前処理を行い、イベントを実行します\n     */\n    onKeyup(e) {\n        let keycode;\n        if (document.all) {\n            // IE\n            keycode = e.keyCode;\n        } else {\n            // IE以外\n            keycode = e.which;\n        }\n\n        if (keycode === 123) { return; } // F12のみブラウザショートカットキー\n        this.runKeyup(e,keycode);\n        // デフォルトの動作を無効化する\n        e.preventDefault();\n    }\n\n    /**\n     * コマンドのkeyupイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     * @param {number} keycode 押下されたキーのキーコード\n     */\n    runKeyup(e, keycode) {\n        if (keycode === 13) {\n            // enter\n            this.runCommand();\n            this.stop();\n            // 親要素へのイベントの伝播(バブリング)を止める。そうしなければ先にaddeventlistenerをしてしまっているので、documentにまでエンターキーが渡ってしまい改行されてしまう。\n            e.stopPropagation();\n        } else if (keycode === 27 || this.val() === '') {\n            // Esc\n            // あるいは全文字削除\n            this.stop();\n            e.stopPropagation();\n        } else {\n            // :eなどの後に途中まで引数を打てばファイルの検索ダイアログが出るようにする\n            // 全角スペースも区切りとして有効。ただし、半角スペースとの混在は現状不可\n            const command =\n                this.val().split(' ').length > 1 ? this.val().split(' ') : this.val().split('　');\n\n            switch (command[0]) {\n                case ':e':\n                case ':o':\n                case ':open':\n                case ':mv':\n                case ':delete':\n                case ':del':\n                case ':d':\n                case ':deldir':\n                case ':え':\n                case ':お':\n                case ':おぺｎ':\n                case ':ｍｖ':\n                case ':でぇて':\n                case ':でｌ':\n                case ':ｄ':\n                    if (keycode !== 8 && command[1] && !($('body').hasClass('modal-open'))) {\n                        // モーダルウィンドウを表示する\n                        this.displayFileModal();\n                        this.fileList().filter(command[1]);\n                    } else if (keycode === 8 && !(command[1])) {\n                        // BSを押した結果、引数がなくなった\n                        this.hideFileModal();\n                    } else if (command[1] && command[2]) {\n                        // 引数ふたつ目\n                        this.fileList().filter(command[2]);\n                    } else if (command[1]) {\n                        // 引数ひとつ\n                        this.fileList().filter(command[1]);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        e.preventDefault();\n    }\n\n    /**\n     * コマンドラインからフォーカスが外れた際のイベントを付加します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    addFocusoutEventListener() {\n        if (this._focusoutArg) {\n            return this;\n        }\n\n        // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n        this._focusoutArg = this.onFocusout.bind(this);\n        document.addEventListener('focusout',this._focusoutArg);\n        return this;\n    }\n\n    /**\n     * コマンドラインからフォーカスが外れた際のイベントを除去します\n     * @return {CommandLine} 自身のインスタンス\n     */\n    removeFocusoutEventListener() {\n        if (!this._focusoutArg) {\n            return this;\n        }\n\n        document.removeEventListener('focusout',this._focusoutArg);\n        this._focusoutArg = null;\n        return this;\n    }\n\n    /**\n     * コマンドラインからフォーカスが外れた際のイベントの実行内容です\n     * @param {Event} e イベントオブジェクト\n     */\n    onFocusout(e) {\n        this.stop();\n    }\n\n    /**\n     * コマンドの実行内容です\n     */\n    runCommand() {\n        // 半角スペースで区切られていないようなら、全角スペースの区切りでも可\n        const command =\n            this.val().split(' ').length > 1 ? this.val().split(' ') : this.val().split('　');\n\n        switch (command[0]) {\n            case ':w':\n            case ':save':\n            case ':s':\n            case ': ｗ':\n            case ':さヴぇ':\n            case ':ｓ':\n                if (command[1]) {\n                    this.sentenceContainer().fileId(-1).filename(command[1]).saveFile();\n                } else {\n                    this.sentenceContainer().saveFile();\n                }\n                break;\n            case ':e':\n            case ':o':\n            case ':open':\n            case ':え':\n            case ':お':\n            case ':おぺｎ':\n                if (command[1]) {\n                    const files = this.fileList().findFile(command[1]);\n                    if (files.length > 0) {\n                        files[0].open();\n                    }\n                } else {\n                    this.sentenceContainer().newFile();\n                }\n                break;\n            case ':jumpr':\n            case ':jumprow':\n            case ':jr':\n            case ':じゅｍｐｒ':\n            case ':じゅｍｐろｗ':\n            case ':ｊｒ':\n                if (command[1]) {\n                    this.sentenceContainer().cursor().jumpRow(parseInt(command[1]));\n                }\n                break;\n            case ':jumpp':\n            case ':jumppage':\n            case ':jp':\n            case ':じゅｍっｐ':\n            case ':じゅｍっぱげ':\n            case ':ｊｐ':\n                if (command[1]) {\n                    this.sentenceContainer().cursor().jumpPage(parseInt(command[1]));\n                }\n                break;\n            case ':new':\n            case ':n':\n            case ':ねｗ':\n            case ':ｎ':\n                this.sentenceContainer().newFile(command[1]);\n                break;\n            case ':delete':\n            case ':del':\n            case ':d':\n            case ':rm':\n            case ':でぇて':\n            case ':でｌ':\n            case ':ｄ':\n            case ':ｒｍ':\n                if (command[1]) {\n                    this.fileList().deleteFile(command[1]);\n                } else {\n                    const currentFile = this.fileList().currentFile();\n                    if (currentFile) {\n                        currentFile.delete();\n                    }\n                }\n                break;\n            case ':next':\n            case ':ねｘｔ':\n                // 次のファイルを開く\n                this.fileList().openNextFile();\n                break;\n            case ':prev':\n            case ':ｐれｖ':\n                // 前のファイルを開く\n                this.fileList().openPrevFile();\n                break;\n            case ':title':\n            case ':name':\n            case ':t':\n            case ':ちｔぇ':\n            case ':なめ':\n            case ':ｔ':\n                if (command[1]) {\n                    this.sentenceContainer().filename(command[1]);\n                }\n                break;\n            case ':mv':\n            case ':ｍｖ':\n                this.fileList().moveFile(command[1],command[2]);\n                break;\n            case ':mkdir':\n            case ':ｍｋぢｒ':\n                this.fileList().mkdir(command[1]);\n                break;\n            case ':deldir':\n            case ':でｌぢｒ':\n                this.fileList().deleteDirectory(command[1],true);\n                break;\n            case ':noh':\n            case ':のｈ':\n                this.sentenceContainer().stopSearchMode();\n                break;\n            case '::':\n                this.sentenceContainer().cursor().insert(':', true);\n                break;\n            case ':;':\n                this.sentenceContainer().cursor().insert(';', true);\n                break;\n            case ':/':\n                this.sentenceContainer().cursor().insert('/', true);\n                break;\n            case ':i':\n                if (command[1]) {\n                    this.sentenceContainer().cursor().insert(command[1], true);\n                }\n                break;\n            case ':bold':\n                this.sentenceContainer().menu()\n                    .boldButton(!this.sentenceContainer().menu().boldButton());\n                break;\n            case ':italic':\n                this.sentenceContainer().menu()\n                    .italicButton(!this.sentenceContainer().menu().italicButton());\n                break;\n            default:\n                break;\n        }\n    }//}}}\n}//}}}\n\n\n/**\n * カーソルを表すクラス\n *     カーソルを起点とした操作を一括して請け負います\n */\nexport class Cursor {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} sentenceContainer 対応する文章コンテナのインスタンス\n     */\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._cursorLineElem = document.getElementById('cursor_line');\n    }\n\n    /**\n     * カーソルを初期化して一文字目にカーソルを与えます\n     * @return {Cursor} 自身のインスタンス\n     */\n    init() {\n        const firstChar = this.sentenceContainer().firstChild().firstChild().firstChild();\n        this._char = firstChar;\n        this.createCursorLine();\n        this._char.addCursor().setPosMemory();\n        return this;\n    }//}}}\n\n    // --参照取得 {{{\n\n    /**\n     * 対応する文章コンテナのインスタンスを返します\n     * @return {SentenceContainer} 対応する文章コンテナのインスタンス\n     */\n    sentenceContainer() {\n        return this._sentenceContainer;\n    }\n\n    /**\n     * カーソルのある文字のインスタンスを返します\n     * @return {Char} カーソル文字のインスタンス\n     */\n    getChar() {\n        return this._char;\n    }\n\n    /**\n     * カーソル行のインスタンスを返します\n     * @return {Row} カーソル行のインスタンス\n     */\n    getRow() {\n        return this.getChar().row();\n    }\n\n    /**\n     * カーソルのある段落のインスタンスを返します\n     * @return {Paragraph} カーソルのある段落のインスタンス\n     */\n    getParagraph() {\n        return this.getRow().paragraph();\n    }\n\n    /**\n     * カーソル位置を記憶するためのDOM要素を返します\n     * @return {Element} カーソル位置を記憶するための要素\n     */\n    cursorLineElem() {\n        return this._cursorLineElem;\n    }//}}}\n\n    // --参照操作 {{{\n\n    /**\n     * カーソル文字を変更します\n     * @param {Char} newChar 新しいカーソル文字\n     * @return {Cursor} 自身のインスタンス\n     */\n    setChar(newChar) {\n        if (this.getChar()) {\n            this.memorySelection();\n            this.getChar().removeClass('cursor');\n        }\n        newChar.addClass('cursor');\n        this._char = newChar;\n        return this;\n    }\n\n    /**\n     * カーソルを移動させます\n     * 加えて、与えられた文字の前の文字に文字装飾があれば対応する装飾ボタン等をその文字に合わせて変化させます\n     * また、シフトキーが押されながら(bShiftがtrue)カーソルが与えられた場合、選択範囲を拡張します\n     * @param {Char} char 新しいカーソル文字\n     * @param {boolean} [bShift] シフトキーが押された状態でカーソルが与えられたかどうか。\n     *     trueなら選択範囲を拡張する。falseなら解除する。省略(undefined)すると選択範囲には影響しない\n     * @return {Cursor} 自身のインスタンス\n     */\n    addCursor(char, bShift) {\n        this.setChar(char);\n\n        // 前の文字に装飾があれば、そのボタンをオンにする\n        const prevChar = char.prevCharOnParagraph();\n        const menu = this.sentenceContainer().menu();\n        menu.colorButton(prevChar ? prevChar.color() : 'black');\n        menu.boldButton(prevChar ? prevChar.bold() : false);\n        menu.italicButton(prevChar ? prevChar.italic() : false);\n        menu.fontSizeInput(prevChar ? prevChar.fontSize() : 'auto');\n\n        // シフトキーが押されながらなら、選択範囲を広げる\n        this.extendSelection(bShift);\n        this.sentenceContainer().printInfo();\n        return this;\n    }//}}}\n\n    // --Status {{{\n\n    /**\n     * カーソル位置を記憶するDOM要素から、記憶されたインデックスを返します\n     * @return {number} 記憶されたカーソル位置のインデックス。記憶された位置が見つからなければ-1\n     */\n    getPosMemory() {\n        const eCharPoses = this.cursorLineElem().children;\n        for (let i = 0,eCharPos; (eCharPos = eCharPoses[i]); i++) {\n            if (eCharPos.classList.contains('cursor-pos-memory')) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * カーソル位置を記憶するDOM要素に位置を記憶します\n     * @param {number} index 記憶する位置のインデックス\n     * @return {Cursor} 自身のインスタンス\n     */\n    setPosMemory(index) {\n        const oldPos = this.getPosMemory();\n        if (index === oldPos) {\n            return this;\n        }\n\n        const eCharPoses = this.cursorLineElem().children;\n        if (eCharPoses[oldPos]) {\n            eCharPoses[oldPos].classList.remove('cursor-pos-memory');\n        }\n        const maxIndex = eCharPoses.length - 1;\n        if (index > maxIndex) { // char-posの最大数を超える数値は覚えられない\n            index = maxIndex;\n        }\n        eCharPoses[index].classList.add('cursor-pos-memory');\n        return this;\n    }\n\n    /**\n     * 現在行のうち何文字目にカーソルがあるかを返します。行頭では１，EOLでは行の総文字数＋１が返ります\n     * @return {number} カーソルの位置。入力の始まる位置のインデックスと同じ\n     */\n    currentCharPos() {\n        return this.getChar().index() + 1;\n    }\n\n    /**\n     * 現在行の総文字数を返す\n     * @return {number} 現在行の総文字数\n     */\n    strLenOfRow() {\n        return this.getRow().charLen();\n    }\n\n    /**\n     * カーソル行がそのページで何行目かを返します\n     * @return {number} カーソル行がページ内で何行目か。改ページが見つからなければ-1\n     */\n    currentRowPos() {\n        for (let row = this.getRow(),cnt = 1; row; row = row.prev(),cnt++) {\n            if (row.isPageBreak()) {\n                return cnt;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 現在ページの総行数を返します。最終ページのみ設定行数と異なるため、正確に総行数を数えるために利用されます\n     * @return {number} 現在ページの総行数。ページの終わりが見つからなければ-1\n     */\n    rowLenOnPage() {\n        for (let row = this.getRow(),cnt = this.currentRowPos(); row; row = row.next(),cnt++) {\n            if (row.isPageLast()) {\n                return cnt;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 現在ページを返します\n     * @return {number} 現在ページ\n     */\n    currentPage() {\n        let cnt = 0;\n        for (let row = this.getRow(); row; row = row.prev()) {\n            if (row.isPageBreak()) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }//}}}\n\n    // --DOM操作 {{{\n\n    /**\n     * カーソル位置を記憶するDOM要素を文章コンテナの標準文字数に合わせて構築します。主にカーソルの左右移動の際に、そのカーソルが何文字目の位置から移動してきたのかを記憶するために用いるものです\n     * @return {Cursor} 自身のインスタンス\n     */\n    createCursorLine() {\n        const eCursorLine = document.getElementById('cursor_line');\n        const eOldCharPoses = eCursorLine.children;\n        for (let eOldCharPos; (eOldCharPos = eOldCharPoses[0]);) {\n            eCursorLine.removeChild(eOldCharPos);\n        }\n        eCursorLine.appendChild(\n            ElemCreator.createCharPosElement(this.sentenceContainer().strLenOnRow()));\n        return this;\n    }\n\n    /**\n     * カーソル位置に文字を挿入します\n     *     文字列を渡した場合のみ、Undoスタックにプッシュされます\n     * @param {string Char[]} chars 挿入する文字列、あるいはCharオブジェクトの配列\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Cursor} 自身のインスタンス\n     */\n    insert(chars, useUndo) {\n        const cursorChar = this.getChar();\n        if (typeof chars === 'string') {\n            chars = this._charsFromString(chars);\n        }\n        if (useUndo) {\n            this.sentenceContainer().addDo(new PrintDoMemory(this, chars));\n        }\n\n        for (let char of chars) {\n            cursorChar.before(char);\n        }\n\n        cursorChar.paragraph().cordinate().checkKinsoku();\n        this.getChar().setPosMemory(); // cordinate()によってカーソル文字が変わっている可能性があるため、cursorCharは使えず取得しなおし\n        this.sentenceContainer().changeDisplay().breakPage().printInfo().isChanged(true);\n        return this;\n    }\n\n    /**\n     * 文字列をCharオブジェクトの配列に変換します\n     * @param {string} str 変換する文字列\n     * @return {Char[]} 変換されたCharオブジェクトの配列\n     */\n    _charsFromString(str) {\n        const ret = [];\n        const cursorChar = this.getChar();\n        for (let char of str) {\n            const newChar = new Char(cursorChar.createData(char));\n            ret.push(newChar);\n        }\n        return ret;\n    }\n\n    /**\n     * カーソル位置でバックスペースを押下した時の処理を行います\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Cursor} 自身のインスタンス\n     */\n    backSpace(useUndo) {\n        const cursorChar = this.getChar();\n        if (!cursorChar.prev()) { // 文章先頭からのバックスペースは何もしない\n            return this;\n        }\n\n        // 段落先頭からのバックスペースでは、前の行に段落をつなげる\n        if (cursorChar.isFirst() && cursorChar.row().isFirst()) {\n            const cursorParagraph = cursorChar.row().paragraph();\n            const newParagraph = cursorParagraph.prev(); // 融合先の段落\n            for (let moveRow of cursorParagraph.rows()) {\n                moveRow.moveLastBefore();\n            }\n            newParagraph.cordinate().checkKinsoku();\n            // FIXME: 最終行が表示されている状態でbackSpace()すると、\n            //     カーソル行が表示されているために表示開始行が変わらず、行数が足りているにも関わらず表示行数が少なくなってしまう\n            this.sentenceContainer().changeDisplay().breakPage().printInfo().isChanged(true);\n            return this;\n        }\n\n        //  段落先頭以外からのバックスペース\n        //  カーソルの前の位置にある文字を削除する(行頭なら行をまたいで前の文字)\n        if (!(cursorChar.isFirst() && cursorChar.row().isFirst())) {\n            if (useUndo) {\n                this.sentenceContainer().addDo(new DeleteDoMemory(this, [cursorChar.prevChar()]));\n            }\n            cursorChar.prevChar().delete();\n            this.sentenceContainer().changeDisplay().breakPage().printInfo().isChanged(true);\n            return this;\n        }\n    }\n\n    /**\n     * カーソル位置で改行した時の処理を行います\n     * @param {boolean} [useUndo] Undoスタックに積む場合はtrue\n     * @return {Cursor} 自身のインスタンス\n     */\n    lineBreak(useUndo) {\n        // 段落の分割\n        const cursorParagraph = this.getParagraph().divide(this.getChar());\n        // 新しくできた段落の最初の文字にカーソルを移動する\n        const newParagraph = cursorParagraph.next(); // divide()で新しく挿入された段落\n        newParagraph.firstChild().firstChild().addCursor().setPosMemory();\n        // HACK:changeDisplay()を二回続けている:新しい段落がdisplayされて表示されるので、最終表示行から改行した場合にカーソル行が表示から外れる(最終表示行とカーソル行が等しいため、表示開始行を変えずに表示)\n        // かといって新しい段落を非表示にしてから挿入すると、表示行が文章コンテナを埋めていない状態の時に改行すると表示開始行が毎回ひとつ後ろにずれる(カーソル行が最終表示行より後ろにあるため)という現象が起こるので、行数が十分にあっても表示行が不足してしまう\n        this.sentenceContainer()\n            .changeDisplay().changeDisplay().breakPage().printInfo().isChanged(true);\n        if (useUndo) {\n            this.sentenceContainer().addDo(new LineBreakDoMemory(this));\n        }\n        return this;\n    }//}}}\n\n    // --カーソル操作 {{{\n\n    // カーソル移動\n    /**\n     * カーソルを下方向に一つ動かします。ひとつ下が段落途中のEOLなら、さらにその次に動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveNext(bShift) {\n        const nextChar = this.getChar().next();\n        if (!nextChar) {\n            return this;\n        }\n\n        nextChar.slideNextCursor().addCursor(bShift).setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * カーソルを上方向に一つ動かします。段落途中の行頭なら、前の行の最終文字に動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    movePrev(bShift) {\n        const prevChar = this.getChar().prev();\n        if (!prevChar) {\n            return this;\n        }\n\n        prevChar.slidePrevCursor().addCursor(bShift).setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * カーソルを右方向に一つ動かします。一つ右が段落途中のEOLなら、移動先の前の文字にさらに動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveRight(bShift) {\n        const prevRow = this.getChar().row().prev();\n        this.moveRow(prevRow,bShift);\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * カーソルを左方向に一つ動かします。一つ左が段落途中のEOLなら、移動先の前の文字にさらに動かします\n     * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveLeft(bShift) {\n        const nextRow = this.getChar().row().next();\n        this.moveRow(nextRow,bShift);\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * rowにカーソルを移動します。移動先の文字は記憶されたカーソル位置と同じインデックスの文字となりますが、それがEOLならその前の文字に移動します\n     * @param {Row} row 移動先の行のインスタンス\n     * @param {boolean} bShift シフトキーが押されているかどうか。trueなら、選択範囲を拡張する\n     * @return {Cursor} 自身のインスタンス\n     */\n    moveRow(row, bShift) {\n        const index = this.getPosMemory();\n        if (!row) {\n            return this;\n        }\n\n        // 同じインデックスの文字がprevRowに存在しなければ、children()内でlastChild()が選択される\n        const char = row.children(index);\n        char.slidePrevCursor().addCursor(bShift);\n        return this;\n    }\n\n    /**\n     * num行目の最初の文字にカーソルを移動します。移動先の行が中央となるように表示されます\n     * @param {number} num 移動先が何行目か。１から始まる。ページ内ではなく、文章全体で数える。０位下が渡されると最初の行に移動される\n     * @return {Cursor} 自身のインスタンス\n     */\n    jumpRow(num) {\n        if (typeof num !== 'number') {\n            return this;\n        }\n\n        const row = this.sentenceContainer().row(num);\n        if (row) {\n            row.firstChild().addCursor().setPosMemory();\n            this.sentenceContainer().changeDisplay('center');\n        }\n        return this;\n    }\n\n    /**\n     * numページ目の一行目最初の文字にカーソルが移動します。その行が最初の行となるように表示されます\n     * @param {number} num 何ページ目に移動するか\n     * @return {Cursor} 自身のインスタンス\n     */\n    jumpPage(num) {\n        if (typeof num !== 'number') {\n            return this;\n        }\n\n        const row = this.sentenceContainer().pageRow(num);\n        if (row) {\n            row.firstChild().addCursor().setPosMemory();\n            this.sentenceContainer().changeDisplay('right');\n        }\n        return this;\n    }\n\n    /**\n     * 次の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません\n     * @return {Cursor} 自身のインスタンス\n     */\n    nextSearch() {\n        const next = this._nextSearchChar();\n        if (!next) { return this; }\n        next.addCursor().setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * 次の検索語句を返します\n     * @return {Char} 次の検索語句の１文字目のインスタンス。見つからなければnull\n     */\n    _nextSearchChar() {\n        for (let char = this.getChar().nextChar() || this.sentenceContainer().firstChar();\n            !char.is(this.getChar());\n            char = char.nextChar() || this.sentenceContainer().firstChar()) {\n                if (char.hasClass('search-label')) {\n                    return char;\n                }\n            }\n        return null;\n    }\n\n    /**\n     * 前の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません\n     * @return {Cursor} 自身のインスタンス\n     */\n    prevSearch() {\n        const prev = this.prevSearchChar();\n        if (!prev) { return this; }\n        prev.addCursor().setPosMemory();\n        this.sentenceContainer().changeDisplay();\n        return this;\n    }\n\n    /**\n     * @private\n     * 前の検索語句を返します\n     * @return {Char} 前の検索語句の１文字目のインスタンス。見つからなければnull\n     */\n    prevSearchChar() {\n        for (let char = this.getChar().prevChar() || this.sentenceContainer().lastChar();\n            !char.is(this.getChar());\n            char = char.prevChar() || this.sentenceContainer().lastChar()) {\n                if (char.hasClass('search-label')) {\n                    return char;\n                }\n            }\n        return null;\n    }\n\n    // カーソル移動前に、selectionにカーソル位置を覚えさせる\n    /**\n     * 何も選択されていない状態の場合に、Selectionにカーソル位置を覚えさせます\n     * @return {Cursor} 自身のインスタンス\n     */\n    memorySelection() {\n        const selection = getSelection();\n        if (selection.rangeCount === 0) {\n            selection.selectAllChildren(this.getChar().elem());\n        }\n        return this;\n    }\n\n    // 選択範囲を動かす(カーソル移動時)\n    /**\n     * bShiftがtrueなら選択範囲を拡張します\n     * @param {boolean} [opt_bShift] true=選択範囲を拡張する、false=選択範囲を解除する。省略されると何もしない\n     * @return {Cursor} 自身のインスタンス\n     */\n    extendSelection(opt_bShift) {\n        const selection = getSelection();\n        if (opt_bShift) {\n            // シフトキーが押されていれば、カーソルのオフセット０までselectionを拡張\n            selection.extend(this.getChar().elem(),0);\n        } else if (opt_bShift === false) {\n            // シフトキー無しでカーソルが動いたならselectionを解除する(省略でなく、明確にfalseが渡された場合)\n            selection.removeAllRanges();\n        }\n        return this;\n    }//}}}\n}//}}}",
    "static": true,
    "longname": "js/other-classes.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "class",
    "name": "Menu",
    "memberof": "js/other-classes.js",
    "static": true,
    "longname": "js/other-classes.js~Menu",
    "access": null,
    "export": true,
    "importPath": "./js/other-classes.js",
    "importStyle": "{Menu}",
    "description": "メニューバーを担当するクラス\n    メニューバー上のボタンによるイベントを一括して請け負います",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 483,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナ"
      }
    ]
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "_fontSizeInputElem",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_fontSizeInputElem",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "_confStrLenElem",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_confStrLenElem",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "_confRowLenElem",
    "memberof": "js/other-classes.js~Menu",
    "static": false,
    "longname": "js/other-classes.js~Menu#_confRowLenElem",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#sentenceContainer",
    "access": null,
    "description": "このMenuが対応する文章コンテナのインスタンスを返します",
    "lineNumber": 28,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "SentenceContainerのインスタンス"
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "confStrLenElem",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#confStrLenElem",
    "access": null,
    "description": "設定モーダルの文字数inputフォームのDOM要素を返します",
    "lineNumber": 36,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "文字数設定inputフォームのDOM要素"
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "confRowLenElem",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#confRowLenElem",
    "access": null,
    "description": "設定モーダルの行数inputフォームのDOM要素を返します",
    "lineNumber": 44,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "行数設定inputフォームのDOM要素"
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "fontSizeInput",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#fontSizeInput",
    "access": null,
    "description": "フォントサイズinputフォームに値を設定する、あるいは引数省略で現在のinputフォームの値を返します",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newSize",
        "description": "inputに設定する値(数値か、文字列の'auto')"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu number string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、\n    あるいは現在のinputフォームの値(引数を省略した場合。'auto'の場合は文字列で返す)"
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "charDecolations",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#charDecolations",
    "access": null,
    "description": "現在アクティブになっている文字装飾のクラスを配列にします",
    "lineNumber": 70,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "現在アクティブになっている文字装飾のクラスの配列"
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "configueData",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#configueData",
    "access": null,
    "description": "現在の設定情報を表すオブジェクトを作成します\n<pre>\n{\n\t\"strLen\": \"%d\",\n\t\"rowLen\" : \"%d\"\n}\n</pre>",
    "lineNumber": 94,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "現在の設定情報を表すオブジェクト"
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "colorButton",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#colorButton",
    "access": null,
    "description": "文字色ボタンに色を付けます\n    引数を省略すると現在の色を取得します",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_color",
        "description": "文字色ボタンにつける色の名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の文字色ボタンに付いている色の名前(引数を省略した場合)"
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "addColor",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addColor",
    "access": null,
    "description": "選択範囲の文字色を変えます",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "新しい文字色"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "boldButton",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#boldButton",
    "access": null,
    "description": "太字ボタンのオンオフを切り替えます 引数省略で、現在の太字ボタンのオンオフをbool値で返します",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueで太字ボタンをオンにする。falseでオフにする"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の太字ボタンの状態(引数省略の場合)"
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "bold",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#bold",
    "access": null,
    "description": "選択範囲を太字にします。または太字を外します",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueで太字にする。falseで外す"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "italicButton",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#italicButton",
    "access": null,
    "description": "斜体ボタンのオンオフを切り替えます 引数省略で、現在の斜体ボタンのオンオフをbool値で返します",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueで太字ボタンをオンにする。falseでオフにする"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の斜体ボタンの状態(引数省略の場合)"
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "italic",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#italic",
    "access": null,
    "description": "選択範囲を斜体にします。または太字を外します",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueで斜体にする。falseで外す"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "fontSize",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#fontSize",
    "access": null,
    "description": "選択範囲のフォントサイズを変更します",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "新しいフォントサイズ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "align",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#align",
    "access": null,
    "description": "カーソルのある段落のtext-alignを変更します",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "align",
        "description": "'center','left','right'のいずれか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "addEventListeners",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addEventListeners",
    "access": null,
    "description": "メニューの各コンポーネントにイベントリスナーを付加します\n    newボタン、saveボタン、deleteボタン、開くボタン、モーダルの開閉、\n    文字色ボタン、文字色ドロップダウン、太字ボタン、斜体ボタン、\n\t text-alignボタン、フォントサイズのドロップダウン、設定モーダル",
    "lineNumber": 261,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "addColorSelectClickEvent",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addColorSelectClickEvent",
    "access": null,
    "description": "文字色(ドロップダウンの方)をクリックするとボタンの色と選択範囲の文字色が変わるイベントを付加します\n    querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱う色を増やすことが可能",
    "lineNumber": 329,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "_addColorCallback",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#_addColorCallback",
    "access": null,
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "eSelColor",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "addAlignClickEvent",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addAlignClickEvent",
    "access": null,
    "description": "text-alignボタンをクリックするとカーソルのある段落のtext-alignが変更されるイベントを付加します",
    "lineNumber": 353,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "_addAlignCallback",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#_addAlignCallback",
    "access": null,
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "align",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "addFontSizeEvnet",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addFontSizeEvnet",
    "access": null,
    "description": "フォントサイズのドロップダウンをクリックするとフォントサイズのinputの数値が変更され、選択範囲の文字のフォントサイズが変更されるイベントを付加します\n    querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、\n    htmlとcssのみ変更することで扱うフォントサイズを増やすことが可能になります",
    "lineNumber": 376,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "_addFontCallback",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#_addFontCallback",
    "access": null,
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "addConfigueEvent",
    "memberof": "js/other-classes.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Menu#addConfigueEvent",
    "access": null,
    "description": "設定モーダルのinputフォームとsaveボタン、resetボタンにイベントを付加します",
    "lineNumber": 396,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 510,
    "kind": "class",
    "name": "CommandLine",
    "memberof": "js/other-classes.js",
    "static": true,
    "longname": "js/other-classes.js~CommandLine",
    "access": null,
    "export": true,
    "importPath": "./js/other-classes.js",
    "importStyle": "{CommandLine}",
    "description": "コマンドラインを表すクラス\n    コマンド操作を一括して請け負います",
    "lineNumber": 432,
    "interface": false
  },
  {
    "__docId__": 511,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#constructor",
    "access": null,
    "description": "",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナ"
      }
    ]
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "_elem",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_elem",
    "access": null,
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "elem",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#elem",
    "access": null,
    "description": "自身のHTML要素を返します",
    "lineNumber": 449,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身のHTML要素"
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#sentenceContainer",
    "access": null,
    "description": "対応する文章コンテナの参照を返します",
    "lineNumber": 457,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "対応する文章コンテナ"
    }
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "fileList",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#fileList",
    "access": null,
    "description": "操作するファイルリストの参照を返します",
    "lineNumber": 465,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "ファイルリストのインスタンス"
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "isActive",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#isActive",
    "access": null,
    "description": "コマンドラインがアクティブかどうかを返します",
    "lineNumber": 475,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true=アクティブ、false=アクティブではない"
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "active",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#active",
    "access": null,
    "description": "コマンドラインをアクティブにします",
    "lineNumber": 485,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "unActive",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#unActive",
    "access": null,
    "description": "コマンドラインを非アクティブにしまる",
    "lineNumber": 494,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "focus",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#focus",
    "access": null,
    "description": "コマンドラインにフォーカスを与えます",
    "lineNumber": 503,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "displayFileModal",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#displayFileModal",
    "access": null,
    "description": "ファイルリストのモーダルをコマンドライン用に開きます",
    "lineNumber": 512,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "hideFileModal",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#hideFileModal",
    "access": null,
    "description": "コマンドライン用に開いたモーダルを閉じます",
    "lineNumber": 523,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "val",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#val",
    "access": null,
    "description": "コマンドラインに値を設定します",
    "lineNumber": 543,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "コマンドラインに設定する値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "start",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#start",
    "access": null,
    "description": "コマンドモードを始めます",
    "lineNumber": 556,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "stop",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#stop",
    "access": null,
    "description": "コマンドモードを終了します",
    "lineNumber": 568,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "addKeyupEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#addKeyupEventListener",
    "access": null,
    "description": "コマンドのinputフォームにkeyupイベントを付加します。重ねがけは無効となります",
    "lineNumber": 582,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "_keyupArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 588,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "removeKeyupEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#removeKeyupEventListener",
    "access": null,
    "description": "コマンドのinputフォームへのkeyupイベントを除去します",
    "lineNumber": 597,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "_keyupArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 603,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "onKeyup",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#onKeyup",
    "access": "private",
    "description": "",
    "lineNumber": 611,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "runKeyup",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#runKeyup",
    "access": null,
    "description": "コマンドのkeyupイベントの実行内容です",
    "lineNumber": 632,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ]
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "addFocusoutEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#addFocusoutEventListener",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントを付加します",
    "lineNumber": 692,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "_focusoutArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_focusoutArg",
    "access": null,
    "description": null,
    "lineNumber": 698,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "removeFocusoutEventListener",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#removeFocusoutEventListener",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントを除去します",
    "lineNumber": 707,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "_focusoutArg",
    "memberof": "js/other-classes.js~CommandLine",
    "static": false,
    "longname": "js/other-classes.js~CommandLine#_focusoutArg",
    "access": null,
    "description": null,
    "lineNumber": 713,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "onFocusout",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#onFocusout",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントの実行内容です",
    "lineNumber": 721,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ]
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "runCommand",
    "memberof": "js/other-classes.js~CommandLine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~CommandLine#runCommand",
    "access": null,
    "description": "コマンドの実行内容です",
    "lineNumber": 728,
    "params": []
  },
  {
    "__docId__": 538,
    "kind": "class",
    "name": "Cursor",
    "memberof": "js/other-classes.js",
    "static": true,
    "longname": "js/other-classes.js~Cursor",
    "access": null,
    "export": true,
    "importPath": "./js/other-classes.js",
    "importStyle": "{Cursor}",
    "description": "カーソルを表すクラス\n    カーソルを起点とした操作を一括して請け負います",
    "lineNumber": 873,
    "interface": false
  },
  {
    "__docId__": 539,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#constructor",
    "access": null,
    "description": "",
    "lineNumber": 879,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナのインスタンス"
      }
    ]
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 880,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "_cursorLineElem",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_cursorLineElem",
    "access": null,
    "description": null,
    "lineNumber": 881,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "init",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#init",
    "access": null,
    "description": "カーソルを初期化して一文字目にカーソルを与えます",
    "lineNumber": 888,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "_char",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_char",
    "access": null,
    "description": null,
    "lineNumber": 890,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "sentenceContainer",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#sentenceContainer",
    "access": null,
    "description": "対応する文章コンテナのインスタンスを返します",
    "lineNumber": 902,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "対応する文章コンテナのインスタンス"
    }
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "getChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getChar",
    "access": null,
    "description": "カーソルのある文字のインスタンスを返します",
    "lineNumber": 910,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "getRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getRow",
    "access": null,
    "description": "カーソル行のインスタンスを返します",
    "lineNumber": 918,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "カーソル行のインスタンス"
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "getParagraph",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getParagraph",
    "access": null,
    "description": "カーソルのある段落のインスタンスを返します",
    "lineNumber": 926,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "カーソルのある段落のインスタンス"
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "cursorLineElem",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#cursorLineElem",
    "access": null,
    "description": "カーソル位置を記憶するためのDOM要素を返します",
    "lineNumber": 934,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "カーソル位置を記憶するための要素"
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "setChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#setChar",
    "access": null,
    "description": "カーソル文字を変更します",
    "lineNumber": 945,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "newChar",
        "description": "新しいカーソル文字"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "_char",
    "memberof": "js/other-classes.js~Cursor",
    "static": false,
    "longname": "js/other-classes.js~Cursor#_char",
    "access": null,
    "description": null,
    "lineNumber": 951,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "addCursor",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#addCursor",
    "access": null,
    "description": "カーソルを移動させます\n加えて、与えられた文字の前の文字に文字装飾があれば対応する装飾ボタン等をその文字に合わせて変化させます\nまた、シフトキーが押されながら(bShiftがtrue)カーソルが与えられた場合、選択範囲を拡張します",
    "lineNumber": 964,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "新しいカーソル文字"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "bShift",
        "description": "シフトキーが押された状態でカーソルが与えられたかどうか。\n    trueなら選択範囲を拡張する。falseなら解除する。省略(undefined)すると選択範囲には影響しない"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "getPosMemory",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#getPosMemory",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素から、記憶されたインデックスを返します",
    "lineNumber": 987,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "記憶されたカーソル位置のインデックス。記憶された位置が見つからなければ-1"
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "setPosMemory",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#setPosMemory",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素に位置を記憶します",
    "lineNumber": 1002,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "記憶する位置のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "currentCharPos",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#currentCharPos",
    "access": null,
    "description": "現在行のうち何文字目にカーソルがあるかを返します。行頭では１，EOLでは行の総文字数＋１が返ります",
    "lineNumber": 1024,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソルの位置。入力の始まる位置のインデックスと同じ"
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "strLenOfRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#strLenOfRow",
    "access": null,
    "description": "現在行の総文字数を返す",
    "lineNumber": 1032,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在行の総文字数"
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "currentRowPos",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#currentRowPos",
    "access": null,
    "description": "カーソル行がそのページで何行目かを返します",
    "lineNumber": 1040,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル行がページ内で何行目か。改ページが見つからなければ-1"
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "rowLenOnPage",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#rowLenOnPage",
    "access": null,
    "description": "現在ページの総行数を返します。最終ページのみ設定行数と異なるため、正確に総行数を数えるために利用されます",
    "lineNumber": 1053,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在ページの総行数。ページの終わりが見つからなければ-1"
    }
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "currentPage",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#currentPage",
    "access": null,
    "description": "現在ページを返します",
    "lineNumber": 1066,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在ページ"
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "createCursorLine",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#createCursorLine",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素を文章コンテナの標準文字数に合わせて構築します。主にカーソルの左右移動の際に、そのカーソルが何文字目の位置から移動してきたのかを記憶するために用いるものです",
    "lineNumber": 1082,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "insert",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#insert",
    "access": null,
    "description": "カーソル位置に文字を挿入します\n    文字列を渡した場合のみ、Undoスタックにプッシュされます",
    "lineNumber": 1100,
    "params": [
      {
        "nullable": null,
        "types": [
          "string Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chars",
        "description": "挿入する文字列、あるいはCharオブジェクトの配列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "_charsFromString",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#_charsFromString",
    "access": null,
    "description": "文字列をCharオブジェクトの配列に変換します",
    "lineNumber": 1124,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "変換する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char[]"
      ],
      "spread": false,
      "description": "変換されたCharオブジェクトの配列"
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "backSpace",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#backSpace",
    "access": null,
    "description": "カーソル位置でバックスペースを押下した時の処理を行います",
    "lineNumber": 1139,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "lineBreak",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#lineBreak",
    "access": null,
    "description": "カーソル位置で改行した時の処理を行います",
    "lineNumber": 1176,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "useUndo",
        "description": "Undoスタックに積む場合はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "moveNext",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveNext",
    "access": null,
    "description": "カーソルを下方向に一つ動かします。ひとつ下が段落途中のEOLなら、さらにその次に動かします",
    "lineNumber": 1200,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "movePrev",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#movePrev",
    "access": null,
    "description": "カーソルを上方向に一つ動かします。段落途中の行頭なら、前の行の最終文字に動かします",
    "lineNumber": 1216,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "moveRight",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveRight",
    "access": null,
    "description": "カーソルを右方向に一つ動かします。一つ右が段落途中のEOLなら、移動先の前の文字にさらに動かします",
    "lineNumber": 1232,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "moveLeft",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveLeft",
    "access": null,
    "description": "カーソルを左方向に一つ動かします。一つ左が段落途中のEOLなら、移動先の前の文字にさらに動かします",
    "lineNumber": 1244,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "moveRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#moveRow",
    "access": null,
    "description": "rowにカーソルを移動します。移動先の文字は記憶されたカーソル位置と同じインデックスの文字となりますが、それがEOLならその前の文字に移動します",
    "lineNumber": 1257,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "移動先の行のインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されているかどうか。trueなら、選択範囲を拡張する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "jumpRow",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#jumpRow",
    "access": null,
    "description": "num行目の最初の文字にカーソルを移動します。移動先の行が中央となるように表示されます",
    "lineNumber": 1274,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動先が何行目か。１から始まる。ページ内ではなく、文章全体で数える。０位下が渡されると最初の行に移動される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "jumpPage",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#jumpPage",
    "access": null,
    "description": "numページ目の一行目最初の文字にカーソルが移動します。その行が最初の行となるように表示されます",
    "lineNumber": 1292,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "何ページ目に移動するか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "nextSearch",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#nextSearch",
    "access": null,
    "description": "次の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません",
    "lineNumber": 1309,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "_nextSearchChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#_nextSearchChar",
    "access": null,
    "description": "次の検索語句を返します",
    "lineNumber": 1321,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "次の検索語句の１文字目のインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "prevSearch",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#prevSearch",
    "access": null,
    "description": "前の検索語句にカーソルを移動します。検索されていない、あるいは検索語句が見つからなければ何もしません",
    "lineNumber": 1336,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "prevSearchChar",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#prevSearchChar",
    "access": "private",
    "description": "",
    "lineNumber": 1349,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "前の検索語句の１文字目のインスタンス。見つからなければnull"
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "memorySelection",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#memorySelection",
    "access": null,
    "description": "何も選択されていない状態の場合に、Selectionにカーソル位置を覚えさせます",
    "lineNumber": 1365,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "extendSelection",
    "memberof": "js/other-classes.js~Cursor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/other-classes.js~Cursor#extendSelection",
    "access": null,
    "description": "bShiftがtrueなら選択範囲を拡張します",
    "lineNumber": 1379,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bShift",
        "description": "true=選択範囲を拡張する、false=選択範囲を解除する。省略されると何もしない"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 577,
    "kind": "file",
    "name": "js/test/karma.conf.js",
    "content": "// Karma configuration\n// Generated on Tue Feb 28 2017 06:19:09 GMT+0900 (JST)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n        'spec/*.js'\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n    ],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Firefox'],\n\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n",
    "static": true,
    "longname": "js/test/karma.conf.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 578,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/karma.conf.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/karma.conf.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 579,
    "kind": "file",
    "name": "js/test/node_modules/balanced-match/index.js",
    "content": "module.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n",
    "static": true,
    "longname": "js/test/node_modules/balanced-match/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 580,
    "kind": "function",
    "name": "balanced",
    "memberof": "js/test/node_modules/balanced-match/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/balanced-match/index.js~balanced",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/balanced-match/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "function",
    "name": "maybeMatch",
    "memberof": "js/test/node_modules/balanced-match/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/balanced-match/index.js~maybeMatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/balanced-match/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reg",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "function",
    "name": "range",
    "memberof": "js/test/node_modules/balanced-match/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/balanced-match/index.js~range",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/balanced-match/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "file",
    "name": "js/test/node_modules/brace-expansion/index.js",
    "content": "var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = /^(.*,)+(.+)?$/.test(m.body);\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 584,
    "kind": "variable",
    "name": "concatMap",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~concatMap",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "variable",
    "name": "balanced",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~balanced",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "name": "escSlash",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~escSlash",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "variable",
    "name": "escOpen",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~escOpen",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "escClose",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~escClose",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "variable",
    "name": "escComma",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~escComma",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 590,
    "kind": "variable",
    "name": "escPeriod",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~escPeriod",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "function",
    "name": "numeric",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~numeric",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "function",
    "name": "escapeBraces",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~escapeBraces",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "function",
    "name": "unescapeBraces",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~unescapeBraces",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "function",
    "name": "parseCommaParts",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~parseCommaParts",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "function",
    "name": "expandTop",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~expandTop",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 596,
    "kind": "function",
    "name": "identity",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~identity",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "function",
    "name": "embrace",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~embrace",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "function",
    "name": "isPadded",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~isPadded",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "function",
    "name": "lte",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~lte",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "function",
    "name": "gte",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~gte",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "function",
    "name": "expand",
    "memberof": "js/test/node_modules/brace-expansion/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/brace-expansion/index.js~expand",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/brace-expansion/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "isTop",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "file",
    "name": "js/test/node_modules/concat-map/example/map.js",
    "content": "var concatMap = require('../');\nvar xs = [ 1, 2, 3, 4, 5, 6 ];\nvar ys = concatMap(xs, function (x) {\n    return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];\n});\nconsole.dir(ys);\n",
    "static": true,
    "longname": "js/test/node_modules/concat-map/example/map.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 603,
    "kind": "variable",
    "name": "concatMap",
    "memberof": "js/test/node_modules/concat-map/example/map.js",
    "static": true,
    "longname": "js/test/node_modules/concat-map/example/map.js~concatMap",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/example/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "variable",
    "name": "xs",
    "memberof": "js/test/node_modules/concat-map/example/map.js",
    "static": true,
    "longname": "js/test/node_modules/concat-map/example/map.js~xs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/example/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "variable",
    "name": "ys",
    "memberof": "js/test/node_modules/concat-map/example/map.js",
    "static": true,
    "longname": "js/test/node_modules/concat-map/example/map.js~ys",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/example/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "file",
    "name": "js/test/node_modules/concat-map/index.js",
    "content": "module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n",
    "static": true,
    "longname": "js/test/node_modules/concat-map/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 607,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/concat-map/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/concat-map/index.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "xs",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "variable",
    "name": "isArray",
    "memberof": "js/test/node_modules/concat-map/index.js",
    "static": true,
    "longname": "js/test/node_modules/concat-map/index.js~isArray",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "file",
    "name": "js/test/node_modules/concat-map/test/map.js",
    "content": "var concatMap = require('../');\nvar test = require('tape');\n\ntest('empty or not', function (t) {\n    var xs = [ 1, 2, 3, 4, 5, 6 ];\n    var ixes = [];\n    var ys = concatMap(xs, function (x, ix) {\n        ixes.push(ix);\n        return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];\n    });\n    t.same(ys, [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ]);\n    t.same(ixes, [ 0, 1, 2, 3, 4, 5 ]);\n    t.end();\n});\n\ntest('always something', function (t) {\n    var xs = [ 'a', 'b', 'c', 'd' ];\n    var ys = concatMap(xs, function (x) {\n        return x === 'b' ? [ 'B', 'B', 'B' ] : [ x ];\n    });\n    t.same(ys, [ 'a', 'B', 'B', 'B', 'c', 'd' ]);\n    t.end();\n});\n\ntest('scalars', function (t) {\n    var xs = [ 'a', 'b', 'c', 'd' ];\n    var ys = concatMap(xs, function (x) {\n        return x === 'b' ? [ 'B', 'B', 'B' ] : x;\n    });\n    t.same(ys, [ 'a', 'B', 'B', 'B', 'c', 'd' ]);\n    t.end();\n});\n\ntest('undefs', function (t) {\n    var xs = [ 'a', 'b', 'c', 'd' ];\n    var ys = concatMap(xs, function () {});\n    t.same(ys, [ undefined, undefined, undefined, undefined ]);\n    t.end();\n});\n",
    "static": true,
    "longname": "js/test/node_modules/concat-map/test/map.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 610,
    "kind": "variable",
    "name": "concatMap",
    "memberof": "js/test/node_modules/concat-map/test/map.js",
    "static": true,
    "longname": "js/test/node_modules/concat-map/test/map.js~concatMap",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/test/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "variable",
    "name": "test",
    "memberof": "js/test/node_modules/concat-map/test/map.js",
    "static": true,
    "longname": "js/test/node_modules/concat-map/test/map.js~test",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/concat-map/test/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "file",
    "name": "js/test/node_modules/exit/Gruntfile.js",
    "content": "'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    nodeunit: {\n      files: ['test/**/*_test.js'],\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      lib: {\n        src: ['lib/**/*.js']\n      },\n      test: {\n        src: ['test/**/*.js']\n      },\n    },\n    watch: {\n      gruntfile: {\n        files: '<%= jshint.gruntfile.src %>',\n        tasks: ['jshint:gruntfile']\n      },\n      lib: {\n        files: '<%= jshint.lib.src %>',\n        tasks: ['jshint:lib', 'nodeunit']\n      },\n      test: {\n        files: '<%= jshint.test.src %>',\n        tasks: ['jshint:test', 'nodeunit']\n      },\n    },\n  });\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Default task.\n  grunt.registerTask('default', ['jshint', 'nodeunit']);\n\n};\n",
    "static": true,
    "longname": "js/test/node_modules/exit/Gruntfile.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 613,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/exit/Gruntfile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/Gruntfile.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/Gruntfile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "grunt",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 614,
    "kind": "file",
    "name": "js/test/node_modules/exit/lib/exit.js",
    "content": "/*\n * exit\n * https://github.com/cowboy/node-exit\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function exit(exitCode, streams) {\n  if (!streams) { streams = [process.stdout, process.stderr]; }\n  var drainCount = 0;\n  // Actually exit if all streams are drained.\n  function tryToExit() {\n    if (drainCount === streams.length) {\n      process.exit(exitCode);\n    }\n  }\n  streams.forEach(function(stream) {\n    // Count drained streams now, but monitor non-drained streams.\n    if (stream.bufferSize === 0) {\n      drainCount++;\n    } else {\n      stream.write('', 'utf-8', function() {\n        drainCount++;\n        tryToExit();\n      });\n    }\n    // Prevent further writing.\n    stream.write = function() {};\n  });\n  // If all streams were already drained, exit now.\n  tryToExit();\n  // In Windows, when run as a Node.js child process, a script utilizing\n  // this library might just exit with a 0 exit code, regardless. This code,\n  // despite the fact that it looks a bit crazy, appears to fix that.\n  process.on('exit', function() {\n    process.exit(exitCode);\n  });\n};\n",
    "static": true,
    "longname": "js/test/node_modules/exit/lib/exit.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 615,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/exit/lib/exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/lib/exit.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/lib/exit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "exitCode",
        "types": [
          "*"
        ]
      },
      {
        "name": "streams",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 616,
    "kind": "file",
    "name": "js/test/node_modules/exit/test/exit_test.js",
    "content": "'use strict';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nvar fs = require('fs');\nvar exec = require('child_process').exec;\n\nvar _which = require('which').sync;\nfunction which(command) {\n  try {\n    _which(command);\n    return command;\n  } catch (err) {\n    return false;\n  }\n}\n\n// Look for grep first (any OS). If not found (but on Windows) look for find,\n// which is Windows' horribly crippled grep alternative.\nvar grep = which('grep') || process.platform === 'win32' && which('find');\n\nexports['exit'] = {\n  setUp: function(done) {\n    this.origCwd = process.cwd();\n    process.chdir('test/fixtures');\n    done();\n  },\n  tearDown: function(done) {\n    process.chdir(this.origCwd);\n    done();\n  },\n  'grep': function(test) {\n    test.expect(1);\n    // Many unit tests depend on this.\n    test.ok(grep, 'A suitable \"grep\" or \"find\" program was not found in the PATH.');\n    test.done();\n  },\n  // The rest of the tests are built dynamically, to keep things sane.\n};\n\n// A few helper functions.\nfunction normalizeLineEndings(s) {\n  return s.replace(/\\r?\\n/g, '\\n');\n}\n\n// Capture command output, normalizing captured stdout to unix file endings.\nfunction run(command, callback) {\n  exec(command, function(error, stdout) {\n    callback(error ? error.code : 0, normalizeLineEndings(stdout));\n  });\n}\n\n// Read a fixture file, normalizing file contents to unix file endings.\nfunction fixture(filename) {\n  return normalizeLineEndings(String(fs.readFileSync(filename)));\n}\n\nfunction buildTests() {\n  // Build individual unit tests for command output.\n  var counts = [10, 100, 1000];\n  var outputs = [' stdout stderr', ' stdout', ' stderr'];\n  var pipes = ['', ' | ' + grep + ' \"std\"'];\n  counts.forEach(function(count) {\n    outputs.forEach(function(output) {\n      pipes.forEach(function(pipe) {\n        var command = 'node log.js 0 ' + count + output + ' 2>&1' + pipe;\n        exports['exit']['output (' + command + ')'] = function(test) {\n          test.expect(2);\n          run(command, function(code, actual) {\n            var expected = fixture(count + output.replace(/ /g, '-') + '.txt');\n            // Sometimes, the actual file lines are out of order on Windows.\n            // But since the point of this lib is to drain the buffer and not\n            // guarantee output order, we only test the length.\n            test.equal(actual.length, expected.length, 'should be the same length.');\n            // The \"fail\" lines in log.js should NOT be output!\n            test.ok(actual.indexOf('fail') === -1, 'should not output after exit is called.');\n            test.done();\n          });\n        };\n      });\n    });\n  });\n\n  // Build individual unit tests for exit codes.\n  var codes = [0, 1, 123];\n  codes.forEach(function(code) {\n    var command = 'node log.js ' + code + ' 10 stdout stderr';\n    exports['exit']['exit code (' + command + ')'] = function(test) {\n      test.expect(1);\n      run(command, function(actual) {\n        // The specified exit code should be passed through.\n        test.equal(actual, code, 'should exit with ' + code + ' error code.');\n        test.done();\n      });\n    };\n  });\n}\n\n// Don't bother building tests if grep wasn't found, otherwise everything will\n// fail and the error will get lost.\nif (grep) {\n  buildTests();\n}\n",
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 617,
    "kind": "variable",
    "name": "fs",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~fs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "variable",
    "name": "exec",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~exec",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "variable",
    "name": "_which",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~_which",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "function",
    "name": "which",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~which",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "variable",
    "name": "grep",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~grep",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "function",
    "name": "normalizeLineEndings",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~normalizeLineEndings",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "function",
    "name": "run",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~run",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 624,
    "kind": "function",
    "name": "fixture",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~fixture",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "filename",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "function",
    "name": "buildTests",
    "memberof": "js/test/node_modules/exit/test/exit_test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/exit_test.js~buildTests",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/exit_test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 626,
    "kind": "file",
    "name": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "content": "var errorCode = process.argv[2];\nvar max = process.argv[3];\nvar modes = process.argv.slice(4);\n\nfunction stdout(message) {\n  if (modes.indexOf('stdout') === -1) { return; }\n  process.stdout.write('stdout ' + message + '\\n');\n}\n\nfunction stderr(message) {\n  if (modes.indexOf('stderr') === -1) { return; }\n  process.stderr.write('stderr ' + message + '\\n');\n}\n\nfor (var i = 0; i < max; i++) {\n  stdout(i);\n  stderr(i);\n}\n\nprocess.exit(errorCode);\n\nstdout('fail');\nstderr('fail');\n",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 627,
    "kind": "variable",
    "name": "errorCode",
    "memberof": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log-broken.js~errorCode",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log-broken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "variable",
    "name": "max",
    "memberof": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log-broken.js~max",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log-broken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "variable",
    "name": "modes",
    "memberof": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log-broken.js~modes",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log-broken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "function",
    "name": "stdout",
    "memberof": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log-broken.js~stdout",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log-broken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 631,
    "kind": "function",
    "name": "stderr",
    "memberof": "js/test/node_modules/exit/test/fixtures/log-broken.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log-broken.js~stderr",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log-broken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 632,
    "kind": "file",
    "name": "js/test/node_modules/exit/test/fixtures/log.js",
    "content": "var exit = require('../../lib/exit');\n\nvar errorCode = process.argv[2];\nvar max = process.argv[3];\nvar modes = process.argv.slice(4);\n\nfunction stdout(message) {\n  if (modes.indexOf('stdout') === -1) { return; }\n  process.stdout.write('stdout ' + message + '\\n');\n}\n\nfunction stderr(message) {\n  if (modes.indexOf('stderr') === -1) { return; }\n  process.stderr.write('stderr ' + message + '\\n');\n}\n\nfor (var i = 0; i < max; i++) {\n  stdout(i);\n  stderr(i);\n}\n\nexit(errorCode);\n\nstdout('fail');\nstderr('fail');\n",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 633,
    "kind": "variable",
    "name": "exit",
    "memberof": "js/test/node_modules/exit/test/fixtures/log.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js~exit",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "variable",
    "name": "errorCode",
    "memberof": "js/test/node_modules/exit/test/fixtures/log.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js~errorCode",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "variable",
    "name": "max",
    "memberof": "js/test/node_modules/exit/test/fixtures/log.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js~max",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "variable",
    "name": "modes",
    "memberof": "js/test/node_modules/exit/test/fixtures/log.js",
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js~modes",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "function",
    "name": "stdout",
    "memberof": "js/test/node_modules/exit/test/fixtures/log.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js~stdout",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 638,
    "kind": "function",
    "name": "stderr",
    "memberof": "js/test/node_modules/exit/test/fixtures/log.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/exit/test/fixtures/log.js~stderr",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/exit/test/fixtures/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 639,
    "kind": "file",
    "name": "js/test/node_modules/fs.realpath/index.js",
    "content": "module.exports = realpath\nrealpath.realpath = realpath\nrealpath.sync = realpathSync\nrealpath.realpathSync = realpathSync\nrealpath.monkeypatch = monkeypatch\nrealpath.unmonkeypatch = unmonkeypatch\n\nvar fs = require('fs')\nvar origRealpath = fs.realpath\nvar origRealpathSync = fs.realpathSync\n\nvar version = process.version\nvar ok = /^v[0-5]\\./.test(version)\nvar old = require('./old.js')\n\nfunction newError (er) {\n  return er && er.syscall === 'realpath' && (\n    er.code === 'ELOOP' ||\n    er.code === 'ENOMEM' ||\n    er.code === 'ENAMETOOLONG'\n  )\n}\n\nfunction realpath (p, cache, cb) {\n  if (ok) {\n    return origRealpath(p, cache, cb)\n  }\n\n  if (typeof cache === 'function') {\n    cb = cache\n    cache = null\n  }\n  origRealpath(p, cache, function (er, result) {\n    if (newError(er)) {\n      old.realpath(p, cache, cb)\n    } else {\n      cb(er, result)\n    }\n  })\n}\n\nfunction realpathSync (p, cache) {\n  if (ok) {\n    return origRealpathSync(p, cache)\n  }\n\n  try {\n    return origRealpathSync(p, cache)\n  } catch (er) {\n    if (newError(er)) {\n      return old.realpathSync(p, cache)\n    } else {\n      throw er\n    }\n  }\n}\n\nfunction monkeypatch () {\n  fs.realpath = realpath\n  fs.realpathSync = realpathSync\n}\n\nfunction unmonkeypatch () {\n  fs.realpath = origRealpath\n  fs.realpathSync = origRealpathSync\n}\n",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 640,
    "kind": "variable",
    "name": "fs",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~fs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "variable",
    "name": "origRealpath",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~origRealpath",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "variable",
    "name": "origRealpathSync",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~origRealpathSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "variable",
    "name": "version",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~version",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "ok",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~ok",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "variable",
    "name": "old",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~old",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "function",
    "name": "newError",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~newError",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "er",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "function",
    "name": "realpath",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~realpath",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "cache",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "function",
    "name": "realpathSync",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~realpathSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "cache",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "function",
    "name": "monkeypatch",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~monkeypatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 650,
    "kind": "function",
    "name": "unmonkeypatch",
    "memberof": "js/test/node_modules/fs.realpath/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/index.js~unmonkeypatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 651,
    "kind": "file",
    "name": "js/test/node_modules/fs.realpath/old.js",
    "content": "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 652,
    "kind": "variable",
    "name": "pathModule",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~pathModule",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "variable",
    "name": "isWindows",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~isWindows",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "name": "fs",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~fs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "variable",
    "name": "DEBUG",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~DEBUG",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "function",
    "name": "rethrow",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~rethrow",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 657,
    "kind": "function",
    "name": "maybeCallback",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~maybeCallback",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "variable",
    "name": "normalize",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~normalize",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 659,
    "kind": "function",
    "name": "realpathSync",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~realpathSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "cache",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "function",
    "name": "realpath",
    "memberof": "js/test/node_modules/fs.realpath/old.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/fs.realpath/old.js~realpath",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/fs.realpath/old.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "cache",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 661,
    "kind": "file",
    "name": "js/test/node_modules/glob/common.js",
    "content": "exports.alphasort = alphasort\nexports.alphasorti = alphasorti\nexports.setopts = setopts\nexports.ownProp = ownProp\nexports.makeAbs = makeAbs\nexports.finish = finish\nexports.mark = mark\nexports.isIgnored = isIgnored\nexports.childrenIgnored = childrenIgnored\n\nfunction ownProp (obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field)\n}\n\nvar path = require(\"path\")\nvar minimatch = require(\"minimatch\")\nvar isAbsolute = require(\"path-is-absolute\")\nvar Minimatch = minimatch.Minimatch\n\nfunction alphasorti (a, b) {\n  return a.toLowerCase().localeCompare(b.toLowerCase())\n}\n\nfunction alphasort (a, b) {\n  return a.localeCompare(b)\n}\n\nfunction setupIgnores (self, options) {\n  self.ignore = options.ignore || []\n\n  if (!Array.isArray(self.ignore))\n    self.ignore = [self.ignore]\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap)\n  }\n}\n\n// ignore patterns are always in dot:true mode.\nfunction ignoreMap (pattern) {\n  var gmatcher = null\n  if (pattern.slice(-3) === '/**') {\n    var gpattern = pattern.replace(/(\\/\\*\\*)+$/, '')\n    gmatcher = new Minimatch(gpattern, { dot: true })\n  }\n\n  return {\n    matcher: new Minimatch(pattern, { dot: true }),\n    gmatcher: gmatcher\n  }\n}\n\nfunction setopts (self, pattern, options) {\n  if (!options)\n    options = {}\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  self.silent = !!options.silent\n  self.pattern = pattern\n  self.strict = options.strict !== false\n  self.realpath = !!options.realpath\n  self.realpathCache = options.realpathCache || Object.create(null)\n  self.follow = !!options.follow\n  self.dot = !!options.dot\n  self.mark = !!options.mark\n  self.nodir = !!options.nodir\n  if (self.nodir)\n    self.mark = true\n  self.sync = !!options.sync\n  self.nounique = !!options.nounique\n  self.nonull = !!options.nonull\n  self.nosort = !!options.nosort\n  self.nocase = !!options.nocase\n  self.stat = !!options.stat\n  self.noprocess = !!options.noprocess\n  self.absolute = !!options.absolute\n\n  self.maxLength = options.maxLength || Infinity\n  self.cache = options.cache || Object.create(null)\n  self.statCache = options.statCache || Object.create(null)\n  self.symlinks = options.symlinks || Object.create(null)\n\n  setupIgnores(self, options)\n\n  self.changedCwd = false\n  var cwd = process.cwd()\n  if (!ownProp(options, \"cwd\"))\n    self.cwd = cwd\n  else {\n    self.cwd = path.resolve(options.cwd)\n    self.changedCwd = self.cwd !== cwd\n  }\n\n  self.root = options.root || path.resolve(self.cwd, \"/\")\n  self.root = path.resolve(self.root)\n  if (process.platform === \"win32\")\n    self.root = self.root.replace(/\\\\/g, \"/\")\n\n  // TODO: is an absolute `cwd` supposed to be resolved against `root`?\n  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd)\n  if (process.platform === \"win32\")\n    self.cwdAbs = self.cwdAbs.replace(/\\\\/g, \"/\")\n  self.nomount = !!options.nomount\n\n  // disable comments and negation in Minimatch.\n  // Note that they are not supported in Glob itself anyway.\n  options.nonegate = true\n  options.nocomment = true\n\n  self.minimatch = new Minimatch(pattern, options)\n  self.options = self.minimatch.options\n}\n\nfunction finish (self) {\n  var nou = self.nounique\n  var all = nou ? [] : Object.create(null)\n\n  for (var i = 0, l = self.matches.length; i < l; i ++) {\n    var matches = self.matches[i]\n    if (!matches || Object.keys(matches).length === 0) {\n      if (self.nonull) {\n        // do like the shell, and spit out the literal glob\n        var literal = self.minimatch.globSet[i]\n        if (nou)\n          all.push(literal)\n        else\n          all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou)\n        all.push.apply(all, m)\n      else\n        m.forEach(function (m) {\n          all[m] = true\n        })\n    }\n  }\n\n  if (!nou)\n    all = Object.keys(all)\n\n  if (!self.nosort)\n    all = all.sort(self.nocase ? alphasorti : alphasort)\n\n  // at *some* point we statted all of these\n  if (self.mark) {\n    for (var i = 0; i < all.length; i++) {\n      all[i] = self._mark(all[i])\n    }\n    if (self.nodir) {\n      all = all.filter(function (e) {\n        var notDir = !(/\\/$/.test(e))\n        var c = self.cache[e] || self.cache[makeAbs(self, e)]\n        if (notDir && c)\n          notDir = c !== 'DIR' && !Array.isArray(c)\n        return notDir\n      })\n    }\n  }\n\n  if (self.ignore.length)\n    all = all.filter(function(m) {\n      return !isIgnored(self, m)\n    })\n\n  self.found = all\n}\n\nfunction mark (self, p) {\n  var abs = makeAbs(self, p)\n  var c = self.cache[abs]\n  var m = p\n  if (c) {\n    var isDir = c === 'DIR' || Array.isArray(c)\n    var slash = p.slice(-1) === '/'\n\n    if (isDir && !slash)\n      m += '/'\n    else if (!isDir && slash)\n      m = m.slice(0, -1)\n\n    if (m !== p) {\n      var mabs = makeAbs(self, m)\n      self.statCache[mabs] = self.statCache[abs]\n      self.cache[mabs] = self.cache[abs]\n    }\n  }\n\n  return m\n}\n\n// lotta situps...\nfunction makeAbs (self, f) {\n  var abs = f\n  if (f.charAt(0) === '/') {\n    abs = path.join(self.root, f)\n  } else if (isAbsolute(f) || f === '') {\n    abs = f\n  } else if (self.changedCwd) {\n    abs = path.resolve(self.cwd, f)\n  } else {\n    abs = path.resolve(f)\n  }\n\n  if (process.platform === 'win32')\n    abs = abs.replace(/\\\\/g, '/')\n\n  return abs\n}\n\n\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n\nfunction childrenIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n",
    "static": true,
    "longname": "js/test/node_modules/glob/common.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 662,
    "kind": "function",
    "name": "ownProp",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~ownProp",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/glob/common.js",
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "variable",
    "name": "minimatch",
    "memberof": "js/test/node_modules/glob/common.js",
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "variable",
    "name": "isAbsolute",
    "memberof": "js/test/node_modules/glob/common.js",
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~isAbsolute",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "variable",
    "name": "Minimatch",
    "memberof": "js/test/node_modules/glob/common.js",
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~Minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "function",
    "name": "alphasorti",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~alphasorti",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "function",
    "name": "alphasort",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~alphasort",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "function",
    "name": "setupIgnores",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~setupIgnores",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 670,
    "kind": "function",
    "name": "ignoreMap",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~ignoreMap",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"matcher\": *, \"gmatcher\": *}"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "function",
    "name": "setopts",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~setopts",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 672,
    "kind": "function",
    "name": "finish",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~finish",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 673,
    "kind": "function",
    "name": "mark",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~mark",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "function",
    "name": "makeAbs",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~makeAbs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "function",
    "name": "isIgnored",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~isIgnored",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "function",
    "name": "childrenIgnored",
    "memberof": "js/test/node_modules/glob/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/common.js~childrenIgnored",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "file",
    "name": "js/test/node_modules/glob/glob.js",
    "content": "// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nmodule.exports = glob\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar inherits = require('inherits')\nvar EE = require('events').EventEmitter\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar globSync = require('./sync.js')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar inflight = require('inflight')\nvar util = require('util')\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nvar once = require('once')\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {}\n  if (!options) options = {}\n\n  if (options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return globSync(pattern, options)\n  }\n\n  return new Glob(pattern, options, cb)\n}\n\nglob.sync = globSync\nvar GlobSync = glob.GlobSync = globSync.GlobSync\n\n// old api surface\nglob.glob = glob\n\nfunction extend (origin, add) {\n  if (add === null || typeof add !== 'object') {\n    return origin\n  }\n\n  var keys = Object.keys(add)\n  var i = keys.length\n  while (i--) {\n    origin[keys[i]] = add[keys[i]]\n  }\n  return origin\n}\n\nglob.hasMagic = function (pattern, options_) {\n  var options = extend({}, options_)\n  options.noprocess = true\n\n  var g = new Glob(pattern, options)\n  var set = g.minimatch.set\n\n  if (!pattern)\n    return false\n\n  if (set.length > 1)\n    return true\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string')\n      return true\n  }\n\n  return false\n}\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = null\n  }\n\n  if (options && options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return new GlobSync(pattern, options)\n  }\n\n  if (!(this instanceof Glob))\n    return new Glob(pattern, options, cb)\n\n  setopts(this, pattern, options)\n  this._didRealPath = false\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  if (typeof cb === 'function') {\n    cb = once(cb)\n    this.on('error', cb)\n    this.on('end', function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  var self = this\n  var n = this.minimatch.set.length\n  this._processing = 0\n  this.matches = new Array(n)\n\n  this._emitQueue = []\n  this._processQueue = []\n  this.paused = false\n\n  if (this.noprocess)\n    return this\n\n  if (n === 0)\n    return done()\n\n  var sync = true\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false, done)\n  }\n  sync = false\n\n  function done () {\n    --self._processing\n    if (self._processing <= 0) {\n      if (sync) {\n        process.nextTick(function () {\n          self._finish()\n        })\n      } else {\n        self._finish()\n      }\n    }\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n  if (this.aborted)\n    return\n\n  if (this.realpath && !this._didRealpath)\n    return this._realpath()\n\n  common.finish(this)\n  this.emit('end', this.found)\n}\n\nGlob.prototype._realpath = function () {\n  if (this._didRealpath)\n    return\n\n  this._didRealpath = true\n\n  var n = this.matches.length\n  if (n === 0)\n    return this._finish()\n\n  var self = this\n  for (var i = 0; i < this.matches.length; i++)\n    this._realpathSet(i, next)\n\n  function next () {\n    if (--n === 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._realpathSet = function (index, cb) {\n  var matchset = this.matches[index]\n  if (!matchset)\n    return cb()\n\n  var found = Object.keys(matchset)\n  var self = this\n  var n = found.length\n\n  if (n === 0)\n    return cb()\n\n  var set = this.matches[index] = Object.create(null)\n  found.forEach(function (p, i) {\n    // If there's a problem with the stat, then it means that\n    // one or more of the links in the realpath couldn't be\n    // resolved.  just return the abs value in that case.\n    p = self._makeAbs(p)\n    rp.realpath(p, self.realpathCache, function (er, real) {\n      if (!er)\n        set[real] = true\n      else if (er.syscall === 'stat')\n        set[p] = true\n      else\n        self.emit('error', er) // srsly wtf right here\n\n      if (--n === 0) {\n        self.matches[index] = set\n        cb()\n      }\n    })\n  })\n}\n\nGlob.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlob.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit('abort')\n}\n\nGlob.prototype.pause = function () {\n  if (!this.paused) {\n    this.paused = true\n    this.emit('pause')\n  }\n}\n\nGlob.prototype.resume = function () {\n  if (this.paused) {\n    this.emit('resume')\n    this.paused = false\n    if (this._emitQueue.length) {\n      var eq = this._emitQueue.slice(0)\n      this._emitQueue.length = 0\n      for (var i = 0; i < eq.length; i ++) {\n        var e = eq[i]\n        this._emitMatch(e[0], e[1])\n      }\n    }\n    if (this._processQueue.length) {\n      var pq = this._processQueue.slice(0)\n      this._processQueue.length = 0\n      for (var i = 0; i < pq.length; i ++) {\n        var p = pq[i]\n        this._processing--\n        this._process(p[0], p[1], p[2], p[3])\n      }\n    }\n  }\n}\n\nGlob.prototype._process = function (pattern, index, inGlobStar, cb) {\n  assert(this instanceof Glob)\n  assert(typeof cb === 'function')\n\n  if (this.aborted)\n    return\n\n  this._processing++\n  if (this.paused) {\n    this._processQueue.push([pattern, index, inGlobStar, cb])\n    return\n  }\n\n  //console.error('PROCESS %d', this._processing, pattern)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index, cb)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip _processing\n  if (childrenIgnored(this, read))\n    return cb()\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)\n}\n\nGlob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\nGlob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return cb()\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return cb()\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return cb()\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix) {\n      if (prefix !== '/')\n        e = prefix + '/' + e\n      else\n        e = prefix + e\n    }\n    this._process([e].concat(remain), index, inGlobStar, cb)\n  }\n  cb()\n}\n\nGlob.prototype._emitMatch = function (index, e) {\n  if (this.aborted)\n    return\n\n  if (isIgnored(this, e))\n    return\n\n  if (this.paused) {\n    this._emitQueue.push([index, e])\n    return\n  }\n\n  var abs = isAbsolute(e) ? e : this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute)\n    e = abs\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  var st = this.statCache[abs]\n  if (st)\n    this.emit('stat', e, st)\n\n  this.emit('match', e)\n}\n\nGlob.prototype._readdirInGlobStar = function (abs, cb) {\n  if (this.aborted)\n    return\n\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false, cb)\n\n  var lstatkey = 'lstat\\0' + abs\n  var self = this\n  var lstatcb = inflight(lstatkey, lstatcb_)\n\n  if (lstatcb)\n    fs.lstat(abs, lstatcb)\n\n  function lstatcb_ (er, lstat) {\n    if (er && er.code === 'ENOENT')\n      return cb()\n\n    var isSym = lstat && lstat.isSymbolicLink()\n    self.symlinks[abs] = isSym\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) {\n      self.cache[abs] = 'FILE'\n      cb()\n    } else\n      self._readdir(abs, false, cb)\n  }\n}\n\nGlob.prototype._readdir = function (abs, inGlobStar, cb) {\n  if (this.aborted)\n    return\n\n  cb = inflight('readdir\\0'+abs+'\\0'+inGlobStar, cb)\n  if (!cb)\n    return\n\n  //console.error('RD %j %j', +inGlobStar, abs)\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs, cb)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return cb()\n\n    if (Array.isArray(c))\n      return cb(null, c)\n  }\n\n  var self = this\n  fs.readdir(abs, readdirCb(this, abs, cb))\n}\n\nfunction readdirCb (self, abs, cb) {\n  return function (er, entries) {\n    if (er)\n      self._readdirError(abs, er, cb)\n    else\n      self._readdirEntries(abs, entries, cb)\n  }\n}\n\nGlob.prototype._readdirEntries = function (abs, entries, cb) {\n  if (this.aborted)\n    return\n\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n  return cb(null, entries)\n}\n\nGlob.prototype._readdirError = function (f, er, cb) {\n  if (this.aborted)\n    return\n\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        this.emit('error', error)\n        this.abort()\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n\n  return cb()\n}\n\nGlob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\n\nGlob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n  //console.error('pgs2', prefix, remain[0], entries)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return cb()\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false, cb)\n\n  var isSym = this.symlinks[abs]\n  var len = entries.length\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return cb()\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true, cb)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true, cb)\n  }\n\n  cb()\n}\n\nGlob.prototype._processSimple = function (prefix, index, cb) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var self = this\n  this._stat(prefix, function (er, exists) {\n    self._processSimple2(prefix, index, er, exists, cb)\n  })\n}\nGlob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {\n\n  //console.error('ps2', prefix, exists)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return cb()\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n  cb()\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return cb()\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return cb(null, c)\n\n    if (needDir && c === 'FILE')\n      return cb()\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (stat !== undefined) {\n    if (stat === false)\n      return cb(null, stat)\n    else {\n      var type = stat.isDirectory() ? 'DIR' : 'FILE'\n      if (needDir && type === 'FILE')\n        return cb()\n      else\n        return cb(null, type, stat)\n    }\n  }\n\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb_)\n  if (statcb)\n    fs.lstat(abs, statcb)\n\n  function lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n    this.statCache[abs] = false\n    return cb()\n  }\n\n  var needDir = f.slice(-1) === '/'\n  this.statCache[abs] = stat\n\n  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())\n    return cb(null, false, stat)\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return cb()\n\n  return cb(null, c, stat)\n}\n",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 678,
    "kind": "variable",
    "name": "fs",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~fs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "variable",
    "name": "rp",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~rp",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "variable",
    "name": "minimatch",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 681,
    "kind": "variable",
    "name": "Minimatch",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~Minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 682,
    "kind": "variable",
    "name": "inherits",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~inherits",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "variable",
    "name": "EE",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~EE",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 684,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "variable",
    "name": "assert",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~assert",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "variable",
    "name": "isAbsolute",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~isAbsolute",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "variable",
    "name": "globSync",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~globSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "variable",
    "name": "common",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~common",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 689,
    "kind": "variable",
    "name": "alphasort",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~alphasort",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "variable",
    "name": "alphasorti",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~alphasorti",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "variable",
    "name": "setopts",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~setopts",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "variable",
    "name": "ownProp",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~ownProp",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "variable",
    "name": "inflight",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~inflight",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 694,
    "kind": "variable",
    "name": "util",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~util",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "variable",
    "name": "childrenIgnored",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~childrenIgnored",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "variable",
    "name": "isIgnored",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~isIgnored",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "variable",
    "name": "once",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~once",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "function",
    "name": "glob",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~glob",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 699,
    "kind": "variable",
    "name": "GlobSync",
    "memberof": "js/test/node_modules/glob/glob.js",
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~GlobSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 700,
    "kind": "function",
    "name": "extend",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~extend",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "origin",
        "types": [
          "*"
        ]
      },
      {
        "name": "add",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 701,
    "kind": "function",
    "name": "hasMagic",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~hasMagic",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 702,
    "kind": "function",
    "name": "Glob",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~Glob",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "function",
    "name": "_finish",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_finish",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "function",
    "name": "_realpath",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_realpath",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 705,
    "kind": "function",
    "name": "_realpathSet",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_realpathSet",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 706,
    "kind": "function",
    "name": "_mark",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_mark",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "function",
    "name": "_makeAbs",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_makeAbs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "function",
    "name": "abort",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~abort",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 709,
    "kind": "function",
    "name": "pause",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~pause",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 710,
    "kind": "function",
    "name": "resume",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~resume",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 711,
    "kind": "function",
    "name": "_process",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_process",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "function",
    "name": "_processReaddir",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_processReaddir",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "read",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "remain",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 713,
    "kind": "function",
    "name": "_processReaddir2",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_processReaddir2",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 377,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "read",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "remain",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      },
      {
        "name": "entries",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "function",
    "name": "_emitMatch",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_emitMatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 715,
    "kind": "function",
    "name": "_readdirInGlobStar",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_readdirInGlobStar",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 494,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "function",
    "name": "_readdir",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_readdir",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 527,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "function",
    "name": "readdirCb",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~readdirCb",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 552,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "function",
    "name": "_readdirEntries",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_readdirEntries",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 561,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "entries",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "function",
    "name": "_readdirError",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_readdirError",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 583,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "er",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "function",
    "name": "_processGlobStar",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_processGlobStar",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 625,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "read",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "remain",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 721,
    "kind": "function",
    "name": "_processGlobStar2",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_processGlobStar2",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 633,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "read",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "remain",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      },
      {
        "name": "entries",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "function",
    "name": "_processSimple",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_processSimple",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 673,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 723,
    "kind": "function",
    "name": "_processSimple2",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_processSimple2",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 681,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "er",
        "types": [
          "*"
        ]
      },
      {
        "name": "exists",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "function",
    "name": "_stat",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_stat",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 712,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "function",
    "name": "_stat2",
    "memberof": "js/test/node_modules/glob/glob.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/glob.js~_stat2",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/glob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 771,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "er",
        "types": [
          "*"
        ]
      },
      {
        "name": "stat",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "file",
    "name": "js/test/node_modules/glob/sync.js",
    "content": "module.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar Glob = require('./glob.js').Glob\nvar util = require('util')\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  if (!(this instanceof GlobSync))\n    return new GlobSync(pattern, options)\n\n  setopts(this, pattern, options)\n\n  if (this.noprocess)\n    return this\n\n  var n = this.minimatch.set.length\n  this.matches = new Array(n)\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false)\n  }\n  this._finish()\n}\n\nGlobSync.prototype._finish = function () {\n  assert(this instanceof GlobSync)\n  if (this.realpath) {\n    var self = this\n    this.matches.forEach(function (matchset, index) {\n      var set = self.matches[index] = Object.create(null)\n      for (var p in matchset) {\n        try {\n          p = self._makeAbs(p)\n          var real = rp.realpathSync(p, self.realpathCache)\n          set[real] = true\n        } catch (er) {\n          if (er.syscall === 'stat')\n            set[self._makeAbs(p)] = true\n          else\n            throw er\n        }\n      }\n    })\n  }\n  common.finish(this)\n}\n\n\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\n  assert(this instanceof GlobSync)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // See if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip processing\n  if (childrenIgnored(this, read))\n    return\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\n}\n\n\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\n  var entries = this._readdir(abs, inGlobStar)\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix.slice(-1) !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix)\n      newPattern = [prefix, e]\n    else\n      newPattern = [e]\n    this._process(newPattern.concat(remain), index, inGlobStar)\n  }\n}\n\n\nGlobSync.prototype._emitMatch = function (index, e) {\n  if (isIgnored(this, e))\n    return\n\n  var abs = this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute) {\n    e = abs\n  }\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  if (this.stat)\n    this._stat(e)\n}\n\n\nGlobSync.prototype._readdirInGlobStar = function (abs) {\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false)\n\n  var entries\n  var lstat\n  var stat\n  try {\n    lstat = fs.lstatSync(abs)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      // lstat failed, doesn't exist\n      return null\n    }\n  }\n\n  var isSym = lstat && lstat.isSymbolicLink()\n  this.symlinks[abs] = isSym\n\n  // If it's not a symlink or a dir, then it's definitely a regular file.\n  // don't bother doing a readdir in that case.\n  if (!isSym && lstat && !lstat.isDirectory())\n    this.cache[abs] = 'FILE'\n  else\n    entries = this._readdir(abs, false)\n\n  return entries\n}\n\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\n  var entries\n\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return null\n\n    if (Array.isArray(c))\n      return c\n  }\n\n  try {\n    return this._readdirEntries(abs, fs.readdirSync(abs))\n  } catch (er) {\n    this._readdirError(abs, er)\n    return null\n  }\n}\n\nGlobSync.prototype._readdirEntries = function (abs, entries) {\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n\n  // mark and cache dir-ness\n  return entries\n}\n\nGlobSync.prototype._readdirError = function (f, er) {\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        throw error\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n}\n\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\n\n  var entries = this._readdir(abs, inGlobStar)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false)\n\n  var len = entries.length\n  var isSym = this.symlinks[abs]\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true)\n  }\n}\n\nGlobSync.prototype._processSimple = function (prefix, index) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var exists = this._stat(prefix)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function (f) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return false\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return c\n\n    if (needDir && c === 'FILE')\n      return false\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (!stat) {\n    var lstat\n    try {\n      lstat = fs.lstatSync(abs)\n    } catch (er) {\n      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n        this.statCache[abs] = false\n        return false\n      }\n    }\n\n    if (lstat && lstat.isSymbolicLink()) {\n      try {\n        stat = fs.statSync(abs)\n      } catch (er) {\n        stat = lstat\n      }\n    } else {\n      stat = lstat\n    }\n  }\n\n  this.statCache[abs] = stat\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return false\n\n  return c\n}\n\nGlobSync.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlobSync.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 727,
    "kind": "variable",
    "name": "fs",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~fs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "variable",
    "name": "rp",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~rp",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "variable",
    "name": "minimatch",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "variable",
    "name": "Minimatch",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~Minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "variable",
    "name": "Glob",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~Glob",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "variable",
    "name": "util",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~util",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "variable",
    "name": "assert",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~assert",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "variable",
    "name": "isAbsolute",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~isAbsolute",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "variable",
    "name": "common",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~common",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "variable",
    "name": "alphasort",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~alphasort",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "variable",
    "name": "alphasorti",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~alphasorti",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "variable",
    "name": "setopts",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~setopts",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "variable",
    "name": "ownProp",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~ownProp",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "variable",
    "name": "childrenIgnored",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~childrenIgnored",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "variable",
    "name": "isIgnored",
    "memberof": "js/test/node_modules/glob/sync.js",
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~isIgnored",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "function",
    "name": "globSync",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~globSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "function",
    "name": "GlobSync",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~GlobSync",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "function",
    "name": "_finish",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_finish",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 746,
    "kind": "function",
    "name": "_process",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_process",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 747,
    "kind": "function",
    "name": "_processReaddir",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_processReaddir",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "read",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "remain",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 748,
    "kind": "function",
    "name": "_emitMatch",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_emitMatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 749,
    "kind": "function",
    "name": "_readdirInGlobStar",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_readdirInGlobStar",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "abs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 750,
    "kind": "function",
    "name": "_readdir",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_readdir",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 751,
    "kind": "function",
    "name": "_readdirEntries",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_readdirEntries",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "entries",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "function",
    "name": "_readdirError",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_readdirError",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "er",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 753,
    "kind": "function",
    "name": "_processGlobStar",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_processGlobStar",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "read",
        "types": [
          "*"
        ]
      },
      {
        "name": "abs",
        "types": [
          "*"
        ]
      },
      {
        "name": "remain",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "inGlobStar",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 754,
    "kind": "function",
    "name": "_processSimple",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_processSimple",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 755,
    "kind": "function",
    "name": "_stat",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_stat",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 418,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "function",
    "name": "_mark",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_mark",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "function",
    "name": "_makeAbs",
    "memberof": "js/test/node_modules/glob/sync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/glob/sync.js~_makeAbs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/glob/sync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "file",
    "name": "js/test/node_modules/inflight/inflight.js",
    "content": "var wrappy = require('wrappy')\nvar reqs = Object.create(null)\nvar once = require('once')\n\nmodule.exports = wrappy(inflight)\n\nfunction inflight (key, cb) {\n  if (reqs[key]) {\n    reqs[key].push(cb)\n    return null\n  } else {\n    reqs[key] = [cb]\n    return makeres(key)\n  }\n}\n\nfunction makeres (key) {\n  return once(function RES () {\n    var cbs = reqs[key]\n    var len = cbs.length\n    var args = slice(arguments)\n\n    // XXX It's somewhat ambiguous whether a new callback added in this\n    // pass should be queued for later execution if something in the\n    // list of callbacks throws, or if it should just be discarded.\n    // However, it's such an edge case that it hardly matters, and either\n    // choice is likely as surprising as the other.\n    // As it happens, we do go ahead and schedule it for later execution.\n    try {\n      for (var i = 0; i < len; i++) {\n        cbs[i].apply(null, args)\n      }\n    } finally {\n      if (cbs.length > len) {\n        // added more in the interim.\n        // de-zalgo, just in case, but don't call again.\n        cbs.splice(0, len)\n        process.nextTick(function () {\n          RES.apply(null, args)\n        })\n      } else {\n        delete reqs[key]\n      }\n    }\n  })\n}\n\nfunction slice (args) {\n  var length = args.length\n  var array = []\n\n  for (var i = 0; i < length; i++) array[i] = args[i]\n  return array\n}\n",
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 759,
    "kind": "variable",
    "name": "wrappy",
    "memberof": "js/test/node_modules/inflight/inflight.js",
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js~wrappy",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/inflight/inflight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 760,
    "kind": "variable",
    "name": "reqs",
    "memberof": "js/test/node_modules/inflight/inflight.js",
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js~reqs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/inflight/inflight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "variable",
    "name": "once",
    "memberof": "js/test/node_modules/inflight/inflight.js",
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js~once",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/inflight/inflight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "function",
    "name": "inflight",
    "memberof": "js/test/node_modules/inflight/inflight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js~inflight",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/inflight/inflight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "function",
    "name": "makeres",
    "memberof": "js/test/node_modules/inflight/inflight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js~makeres",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/inflight/inflight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "function",
    "name": "slice",
    "memberof": "js/test/node_modules/inflight/inflight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/inflight/inflight.js~slice",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/inflight/inflight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "file",
    "name": "js/test/node_modules/inherits/inherits.js",
    "content": "try {\n  var util = require('util');\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  module.exports = require('./inherits_browser.js');\n}\n",
    "static": true,
    "longname": "js/test/node_modules/inherits/inherits.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 766,
    "kind": "file",
    "name": "js/test/node_modules/inherits/inherits_browser.js",
    "content": "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n",
    "static": true,
    "longname": "js/test/node_modules/inherits/inherits_browser.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 767,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/Gruntfile.js",
    "content": "module.exports = function(grunt) {\n  var pkg = require(\"./package.json\");\n  global.jasmineVersion = pkg.version;\n  var versionString = 'v' + pkg.version;\n\n  grunt.initConfig({\n    pkg: pkg,\n    jshint: {all: ['lib/**/*.js', 'spec/**/*.js']}\n  });\n\n  var shell = require('shelljs');\n  function runCommands(commands, done) {\n    var command = commands.shift();\n\n    if (command) {\n      shell.exec(command, function(exitCode) {\n        if (exitCode !== 0) {\n          grunt.fail.fatal(\"Command `\" + command + \"` failed\", exitCode);\n          done();\n        } else {\n          runCommands(commands, done);\n        }\n      });\n    } else {\n      done();\n    }\n  }\n\n  // depend on jshint:all, specs?\n  grunt.registerTask('release',\n                     'Create tag ' + versionString + ' and push jasmine-' + pkg.version + ' to NPM',\n                     function() {\n    var done = this.async(),\n        commands = ['git tag ' + versionString, 'git push origin master --tags', 'npm publish'];\n\n    runCommands(commands, done);\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  grunt.loadTasks('tasks');\n\n  grunt.registerTask('default', ['jshint:all', 'specs']);\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/Gruntfile.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 768,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/jasmine/Gruntfile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/Gruntfile.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/Gruntfile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "grunt",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 769,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/bin/jasmine.js",
    "content": "#!/usr/bin/env node\n\nvar path = require('path'),\n    Command = require('../lib/command.js'),\n    Jasmine = require('../lib/jasmine.js');\n\nvar jasmine = new Jasmine({ projectBaseDir: path.resolve() });\nvar examplesDir = path.join(path.dirname(require.resolve('jasmine-core')), 'jasmine-core', 'example', 'node_example');\nvar command = new Command(path.resolve(), examplesDir, console.log);\n\ncommand.run(jasmine, process.argv.slice(2));\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/bin/jasmine.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 770,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/jasmine/bin/jasmine.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/bin/jasmine.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/bin/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "variable",
    "name": "jasmine",
    "memberof": "js/test/node_modules/jasmine/bin/jasmine.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/bin/jasmine.js~jasmine",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/bin/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Jasmine"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "variable",
    "name": "examplesDir",
    "memberof": "js/test/node_modules/jasmine/bin/jasmine.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/bin/jasmine.js~examplesDir",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/bin/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "variable",
    "name": "command",
    "memberof": "js/test/node_modules/jasmine/bin/jasmine.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/bin/jasmine.js~command",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/bin/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Command"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/command.js",
    "content": "var path = require('path'),\n    fs = require('fs');\n\nexports = module.exports = Command;\n\nvar subCommands = {\n  init: {\n    description: 'initialize jasmine',\n    action: initJasmine\n  },\n  examples: {\n    description: 'install examples',\n    action: installExamples\n  },\n  help: {\n    description: 'show help',\n    action: help,\n    alias: '-h'\n  },\n  version: {\n    description: 'show jasmine and jasmine-core versions',\n    action: version,\n    alias: '-v'\n  }\n};\n\nfunction Command(projectBaseDir, examplesDir, print) {\n  this.projectBaseDir = projectBaseDir;\n  this.specDir = path.join(projectBaseDir, 'spec');\n\n  var command = this;\n\n  this.run = function(jasmine, commands) {\n    setEnvironmentVariables(commands);\n\n    var commandToRun;\n    Object.keys(subCommands).forEach(function(cmd) {\n      var commandObject = subCommands[cmd];\n        if (commands.indexOf(cmd) >= 0) {\n        commandToRun = commandObject;\n      } else if(commandObject.alias && commands.indexOf(commandObject.alias) >= 0) {\n        commandToRun = commandObject;\n      }\n    });\n\n    if (commandToRun) {\n      commandToRun.action({jasmine: jasmine, projectBaseDir: command.projectBaseDir, specDir: command.specDir, examplesDir: examplesDir, print: print});\n    } else {\n      runJasmine(jasmine, parseOptions(commands));\n    }\n  };\n}\n\nfunction isFileArg(arg) {\n  return arg.indexOf('--') !== 0 && !isEnvironmentVariable(arg);\n}\n\nfunction parseOptions(argv) {\n  var files = [],\n      helpers = [],\n      color = process.stdout.isTTY || false,\n      filter,\n      stopOnFailure,\n      random,\n      seed;\n\n  argv.forEach(function(arg) {\n    if (arg === '--no-color') {\n      color = false;\n    } else if (arg.match(\"^--filter=\")) {\n      filter = arg.match(\"^--filter=(.*)\")[1];\n    } else if (arg.match(\"^--helper=\")) {\n      helpers.push(arg.match(\"^--helper=(.*)\")[1]);\n    } else if (arg.match(\"^--stop-on-failure=\")) {\n      stopOnFailure = arg.match(\"^--stop-on-failure=(.*)\")[1] === 'true';\n    } else if (arg.match(\"^--random=\")) {\n      random = arg.match(\"^--random=(.*)\")[1] === 'true';\n    } else if (arg.match(\"^--seed=\")) {\n      seed = arg.match(\"^--seed=(.*)\")[1];\n    } else if (isFileArg(arg)) {\n      files.push(arg);\n    }\n  });\n  return {\n    color: color,\n    filter: filter,\n    stopOnFailure: stopOnFailure,\n    helpers: helpers,\n    files: files,\n    random: random,\n    seed: seed\n  };\n}\n\nfunction runJasmine(jasmine, env) {\n  jasmine.loadConfigFile(process.env.JASMINE_CONFIG_PATH);\n  if (env.stopOnFailure !== undefined) {\n    jasmine.stopSpecOnExpectationFailure(env.stopOnFailure);\n  }\n  if (env.seed !== undefined) {\n    jasmine.seed(env.seed);\n  }\n  if (env.random !== undefined) {\n    jasmine.randomizeTests(env.random);\n  }\n  if (env.helpers !== undefined && env.helpers.length) {\n    jasmine.addHelperFiles(env.helpers);\n  }\n  jasmine.showColors(env.color);\n  jasmine.execute(env.files, env.filter);\n}\n\nfunction initJasmine(options) {\n  var print = options.print;\n  var specDir = options.specDir;\n  makeDirStructure(path.join(specDir, 'support/'));\n  if(!fs.existsSync(path.join(specDir, 'support/jasmine.json'))) {\n    fs.writeFileSync(path.join(specDir, 'support/jasmine.json'), fs.readFileSync(path.join(__dirname, '../lib/examples/jasmine.json'), 'utf-8'));\n  }\n  else {\n    print('spec/support/jasmine.json already exists in your project.');\n  }\n}\n\nfunction installExamples(options) {\n  var specDir = options.specDir;\n  var projectBaseDir = options.projectBaseDir;\n  var examplesDir = options.examplesDir;\n\n  makeDirStructure(path.join(specDir, 'support'));\n  makeDirStructure(path.join(specDir, 'jasmine_examples'));\n  makeDirStructure(path.join(specDir, 'helpers', 'jasmine_examples'));\n  makeDirStructure(path.join(projectBaseDir, 'lib', 'jasmine_examples'));\n\n  copyFiles(\n    path.join(examplesDir, 'spec', 'helpers', 'jasmine_examples'),\n    path.join(specDir, 'helpers', 'jasmine_examples'),\n    new RegExp(/[Hh]elper\\.js/)\n  );\n\n  copyFiles(\n    path.join(examplesDir, 'lib', 'jasmine_examples'),\n    path.join(projectBaseDir, 'lib', 'jasmine_examples'),\n    new RegExp(/\\.js/)\n  );\n\n  copyFiles(\n    path.join(examplesDir, 'spec', 'jasmine_examples'),\n    path.join(specDir, 'jasmine_examples'),\n    new RegExp(/[Ss]pec.js/)\n  );\n}\n\nfunction help(options) {\n  var print = options.print;\n  print('Usage: jasmine [command] [options] [files]');\n  print('');\n  print('Commands:');\n  Object.keys(subCommands).forEach(function(cmd) {\n    var commandNameText = cmd;\n    if(subCommands[cmd].alias) {\n      commandNameText = commandNameText + ',' + subCommands[cmd].alias;\n    }\n    print('%s\\t%s', lPad(commandNameText, 10), subCommands[cmd].description);\n  });\n  print('');\n  print('If no command is given, jasmine specs will be run');\n  print('');\n  print('');\n\n  print('Options:');\n  print('%s\\tturn off color in spec output', lPad('--no-color', 18));\n  print('%s\\tfilter specs to run only those that match the given string', lPad('--filter=', 18));\n  print('%s\\tload helper files that match the given string', lPad('--helper=', 18));\n  print('%s\\t[true|false] stop spec execution on expectation failure', lPad('--stop-on-failure=', 18));\n  print('');\n  print('The given arguments take precedence over options in your jasmine.json');\n  print('The path to your optional jasmine.json can be configured by setting the JASMINE_CONFIG_PATH environment variable');\n}\n\nfunction version(options) {\n  var print = options.print;\n  print('jasmine v' + require('../package.json').version);\n  print('jasmine-core v' + options.jasmine.coreVersion());\n}\n\nfunction lPad(str, length) {\n  if (str.length >= length) {\n    return str;\n  } else {\n    return lPad(' ' + str, length);\n  }\n}\n\nfunction copyFiles(srcDir, destDir, pattern) {\n  var srcDirFiles = fs.readdirSync(srcDir);\n  srcDirFiles.forEach(function(file) {\n    if (file.search(pattern) !== -1) {\n      fs.writeFileSync(path.join(destDir, file), fs.readFileSync(path.join(srcDir, file)));\n    }\n  });\n}\n\nfunction makeDirStructure(absolutePath) {\n  var splitPath = absolutePath.split(path.sep);\n  splitPath.forEach(function(dir, index) {\n    if(index > 1) {\n      var fullPath = path.join(splitPath.slice(0, index).join('/'), dir);\n      if (!fs.existsSync(fullPath)) {\n        fs.mkdirSync(fullPath);\n      }\n    }\n  });\n}\n\nfunction isEnvironmentVariable(command) {\n  var envRegExp = /(.*)=(.*)/;\n  return command.match(envRegExp);\n}\n\nfunction setEnvironmentVariables(commands) {\n  commands.forEach(function (command) {\n    var regExpMatch = isEnvironmentVariable(command);\n    if(regExpMatch) {\n      var key = regExpMatch[1];\n      var value = regExpMatch[2];\n      process.env[key] = value;\n    }\n  });\n}\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 775,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 776,
    "kind": "variable",
    "name": "subCommands",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~subCommands",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"init\": *, \"examples\": *, \"help\": *, \"version\": *}"
      ]
    }
  },
  {
    "__docId__": 777,
    "kind": "function",
    "name": "Command",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~Command",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "projectBaseDir",
        "types": [
          "*"
        ]
      },
      {
        "name": "examplesDir",
        "types": [
          "*"
        ]
      },
      {
        "name": "print",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 778,
    "kind": "function",
    "name": "isFileArg",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~isFileArg",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "arg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 779,
    "kind": "function",
    "name": "parseOptions",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~parseOptions",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "argv",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"color\": *, \"filter\": *, \"stopOnFailure\": *, \"helpers\": *, \"files\": *, \"random\": *, \"seed\": *}"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "function",
    "name": "runJasmine",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~runJasmine",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "jasmine",
        "types": [
          "*"
        ]
      },
      {
        "name": "env",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 781,
    "kind": "function",
    "name": "initJasmine",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~initJasmine",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 782,
    "kind": "function",
    "name": "installExamples",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~installExamples",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 783,
    "kind": "function",
    "name": "help",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~help",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 784,
    "kind": "function",
    "name": "version",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~version",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 785,
    "kind": "function",
    "name": "lPad",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~lPad",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 786,
    "kind": "function",
    "name": "copyFiles",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~copyFiles",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "srcDir",
        "types": [
          "*"
        ]
      },
      {
        "name": "destDir",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 787,
    "kind": "function",
    "name": "makeDirStructure",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~makeDirStructure",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "absolutePath",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 788,
    "kind": "function",
    "name": "isEnvironmentVariable",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~isEnvironmentVariable",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "function",
    "name": "setEnvironmentVariables",
    "memberof": "js/test/node_modules/jasmine/lib/command.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/command.js~setEnvironmentVariables",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/command.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "commands",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 790,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/exit.js",
    "content": "module.exports = function(exitCode, platform, nodeVersion, exit, nodeExit) {\n  if(isWindows(platform) && olderThan12(nodeVersion)) {\n    nodeExit(exitCode);\n  }\n  else {\n    exit(exitCode);\n  }\n};\n\nfunction isWindows(platform) {\n  return /^win/.test(platform);\n}\n\nfunction olderThan12(nodeVersion) {\n  var version = nodeVersion.split('.');\n  return parseInt(version[0].substr(1), 10) <= 0 && parseInt(version[1], 10) < 12;\n}",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/exit.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 791,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/jasmine/lib/exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/exit.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/exit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "exitCode",
        "types": [
          "*"
        ]
      },
      {
        "name": "platform",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeVersion",
        "types": [
          "*"
        ]
      },
      {
        "name": "exit",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeExit",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 792,
    "kind": "function",
    "name": "isWindows",
    "memberof": "js/test/node_modules/jasmine/lib/exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/exit.js~isWindows",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/exit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "platform",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "function",
    "name": "olderThan12",
    "memberof": "js/test/node_modules/jasmine/lib/exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/exit.js~olderThan12",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/exit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "nodeVersion",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 794,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/filters/console_spec_filter.js",
    "content": "module.exports = exports = ConsoleSpecFilter;\n\nfunction ConsoleSpecFilter(options) {\n  var filterString = options && options.filterString;\n  var filterPattern = new RegExp(filterString);\n\n  this.matches = function(specName) {\n    return filterPattern.test(specName);\n  };\n}\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/filters/console_spec_filter.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 795,
    "kind": "function",
    "name": "ConsoleSpecFilter",
    "memberof": "js/test/node_modules/jasmine/lib/filters/console_spec_filter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/filters/console_spec_filter.js~ConsoleSpecFilter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/filters/console_spec_filter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 796,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/jasmine.js",
    "content": "var path = require('path'),\n    util = require('util'),\n    glob = require('glob'),\n    exit = require('./exit'),\n    CompletionReporter = require('./reporters/completion_reporter'),\n    ConsoleSpecFilter = require('./filters/console_spec_filter');\n\nmodule.exports = Jasmine;\nmodule.exports.ConsoleReporter = require('./reporters/console_reporter');\n\nfunction Jasmine(options) {\n  options = options || {};\n  var jasmineCore = options.jasmineCore || require('jasmine-core');\n  this.jasmineCorePath = path.join(jasmineCore.files.path, 'jasmine.js');\n  this.jasmine = jasmineCore.boot(jasmineCore);\n  this.projectBaseDir = options.projectBaseDir || path.resolve();\n  this.printDeprecation = options.printDeprecation || require('./printDeprecation');\n  this.specDir = '';\n  this.specFiles = [];\n  this.helperFiles = [];\n  this.env = this.jasmine.getEnv();\n  this.reportersCount = 0;\n  this.completionReporter = new CompletionReporter();\n  this.onCompleteCallbackAdded = false;\n  this.exit = exit;\n  this.showingColors = true;\n  this.reporter = new module.exports.ConsoleReporter();\n  this.env.addReporter(this.reporter);\n  this.defaultReporterConfigured = false;\n\n  var jasmineRunner = this;\n  this.completionReporter.onComplete(function(passed) {\n    jasmineRunner.exitCodeCompletion(passed);\n  });\n\n  this.coreVersion = function() {\n    return jasmineCore.version();\n  };\n}\n\nJasmine.prototype.randomizeTests = function(value) {\n  this.env.randomizeTests(value);\n};\n\nJasmine.prototype.seed = function(value) {\n  this.env.seed(value);\n};\n\nJasmine.prototype.showColors = function(value) {\n  this.showingColors = value;\n};\n\nJasmine.prototype.addSpecFile = function(filePath) {\n  this.specFiles.push(filePath);\n};\n\nJasmine.prototype.addReporter = function(reporter) {\n  this.env.addReporter(reporter);\n  this.reportersCount++;\n};\n\nJasmine.prototype.provideFallbackReporter = function(reporter) {\n  this.env.provideFallbackReporter(reporter);\n};\n\nJasmine.prototype.configureDefaultReporter = function(options) {\n  options.timer = options.timer || new this.jasmine.Timer();\n  options.print = options.print || function() {\n    process.stdout.write(util.format.apply(this, arguments));\n  };\n  options.showColors = options.hasOwnProperty('showColors') ? options.showColors : true;\n  options.jasmineCorePath = options.jasmineCorePath || this.jasmineCorePath;\n\n  if(options.onComplete) {\n    this.printDeprecation('Passing in an onComplete function to configureDefaultReporter is deprecated.');\n  }\n  this.reporter.setOptions(options);\n  this.defaultReporterConfigured = true;\n};\n\nJasmine.prototype.addMatchers = function(matchers) {\n  this.jasmine.Expectation.addMatchers(matchers);\n};\n\nJasmine.prototype.loadSpecs = function() {\n  this.specFiles.forEach(function(file) {\n    require(file);\n  });\n};\n\nJasmine.prototype.loadHelpers = function() {\n  this.helperFiles.forEach(function(file) {\n    require(file);\n  });\n};\n\nJasmine.prototype.loadConfigFile = function(configFilePath) {\n  try {\n    var absoluteConfigFilePath = path.resolve(this.projectBaseDir, configFilePath || 'spec/support/jasmine.json');\n    var config = require(absoluteConfigFilePath);\n    this.loadConfig(config);\n  } catch (e) {\n    if(configFilePath || e.code != 'MODULE_NOT_FOUND') { throw e; }\n  }\n};\n\nJasmine.prototype.loadConfig = function(config) {\n  this.specDir = config.spec_dir || this.specDir;\n  this.env.throwOnExpectationFailure(config.stopSpecOnExpectationFailure);\n  this.env.randomizeTests(config.random);\n\n  if(config.helpers) {\n    this.addHelperFiles(config.helpers);\n  }\n\n  if(config.spec_files) {\n    this.addSpecFiles(config.spec_files);\n  }\n};\n\nJasmine.prototype.addHelperFiles = addFiles('helperFiles');\nJasmine.prototype.addSpecFiles = addFiles('specFiles');\n\nfunction addFiles(kind) {\n  return function (files) {\n    var jasmineRunner = this;\n    var fileArr = this[kind];\n\n    files.forEach(function(file) {\n      if(!(path.isAbsolute && path.isAbsolute(file))) {\n        file = path.join(jasmineRunner.projectBaseDir, jasmineRunner.specDir, file);\n      }\n      var filePaths = glob.sync(file);\n      filePaths.forEach(function(filePath) {\n        if(fileArr.indexOf(filePath) === -1) {\n          fileArr.push(filePath);\n        }\n      });\n    });\n  };\n}\n\nJasmine.prototype.onComplete = function(onCompleteCallback) {\n  this.completionReporter.onComplete(onCompleteCallback);\n};\n\nJasmine.prototype.stopSpecOnExpectationFailure = function(value) {\n  this.env.throwOnExpectationFailure(value);\n};\n\nJasmine.prototype.exitCodeCompletion = function(passed) {\n  if(passed) {\n    this.exit(0, process.platform, process.version, process.exit, require('exit'));\n  }\n  else {\n    this.exit(1, process.platform, process.version, process.exit, require('exit'));\n  }\n};\n\nJasmine.prototype.execute = function(files, filterString) {\n  this.loadHelpers();\n  if (!this.defaultReporterConfigured) {\n    this.configureDefaultReporter({ showColors: this.showingColors });\n  }\n\n  if(filterString) {\n    var specFilter = new ConsoleSpecFilter({\n      filterString: filterString\n    });\n    this.env.specFilter = function(spec) {\n      return specFilter.matches(spec.getFullName());\n    };\n  }\n\n  if (files && files.length > 0) {\n    this.specDir = '';\n    this.specFiles = [];\n    this.addSpecFiles(files);\n  }\n\n  this.loadSpecs();\n\n  this.addReporter(this.completionReporter);\n  this.env.execute();\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 797,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "function",
    "name": "Jasmine",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~Jasmine",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 799,
    "kind": "function",
    "name": "randomizeTests",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~randomizeTests",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 800,
    "kind": "function",
    "name": "seed",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~seed",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 801,
    "kind": "function",
    "name": "showColors",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~showColors",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 802,
    "kind": "function",
    "name": "addSpecFile",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~addSpecFile",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 803,
    "kind": "function",
    "name": "addReporter",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~addReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reporter",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 804,
    "kind": "function",
    "name": "provideFallbackReporter",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~provideFallbackReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "reporter",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 805,
    "kind": "function",
    "name": "configureDefaultReporter",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~configureDefaultReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 806,
    "kind": "function",
    "name": "addMatchers",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~addMatchers",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "matchers",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 807,
    "kind": "function",
    "name": "loadSpecs",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~loadSpecs",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 808,
    "kind": "function",
    "name": "loadHelpers",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~loadHelpers",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 809,
    "kind": "function",
    "name": "loadConfigFile",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~loadConfigFile",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "configFilePath",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 810,
    "kind": "function",
    "name": "loadConfig",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~loadConfig",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 811,
    "kind": "function",
    "name": "addFiles",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~addFiles",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 812,
    "kind": "function",
    "name": "onComplete",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~onComplete",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "onCompleteCallback",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 813,
    "kind": "function",
    "name": "stopSpecOnExpectationFailure",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~stopSpecOnExpectationFailure",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 814,
    "kind": "function",
    "name": "exitCodeCompletion",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~exitCodeCompletion",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "passed",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 815,
    "kind": "function",
    "name": "execute",
    "memberof": "js/test/node_modules/jasmine/lib/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/jasmine.js~execute",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "files",
        "types": [
          "*"
        ]
      },
      {
        "name": "filterString",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 816,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/printDeprecation.js",
    "content": "module.exports = function(message) {\n  console.warn('Deprecation warning: ' + message);\n};",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/printDeprecation.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 817,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/jasmine/lib/printDeprecation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/printDeprecation.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/printDeprecation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 818,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/reporters/completion_reporter.js",
    "content": "module.exports = function() {\n  var results = true;\n  var onCompleteCallback = function() {};\n\n  this.onComplete = function(callback) {\n    onCompleteCallback = callback;\n  };\n\n  this.jasmineDone = function(result) {\n    if (result && result.failedExpectations && result.failedExpectations.length > 0) {\n      results = false;\n    }\n    onCompleteCallback(results);\n  };\n\n  this.specDone = function(result) {\n    if(result.status === 'failed') {\n      results = false;\n    }\n  };\n\n  this.suiteDone = function(result) {\n    if (result.failedExpectations && result.failedExpectations.length > 0) {\n      results = false;\n    }\n  };\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/reporters/completion_reporter.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 819,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/jasmine/lib/reporters/completion_reporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/reporters/completion_reporter.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/reporters/completion_reporter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 820,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/lib/reporters/console_reporter.js",
    "content": "module.exports = exports = ConsoleReporter;\n\nvar noopTimer = {\n  start: function(){},\n  elapsed: function(){ return 0; }\n};\n\nfunction ConsoleReporter() {\n  var print = function() {},\n    showColors = false,\n    timer = noopTimer,\n    jasmineCorePath = null,\n    printDeprecation = function() {},\n    specCount,\n    executableSpecCount,\n    failureCount,\n    failedSpecs = [],\n    pendingSpecs = [],\n    ansi = {\n      green: '\\x1B[32m',\n      red: '\\x1B[31m',\n      yellow: '\\x1B[33m',\n      none: '\\x1B[0m'\n    },\n    failedSuites = [],\n    stackFilter = defaultStackFilter,\n    onComplete = function() {};\n\n  this.setOptions = function(options) {\n    if (options.print) {\n      print = options.print;\n    }\n    showColors = options.showColors || false;\n    if (options.timer) {\n      timer = options.timer;\n    }\n    if (options.jasmineCorePath) {\n      jasmineCorePath = options.jasmineCorePath;\n    }\n    if (options.printDeprecation) {\n      printDeprecation = options.printDeprecation;\n    }\n    if (options.stackFilter) {\n      stackFilter = options.stackFilter;\n    }\n\n    if(options.onComplete) {\n      printDeprecation('Passing in an onComplete function to the ConsoleReporter is deprecated.');\n      onComplete = options.onComplete;\n    }\n  };\n\n  this.jasmineStarted = function() {\n    specCount = 0;\n    executableSpecCount = 0;\n    failureCount = 0;\n    print('Started');\n    printNewline();\n    timer.start();\n  };\n\n  this.jasmineDone = function(result) {\n    printNewline();\n    printNewline();\n    if(failedSpecs.length > 0) {\n      print('Failures:');\n    }\n    for (var i = 0; i < failedSpecs.length; i++) {\n      specFailureDetails(failedSpecs[i], i + 1);\n    }\n\n    if (pendingSpecs.length > 0) {\n      print(\"Pending:\");\n    }\n    for(i = 0; i < pendingSpecs.length; i++) {\n      pendingSpecDetails(pendingSpecs[i], i + 1);\n    }\n\n    if(specCount > 0) {\n      printNewline();\n\n      if(executableSpecCount !== specCount) {\n        print('Ran ' + executableSpecCount + ' of ' + specCount + plural(' spec', specCount));\n        printNewline();\n      }\n      var specCounts = executableSpecCount + ' ' + plural('spec', executableSpecCount) + ', ' +\n        failureCount + ' ' + plural('failure', failureCount);\n\n      if (pendingSpecs.length) {\n        specCounts += ', ' + pendingSpecs.length + ' pending ' + plural('spec', pendingSpecs.length);\n      }\n\n      print(specCounts);\n    } else {\n      print('No specs found');\n    }\n\n    printNewline();\n    var seconds = timer.elapsed() / 1000;\n    print('Finished in ' + seconds + ' ' + plural('second', seconds));\n    printNewline();\n\n    for(i = 0; i < failedSuites.length; i++) {\n      suiteFailureDetails(failedSuites[i]);\n    }\n\n    if (result && result.failedExpectations) {\n      suiteFailureDetails(result);\n    }\n\n    if (result && result.order && result.order.random) {\n      print('Randomized with seed ' + result.order.seed);\n      printNewline();\n    }\n\n    onComplete(failureCount === 0);\n  };\n\n  this.specDone = function(result) {\n    specCount++;\n\n    if (result.status == 'pending') {\n      pendingSpecs.push(result);\n      executableSpecCount++;\n      print(colored('yellow', '*'));\n      return;\n    }\n\n    if (result.status == 'passed') {\n      executableSpecCount++;\n      print(colored('green', '.'));\n      return;\n    }\n\n    if (result.status == 'failed') {\n      failureCount++;\n      failedSpecs.push(result);\n      executableSpecCount++;\n      print(colored('red', 'F'));\n    }\n  };\n\n  this.suiteDone = function(result) {\n    if (result.failedExpectations && result.failedExpectations.length > 0) {\n      failureCount++;\n      failedSuites.push(result);\n    }\n  };\n\n  return this;\n\n  function printNewline() {\n    print('\\n');\n  }\n\n  function colored(color, str) {\n    return showColors ? (ansi[color] + str + ansi.none) : str;\n  }\n\n  function plural(str, count) {\n    return count == 1 ? str : str + 's';\n  }\n\n  function repeat(thing, times) {\n    var arr = [];\n    for (var i = 0; i < times; i++) {\n      arr.push(thing);\n    }\n    return arr;\n  }\n\n  function indent(str, spaces) {\n    var lines = (str || '').split('\\n');\n    var newArr = [];\n    for (var i = 0; i < lines.length; i++) {\n      newArr.push(repeat(' ', spaces).join('') + lines[i]);\n    }\n    return newArr.join('\\n');\n  }\n\n  function defaultStackFilter(stack) {\n    if (!stack) {\n      return '';\n    }\n\n    var filteredStack = stack.split('\\n').filter(function(stackLine) {\n      return stackLine.indexOf(jasmineCorePath) === -1;\n    }).join('\\n');\n    return filteredStack;\n  }\n\n  function specFailureDetails(result, failedSpecNumber) {\n    printNewline();\n    print(failedSpecNumber + ') ');\n    print(result.fullName);\n\n    for (var i = 0; i < result.failedExpectations.length; i++) {\n      var failedExpectation = result.failedExpectations[i];\n      printNewline();\n      print(indent('Message:', 2));\n      printNewline();\n      print(colored('red', indent(failedExpectation.message, 4)));\n      printNewline();\n      print(indent('Stack:', 2));\n      printNewline();\n      print(indent(stackFilter(failedExpectation.stack), 4));\n    }\n\n    printNewline();\n  }\n\n  function suiteFailureDetails(result) {\n    for (var i = 0; i < result.failedExpectations.length; i++) {\n      printNewline();\n      print(colored('red', 'An error was thrown in an afterAll'));\n      printNewline();\n      print(colored('red', 'AfterAll ' + result.failedExpectations[i].message));\n\n    }\n    printNewline();\n  }\n\n  function pendingSpecDetails(result, pendingSpecNumber) {\n    printNewline();\n    printNewline();\n    print(pendingSpecNumber + ') ');\n    print(result.fullName);\n    printNewline();\n    var pendingReason = \"No reason given\";\n    if (result.pendingReason && result.pendingReason !== '') {\n      pendingReason = result.pendingReason;\n    }\n    print(indent(colored('yellow', pendingReason), 2));\n    printNewline();\n  }\n}\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/reporters/console_reporter.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 821,
    "kind": "variable",
    "name": "noopTimer",
    "memberof": "js/test/node_modules/jasmine/lib/reporters/console_reporter.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/reporters/console_reporter.js~noopTimer",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/reporters/console_reporter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"start\": *, \"elapsed\": *}"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "function",
    "name": "ConsoleReporter",
    "memberof": "js/test/node_modules/jasmine/lib/reporters/console_reporter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/lib/reporters/console_reporter.js~ConsoleReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/lib/reporters/console_reporter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "file",
    "name": "js/test/node_modules/jasmine/tasks/jasmine.js",
    "content": "'use strict';\n\nmodule.exports = function(grunt) {\n  var Jasmine = require('../lib/jasmine');\n\n  grunt.registerTask('specs', function() {\n    var jasmine = new Jasmine();\n    var done = this.async();\n\n    jasmine.loadConfigFile(process.env.JASMINE_CONFIG_PATH || './spec/support/jasmine.json');\n    jasmine.onComplete(done);\n    jasmine.execute();\n  });\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine/tasks/jasmine.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 824,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/jasmine/tasks/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine/tasks/jasmine.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine/tasks/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "grunt",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 825,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/console/console.js",
    "content": "/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nfunction getJasmineRequireObj() {\n  if (typeof module !== 'undefined' && module.exports) {\n    return exports;\n  } else {\n    window.jasmineRequire = window.jasmineRequire || {};\n    return window.jasmineRequire;\n  }\n}\n\ngetJasmineRequireObj().console = function(jRequire, j$) {\n  j$.ConsoleReporter = jRequire.ConsoleReporter();\n};\n\ngetJasmineRequireObj().ConsoleReporter = function() {\n\n  var noopTimer = {\n    start: function(){},\n    elapsed: function(){ return 0; }\n  };\n\n  function ConsoleReporter(options) {\n    var print = options.print,\n      showColors = options.showColors || false,\n      onComplete = options.onComplete || function() {},\n      timer = options.timer || noopTimer,\n      specCount,\n      failureCount,\n      failedSpecs = [],\n      pendingCount,\n      ansi = {\n        green: '\\x1B[32m',\n        red: '\\x1B[31m',\n        yellow: '\\x1B[33m',\n        none: '\\x1B[0m'\n      },\n      failedSuites = [];\n\n    print('ConsoleReporter is deprecated and will be removed in a future version.');\n\n    this.jasmineStarted = function() {\n      specCount = 0;\n      failureCount = 0;\n      pendingCount = 0;\n      print('Started');\n      printNewline();\n      timer.start();\n    };\n\n    this.jasmineDone = function() {\n      printNewline();\n      for (var i = 0; i < failedSpecs.length; i++) {\n        specFailureDetails(failedSpecs[i]);\n      }\n\n      if(specCount > 0) {\n        printNewline();\n\n        var specCounts = specCount + ' ' + plural('spec', specCount) + ', ' +\n          failureCount + ' ' + plural('failure', failureCount);\n\n        if (pendingCount) {\n          specCounts += ', ' + pendingCount + ' pending ' + plural('spec', pendingCount);\n        }\n\n        print(specCounts);\n      } else {\n        print('No specs found');\n      }\n\n      printNewline();\n      var seconds = timer.elapsed() / 1000;\n      print('Finished in ' + seconds + ' ' + plural('second', seconds));\n      printNewline();\n\n      for(i = 0; i < failedSuites.length; i++) {\n        suiteFailureDetails(failedSuites[i]);\n      }\n\n      onComplete(failureCount === 0);\n    };\n\n    this.specDone = function(result) {\n      specCount++;\n\n      if (result.status == 'pending') {\n        pendingCount++;\n        print(colored('yellow', '*'));\n        return;\n      }\n\n      if (result.status == 'passed') {\n        print(colored('green', '.'));\n        return;\n      }\n\n      if (result.status == 'failed') {\n        failureCount++;\n        failedSpecs.push(result);\n        print(colored('red', 'F'));\n      }\n    };\n\n    this.suiteDone = function(result) {\n      if (result.failedExpectations && result.failedExpectations.length > 0) {\n        failureCount++;\n        failedSuites.push(result);\n      }\n    };\n\n    return this;\n\n    function printNewline() {\n      print('\\n');\n    }\n\n    function colored(color, str) {\n      return showColors ? (ansi[color] + str + ansi.none) : str;\n    }\n\n    function plural(str, count) {\n      return count == 1 ? str : str + 's';\n    }\n\n    function repeat(thing, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(thing);\n      }\n      return arr;\n    }\n\n    function indent(str, spaces) {\n      var lines = (str || '').split('\\n');\n      var newArr = [];\n      for (var i = 0; i < lines.length; i++) {\n        newArr.push(repeat(' ', spaces).join('') + lines[i]);\n      }\n      return newArr.join('\\n');\n    }\n\n    function specFailureDetails(result) {\n      printNewline();\n      print(result.fullName);\n\n      for (var i = 0; i < result.failedExpectations.length; i++) {\n        var failedExpectation = result.failedExpectations[i];\n        printNewline();\n        print(indent(failedExpectation.message, 2));\n        print(indent(failedExpectation.stack, 2));\n      }\n\n      printNewline();\n    }\n\n    function suiteFailureDetails(result) {\n      for (var i = 0; i < result.failedExpectations.length; i++) {\n        printNewline();\n        print(colored('red', 'An error was thrown in an afterAll'));\n        printNewline();\n        print(colored('red', 'AfterAll ' + result.failedExpectations[i].message));\n\n      }\n      printNewline();\n    }\n  }\n\n  return ConsoleReporter;\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/console/console.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 826,
    "kind": "function",
    "name": "getJasmineRequireObj",
    "memberof": "js/test/node_modules/jasmine-core/lib/console/console.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/console/console.js~getJasmineRequireObj",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/console/console.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "function",
    "name": "console",
    "memberof": "js/test/node_modules/jasmine-core/lib/console/console.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/console/console.js~console",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/console/console.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "jRequire",
        "types": [
          "*"
        ]
      },
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 828,
    "kind": "function",
    "name": "ConsoleReporter",
    "memberof": "js/test/node_modules/jasmine-core/lib/console/console.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/console/console.js~ConsoleReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/console/console.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/boot.js",
    "content": "/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n/**\n Starting with version 2.0, this file \"boots\" Jasmine, performing all of the necessary initialization before executing the loaded environment and all of a project's specs. This file should be loaded after `jasmine.js` and `jasmine_html.js`, but before any project source files or spec files are loaded. Thus this file can also be used to customize Jasmine for a project.\n\n If a project is using Jasmine via the standalone distribution, this file can be customized directly. If a project is using Jasmine via the [Ruby gem][jasmine-gem], this file can be copied into the support directory via `jasmine copy_boot_js`. Other environments (e.g., Python) will have different mechanisms.\n\n The location of `boot.js` can be specified and/or overridden in `jasmine.yml`.\n\n [jasmine-gem]: http://github.com/pivotal/jasmine-gem\n */\n\n(function() {\n\n  /**\n   * ## Require &amp; Instantiate\n   *\n   * Require Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmine` reference.\n   */\n  window.jasmine = jasmineRequire.core(jasmineRequire);\n\n  /**\n   * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n   */\n  jasmineRequire.html(jasmine);\n\n  /**\n   * Create the Jasmine environment. This is used to run all specs in a project.\n   */\n  var env = jasmine.getEnv();\n\n  /**\n   * ## The Global Interface\n   *\n   * Build up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.\n   */\n  var jasmineInterface = jasmineRequire.interface(jasmine, env);\n\n  /**\n   * Add all of the Jasmine global/public interface to the global scope, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.\n   */\n  extend(window, jasmineInterface);\n\n  /**\n   * ## Runner Parameters\n   *\n   * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n   */\n\n  var queryString = new jasmine.QueryString({\n    getWindowLocation: function() { return window.location; }\n  });\n\n  var catchingExceptions = queryString.getParam(\"catch\");\n  env.catchExceptions(typeof catchingExceptions === \"undefined\" ? true : catchingExceptions);\n\n  var throwingExpectationFailures = queryString.getParam(\"throwFailures\");\n  env.throwOnExpectationFailure(throwingExpectationFailures);\n\n  var random = queryString.getParam(\"random\");\n  env.randomizeTests(random);\n\n  var seed = queryString.getParam(\"seed\");\n  if (seed) {\n    env.seed(seed);\n  }\n\n  /**\n   * ## Reporters\n   * The `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).\n   */\n  var htmlReporter = new jasmine.HtmlReporter({\n    env: env,\n    onRaiseExceptionsClick: function() { queryString.navigateWithNewParam(\"catch\", !env.catchingExceptions()); },\n    onThrowExpectationsClick: function() { queryString.navigateWithNewParam(\"throwFailures\", !env.throwingExpectationFailures()); },\n    onRandomClick: function() { queryString.navigateWithNewParam(\"random\", !env.randomTests()); },\n    addToExistingQueryString: function(key, value) { return queryString.fullStringWithNewParam(key, value); },\n    getContainer: function() { return document.body; },\n    createElement: function() { return document.createElement.apply(document, arguments); },\n    createTextNode: function() { return document.createTextNode.apply(document, arguments); },\n    timer: new jasmine.Timer()\n  });\n\n  /**\n   * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n   */\n  env.addReporter(jasmineInterface.jsApiReporter);\n  env.addReporter(htmlReporter);\n\n  /**\n   * Filter which specs will be run by matching the start of the full name against the `spec` query param.\n   */\n  var specFilter = new jasmine.HtmlSpecFilter({\n    filterString: function() { return queryString.getParam(\"spec\"); }\n  });\n\n  env.specFilter = function(spec) {\n    return specFilter.matches(spec.getFullName());\n  };\n\n  /**\n   * Setting up timing functions to be able to be overridden. Certain browsers (Safari, IE 8, phantomjs) require this hack.\n   */\n  window.setTimeout = window.setTimeout;\n  window.setInterval = window.setInterval;\n  window.clearTimeout = window.clearTimeout;\n  window.clearInterval = window.clearInterval;\n\n  /**\n   * ## Execution\n   *\n   * Replace the browser window's `onload`, ensure it's called, and then run all of the loaded specs. This includes initializing the `HtmlReporter` instance and then executing the loaded Jasmine environment. All of this will happen after all of the specs are loaded.\n   */\n  var currentWindowOnload = window.onload;\n\n  window.onload = function() {\n    if (currentWindowOnload) {\n      currentWindowOnload();\n    }\n    htmlReporter.initialize();\n    env.execute();\n  };\n\n  /**\n   * Helper function for readability above.\n   */\n  function extend(destination, source) {\n    for (var property in source) destination[property] = source[property];\n    return destination;\n  }\n\n}());\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/boot.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 830,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "content": "function Player() {\n}\nPlayer.prototype.play = function(song) {\n  this.currentlyPlayingSong = song;\n  this.isPlaying = true;\n};\n\nPlayer.prototype.pause = function() {\n  this.isPlaying = false;\n};\n\nPlayer.prototype.resume = function() {\n  if (this.isPlaying) {\n    throw new Error(\"song is already playing\");\n  }\n\n  this.isPlaying = true;\n};\n\nPlayer.prototype.makeFavorite = function() {\n  this.currentlyPlayingSong.persistFavoriteStatus(true);\n};\n\nmodule.exports = Player;\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 831,
    "kind": "function",
    "name": "Player",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js~Player",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 832,
    "kind": "function",
    "name": "play",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js~play",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "song",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 833,
    "kind": "function",
    "name": "pause",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js~pause",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 834,
    "kind": "function",
    "name": "resume",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js~resume",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 835,
    "kind": "function",
    "name": "makeFavorite",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js~makeFavorite",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 836,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js",
    "content": "function Song() {\n}\n\nSong.prototype.persistFavoriteStatus = function(value) {\n  // something complicated\n  throw new Error(\"not yet implemented\");\n};\n\nmodule.exports = Song;\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 837,
    "kind": "function",
    "name": "Song",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js~Song",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 838,
    "kind": "function",
    "name": "persistFavoriteStatus",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js~persistFavoriteStatus",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/lib/jasmine_examples/Song.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 839,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/spec/helpers/jasmine_examples/SpecHelper.js",
    "content": "beforeEach(function () {\n  jasmine.addMatchers({\n    toBePlaying: function () {\n      return {\n        compare: function (actual, expected) {\n          var player = actual;\n\n          return {\n            pass: player.currentlyPlayingSong === expected && player.isPlaying\n          }\n        }\n      };\n    }\n  });\n});\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/spec/helpers/jasmine_examples/SpecHelper.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 840,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/spec/jasmine_examples/PlayerSpec.js",
    "content": "describe(\"Player\", function() {\n  var Player = require('../../lib/jasmine_examples/Player');\n  var Song = require('../../lib/jasmine_examples/Song');\n  var player;\n  var song;\n\n  beforeEach(function() {\n    player = new Player();\n    song = new Song();\n  });\n\n  it(\"should be able to play a Song\", function() {\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song);\n\n    //demonstrates use of custom matcher\n    expect(player).toBePlaying(song);\n  });\n\n  describe(\"when song has been paused\", function() {\n    beforeEach(function() {\n      player.play(song);\n      player.pause();\n    });\n\n    it(\"should indicate that the song is currently paused\", function() {\n      expect(player.isPlaying).toBeFalsy();\n\n      // demonstrates use of 'not' with a custom matcher\n      expect(player).not.toBePlaying(song);\n    });\n\n    it(\"should be possible to resume\", function() {\n      player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  });\n\n  // demonstrates use of spies to intercept and test method calls\n  it(\"tells the current song if the user has made it a favorite\", function() {\n    spyOn(song, 'persistFavoriteStatus');\n\n    player.play(song);\n    player.makeFavorite();\n\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  });\n\n  //demonstrates use of expected exceptions\n  describe(\"#resume\", function() {\n    it(\"should throw an exception if song is already playing\", function() {\n      player.play(song);\n\n      expect(function() {\n        player.resume();\n      }).toThrowError(\"song is already playing\");\n    });\n  });\n});\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/node_example/spec/jasmine_examples/PlayerSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 841,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/spec/PlayerSpec.js",
    "content": "describe(\"Player\", function() {\n  var player;\n  var song;\n\n  beforeEach(function() {\n    player = new Player();\n    song = new Song();\n  });\n\n  it(\"should be able to play a Song\", function() {\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song);\n\n    //demonstrates use of custom matcher\n    expect(player).toBePlaying(song);\n  });\n\n  describe(\"when song has been paused\", function() {\n    beforeEach(function() {\n      player.play(song);\n      player.pause();\n    });\n\n    it(\"should indicate that the song is currently paused\", function() {\n      expect(player.isPlaying).toBeFalsy();\n\n      // demonstrates use of 'not' with a custom matcher\n      expect(player).not.toBePlaying(song);\n    });\n\n    it(\"should be possible to resume\", function() {\n      player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  });\n\n  // demonstrates use of spies to intercept and test method calls\n  it(\"tells the current song if the user has made it a favorite\", function() {\n    spyOn(song, 'persistFavoriteStatus');\n\n    player.play(song);\n    player.makeFavorite();\n\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  });\n\n  //demonstrates use of expected exceptions\n  describe(\"#resume\", function() {\n    it(\"should throw an exception if song is already playing\", function() {\n      player.play(song);\n\n      expect(function() {\n        player.resume();\n      }).toThrowError(\"song is already playing\");\n    });\n  });\n});\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/spec/PlayerSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 842,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/spec/SpecHelper.js",
    "content": "beforeEach(function () {\n  jasmine.addMatchers({\n    toBePlaying: function () {\n      return {\n        compare: function (actual, expected) {\n          var player = actual;\n\n          return {\n            pass: player.currentlyPlayingSong === expected && player.isPlaying\n          };\n        }\n      };\n    }\n  });\n});\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/spec/SpecHelper.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 843,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "content": "function Player() {\n}\nPlayer.prototype.play = function(song) {\n  this.currentlyPlayingSong = song;\n  this.isPlaying = true;\n};\n\nPlayer.prototype.pause = function() {\n  this.isPlaying = false;\n};\n\nPlayer.prototype.resume = function() {\n  if (this.isPlaying) {\n    throw new Error(\"song is already playing\");\n  }\n\n  this.isPlaying = true;\n};\n\nPlayer.prototype.makeFavorite = function() {\n  this.currentlyPlayingSong.persistFavoriteStatus(true);\n};",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 844,
    "kind": "function",
    "name": "Player",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js~Player",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 845,
    "kind": "function",
    "name": "play",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js~play",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "song",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 846,
    "kind": "function",
    "name": "pause",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js~pause",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 847,
    "kind": "function",
    "name": "resume",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js~resume",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 848,
    "kind": "function",
    "name": "makeFavorite",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js~makeFavorite",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 849,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js",
    "content": "function Song() {\n}\n\nSong.prototype.persistFavoriteStatus = function(value) {\n  // something complicated\n  throw new Error(\"not yet implemented\");\n};",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 850,
    "kind": "function",
    "name": "Song",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js~Song",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 851,
    "kind": "function",
    "name": "persistFavoriteStatus",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js~persistFavoriteStatus",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/example/src/Song.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 852,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "content": "/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\njasmineRequire.html = function(j$) {\n  j$.ResultsNode = jasmineRequire.ResultsNode();\n  j$.HtmlReporter = jasmineRequire.HtmlReporter(j$);\n  j$.QueryString = jasmineRequire.QueryString();\n  j$.HtmlSpecFilter = jasmineRequire.HtmlSpecFilter();\n};\n\njasmineRequire.HtmlReporter = function(j$) {\n\n  var noopTimer = {\n    start: function() {},\n    elapsed: function() { return 0; }\n  };\n\n  function HtmlReporter(options) {\n    var env = options.env || {},\n      getContainer = options.getContainer,\n      createElement = options.createElement,\n      createTextNode = options.createTextNode,\n      onRaiseExceptionsClick = options.onRaiseExceptionsClick || function() {},\n      onThrowExpectationsClick = options.onThrowExpectationsClick || function() {},\n      onRandomClick = options.onRandomClick || function() {},\n      addToExistingQueryString = options.addToExistingQueryString || defaultQueryString,\n      timer = options.timer || noopTimer,\n      results = [],\n      specsExecuted = 0,\n      failureCount = 0,\n      pendingSpecCount = 0,\n      htmlReporterMain,\n      symbols,\n      failedSuites = [];\n\n    this.initialize = function() {\n      clearPrior();\n      htmlReporterMain = createDom('div', {className: 'jasmine_html-reporter'},\n        createDom('div', {className: 'jasmine-banner'},\n          createDom('a', {className: 'jasmine-title', href: 'http://jasmine.github.io/', target: '_blank'}),\n          createDom('span', {className: 'jasmine-version'}, j$.version)\n        ),\n        createDom('ul', {className: 'jasmine-symbol-summary'}),\n        createDom('div', {className: 'jasmine-alert'}),\n        createDom('div', {className: 'jasmine-results'},\n          createDom('div', {className: 'jasmine-failures'})\n        )\n      );\n      getContainer().appendChild(htmlReporterMain);\n    };\n\n    var totalSpecsDefined;\n    this.jasmineStarted = function(options) {\n      totalSpecsDefined = options.totalSpecsDefined || 0;\n      timer.start();\n    };\n\n    var summary = createDom('div', {className: 'jasmine-summary'});\n\n    var topResults = new j$.ResultsNode({}, '', null),\n      currentParent = topResults;\n\n    this.suiteStarted = function(result) {\n      currentParent.addChild(result, 'suite');\n      currentParent = currentParent.last();\n    };\n\n    this.suiteDone = function(result) {\n      if (result.status == 'failed') {\n        failedSuites.push(result);\n      }\n\n      if (currentParent == topResults) {\n        return;\n      }\n\n      currentParent = currentParent.parent;\n    };\n\n    this.specStarted = function(result) {\n      currentParent.addChild(result, 'spec');\n    };\n\n    var failures = [];\n    this.specDone = function(result) {\n      if(noExpectations(result) && typeof console !== 'undefined' && typeof console.error !== 'undefined') {\n        console.error('Spec \\'' + result.fullName + '\\' has no expectations.');\n      }\n\n      if (result.status != 'disabled') {\n        specsExecuted++;\n      }\n\n      if (!symbols){\n        symbols = find('.jasmine-symbol-summary');\n      }\n\n      symbols.appendChild(createDom('li', {\n          className: noExpectations(result) ? 'jasmine-empty' : 'jasmine-' + result.status,\n          id: 'spec_' + result.id,\n          title: result.fullName\n        }\n      ));\n\n      if (result.status == 'failed') {\n        failureCount++;\n\n        var failure =\n          createDom('div', {className: 'jasmine-spec-detail jasmine-failed'},\n            createDom('div', {className: 'jasmine-description'},\n              createDom('a', {title: result.fullName, href: specHref(result)}, result.fullName)\n            ),\n            createDom('div', {className: 'jasmine-messages'})\n          );\n        var messages = failure.childNodes[1];\n\n        for (var i = 0; i < result.failedExpectations.length; i++) {\n          var expectation = result.failedExpectations[i];\n          messages.appendChild(createDom('div', {className: 'jasmine-result-message'}, expectation.message));\n          messages.appendChild(createDom('div', {className: 'jasmine-stack-trace'}, expectation.stack));\n        }\n\n        failures.push(failure);\n      }\n\n      if (result.status == 'pending') {\n        pendingSpecCount++;\n      }\n    };\n\n    this.jasmineDone = function(doneResult) {\n      var banner = find('.jasmine-banner');\n      var alert = find('.jasmine-alert');\n      var order = doneResult && doneResult.order;\n      alert.appendChild(createDom('span', {className: 'jasmine-duration'}, 'finished in ' + timer.elapsed() / 1000 + 's'));\n\n      banner.appendChild(\n        createDom('div', { className: 'jasmine-run-options' },\n          createDom('span', { className: 'jasmine-trigger' }, 'Options'),\n          createDom('div', { className: 'jasmine-payload' },\n            createDom('div', { className: 'jasmine-exceptions' },\n              createDom('input', {\n                className: 'jasmine-raise',\n                id: 'jasmine-raise-exceptions',\n                type: 'checkbox'\n              }),\n              createDom('label', { className: 'jasmine-label', 'for': 'jasmine-raise-exceptions' }, 'raise exceptions')),\n            createDom('div', { className: 'jasmine-throw-failures' },\n              createDom('input', {\n                className: 'jasmine-throw',\n                id: 'jasmine-throw-failures',\n                type: 'checkbox'\n              }),\n              createDom('label', { className: 'jasmine-label', 'for': 'jasmine-throw-failures' }, 'stop spec on expectation failure')),\n            createDom('div', { className: 'jasmine-random-order' },\n              createDom('input', {\n                className: 'jasmine-random',\n                id: 'jasmine-random-order',\n                type: 'checkbox'\n              }),\n              createDom('label', { className: 'jasmine-label', 'for': 'jasmine-random-order' }, 'run tests in random order'))\n          )\n        ));\n\n      var raiseCheckbox = find('#jasmine-raise-exceptions');\n\n      raiseCheckbox.checked = !env.catchingExceptions();\n      raiseCheckbox.onclick = onRaiseExceptionsClick;\n\n      var throwCheckbox = find('#jasmine-throw-failures');\n      throwCheckbox.checked = env.throwingExpectationFailures();\n      throwCheckbox.onclick = onThrowExpectationsClick;\n\n      var randomCheckbox = find('#jasmine-random-order');\n      randomCheckbox.checked = env.randomTests();\n      randomCheckbox.onclick = onRandomClick;\n\n      var optionsMenu = find('.jasmine-run-options'),\n          optionsTrigger = optionsMenu.querySelector('.jasmine-trigger'),\n          optionsPayload = optionsMenu.querySelector('.jasmine-payload'),\n          isOpen = /\\bjasmine-open\\b/;\n\n      optionsTrigger.onclick = function() {\n        if (isOpen.test(optionsPayload.className)) {\n          optionsPayload.className = optionsPayload.className.replace(isOpen, '');\n        } else {\n          optionsPayload.className += ' jasmine-open';\n        }\n      };\n\n      if (specsExecuted < totalSpecsDefined) {\n        var skippedMessage = 'Ran ' + specsExecuted + ' of ' + totalSpecsDefined + ' specs - run all';\n        var skippedLink = order && order.random ? '?random=true' : '?';\n        alert.appendChild(\n          createDom('span', {className: 'jasmine-bar jasmine-skipped'},\n            createDom('a', {href: skippedLink, title: 'Run all specs'}, skippedMessage)\n          )\n        );\n      }\n      var statusBarMessage = '';\n      var statusBarClassName = 'jasmine-bar ';\n\n      if (totalSpecsDefined > 0) {\n        statusBarMessage += pluralize('spec', specsExecuted) + ', ' + pluralize('failure', failureCount);\n        if (pendingSpecCount) { statusBarMessage += ', ' + pluralize('pending spec', pendingSpecCount); }\n        statusBarClassName += (failureCount > 0) ? 'jasmine-failed' : 'jasmine-passed';\n      } else {\n        statusBarClassName += 'jasmine-skipped';\n        statusBarMessage += 'No specs found';\n      }\n\n      var seedBar;\n      if (order && order.random) {\n        seedBar = createDom('span', {className: 'jasmine-seed-bar'},\n          ', randomized with seed ',\n          createDom('a', {title: 'randomized with seed ' + order.seed, href: seedHref(order.seed)}, order.seed)\n        );\n      }\n\n      alert.appendChild(createDom('span', {className: statusBarClassName}, statusBarMessage, seedBar));\n\n      var errorBarClassName = 'jasmine-bar jasmine-errored';\n      var errorBarMessagePrefix = 'AfterAll ';\n\n      for(var i = 0; i < failedSuites.length; i++) {\n        var failedSuite = failedSuites[i];\n        for(var j = 0; j < failedSuite.failedExpectations.length; j++) {\n          alert.appendChild(createDom('span', {className: errorBarClassName}, errorBarMessagePrefix + failedSuite.failedExpectations[j].message));\n        }\n      }\n\n      var globalFailures = (doneResult && doneResult.failedExpectations) || [];\n      for(i = 0; i < globalFailures.length; i++) {\n        var failure = globalFailures[i];\n        alert.appendChild(createDom('span', {className: errorBarClassName}, errorBarMessagePrefix + failure.message));\n      }\n\n      var results = find('.jasmine-results');\n      results.appendChild(summary);\n\n      summaryList(topResults, summary);\n\n      function summaryList(resultsTree, domParent) {\n        var specListNode;\n        for (var i = 0; i < resultsTree.children.length; i++) {\n          var resultNode = resultsTree.children[i];\n          if (resultNode.type == 'suite') {\n            var suiteListNode = createDom('ul', {className: 'jasmine-suite', id: 'suite-' + resultNode.result.id},\n              createDom('li', {className: 'jasmine-suite-detail'},\n                createDom('a', {href: specHref(resultNode.result)}, resultNode.result.description)\n              )\n            );\n\n            summaryList(resultNode, suiteListNode);\n            domParent.appendChild(suiteListNode);\n          }\n          if (resultNode.type == 'spec') {\n            if (domParent.getAttribute('class') != 'jasmine-specs') {\n              specListNode = createDom('ul', {className: 'jasmine-specs'});\n              domParent.appendChild(specListNode);\n            }\n            var specDescription = resultNode.result.description;\n            if(noExpectations(resultNode.result)) {\n              specDescription = 'SPEC HAS NO EXPECTATIONS ' + specDescription;\n            }\n            if(resultNode.result.status === 'pending' && resultNode.result.pendingReason !== '') {\n              specDescription = specDescription + ' PENDING WITH MESSAGE: ' + resultNode.result.pendingReason;\n            }\n            specListNode.appendChild(\n              createDom('li', {\n                  className: 'jasmine-' + resultNode.result.status,\n                  id: 'spec-' + resultNode.result.id\n                },\n                createDom('a', {href: specHref(resultNode.result)}, specDescription)\n              )\n            );\n          }\n        }\n      }\n\n      if (failures.length) {\n        alert.appendChild(\n          createDom('span', {className: 'jasmine-menu jasmine-bar jasmine-spec-list'},\n            createDom('span', {}, 'Spec List | '),\n            createDom('a', {className: 'jasmine-failures-menu', href: '#'}, 'Failures')));\n        alert.appendChild(\n          createDom('span', {className: 'jasmine-menu jasmine-bar jasmine-failure-list'},\n            createDom('a', {className: 'jasmine-spec-list-menu', href: '#'}, 'Spec List'),\n            createDom('span', {}, ' | Failures ')));\n\n        find('.jasmine-failures-menu').onclick = function() {\n          setMenuModeTo('jasmine-failure-list');\n        };\n        find('.jasmine-spec-list-menu').onclick = function() {\n          setMenuModeTo('jasmine-spec-list');\n        };\n\n        setMenuModeTo('jasmine-failure-list');\n\n        var failureNode = find('.jasmine-failures');\n        for (i = 0; i < failures.length; i++) {\n          failureNode.appendChild(failures[i]);\n        }\n      }\n    };\n\n    return this;\n\n    function find(selector) {\n      return getContainer().querySelector('.jasmine_html-reporter ' + selector);\n    }\n\n    function clearPrior() {\n      // return the reporter\n      var oldReporter = find('');\n\n      if(oldReporter) {\n        getContainer().removeChild(oldReporter);\n      }\n    }\n\n    function createDom(type, attrs, childrenVarArgs) {\n      var el = createElement(type);\n\n      for (var i = 2; i < arguments.length; i++) {\n        var child = arguments[i];\n\n        if (typeof child === 'string') {\n          el.appendChild(createTextNode(child));\n        } else {\n          if (child) {\n            el.appendChild(child);\n          }\n        }\n      }\n\n      for (var attr in attrs) {\n        if (attr == 'className') {\n          el[attr] = attrs[attr];\n        } else {\n          el.setAttribute(attr, attrs[attr]);\n        }\n      }\n\n      return el;\n    }\n\n    function pluralize(singular, count) {\n      var word = (count == 1 ? singular : singular + 's');\n\n      return '' + count + ' ' + word;\n    }\n\n    function specHref(result) {\n      return addToExistingQueryString('spec', result.fullName);\n    }\n\n    function seedHref(seed) {\n      return addToExistingQueryString('seed', seed);\n    }\n\n    function defaultQueryString(key, value) {\n      return '?' + key + '=' + value;\n    }\n\n    function setMenuModeTo(mode) {\n      htmlReporterMain.setAttribute('class', 'jasmine_html-reporter ' + mode);\n    }\n\n    function noExpectations(result) {\n      return (result.failedExpectations.length + result.passedExpectations.length) === 0 &&\n        result.status === 'passed';\n    }\n  }\n\n  return HtmlReporter;\n};\n\njasmineRequire.HtmlSpecFilter = function() {\n  function HtmlSpecFilter(options) {\n    var filterString = options && options.filterString() && options.filterString().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    var filterPattern = new RegExp(filterString);\n\n    this.matches = function(specName) {\n      return filterPattern.test(specName);\n    };\n  }\n\n  return HtmlSpecFilter;\n};\n\njasmineRequire.ResultsNode = function() {\n  function ResultsNode(result, type, parent) {\n    this.result = result;\n    this.type = type;\n    this.parent = parent;\n\n    this.children = [];\n\n    this.addChild = function(result, type) {\n      this.children.push(new ResultsNode(result, type, this));\n    };\n\n    this.last = function() {\n      return this.children[this.children.length - 1];\n    };\n  }\n\n  return ResultsNode;\n};\n\njasmineRequire.QueryString = function() {\n  function QueryString(options) {\n\n    this.navigateWithNewParam = function(key, value) {\n      options.getWindowLocation().search = this.fullStringWithNewParam(key, value);\n    };\n\n    this.fullStringWithNewParam = function(key, value) {\n      var paramMap = queryStringToParamMap();\n      paramMap[key] = value;\n      return toQueryString(paramMap);\n    };\n\n    this.getParam = function(key) {\n      return queryStringToParamMap()[key];\n    };\n\n    return this;\n\n    function toQueryString(paramMap) {\n      var qStrPairs = [];\n      for (var prop in paramMap) {\n        qStrPairs.push(encodeURIComponent(prop) + '=' + encodeURIComponent(paramMap[prop]));\n      }\n      return '?' + qStrPairs.join('&');\n    }\n\n    function queryStringToParamMap() {\n      var paramStr = options.getWindowLocation().search.substring(1),\n        params = [],\n        paramMap = {};\n\n      if (paramStr.length > 0) {\n        params = paramStr.split('&');\n        for (var i = 0; i < params.length; i++) {\n          var p = params[i].split('=');\n          var value = decodeURIComponent(p[1]);\n          if (value === 'true' || value === 'false') {\n            value = JSON.parse(value);\n          }\n          paramMap[decodeURIComponent(p[0])] = value;\n        }\n      }\n\n      return paramMap;\n    }\n\n  }\n\n  return QueryString;\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 853,
    "kind": "function",
    "name": "html",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js~html",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 854,
    "kind": "function",
    "name": "HtmlReporter",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js~HtmlReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 855,
    "kind": "function",
    "name": "HtmlSpecFilter",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js~HtmlSpecFilter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "function",
    "name": "ResultsNode",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js~ResultsNode",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 411,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "function",
    "name": "QueryString",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js~QueryString",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 858,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "content": "/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar getJasmineRequireObj = (function (jasmineGlobal) {\n  var jasmineRequire;\n\n  if (typeof module !== 'undefined' && module.exports && typeof exports !== 'undefined') {\n    if (typeof global !== 'undefined') {\n      jasmineGlobal = global;\n    } else {\n      jasmineGlobal = {};\n    }\n    jasmineRequire = exports;\n  } else {\n    if (typeof window !== 'undefined' && typeof window.toString === 'function' && window.toString() === '[object GjsGlobal]') {\n      jasmineGlobal = window;\n    }\n    jasmineRequire = jasmineGlobal.jasmineRequire = jasmineGlobal.jasmineRequire || {};\n  }\n\n  function getJasmineRequire() {\n    return jasmineRequire;\n  }\n\n  getJasmineRequire().core = function(jRequire) {\n    var j$ = {};\n\n    jRequire.base(j$, jasmineGlobal);\n    j$.util = jRequire.util();\n    j$.errors = jRequire.errors();\n    j$.formatErrorMsg = jRequire.formatErrorMsg();\n    j$.Any = jRequire.Any(j$);\n    j$.Anything = jRequire.Anything(j$);\n    j$.CallTracker = jRequire.CallTracker(j$);\n    j$.MockDate = jRequire.MockDate();\n    j$.Clock = jRequire.Clock();\n    j$.DelayedFunctionScheduler = jRequire.DelayedFunctionScheduler();\n    j$.Env = jRequire.Env(j$);\n    j$.ExceptionFormatter = jRequire.ExceptionFormatter();\n    j$.Expectation = jRequire.Expectation();\n    j$.buildExpectationResult = jRequire.buildExpectationResult();\n    j$.JsApiReporter = jRequire.JsApiReporter();\n    j$.matchersUtil = jRequire.matchersUtil(j$);\n    j$.ObjectContaining = jRequire.ObjectContaining(j$);\n    j$.ArrayContaining = jRequire.ArrayContaining(j$);\n    j$.pp = jRequire.pp(j$);\n    j$.QueueRunner = jRequire.QueueRunner(j$);\n    j$.ReportDispatcher = jRequire.ReportDispatcher();\n    j$.Spec = jRequire.Spec(j$);\n    j$.SpyRegistry = jRequire.SpyRegistry(j$);\n    j$.SpyStrategy = jRequire.SpyStrategy(j$);\n    j$.StringMatching = jRequire.StringMatching(j$);\n    j$.Suite = jRequire.Suite(j$);\n    j$.Timer = jRequire.Timer();\n    j$.TreeProcessor = jRequire.TreeProcessor();\n    j$.version = jRequire.version();\n    j$.Order = jRequire.Order();\n\n    j$.matchers = jRequire.requireMatchers(jRequire, j$);\n\n    return j$;\n  };\n\n  return getJasmineRequire;\n})(this);\n\ngetJasmineRequireObj().requireMatchers = function(jRequire, j$) {\n  var availableMatchers = [\n      'toBe',\n      'toBeCloseTo',\n      'toBeDefined',\n      'toBeFalsy',\n      'toBeGreaterThan',\n      'toBeGreaterThanOrEqual',\n      'toBeLessThanOrEqual',\n      'toBeLessThan',\n      'toBeNaN',\n      'toBeNull',\n      'toBeTruthy',\n      'toBeUndefined',\n      'toContain',\n      'toEqual',\n      'toHaveBeenCalled',\n      'toHaveBeenCalledWith',\n      'toHaveBeenCalledTimes',\n      'toMatch',\n      'toThrow',\n      'toThrowError'\n    ],\n    matchers = {};\n\n  for (var i = 0; i < availableMatchers.length; i++) {\n    var name = availableMatchers[i];\n    matchers[name] = jRequire[name](j$);\n  }\n\n  return matchers;\n};\n\ngetJasmineRequireObj().base = function(j$, jasmineGlobal) {\n  j$.unimplementedMethod_ = function() {\n    throw new Error('unimplemented method');\n  };\n\n  j$.MAX_PRETTY_PRINT_DEPTH = 40;\n  j$.MAX_PRETTY_PRINT_ARRAY_LENGTH = 100;\n  j$.DEFAULT_TIMEOUT_INTERVAL = 5000;\n\n  j$.getGlobal = function() {\n    return jasmineGlobal;\n  };\n\n  j$.getEnv = function(options) {\n    var env = j$.currentEnv_ = j$.currentEnv_ || new j$.Env(options);\n    //jasmine. singletons in here (setTimeout blah blah).\n    return env;\n  };\n\n  j$.isArray_ = function(value) {\n    return j$.isA_('Array', value);\n  };\n\n  j$.isString_ = function(value) {\n    return j$.isA_('String', value);\n  };\n\n  j$.isNumber_ = function(value) {\n    return j$.isA_('Number', value);\n  };\n\n  j$.isFunction_ = function(value) {\n    return j$.isA_('Function', value);\n  };\n\n  j$.isA_ = function(typeName, value) {\n    return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n  };\n\n  j$.isDomNode = function(obj) {\n    return obj.nodeType > 0;\n  };\n\n  j$.fnNameFor = function(func) {\n    if (func.name) {\n      return func.name;\n    }\n\n    var matches = func.toString().match(/^\\s*function\\s*(\\w*)\\s*\\(/);\n    return matches ? matches[1] : '<anonymous>';\n  };\n\n  j$.any = function(clazz) {\n    return new j$.Any(clazz);\n  };\n\n  j$.anything = function() {\n    return new j$.Anything();\n  };\n\n  j$.objectContaining = function(sample) {\n    return new j$.ObjectContaining(sample);\n  };\n\n  j$.stringMatching = function(expected) {\n    return new j$.StringMatching(expected);\n  };\n\n  j$.arrayContaining = function(sample) {\n    return new j$.ArrayContaining(sample);\n  };\n\n  j$.createSpy = function(name, originalFn) {\n\n    var spyStrategy = new j$.SpyStrategy({\n        name: name,\n        fn: originalFn,\n        getSpy: function() { return spy; }\n      }),\n      callTracker = new j$.CallTracker(),\n      spy = function() {\n        var callData = {\n          object: this,\n          args: Array.prototype.slice.apply(arguments)\n        };\n\n        callTracker.track(callData);\n        var returnValue = spyStrategy.exec.apply(this, arguments);\n        callData.returnValue = returnValue;\n\n        return returnValue;\n      };\n\n    for (var prop in originalFn) {\n      if (prop === 'and' || prop === 'calls') {\n        throw new Error('Jasmine spies would overwrite the \\'and\\' and \\'calls\\' properties on the object being spied upon');\n      }\n\n      spy[prop] = originalFn[prop];\n    }\n\n    spy.and = spyStrategy;\n    spy.calls = callTracker;\n\n    return spy;\n  };\n\n  j$.isSpy = function(putativeSpy) {\n    if (!putativeSpy) {\n      return false;\n    }\n    return putativeSpy.and instanceof j$.SpyStrategy &&\n      putativeSpy.calls instanceof j$.CallTracker;\n  };\n\n  j$.createSpyObj = function(baseName, methodNames) {\n    if (j$.isArray_(baseName) && j$.util.isUndefined(methodNames)) {\n      methodNames = baseName;\n      baseName = 'unknown';\n    }\n\n    if (!j$.isArray_(methodNames) || methodNames.length === 0) {\n      throw 'createSpyObj requires a non-empty array of method names to create spies for';\n    }\n    var obj = {};\n    for (var i = 0; i < methodNames.length; i++) {\n      obj[methodNames[i]] = j$.createSpy(baseName + '.' + methodNames[i]);\n    }\n    return obj;\n  };\n};\n\ngetJasmineRequireObj().util = function() {\n\n  var util = {};\n\n  util.inherit = function(childClass, parentClass) {\n    var Subclass = function() {\n    };\n    Subclass.prototype = parentClass.prototype;\n    childClass.prototype = new Subclass();\n  };\n\n  util.htmlEscape = function(str) {\n    if (!str) {\n      return str;\n    }\n    return str.replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  };\n\n  util.argsToArray = function(args) {\n    var arrayOfArgs = [];\n    for (var i = 0; i < args.length; i++) {\n      arrayOfArgs.push(args[i]);\n    }\n    return arrayOfArgs;\n  };\n\n  util.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  util.arrayContains = function(array, search) {\n    var i = array.length;\n    while (i--) {\n      if (array[i] === search) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  util.clone = function(obj) {\n    if (Object.prototype.toString.apply(obj) === '[object Array]') {\n      return obj.slice();\n    }\n\n    var cloned = {};\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        cloned[prop] = obj[prop];\n      }\n    }\n\n    return cloned;\n  };\n\n  return util;\n};\n\ngetJasmineRequireObj().Spec = function(j$) {\n  function Spec(attrs) {\n    this.expectationFactory = attrs.expectationFactory;\n    this.resultCallback = attrs.resultCallback || function() {};\n    this.id = attrs.id;\n    this.description = attrs.description || '';\n    this.queueableFn = attrs.queueableFn;\n    this.beforeAndAfterFns = attrs.beforeAndAfterFns || function() { return {befores: [], afters: []}; };\n    this.userContext = attrs.userContext || function() { return {}; };\n    this.onStart = attrs.onStart || function() {};\n    this.getSpecName = attrs.getSpecName || function() { return ''; };\n    this.expectationResultFactory = attrs.expectationResultFactory || function() { };\n    this.queueRunnerFactory = attrs.queueRunnerFactory || function() {};\n    this.catchingExceptions = attrs.catchingExceptions || function() { return true; };\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;\n\n    if (!this.queueableFn.fn) {\n      this.pend();\n    }\n\n    this.result = {\n      id: this.id,\n      description: this.description,\n      fullName: this.getFullName(),\n      failedExpectations: [],\n      passedExpectations: [],\n      pendingReason: ''\n    };\n  }\n\n  Spec.prototype.addExpectationResult = function(passed, data, isError) {\n    var expectationResult = this.expectationResultFactory(data);\n    if (passed) {\n      this.result.passedExpectations.push(expectationResult);\n    } else {\n      this.result.failedExpectations.push(expectationResult);\n\n      if (this.throwOnExpectationFailure && !isError) {\n        throw new j$.errors.ExpectationFailed();\n      }\n    }\n  };\n\n  Spec.prototype.expect = function(actual) {\n    return this.expectationFactory(actual, this);\n  };\n\n  Spec.prototype.execute = function(onComplete, enabled) {\n    var self = this;\n\n    this.onStart(this);\n\n    if (!this.isExecutable() || this.markedPending || enabled === false) {\n      complete(enabled);\n      return;\n    }\n\n    var fns = this.beforeAndAfterFns();\n    var allFns = fns.befores.concat(this.queueableFn).concat(fns.afters);\n\n    this.queueRunnerFactory({\n      queueableFns: allFns,\n      onException: function() { self.onException.apply(self, arguments); },\n      onComplete: complete,\n      userContext: this.userContext()\n    });\n\n    function complete(enabledAgain) {\n      self.result.status = self.status(enabledAgain);\n      self.resultCallback(self.result);\n\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  };\n\n  Spec.prototype.onException = function onException(e) {\n    if (Spec.isPendingSpecException(e)) {\n      this.pend(extractCustomPendingMessage(e));\n      return;\n    }\n\n    if (e instanceof j$.errors.ExpectationFailed) {\n      return;\n    }\n\n    this.addExpectationResult(false, {\n      matcherName: '',\n      passed: false,\n      expected: '',\n      actual: '',\n      error: e\n    }, true);\n  };\n\n  Spec.prototype.disable = function() {\n    this.disabled = true;\n  };\n\n  Spec.prototype.pend = function(message) {\n    this.markedPending = true;\n    if (message) {\n      this.result.pendingReason = message;\n    }\n  };\n\n  Spec.prototype.getResult = function() {\n    this.result.status = this.status();\n    return this.result;\n  };\n\n  Spec.prototype.status = function(enabled) {\n    if (this.disabled || enabled === false) {\n      return 'disabled';\n    }\n\n    if (this.markedPending) {\n      return 'pending';\n    }\n\n    if (this.result.failedExpectations.length > 0) {\n      return 'failed';\n    } else {\n      return 'passed';\n    }\n  };\n\n  Spec.prototype.isExecutable = function() {\n    return !this.disabled;\n  };\n\n  Spec.prototype.getFullName = function() {\n    return this.getSpecName(this);\n  };\n\n  var extractCustomPendingMessage = function(e) {\n    var fullMessage = e.toString(),\n        boilerplateStart = fullMessage.indexOf(Spec.pendingSpecExceptionMessage),\n        boilerplateEnd = boilerplateStart + Spec.pendingSpecExceptionMessage.length;\n\n    return fullMessage.substr(boilerplateEnd);\n  };\n\n  Spec.pendingSpecExceptionMessage = '=> marked Pending';\n\n  Spec.isPendingSpecException = function(e) {\n    return !!(e && e.toString && e.toString().indexOf(Spec.pendingSpecExceptionMessage) !== -1);\n  };\n\n  return Spec;\n};\n\nif (typeof window == void 0 && typeof exports == 'object') {\n  exports.Spec = jasmineRequire.Spec;\n}\n\n/*jshint bitwise: false*/\n\ngetJasmineRequireObj().Order = function() {\n  function Order(options) {\n    this.random = 'random' in options ? options.random : true;\n    var seed = this.seed = options.seed || generateSeed();\n    this.sort = this.random ? randomOrder : naturalOrder;\n\n    function naturalOrder(items) {\n      return items;\n    }\n\n    function randomOrder(items) {\n      var copy = items.slice();\n      copy.sort(function(a, b) {\n        return jenkinsHash(seed + a.id) - jenkinsHash(seed + b.id);\n      });\n      return copy;\n    }\n\n    function generateSeed() {\n      return String(Math.random()).slice(-5);\n    }\n\n    // Bob Jenkins One-at-a-Time Hash algorithm is a non-cryptographic hash function\n    // used to get a different output when the key changes slighly.\n    // We use your return to sort the children randomly in a consistent way when\n    // used in conjunction with a seed\n\n    function jenkinsHash(key) {\n      var hash, i;\n      for(hash = i = 0; i < key.length; ++i) {\n        hash += key.charCodeAt(i);\n        hash += (hash << 10);\n        hash ^= (hash >> 6);\n      }\n      hash += (hash << 3);\n      hash ^= (hash >> 11);\n      hash += (hash << 15);\n      return hash;\n    }\n\n  }\n\n  return Order;\n};\n\ngetJasmineRequireObj().Env = function(j$) {\n  function Env(options) {\n    options = options || {};\n\n    var self = this;\n    var global = options.global || j$.getGlobal();\n\n    var totalSpecsDefined = 0;\n\n    var catchExceptions = true;\n\n    var realSetTimeout = j$.getGlobal().setTimeout;\n    var realClearTimeout = j$.getGlobal().clearTimeout;\n    this.clock = new j$.Clock(global, function () { return new j$.DelayedFunctionScheduler(); }, new j$.MockDate(global));\n\n    var runnableResources = {};\n\n    var currentSpec = null;\n    var currentlyExecutingSuites = [];\n    var currentDeclarationSuite = null;\n    var throwOnExpectationFailure = false;\n    var random = false;\n    var seed = null;\n\n    var currentSuite = function() {\n      return currentlyExecutingSuites[currentlyExecutingSuites.length - 1];\n    };\n\n    var currentRunnable = function() {\n      return currentSpec || currentSuite();\n    };\n\n    var reporter = new j$.ReportDispatcher([\n      'jasmineStarted',\n      'jasmineDone',\n      'suiteStarted',\n      'suiteDone',\n      'specStarted',\n      'specDone'\n    ]);\n\n    this.specFilter = function() {\n      return true;\n    };\n\n    this.addCustomEqualityTester = function(tester) {\n      if(!currentRunnable()) {\n        throw new Error('Custom Equalities must be added in a before function or a spec');\n      }\n      runnableResources[currentRunnable().id].customEqualityTesters.push(tester);\n    };\n\n    this.addMatchers = function(matchersToAdd) {\n      if(!currentRunnable()) {\n        throw new Error('Matchers must be added in a before function or a spec');\n      }\n      var customMatchers = runnableResources[currentRunnable().id].customMatchers;\n      for (var matcherName in matchersToAdd) {\n        customMatchers[matcherName] = matchersToAdd[matcherName];\n      }\n    };\n\n    j$.Expectation.addCoreMatchers(j$.matchers);\n\n    var nextSpecId = 0;\n    var getNextSpecId = function() {\n      return 'spec' + nextSpecId++;\n    };\n\n    var nextSuiteId = 0;\n    var getNextSuiteId = function() {\n      return 'suite' + nextSuiteId++;\n    };\n\n    var expectationFactory = function(actual, spec) {\n      return j$.Expectation.Factory({\n        util: j$.matchersUtil,\n        customEqualityTesters: runnableResources[spec.id].customEqualityTesters,\n        customMatchers: runnableResources[spec.id].customMatchers,\n        actual: actual,\n        addExpectationResult: addExpectationResult\n      });\n\n      function addExpectationResult(passed, result) {\n        return spec.addExpectationResult(passed, result);\n      }\n    };\n\n    var defaultResourcesForRunnable = function(id, parentRunnableId) {\n      var resources = {spies: [], customEqualityTesters: [], customMatchers: {}};\n\n      if(runnableResources[parentRunnableId]){\n        resources.customEqualityTesters = j$.util.clone(runnableResources[parentRunnableId].customEqualityTesters);\n        resources.customMatchers = j$.util.clone(runnableResources[parentRunnableId].customMatchers);\n      }\n\n      runnableResources[id] = resources;\n    };\n\n    var clearResourcesForRunnable = function(id) {\n        spyRegistry.clearSpies();\n        delete runnableResources[id];\n    };\n\n    var beforeAndAfterFns = function(suite) {\n      return function() {\n        var befores = [],\n          afters = [];\n\n        while(suite) {\n          befores = befores.concat(suite.beforeFns);\n          afters = afters.concat(suite.afterFns);\n\n          suite = suite.parentSuite;\n        }\n\n        return {\n          befores: befores.reverse(),\n          afters: afters\n        };\n      };\n    };\n\n    var getSpecName = function(spec, suite) {\n      var fullName = [spec.description],\n          suiteFullName = suite.getFullName();\n\n      if (suiteFullName !== '') {\n        fullName.unshift(suiteFullName);\n      }\n      return fullName.join(' ');\n    };\n\n    // TODO: we may just be able to pass in the fn instead of wrapping here\n    var buildExpectationResult = j$.buildExpectationResult,\n        exceptionFormatter = new j$.ExceptionFormatter(),\n        expectationResultFactory = function(attrs) {\n          attrs.messageFormatter = exceptionFormatter.message;\n          attrs.stackFormatter = exceptionFormatter.stack;\n\n          return buildExpectationResult(attrs);\n        };\n\n    // TODO: fix this naming, and here's where the value comes in\n    this.catchExceptions = function(value) {\n      catchExceptions = !!value;\n      return catchExceptions;\n    };\n\n    this.catchingExceptions = function() {\n      return catchExceptions;\n    };\n\n    var maximumSpecCallbackDepth = 20;\n    var currentSpecCallbackDepth = 0;\n\n    function clearStack(fn) {\n      currentSpecCallbackDepth++;\n      if (currentSpecCallbackDepth >= maximumSpecCallbackDepth) {\n        currentSpecCallbackDepth = 0;\n        realSetTimeout(fn, 0);\n      } else {\n        fn();\n      }\n    }\n\n    var catchException = function(e) {\n      return j$.Spec.isPendingSpecException(e) || catchExceptions;\n    };\n\n    this.throwOnExpectationFailure = function(value) {\n      throwOnExpectationFailure = !!value;\n    };\n\n    this.throwingExpectationFailures = function() {\n      return throwOnExpectationFailure;\n    };\n\n    this.randomizeTests = function(value) {\n      random = !!value;\n    };\n\n    this.randomTests = function() {\n      return random;\n    };\n\n    this.seed = function(value) {\n      if (value) {\n        seed = value;\n      }\n      return seed;\n    };\n\n    var queueRunnerFactory = function(options) {\n      options.catchException = catchException;\n      options.clearStack = options.clearStack || clearStack;\n      options.timeout = {setTimeout: realSetTimeout, clearTimeout: realClearTimeout};\n      options.fail = self.fail;\n\n      new j$.QueueRunner(options).execute();\n    };\n\n    var topSuite = new j$.Suite({\n      env: this,\n      id: getNextSuiteId(),\n      description: 'Jasmine__TopLevel__Suite',\n      expectationFactory: expectationFactory,\n      expectationResultFactory: expectationResultFactory\n    });\n    defaultResourcesForRunnable(topSuite.id);\n    currentDeclarationSuite = topSuite;\n\n    this.topSuite = function() {\n      return topSuite;\n    };\n\n    this.execute = function(runnablesToRun) {\n      if(!runnablesToRun) {\n        if (focusedRunnables.length) {\n          runnablesToRun = focusedRunnables;\n        } else {\n          runnablesToRun = [topSuite.id];\n        }\n      }\n\n      var order = new j$.Order({\n        random: random,\n        seed: seed\n      });\n\n      var processor = new j$.TreeProcessor({\n        tree: topSuite,\n        runnableIds: runnablesToRun,\n        queueRunnerFactory: queueRunnerFactory,\n        nodeStart: function(suite) {\n          currentlyExecutingSuites.push(suite);\n          defaultResourcesForRunnable(suite.id, suite.parentSuite.id);\n          reporter.suiteStarted(suite.result);\n        },\n        nodeComplete: function(suite, result) {\n          if (!suite.disabled) {\n            clearResourcesForRunnable(suite.id);\n          }\n          currentlyExecutingSuites.pop();\n          reporter.suiteDone(result);\n        },\n        orderChildren: function(node) {\n          return order.sort(node.children);\n        }\n      });\n\n      if(!processor.processTree().valid) {\n        throw new Error('Invalid order: would cause a beforeAll or afterAll to be run multiple times');\n      }\n\n      reporter.jasmineStarted({\n        totalSpecsDefined: totalSpecsDefined\n      });\n\n      currentlyExecutingSuites.push(topSuite);\n\n      processor.execute(function() {\n        clearResourcesForRunnable(topSuite.id);\n        currentlyExecutingSuites.pop();\n\n        reporter.jasmineDone({\n          order: order,\n          failedExpectations: topSuite.result.failedExpectations\n        });\n      });\n    };\n\n    this.addReporter = function(reporterToAdd) {\n      reporter.addReporter(reporterToAdd);\n    };\n\n    this.provideFallbackReporter = function(reporterToAdd) {\n      reporter.provideFallbackReporter(reporterToAdd);\n    };\n\n    this.clearReporters = function() {\n      reporter.clearReporters();\n    };\n\n    var spyRegistry = new j$.SpyRegistry({currentSpies: function() {\n      if(!currentRunnable()) {\n        throw new Error('Spies must be created in a before function or a spec');\n      }\n      return runnableResources[currentRunnable().id].spies;\n    }});\n\n    this.allowRespy = function(allow){\n      spyRegistry.allowRespy(allow);\n    };\n\n    this.spyOn = function() {\n      return spyRegistry.spyOn.apply(spyRegistry, arguments);\n    };\n\n    var suiteFactory = function(description) {\n      var suite = new j$.Suite({\n        env: self,\n        id: getNextSuiteId(),\n        description: description,\n        parentSuite: currentDeclarationSuite,\n        expectationFactory: expectationFactory,\n        expectationResultFactory: expectationResultFactory,\n        throwOnExpectationFailure: throwOnExpectationFailure\n      });\n\n      return suite;\n    };\n\n    this.describe = function(description, specDefinitions) {\n      var suite = suiteFactory(description);\n      if (specDefinitions.length > 0) {\n        throw new Error('describe does not expect any arguments');\n      }\n      if (currentDeclarationSuite.markedPending) {\n        suite.pend();\n      }\n      addSpecsToSuite(suite, specDefinitions);\n      return suite;\n    };\n\n    this.xdescribe = function(description, specDefinitions) {\n      var suite = suiteFactory(description);\n      suite.pend();\n      addSpecsToSuite(suite, specDefinitions);\n      return suite;\n    };\n\n    var focusedRunnables = [];\n\n    this.fdescribe = function(description, specDefinitions) {\n      var suite = suiteFactory(description);\n      suite.isFocused = true;\n\n      focusedRunnables.push(suite.id);\n      unfocusAncestor();\n      addSpecsToSuite(suite, specDefinitions);\n\n      return suite;\n    };\n\n    function addSpecsToSuite(suite, specDefinitions) {\n      var parentSuite = currentDeclarationSuite;\n      parentSuite.addChild(suite);\n      currentDeclarationSuite = suite;\n\n      var declarationError = null;\n      try {\n        specDefinitions.call(suite);\n      } catch (e) {\n        declarationError = e;\n      }\n\n      if (declarationError) {\n        self.it('encountered a declaration exception', function() {\n          throw declarationError;\n        });\n      }\n\n      currentDeclarationSuite = parentSuite;\n    }\n\n    function findFocusedAncestor(suite) {\n      while (suite) {\n        if (suite.isFocused) {\n          return suite.id;\n        }\n        suite = suite.parentSuite;\n      }\n\n      return null;\n    }\n\n    function unfocusAncestor() {\n      var focusedAncestor = findFocusedAncestor(currentDeclarationSuite);\n      if (focusedAncestor) {\n        for (var i = 0; i < focusedRunnables.length; i++) {\n          if (focusedRunnables[i] === focusedAncestor) {\n            focusedRunnables.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    var specFactory = function(description, fn, suite, timeout) {\n      totalSpecsDefined++;\n      var spec = new j$.Spec({\n        id: getNextSpecId(),\n        beforeAndAfterFns: beforeAndAfterFns(suite),\n        expectationFactory: expectationFactory,\n        resultCallback: specResultCallback,\n        getSpecName: function(spec) {\n          return getSpecName(spec, suite);\n        },\n        onStart: specStarted,\n        description: description,\n        expectationResultFactory: expectationResultFactory,\n        queueRunnerFactory: queueRunnerFactory,\n        userContext: function() { return suite.clonedSharedUserContext(); },\n        queueableFn: {\n          fn: fn,\n          timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n        },\n        throwOnExpectationFailure: throwOnExpectationFailure\n      });\n\n      if (!self.specFilter(spec)) {\n        spec.disable();\n      }\n\n      return spec;\n\n      function specResultCallback(result) {\n        clearResourcesForRunnable(spec.id);\n        currentSpec = null;\n        reporter.specDone(result);\n      }\n\n      function specStarted(spec) {\n        currentSpec = spec;\n        defaultResourcesForRunnable(spec.id, suite.id);\n        reporter.specStarted(spec.result);\n      }\n    };\n\n    this.it = function(description, fn, timeout) {\n      var spec = specFactory(description, fn, currentDeclarationSuite, timeout);\n      if (currentDeclarationSuite.markedPending) {\n        spec.pend();\n      }\n      currentDeclarationSuite.addChild(spec);\n      return spec;\n    };\n\n    this.xit = function() {\n      var spec = this.it.apply(this, arguments);\n      spec.pend('Temporarily disabled with xit');\n      return spec;\n    };\n\n    this.fit = function(description, fn, timeout){\n      var spec = specFactory(description, fn, currentDeclarationSuite, timeout);\n      currentDeclarationSuite.addChild(spec);\n      focusedRunnables.push(spec.id);\n      unfocusAncestor();\n      return spec;\n    };\n\n    this.expect = function(actual) {\n      if (!currentRunnable()) {\n        throw new Error('\\'expect\\' was used when there was no current spec, this could be because an asynchronous test timed out');\n      }\n\n      return currentRunnable().expect(actual);\n    };\n\n    this.beforeEach = function(beforeEachFunction, timeout) {\n      currentDeclarationSuite.beforeEach({\n        fn: beforeEachFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.beforeAll = function(beforeAllFunction, timeout) {\n      currentDeclarationSuite.beforeAll({\n        fn: beforeAllFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.afterEach = function(afterEachFunction, timeout) {\n      currentDeclarationSuite.afterEach({\n        fn: afterEachFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.afterAll = function(afterAllFunction, timeout) {\n      currentDeclarationSuite.afterAll({\n        fn: afterAllFunction,\n        timeout: function() { return timeout || j$.DEFAULT_TIMEOUT_INTERVAL; }\n      });\n    };\n\n    this.pending = function(message) {\n      var fullMessage = j$.Spec.pendingSpecExceptionMessage;\n      if(message) {\n        fullMessage += message;\n      }\n      throw fullMessage;\n    };\n\n    this.fail = function(error) {\n      var message = 'Failed';\n      if (error) {\n        message += ': ';\n        message += error.message || error;\n      }\n\n      currentRunnable().addExpectationResult(false, {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        message: message,\n        error: error && error.message ? error : null\n      });\n    };\n  }\n\n  return Env;\n};\n\ngetJasmineRequireObj().JsApiReporter = function() {\n\n  var noopTimer = {\n    start: function(){},\n    elapsed: function(){ return 0; }\n  };\n\n  function JsApiReporter(options) {\n    var timer = options.timer || noopTimer,\n        status = 'loaded';\n\n    this.started = false;\n    this.finished = false;\n    this.runDetails = {};\n\n    this.jasmineStarted = function() {\n      this.started = true;\n      status = 'started';\n      timer.start();\n    };\n\n    var executionTime;\n\n    this.jasmineDone = function(runDetails) {\n      this.finished = true;\n      this.runDetails = runDetails;\n      executionTime = timer.elapsed();\n      status = 'done';\n    };\n\n    this.status = function() {\n      return status;\n    };\n\n    var suites = [],\n      suites_hash = {};\n\n    this.suiteStarted = function(result) {\n      suites_hash[result.id] = result;\n    };\n\n    this.suiteDone = function(result) {\n      storeSuite(result);\n    };\n\n    this.suiteResults = function(index, length) {\n      return suites.slice(index, index + length);\n    };\n\n    function storeSuite(result) {\n      suites.push(result);\n      suites_hash[result.id] = result;\n    }\n\n    this.suites = function() {\n      return suites_hash;\n    };\n\n    var specs = [];\n\n    this.specDone = function(result) {\n      specs.push(result);\n    };\n\n    this.specResults = function(index, length) {\n      return specs.slice(index, index + length);\n    };\n\n    this.specs = function() {\n      return specs;\n    };\n\n    this.executionTime = function() {\n      return executionTime;\n    };\n\n  }\n\n  return JsApiReporter;\n};\n\ngetJasmineRequireObj().CallTracker = function(j$) {\n\n  function CallTracker() {\n    var calls = [];\n    var opts = {};\n\n    function argCloner(context) {\n      var clonedArgs = [];\n      var argsAsArray = j$.util.argsToArray(context.args);\n      for(var i = 0; i < argsAsArray.length; i++) {\n        if(Object.prototype.toString.apply(argsAsArray[i]).match(/^\\[object/)) {\n          clonedArgs.push(j$.util.clone(argsAsArray[i]));\n        } else {\n          clonedArgs.push(argsAsArray[i]);\n        }\n      }\n      context.args = clonedArgs;\n    }\n\n    this.track = function(context) {\n      if(opts.cloneArgs) {\n        argCloner(context);\n      }\n      calls.push(context);\n    };\n\n    this.any = function() {\n      return !!calls.length;\n    };\n\n    this.count = function() {\n      return calls.length;\n    };\n\n    this.argsFor = function(index) {\n      var call = calls[index];\n      return call ? call.args : [];\n    };\n\n    this.all = function() {\n      return calls;\n    };\n\n    this.allArgs = function() {\n      var callArgs = [];\n      for(var i = 0; i < calls.length; i++){\n        callArgs.push(calls[i].args);\n      }\n\n      return callArgs;\n    };\n\n    this.first = function() {\n      return calls[0];\n    };\n\n    this.mostRecent = function() {\n      return calls[calls.length - 1];\n    };\n\n    this.reset = function() {\n      calls = [];\n    };\n\n    this.saveArgumentsByValue = function() {\n      opts.cloneArgs = true;\n    };\n\n  }\n\n  return CallTracker;\n};\n\ngetJasmineRequireObj().Clock = function() {\n  function Clock(global, delayedFunctionSchedulerFactory, mockDate) {\n    var self = this,\n      realTimingFunctions = {\n        setTimeout: global.setTimeout,\n        clearTimeout: global.clearTimeout,\n        setInterval: global.setInterval,\n        clearInterval: global.clearInterval\n      },\n      fakeTimingFunctions = {\n        setTimeout: setTimeout,\n        clearTimeout: clearTimeout,\n        setInterval: setInterval,\n        clearInterval: clearInterval\n      },\n      installed = false,\n      delayedFunctionScheduler,\n      timer;\n\n\n    self.install = function() {\n      if(!originalTimingFunctionsIntact()) {\n        throw new Error('Jasmine Clock was unable to install over custom global timer functions. Is the clock already installed?');\n      }\n      replace(global, fakeTimingFunctions);\n      timer = fakeTimingFunctions;\n      delayedFunctionScheduler = delayedFunctionSchedulerFactory();\n      installed = true;\n\n      return self;\n    };\n\n    self.uninstall = function() {\n      delayedFunctionScheduler = null;\n      mockDate.uninstall();\n      replace(global, realTimingFunctions);\n\n      timer = realTimingFunctions;\n      installed = false;\n    };\n\n    self.withMock = function(closure) {\n      this.install();\n      try {\n        closure();\n      } finally {\n        this.uninstall();\n      }\n    };\n\n    self.mockDate = function(initialDate) {\n      mockDate.install(initialDate);\n    };\n\n    self.setTimeout = function(fn, delay, params) {\n      if (legacyIE()) {\n        if (arguments.length > 2) {\n          throw new Error('IE < 9 cannot support extra params to setTimeout without a polyfill');\n        }\n        return timer.setTimeout(fn, delay);\n      }\n      return Function.prototype.apply.apply(timer.setTimeout, [global, arguments]);\n    };\n\n    self.setInterval = function(fn, delay, params) {\n      if (legacyIE()) {\n        if (arguments.length > 2) {\n          throw new Error('IE < 9 cannot support extra params to setInterval without a polyfill');\n        }\n        return timer.setInterval(fn, delay);\n      }\n      return Function.prototype.apply.apply(timer.setInterval, [global, arguments]);\n    };\n\n    self.clearTimeout = function(id) {\n      return Function.prototype.call.apply(timer.clearTimeout, [global, id]);\n    };\n\n    self.clearInterval = function(id) {\n      return Function.prototype.call.apply(timer.clearInterval, [global, id]);\n    };\n\n    self.tick = function(millis) {\n      if (installed) {\n        delayedFunctionScheduler.tick(millis, function(millis) { mockDate.tick(millis); });\n      } else {\n        throw new Error('Mock clock is not installed, use jasmine.clock().install()');\n      }\n    };\n\n    return self;\n\n    function originalTimingFunctionsIntact() {\n      return global.setTimeout === realTimingFunctions.setTimeout &&\n        global.clearTimeout === realTimingFunctions.clearTimeout &&\n        global.setInterval === realTimingFunctions.setInterval &&\n        global.clearInterval === realTimingFunctions.clearInterval;\n    }\n\n    function legacyIE() {\n      //if these methods are polyfilled, apply will be present\n      return !(realTimingFunctions.setTimeout || realTimingFunctions.setInterval).apply;\n    }\n\n    function replace(dest, source) {\n      for (var prop in source) {\n        dest[prop] = source[prop];\n      }\n    }\n\n    function setTimeout(fn, delay) {\n      return delayedFunctionScheduler.scheduleFunction(fn, delay, argSlice(arguments, 2));\n    }\n\n    function clearTimeout(id) {\n      return delayedFunctionScheduler.removeFunctionWithId(id);\n    }\n\n    function setInterval(fn, interval) {\n      return delayedFunctionScheduler.scheduleFunction(fn, interval, argSlice(arguments, 2), true);\n    }\n\n    function clearInterval(id) {\n      return delayedFunctionScheduler.removeFunctionWithId(id);\n    }\n\n    function argSlice(argsObj, n) {\n      return Array.prototype.slice.call(argsObj, n);\n    }\n  }\n\n  return Clock;\n};\n\ngetJasmineRequireObj().DelayedFunctionScheduler = function() {\n  function DelayedFunctionScheduler() {\n    var self = this;\n    var scheduledLookup = [];\n    var scheduledFunctions = {};\n    var currentTime = 0;\n    var delayedFnCount = 0;\n\n    self.tick = function(millis, tickDate) {\n      millis = millis || 0;\n      var endTime = currentTime + millis;\n\n      runScheduledFunctions(endTime, tickDate);\n      currentTime = endTime;\n    };\n\n    self.scheduleFunction = function(funcToCall, millis, params, recurring, timeoutKey, runAtMillis) {\n      var f;\n      if (typeof(funcToCall) === 'string') {\n        /* jshint evil: true */\n        f = function() { return eval(funcToCall); };\n        /* jshint evil: false */\n      } else {\n        f = funcToCall;\n      }\n\n      millis = millis || 0;\n      timeoutKey = timeoutKey || ++delayedFnCount;\n      runAtMillis = runAtMillis || (currentTime + millis);\n\n      var funcToSchedule = {\n        runAtMillis: runAtMillis,\n        funcToCall: f,\n        recurring: recurring,\n        params: params,\n        timeoutKey: timeoutKey,\n        millis: millis\n      };\n\n      if (runAtMillis in scheduledFunctions) {\n        scheduledFunctions[runAtMillis].push(funcToSchedule);\n      } else {\n        scheduledFunctions[runAtMillis] = [funcToSchedule];\n        scheduledLookup.push(runAtMillis);\n        scheduledLookup.sort(function (a, b) {\n          return a - b;\n        });\n      }\n\n      return timeoutKey;\n    };\n\n    self.removeFunctionWithId = function(timeoutKey) {\n      for (var runAtMillis in scheduledFunctions) {\n        var funcs = scheduledFunctions[runAtMillis];\n        var i = indexOfFirstToPass(funcs, function (func) {\n          return func.timeoutKey === timeoutKey;\n        });\n\n        if (i > -1) {\n          if (funcs.length === 1) {\n            delete scheduledFunctions[runAtMillis];\n            deleteFromLookup(runAtMillis);\n          } else {\n            funcs.splice(i, 1);\n          }\n\n          // intervals get rescheduled when executed, so there's never more\n          // than a single scheduled function with a given timeoutKey\n          break;\n        }\n      }\n    };\n\n    return self;\n\n    function indexOfFirstToPass(array, testFn) {\n      var index = -1;\n\n      for (var i = 0; i < array.length; ++i) {\n        if (testFn(array[i])) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n\n    function deleteFromLookup(key) {\n      var value = Number(key);\n      var i = indexOfFirstToPass(scheduledLookup, function (millis) {\n        return millis === value;\n      });\n\n      if (i > -1) {\n        scheduledLookup.splice(i, 1);\n      }\n    }\n\n    function reschedule(scheduledFn) {\n      self.scheduleFunction(scheduledFn.funcToCall,\n        scheduledFn.millis,\n        scheduledFn.params,\n        true,\n        scheduledFn.timeoutKey,\n        scheduledFn.runAtMillis + scheduledFn.millis);\n    }\n\n    function forEachFunction(funcsToRun, callback) {\n      for (var i = 0; i < funcsToRun.length; ++i) {\n        callback(funcsToRun[i]);\n      }\n    }\n\n    function runScheduledFunctions(endTime, tickDate) {\n      tickDate = tickDate || function() {};\n      if (scheduledLookup.length === 0 || scheduledLookup[0] > endTime) {\n        tickDate(endTime - currentTime);\n        return;\n      }\n\n      do {\n        var newCurrentTime = scheduledLookup.shift();\n        tickDate(newCurrentTime - currentTime);\n\n        currentTime = newCurrentTime;\n\n        var funcsToRun = scheduledFunctions[currentTime];\n        delete scheduledFunctions[currentTime];\n\n        forEachFunction(funcsToRun, function(funcToRun) {\n          if (funcToRun.recurring) {\n            reschedule(funcToRun);\n          }\n        });\n\n        forEachFunction(funcsToRun, function(funcToRun) {\n          funcToRun.funcToCall.apply(null, funcToRun.params || []);\n        });\n      } while (scheduledLookup.length > 0 &&\n              // checking first if we're out of time prevents setTimeout(0)\n              // scheduled in a funcToRun from forcing an extra iteration\n                 currentTime !== endTime  &&\n                 scheduledLookup[0] <= endTime);\n\n      // ran out of functions to call, but still time left on the clock\n      if (currentTime !== endTime) {\n        tickDate(endTime - currentTime);\n      }\n    }\n  }\n\n  return DelayedFunctionScheduler;\n};\n\ngetJasmineRequireObj().ExceptionFormatter = function() {\n  function ExceptionFormatter() {\n    this.message = function(error) {\n      var message = '';\n\n      if (error.name && error.message) {\n        message += error.name + ': ' + error.message;\n      } else {\n        message += error.toString() + ' thrown';\n      }\n\n      if (error.fileName || error.sourceURL) {\n        message += ' in ' + (error.fileName || error.sourceURL);\n      }\n\n      if (error.line || error.lineNumber) {\n        message += ' (line ' + (error.line || error.lineNumber) + ')';\n      }\n\n      return message;\n    };\n\n    this.stack = function(error) {\n      return error ? error.stack : null;\n    };\n  }\n\n  return ExceptionFormatter;\n};\n\ngetJasmineRequireObj().Expectation = function() {\n\n  function Expectation(options) {\n    this.util = options.util || { buildFailureMessage: function() {} };\n    this.customEqualityTesters = options.customEqualityTesters || [];\n    this.actual = options.actual;\n    this.addExpectationResult = options.addExpectationResult || function(){};\n    this.isNot = options.isNot;\n\n    var customMatchers = options.customMatchers || {};\n    for (var matcherName in customMatchers) {\n      this[matcherName] = Expectation.prototype.wrapCompare(matcherName, customMatchers[matcherName]);\n    }\n  }\n\n  Expectation.prototype.wrapCompare = function(name, matcherFactory) {\n    return function() {\n      var args = Array.prototype.slice.call(arguments, 0),\n        expected = args.slice(0),\n        message = '';\n\n      args.unshift(this.actual);\n\n      var matcher = matcherFactory(this.util, this.customEqualityTesters),\n          matcherCompare = matcher.compare;\n\n      function defaultNegativeCompare() {\n        var result = matcher.compare.apply(null, args);\n        result.pass = !result.pass;\n        return result;\n      }\n\n      if (this.isNot) {\n        matcherCompare = matcher.negativeCompare || defaultNegativeCompare;\n      }\n\n      var result = matcherCompare.apply(null, args);\n\n      if (!result.pass) {\n        if (!result.message) {\n          args.unshift(this.isNot);\n          args.unshift(name);\n          message = this.util.buildFailureMessage.apply(null, args);\n        } else {\n          if (Object.prototype.toString.apply(result.message) === '[object Function]') {\n            message = result.message();\n          } else {\n            message = result.message;\n          }\n        }\n      }\n\n      if (expected.length == 1) {\n        expected = expected[0];\n      }\n\n      // TODO: how many of these params are needed?\n      this.addExpectationResult(\n        result.pass,\n        {\n          matcherName: name,\n          passed: result.pass,\n          message: message,\n          actual: this.actual,\n          expected: expected // TODO: this may need to be arrayified/sliced\n        }\n      );\n    };\n  };\n\n  Expectation.addCoreMatchers = function(matchers) {\n    var prototype = Expectation.prototype;\n    for (var matcherName in matchers) {\n      var matcher = matchers[matcherName];\n      prototype[matcherName] = prototype.wrapCompare(matcherName, matcher);\n    }\n  };\n\n  Expectation.Factory = function(options) {\n    options = options || {};\n\n    var expect = new Expectation(options);\n\n    // TODO: this would be nice as its own Object - NegativeExpectation\n    // TODO: copy instead of mutate options\n    options.isNot = true;\n    expect.not = new Expectation(options);\n\n    return expect;\n  };\n\n  return Expectation;\n};\n\n//TODO: expectation result may make more sense as a presentation of an expectation.\ngetJasmineRequireObj().buildExpectationResult = function() {\n  function buildExpectationResult(options) {\n    var messageFormatter = options.messageFormatter || function() {},\n      stackFormatter = options.stackFormatter || function() {};\n\n    var result = {\n      matcherName: options.matcherName,\n      message: message(),\n      stack: stack(),\n      passed: options.passed\n    };\n\n    if(!result.passed) {\n      result.expected = options.expected;\n      result.actual = options.actual;\n    }\n\n    return result;\n\n    function message() {\n      if (options.passed) {\n        return 'Passed.';\n      } else if (options.message) {\n        return options.message;\n      } else if (options.error) {\n        return messageFormatter(options.error);\n      }\n      return '';\n    }\n\n    function stack() {\n      if (options.passed) {\n        return '';\n      }\n\n      var error = options.error;\n      if (!error) {\n        try {\n          throw new Error(message());\n        } catch (e) {\n          error = e;\n        }\n      }\n      return stackFormatter(error);\n    }\n  }\n\n  return buildExpectationResult;\n};\n\ngetJasmineRequireObj().MockDate = function() {\n  function MockDate(global) {\n    var self = this;\n    var currentTime = 0;\n\n    if (!global || !global.Date) {\n      self.install = function() {};\n      self.tick = function() {};\n      self.uninstall = function() {};\n      return self;\n    }\n\n    var GlobalDate = global.Date;\n\n    self.install = function(mockDate) {\n      if (mockDate instanceof GlobalDate) {\n        currentTime = mockDate.getTime();\n      } else {\n        currentTime = new GlobalDate().getTime();\n      }\n\n      global.Date = FakeDate;\n    };\n\n    self.tick = function(millis) {\n      millis = millis || 0;\n      currentTime = currentTime + millis;\n    };\n\n    self.uninstall = function() {\n      currentTime = 0;\n      global.Date = GlobalDate;\n    };\n\n    createDateProperties();\n\n    return self;\n\n    function FakeDate() {\n      switch(arguments.length) {\n        case 0:\n          return new GlobalDate(currentTime);\n        case 1:\n          return new GlobalDate(arguments[0]);\n        case 2:\n          return new GlobalDate(arguments[0], arguments[1]);\n        case 3:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2]);\n        case 4:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3]);\n        case 5:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4]);\n        case 6:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4], arguments[5]);\n        default:\n          return new GlobalDate(arguments[0], arguments[1], arguments[2], arguments[3],\n                                arguments[4], arguments[5], arguments[6]);\n      }\n    }\n\n    function createDateProperties() {\n      FakeDate.prototype = GlobalDate.prototype;\n\n      FakeDate.now = function() {\n        if (GlobalDate.now) {\n          return currentTime;\n        } else {\n          throw new Error('Browser does not support Date.now()');\n        }\n      };\n\n      FakeDate.toSource = GlobalDate.toSource;\n      FakeDate.toString = GlobalDate.toString;\n      FakeDate.parse = GlobalDate.parse;\n      FakeDate.UTC = GlobalDate.UTC;\n    }\n\t}\n\n  return MockDate;\n};\n\ngetJasmineRequireObj().pp = function(j$) {\n\n  function PrettyPrinter() {\n    this.ppNestLevel_ = 0;\n    this.seen = [];\n  }\n\n  PrettyPrinter.prototype.format = function(value) {\n    this.ppNestLevel_++;\n    try {\n      if (j$.util.isUndefined(value)) {\n        this.emitScalar('undefined');\n      } else if (value === null) {\n        this.emitScalar('null');\n      } else if (value === 0 && 1/value === -Infinity) {\n        this.emitScalar('-0');\n      } else if (value === j$.getGlobal()) {\n        this.emitScalar('<global>');\n      } else if (value.jasmineToString) {\n        this.emitScalar(value.jasmineToString());\n      } else if (typeof value === 'string') {\n        this.emitString(value);\n      } else if (j$.isSpy(value)) {\n        this.emitScalar('spy on ' + value.and.identity());\n      } else if (value instanceof RegExp) {\n        this.emitScalar(value.toString());\n      } else if (typeof value === 'function') {\n        this.emitScalar('Function');\n      } else if (typeof value.nodeType === 'number') {\n        this.emitScalar('HTMLNode');\n      } else if (value instanceof Date) {\n        this.emitScalar('Date(' + value + ')');\n      } else if (value.toString && typeof value === 'object' && !(value instanceof Array) && value.toString !== Object.prototype.toString) {\n        this.emitScalar(value.toString());\n      } else if (j$.util.arrayContains(this.seen, value)) {\n        this.emitScalar('<circular reference: ' + (j$.isArray_(value) ? 'Array' : 'Object') + '>');\n      } else if (j$.isArray_(value) || j$.isA_('Object', value)) {\n        this.seen.push(value);\n        if (j$.isArray_(value)) {\n          this.emitArray(value);\n        } else {\n          this.emitObject(value);\n        }\n        this.seen.pop();\n      } else {\n        this.emitScalar(value.toString());\n      }\n    } finally {\n      this.ppNestLevel_--;\n    }\n  };\n\n  PrettyPrinter.prototype.iterateObject = function(obj, fn) {\n    for (var property in obj) {\n      if (!Object.prototype.hasOwnProperty.call(obj, property)) { continue; }\n      fn(property, obj.__lookupGetter__ ? (!j$.util.isUndefined(obj.__lookupGetter__(property)) &&\n          obj.__lookupGetter__(property) !== null) : false);\n    }\n  };\n\n  PrettyPrinter.prototype.emitArray = j$.unimplementedMethod_;\n  PrettyPrinter.prototype.emitObject = j$.unimplementedMethod_;\n  PrettyPrinter.prototype.emitScalar = j$.unimplementedMethod_;\n  PrettyPrinter.prototype.emitString = j$.unimplementedMethod_;\n\n  function StringPrettyPrinter() {\n    PrettyPrinter.call(this);\n\n    this.string = '';\n  }\n\n  j$.util.inherit(StringPrettyPrinter, PrettyPrinter);\n\n  StringPrettyPrinter.prototype.emitScalar = function(value) {\n    this.append(value);\n  };\n\n  StringPrettyPrinter.prototype.emitString = function(value) {\n    this.append('\\'' + value + '\\'');\n  };\n\n  StringPrettyPrinter.prototype.emitArray = function(array) {\n    if (this.ppNestLevel_ > j$.MAX_PRETTY_PRINT_DEPTH) {\n      this.append('Array');\n      return;\n    }\n    var length = Math.min(array.length, j$.MAX_PRETTY_PRINT_ARRAY_LENGTH);\n    this.append('[ ');\n    for (var i = 0; i < length; i++) {\n      if (i > 0) {\n        this.append(', ');\n      }\n      this.format(array[i]);\n    }\n    if(array.length > length){\n      this.append(', ...');\n    }\n\n    var self = this;\n    var first = array.length === 0;\n    this.iterateObject(array, function(property, isGetter) {\n      if (property.match(/^\\d+$/)) {\n        return;\n      }\n\n      if (first) {\n        first = false;\n      } else {\n        self.append(', ');\n      }\n\n      self.formatProperty(array, property, isGetter);\n    });\n\n    this.append(' ]');\n  };\n\n  StringPrettyPrinter.prototype.emitObject = function(obj) {\n    var constructorName = obj.constructor ? j$.fnNameFor(obj.constructor) : 'null';\n    this.append(constructorName);\n\n    if (this.ppNestLevel_ > j$.MAX_PRETTY_PRINT_DEPTH) {\n      return;\n    }\n\n    var self = this;\n    this.append('({ ');\n    var first = true;\n\n    this.iterateObject(obj, function(property, isGetter) {\n      if (first) {\n        first = false;\n      } else {\n        self.append(', ');\n      }\n\n      self.formatProperty(obj, property, isGetter);\n    });\n\n    this.append(' })');\n  };\n\n  StringPrettyPrinter.prototype.formatProperty = function(obj, property, isGetter) {\n      this.append(property);\n      this.append(': ');\n      if (isGetter) {\n        this.append('<getter>');\n      } else {\n        this.format(obj[property]);\n      }\n  };\n\n  StringPrettyPrinter.prototype.append = function(value) {\n    this.string += value;\n  };\n\n  return function(value) {\n    var stringPrettyPrinter = new StringPrettyPrinter();\n    stringPrettyPrinter.format(value);\n    return stringPrettyPrinter.string;\n  };\n};\n\ngetJasmineRequireObj().QueueRunner = function(j$) {\n\n  function once(fn) {\n    var called = false;\n    return function() {\n      if (!called) {\n        called = true;\n        fn();\n      }\n      return null;\n    };\n  }\n\n  function QueueRunner(attrs) {\n    this.queueableFns = attrs.queueableFns || [];\n    this.onComplete = attrs.onComplete || function() {};\n    this.clearStack = attrs.clearStack || function(fn) {fn();};\n    this.onException = attrs.onException || function() {};\n    this.catchException = attrs.catchException || function() { return true; };\n    this.userContext = attrs.userContext || {};\n    this.timeout = attrs.timeout || {setTimeout: setTimeout, clearTimeout: clearTimeout};\n    this.fail = attrs.fail || function() {};\n  }\n\n  QueueRunner.prototype.execute = function() {\n    this.run(this.queueableFns, 0);\n  };\n\n  QueueRunner.prototype.run = function(queueableFns, recursiveIndex) {\n    var length = queueableFns.length,\n      self = this,\n      iterativeIndex;\n\n\n    for(iterativeIndex = recursiveIndex; iterativeIndex < length; iterativeIndex++) {\n      var queueableFn = queueableFns[iterativeIndex];\n      if (queueableFn.fn.length > 0) {\n        attemptAsync(queueableFn);\n        return;\n      } else {\n        attemptSync(queueableFn);\n      }\n    }\n\n    var runnerDone = iterativeIndex >= length;\n\n    if (runnerDone) {\n      this.clearStack(this.onComplete);\n    }\n\n    function attemptSync(queueableFn) {\n      try {\n        queueableFn.fn.call(self.userContext);\n      } catch (e) {\n        handleException(e, queueableFn);\n      }\n    }\n\n    function attemptAsync(queueableFn) {\n      var clearTimeout = function () {\n          Function.prototype.apply.apply(self.timeout.clearTimeout, [j$.getGlobal(), [timeoutId]]);\n        },\n        next = once(function () {\n          clearTimeout(timeoutId);\n          self.run(queueableFns, iterativeIndex + 1);\n        }),\n        timeoutId;\n\n      next.fail = function() {\n        self.fail.apply(null, arguments);\n        next();\n      };\n\n      if (queueableFn.timeout) {\n        timeoutId = Function.prototype.apply.apply(self.timeout.setTimeout, [j$.getGlobal(), [function() {\n          var error = new Error('Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.');\n          onException(error);\n          next();\n        }, queueableFn.timeout()]]);\n      }\n\n      try {\n        queueableFn.fn.call(self.userContext, next);\n      } catch (e) {\n        handleException(e, queueableFn);\n        next();\n      }\n    }\n\n    function onException(e) {\n      self.onException(e);\n    }\n\n    function handleException(e, queueableFn) {\n      onException(e);\n      if (!self.catchException(e)) {\n        //TODO: set a var when we catch an exception and\n        //use a finally block to close the loop in a nice way..\n        throw e;\n      }\n    }\n  };\n\n  return QueueRunner;\n};\n\ngetJasmineRequireObj().ReportDispatcher = function() {\n  function ReportDispatcher(methods) {\n\n    var dispatchedMethods = methods || [];\n\n    for (var i = 0; i < dispatchedMethods.length; i++) {\n      var method = dispatchedMethods[i];\n      this[method] = (function(m) {\n        return function() {\n          dispatch(m, arguments);\n        };\n      }(method));\n    }\n\n    var reporters = [];\n    var fallbackReporter = null;\n\n    this.addReporter = function(reporter) {\n      reporters.push(reporter);\n    };\n\n    this.provideFallbackReporter = function(reporter) {\n      fallbackReporter = reporter;\n    };\n\n    this.clearReporters = function() {\n      reporters = [];\n    };\n\n    return this;\n\n    function dispatch(method, args) {\n      if (reporters.length === 0 && fallbackReporter !== null) {\n          reporters.push(fallbackReporter);\n      }\n      for (var i = 0; i < reporters.length; i++) {\n        var reporter = reporters[i];\n        if (reporter[method]) {\n          reporter[method].apply(reporter, args);\n        }\n      }\n    }\n  }\n\n  return ReportDispatcher;\n};\n\n\ngetJasmineRequireObj().SpyRegistry = function(j$) {\n\n  var getErrorMsg = j$.formatErrorMsg('<spyOn>', 'spyOn(<object>, <methodName>)');\n\n  function SpyRegistry(options) {\n    options = options || {};\n    var currentSpies = options.currentSpies || function() { return []; };\n\n    this.allowRespy = function(allow){\n      this.respy = allow;\n    };\n\n    this.spyOn = function(obj, methodName) {\n\n      if (j$.util.isUndefined(obj)) {\n        throw new Error(getErrorMsg('could not find an object to spy upon for ' + methodName + '()'));\n      }\n\n      if (j$.util.isUndefined(methodName)) {\n        throw new Error(getErrorMsg('No method name supplied'));\n      }\n\n      if (j$.util.isUndefined(obj[methodName])) {\n        throw new Error(getErrorMsg(methodName + '() method does not exist'));\n      }\n\n      if (obj[methodName] && j$.isSpy(obj[methodName])  ) {\n        if ( !!this.respy ){\n          return obj[methodName];\n        }else {\n          throw new Error(getErrorMsg(methodName + ' has already been spied upon'));\n        }\n      }\n\n      var descriptor;\n      try {\n        descriptor = Object.getOwnPropertyDescriptor(obj, methodName);\n      } catch(e) {\n        // IE 8 doesn't support `definePropery` on non-DOM nodes\n      }\n\n      if (descriptor && !(descriptor.writable || descriptor.set)) {\n        throw new Error(getErrorMsg(methodName + ' is not declared writable or has no setter'));\n      }\n\n      var originalMethod = obj[methodName],\n        spiedMethod = j$.createSpy(methodName, originalMethod),\n        restoreStrategy;\n\n      if (Object.prototype.hasOwnProperty.call(obj, methodName)) {\n        restoreStrategy = function() {\n          obj[methodName] = originalMethod;\n        };\n      } else {\n        restoreStrategy = function() {\n          if (!delete obj[methodName]) {\n            obj[methodName] = originalMethod;\n          }\n        };\n      }\n\n      currentSpies().push({\n        restoreObjectToOriginalState: restoreStrategy\n      });\n\n      obj[methodName] = spiedMethod;\n\n      return spiedMethod;\n    };\n\n    this.clearSpies = function() {\n      var spies = currentSpies();\n      for (var i = spies.length - 1; i >= 0; i--) {\n        var spyEntry = spies[i];\n        spyEntry.restoreObjectToOriginalState();\n      }\n    };\n  }\n\n  return SpyRegistry;\n};\n\ngetJasmineRequireObj().SpyStrategy = function(j$) {\n\n  function SpyStrategy(options) {\n    options = options || {};\n\n    var identity = options.name || 'unknown',\n        originalFn = options.fn || function() {},\n        getSpy = options.getSpy || function() {},\n        plan = function() {};\n\n    this.identity = function() {\n      return identity;\n    };\n\n    this.exec = function() {\n      return plan.apply(this, arguments);\n    };\n\n    this.callThrough = function() {\n      plan = originalFn;\n      return getSpy();\n    };\n\n    this.returnValue = function(value) {\n      plan = function() {\n        return value;\n      };\n      return getSpy();\n    };\n\n    this.returnValues = function() {\n      var values = Array.prototype.slice.call(arguments);\n      plan = function () {\n        return values.shift();\n      };\n      return getSpy();\n    };\n\n    this.throwError = function(something) {\n      var error = (something instanceof Error) ? something : new Error(something);\n      plan = function() {\n        throw error;\n      };\n      return getSpy();\n    };\n\n    this.callFake = function(fn) {\n      if(!j$.isFunction_(fn)) {\n        throw new Error('Argument passed to callFake should be a function, got ' + fn);\n      }\n      plan = fn;\n      return getSpy();\n    };\n\n    this.stub = function(fn) {\n      plan = function() {};\n      return getSpy();\n    };\n  }\n\n  return SpyStrategy;\n};\n\ngetJasmineRequireObj().Suite = function(j$) {\n  function Suite(attrs) {\n    this.env = attrs.env;\n    this.id = attrs.id;\n    this.parentSuite = attrs.parentSuite;\n    this.description = attrs.description;\n    this.expectationFactory = attrs.expectationFactory;\n    this.expectationResultFactory = attrs.expectationResultFactory;\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;\n\n    this.beforeFns = [];\n    this.afterFns = [];\n    this.beforeAllFns = [];\n    this.afterAllFns = [];\n    this.disabled = false;\n\n    this.children = [];\n\n    this.result = {\n      id: this.id,\n      description: this.description,\n      fullName: this.getFullName(),\n      failedExpectations: []\n    };\n  }\n\n  Suite.prototype.expect = function(actual) {\n    return this.expectationFactory(actual, this);\n  };\n\n  Suite.prototype.getFullName = function() {\n    var fullName = [];\n    for (var parentSuite = this; parentSuite; parentSuite = parentSuite.parentSuite) {\n      if (parentSuite.parentSuite) {\n        fullName.unshift(parentSuite.description);\n      }\n    }\n    return fullName.join(' ');\n  };\n\n  Suite.prototype.disable = function() {\n    this.disabled = true;\n  };\n\n  Suite.prototype.pend = function(message) {\n    this.markedPending = true;\n  };\n\n  Suite.prototype.beforeEach = function(fn) {\n    this.beforeFns.unshift(fn);\n  };\n\n  Suite.prototype.beforeAll = function(fn) {\n    this.beforeAllFns.push(fn);\n  };\n\n  Suite.prototype.afterEach = function(fn) {\n    this.afterFns.unshift(fn);\n  };\n\n  Suite.prototype.afterAll = function(fn) {\n    this.afterAllFns.push(fn);\n  };\n\n  Suite.prototype.addChild = function(child) {\n    this.children.push(child);\n  };\n\n  Suite.prototype.status = function() {\n    if (this.disabled) {\n      return 'disabled';\n    }\n\n    if (this.markedPending) {\n      return 'pending';\n    }\n\n    if (this.result.failedExpectations.length > 0) {\n      return 'failed';\n    } else {\n      return 'finished';\n    }\n  };\n\n  Suite.prototype.isExecutable = function() {\n    return !this.disabled;\n  };\n\n  Suite.prototype.canBeReentered = function() {\n    return this.beforeAllFns.length === 0 && this.afterAllFns.length === 0;\n  };\n\n  Suite.prototype.getResult = function() {\n    this.result.status = this.status();\n    return this.result;\n  };\n\n  Suite.prototype.sharedUserContext = function() {\n    if (!this.sharedContext) {\n      this.sharedContext = this.parentSuite ? clone(this.parentSuite.sharedUserContext()) : {};\n    }\n\n    return this.sharedContext;\n  };\n\n  Suite.prototype.clonedSharedUserContext = function() {\n    return clone(this.sharedUserContext());\n  };\n\n  Suite.prototype.onException = function() {\n    if (arguments[0] instanceof j$.errors.ExpectationFailed) {\n      return;\n    }\n\n    if(isAfterAll(this.children)) {\n      var data = {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        error: arguments[0]\n      };\n      this.result.failedExpectations.push(this.expectationResultFactory(data));\n    } else {\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.onException.apply(child, arguments);\n      }\n    }\n  };\n\n  Suite.prototype.addExpectationResult = function () {\n    if(isAfterAll(this.children) && isFailure(arguments)){\n      var data = arguments[1];\n      this.result.failedExpectations.push(this.expectationResultFactory(data));\n      if(this.throwOnExpectationFailure) {\n        throw new j$.errors.ExpectationFailed();\n      }\n    } else {\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        try {\n          child.addExpectationResult.apply(child, arguments);\n        } catch(e) {\n          // keep going\n        }\n      }\n    }\n  };\n\n  function isAfterAll(children) {\n    return children && children[0].result.status;\n  }\n\n  function isFailure(args) {\n    return !args[0];\n  }\n\n  function clone(obj) {\n    var clonedObj = {};\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        clonedObj[prop] = obj[prop];\n      }\n    }\n\n    return clonedObj;\n  }\n\n  return Suite;\n};\n\nif (typeof window == void 0 && typeof exports == 'object') {\n  exports.Suite = jasmineRequire.Suite;\n}\n\ngetJasmineRequireObj().Timer = function() {\n  var defaultNow = (function(Date) {\n    return function() { return new Date().getTime(); };\n  })(Date);\n\n  function Timer(options) {\n    options = options || {};\n\n    var now = options.now || defaultNow,\n      startTime;\n\n    this.start = function() {\n      startTime = now();\n    };\n\n    this.elapsed = function() {\n      return now() - startTime;\n    };\n  }\n\n  return Timer;\n};\n\ngetJasmineRequireObj().TreeProcessor = function() {\n  function TreeProcessor(attrs) {\n    var tree = attrs.tree,\n        runnableIds = attrs.runnableIds,\n        queueRunnerFactory = attrs.queueRunnerFactory,\n        nodeStart = attrs.nodeStart || function() {},\n        nodeComplete = attrs.nodeComplete || function() {},\n        orderChildren = attrs.orderChildren || function(node) { return node.children; },\n        stats = { valid: true },\n        processed = false,\n        defaultMin = Infinity,\n        defaultMax = 1 - Infinity;\n\n    this.processTree = function() {\n      processNode(tree, false);\n      processed = true;\n      return stats;\n    };\n\n    this.execute = function(done) {\n      if (!processed) {\n        this.processTree();\n      }\n\n      if (!stats.valid) {\n        throw 'invalid order';\n      }\n\n      var childFns = wrapChildren(tree, 0);\n\n      queueRunnerFactory({\n        queueableFns: childFns,\n        userContext: tree.sharedUserContext(),\n        onException: function() {\n          tree.onException.apply(tree, arguments);\n        },\n        onComplete: done\n      });\n    };\n\n    function runnableIndex(id) {\n      for (var i = 0; i < runnableIds.length; i++) {\n        if (runnableIds[i] === id) {\n          return i;\n        }\n      }\n    }\n\n    function processNode(node, parentEnabled) {\n      var executableIndex = runnableIndex(node.id);\n\n      if (executableIndex !== undefined) {\n        parentEnabled = true;\n      }\n\n      parentEnabled = parentEnabled && node.isExecutable();\n\n      if (!node.children) {\n        stats[node.id] = {\n          executable: parentEnabled && node.isExecutable(),\n          segments: [{\n            index: 0,\n            owner: node,\n            nodes: [node],\n            min: startingMin(executableIndex),\n            max: startingMax(executableIndex)\n          }]\n        };\n      } else {\n        var hasExecutableChild = false;\n\n        var orderedChildren = orderChildren(node);\n\n        for (var i = 0; i < orderedChildren.length; i++) {\n          var child = orderedChildren[i];\n\n          processNode(child, parentEnabled);\n\n          if (!stats.valid) {\n            return;\n          }\n\n          var childStats = stats[child.id];\n\n          hasExecutableChild = hasExecutableChild || childStats.executable;\n        }\n\n        stats[node.id] = {\n          executable: hasExecutableChild\n        };\n\n        segmentChildren(node, orderedChildren, stats[node.id], executableIndex);\n\n        if (!node.canBeReentered() && stats[node.id].segments.length > 1) {\n          stats = { valid: false };\n        }\n      }\n    }\n\n    function startingMin(executableIndex) {\n      return executableIndex === undefined ? defaultMin : executableIndex;\n    }\n\n    function startingMax(executableIndex) {\n      return executableIndex === undefined ? defaultMax : executableIndex;\n    }\n\n    function segmentChildren(node, orderedChildren, nodeStats, executableIndex) {\n      var currentSegment = { index: 0, owner: node, nodes: [], min: startingMin(executableIndex), max: startingMax(executableIndex) },\n          result = [currentSegment],\n          lastMax = defaultMax,\n          orderedChildSegments = orderChildSegments(orderedChildren);\n\n      function isSegmentBoundary(minIndex) {\n        return lastMax !== defaultMax && minIndex !== defaultMin && lastMax < minIndex - 1;\n      }\n\n      for (var i = 0; i < orderedChildSegments.length; i++) {\n        var childSegment = orderedChildSegments[i],\n          maxIndex = childSegment.max,\n          minIndex = childSegment.min;\n\n        if (isSegmentBoundary(minIndex)) {\n          currentSegment = {index: result.length, owner: node, nodes: [], min: defaultMin, max: defaultMax};\n          result.push(currentSegment);\n        }\n\n        currentSegment.nodes.push(childSegment);\n        currentSegment.min = Math.min(currentSegment.min, minIndex);\n        currentSegment.max = Math.max(currentSegment.max, maxIndex);\n        lastMax = maxIndex;\n      }\n\n      nodeStats.segments = result;\n    }\n\n    function orderChildSegments(children) {\n      var specifiedOrder = [],\n          unspecifiedOrder = [];\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i],\n            segments = stats[child.id].segments;\n\n        for (var j = 0; j < segments.length; j++) {\n          var seg = segments[j];\n\n          if (seg.min === defaultMin) {\n            unspecifiedOrder.push(seg);\n          } else {\n            specifiedOrder.push(seg);\n          }\n        }\n      }\n\n      specifiedOrder.sort(function(a, b) {\n        return a.min - b.min;\n      });\n\n      return specifiedOrder.concat(unspecifiedOrder);\n    }\n\n    function executeNode(node, segmentNumber) {\n      if (node.children) {\n        return {\n          fn: function(done) {\n            nodeStart(node);\n\n            queueRunnerFactory({\n              onComplete: function() {\n                nodeComplete(node, node.getResult());\n                done();\n              },\n              queueableFns: wrapChildren(node, segmentNumber),\n              userContext: node.sharedUserContext(),\n              onException: function() {\n                node.onException.apply(node, arguments);\n              }\n            });\n          }\n        };\n      } else {\n        return {\n          fn: function(done) { node.execute(done, stats[node.id].executable); }\n        };\n      }\n    }\n\n    function wrapChildren(node, segmentNumber) {\n      var result = [],\n          segmentChildren = stats[node.id].segments[segmentNumber].nodes;\n\n      for (var i = 0; i < segmentChildren.length; i++) {\n        result.push(executeNode(segmentChildren[i].owner, segmentChildren[i].index));\n      }\n\n      if (!stats[node.id].executable) {\n        return result;\n      }\n\n      return node.beforeAllFns.concat(result).concat(node.afterAllFns);\n    }\n  }\n\n  return TreeProcessor;\n};\n\ngetJasmineRequireObj().Any = function(j$) {\n\n  function Any(expectedObject) {\n    if (typeof expectedObject === 'undefined') {\n      throw new TypeError(\n        'jasmine.any() expects to be passed a constructor function. ' +\n        'Please pass one or use jasmine.anything() to match any object.'\n      );\n    }\n    this.expectedObject = expectedObject;\n  }\n\n  Any.prototype.asymmetricMatch = function(other) {\n    if (this.expectedObject == String) {\n      return typeof other == 'string' || other instanceof String;\n    }\n\n    if (this.expectedObject == Number) {\n      return typeof other == 'number' || other instanceof Number;\n    }\n\n    if (this.expectedObject == Function) {\n      return typeof other == 'function' || other instanceof Function;\n    }\n\n    if (this.expectedObject == Object) {\n      return typeof other == 'object';\n    }\n\n    if (this.expectedObject == Boolean) {\n      return typeof other == 'boolean';\n    }\n\n    return other instanceof this.expectedObject;\n  };\n\n  Any.prototype.jasmineToString = function() {\n    return '<jasmine.any(' + j$.fnNameFor(this.expectedObject) + ')>';\n  };\n\n  return Any;\n};\n\ngetJasmineRequireObj().Anything = function(j$) {\n\n  function Anything() {}\n\n  Anything.prototype.asymmetricMatch = function(other) {\n    return !j$.util.isUndefined(other) && other !== null;\n  };\n\n  Anything.prototype.jasmineToString = function() {\n    return '<jasmine.anything>';\n  };\n\n  return Anything;\n};\n\ngetJasmineRequireObj().ArrayContaining = function(j$) {\n  function ArrayContaining(sample) {\n    this.sample = sample;\n  }\n\n  ArrayContaining.prototype.asymmetricMatch = function(other) {\n    var className = Object.prototype.toString.call(this.sample);\n    if (className !== '[object Array]') { throw new Error('You must provide an array to arrayContaining, not \\'' + this.sample + '\\'.'); }\n\n    for (var i = 0; i < this.sample.length; i++) {\n      var item = this.sample[i];\n      if (!j$.matchersUtil.contains(other, item)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ArrayContaining.prototype.jasmineToString = function () {\n    return '<jasmine.arrayContaining(' + jasmine.pp(this.sample) +')>';\n  };\n\n  return ArrayContaining;\n};\n\ngetJasmineRequireObj().ObjectContaining = function(j$) {\n\n  function ObjectContaining(sample) {\n    this.sample = sample;\n  }\n\n  function getPrototype(obj) {\n    if (Object.getPrototypeOf) {\n      return Object.getPrototypeOf(obj);\n    }\n\n    if (obj.constructor.prototype == obj) {\n      return null;\n    }\n\n    return obj.constructor.prototype;\n  }\n\n  function hasProperty(obj, property) {\n    if (!obj) {\n      return false;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      return true;\n    }\n\n    return hasProperty(getPrototype(obj), property);\n  }\n\n  ObjectContaining.prototype.asymmetricMatch = function(other) {\n    if (typeof(this.sample) !== 'object') { throw new Error('You must provide an object to objectContaining, not \\''+this.sample+'\\'.'); }\n\n    for (var property in this.sample) {\n      if (!hasProperty(other, property) ||\n          !j$.matchersUtil.equals(this.sample[property], other[property])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ObjectContaining.prototype.jasmineToString = function() {\n    return '<jasmine.objectContaining(' + j$.pp(this.sample) + ')>';\n  };\n\n  return ObjectContaining;\n};\n\ngetJasmineRequireObj().StringMatching = function(j$) {\n\n  function StringMatching(expected) {\n    if (!j$.isString_(expected) && !j$.isA_('RegExp', expected)) {\n      throw new Error('Expected is not a String or a RegExp');\n    }\n\n    this.regexp = new RegExp(expected);\n  }\n\n  StringMatching.prototype.asymmetricMatch = function(other) {\n    return this.regexp.test(other);\n  };\n\n  StringMatching.prototype.jasmineToString = function() {\n    return '<jasmine.stringMatching(' + this.regexp + ')>';\n  };\n\n  return StringMatching;\n};\n\ngetJasmineRequireObj().errors = function() {\n  function ExpectationFailed() {}\n\n  ExpectationFailed.prototype = new Error();\n  ExpectationFailed.prototype.constructor = ExpectationFailed;\n\n  return {\n    ExpectationFailed: ExpectationFailed\n  };\n};\ngetJasmineRequireObj().formatErrorMsg = function() {\n  function generateErrorMsg(domain, usage) {\n    var usageDefinition = usage ? '\\nUsage: ' + usage : '';\n\n    return function errorMsg(msg) {\n      return domain + ' : ' + msg + usageDefinition;\n    };\n  }\n\n  return generateErrorMsg;\n};\n\ngetJasmineRequireObj().matchersUtil = function(j$) {\n  // TODO: what to do about jasmine.pp not being inject? move to JSON.stringify? gut PrettyPrinter?\n\n  return {\n    equals: function(a, b, customTesters) {\n      customTesters = customTesters || [];\n\n      return eq(a, b, [], [], customTesters);\n    },\n\n    contains: function(haystack, needle, customTesters) {\n      customTesters = customTesters || [];\n\n      if ((Object.prototype.toString.apply(haystack) === '[object Array]') ||\n        (!!haystack && !haystack.indexOf))\n      {\n        for (var i = 0; i < haystack.length; i++) {\n          if (eq(haystack[i], needle, [], [], customTesters)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      return !!haystack && haystack.indexOf(needle) >= 0;\n    },\n\n    buildFailureMessage: function() {\n      var args = Array.prototype.slice.call(arguments, 0),\n        matcherName = args[0],\n        isNot = args[1],\n        actual = args[2],\n        expected = args.slice(3),\n        englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });\n\n      var message = 'Expected ' +\n        j$.pp(actual) +\n        (isNot ? ' not ' : ' ') +\n        englishyPredicate;\n\n      if (expected.length > 0) {\n        for (var i = 0; i < expected.length; i++) {\n          if (i > 0) {\n            message += ',';\n          }\n          message += ' ' + j$.pp(expected[i]);\n        }\n      }\n\n      return message + '.';\n    }\n  };\n\n  function isAsymmetric(obj) {\n    return obj && j$.isA_('Function', obj.asymmetricMatch);\n  }\n\n  function asymmetricMatch(a, b) {\n    var asymmetricA = isAsymmetric(a),\n        asymmetricB = isAsymmetric(b);\n\n    if (asymmetricA && asymmetricB) {\n      return undefined;\n    }\n\n    if (asymmetricA) {\n      return a.asymmetricMatch(b);\n    }\n\n    if (asymmetricB) {\n      return b.asymmetricMatch(a);\n    }\n  }\n\n  // Equality function lovingly adapted from isEqual in\n  //   [Underscore](http://underscorejs.org)\n  function eq(a, b, aStack, bStack, customTesters) {\n    var result = true;\n\n    var asymmetricResult = asymmetricMatch(a, b);\n    if (!j$.util.isUndefined(asymmetricResult)) {\n      return asymmetricResult;\n    }\n\n    for (var i = 0; i < customTesters.length; i++) {\n      var customTesterResult = customTesters[i](a, b);\n      if (!j$.util.isUndefined(customTesterResult)) {\n        return customTesterResult;\n      }\n    }\n\n    if (a instanceof Error && b instanceof Error) {\n      return a.message == b.message;\n    }\n\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) { return a !== 0 || 1 / a == 1 / b; }\n    // A strict comparison is necessary because `null == undefined`.\n    if (a === null || b === null) { return a === b; }\n    var className = Object.prototype.toString.call(a);\n    if (className != Object.prototype.toString.call(b)) { return false; }\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a === 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n          a.global == b.global &&\n          a.multiline == b.multiline &&\n          a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') { return false; }\n\n    var aIsDomNode = j$.isDomNode(a);\n    var bIsDomNode = j$.isDomNode(b);\n    if (aIsDomNode && bIsDomNode) {\n      // At first try to use DOM3 method isEqualNode\n      if (a.isEqualNode) {\n        return a.isEqualNode(b);\n      }\n      // IE8 doesn't support isEqualNode, try to use outerHTML && innerText\n      var aIsElement = a instanceof Element;\n      var bIsElement = b instanceof Element;\n      if (aIsElement && bIsElement) {\n        return a.outerHTML == b.outerHTML;\n      }\n      if (aIsElement || bIsElement) {\n        return false;\n      }\n      return a.innerText == b.innerText && a.textContent == b.textContent;\n    }\n    if (aIsDomNode || bIsDomNode) {\n      return false;\n    }\n\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) { return bStack[length] == b; }\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0;\n    // Recursively compare objects and arrays.\n    // Compare array lengths to determine if a deep comparison is necessary.\n    if (className == '[object Array]') {\n      size = a.length;\n      if (size !== b.length) {\n        return false;\n      }\n\n      while (size--) {\n        result = eq(a[size], b[size], aStack, bStack, customTesters);\n        if (!result) {\n          return false;\n        }\n      }\n    } else {\n\n      // Objects with different constructors are not equivalent, but `Object`s\n      // or `Array`s from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(isObjectConstructor(aCtor) &&\n                               isObjectConstructor(bCtor))) {\n        return false;\n      }\n    }\n\n    // Deep compare objects.\n    var aKeys = keys(a, className == '[object Array]'), key;\n    size = aKeys.length;\n\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (keys(b, className == '[object Array]').length !== size) { return false; }\n\n    while (size--) {\n      key = aKeys[size];\n      // Deep compare each member\n      result = has(b, key) && eq(a[key], b[key], aStack, bStack, customTesters);\n\n      if (!result) {\n        return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n\n    return result;\n\n    function keys(obj, isArray) {\n      var allKeys = Object.keys ? Object.keys(obj) :\n        (function(o) {\n            var keys = [];\n            for (var key in o) {\n                if (has(o, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        })(obj);\n\n      if (!isArray) {\n        return allKeys;\n      }\n\n      var extraKeys = [];\n      if (allKeys.length === 0) {\n          return allKeys;\n      }\n\n      for (var x = 0; x < allKeys.length; x++) {\n          if (!allKeys[x].match(/^[0-9]+$/)) {\n              extraKeys.push(allKeys[x]);\n          }\n      }\n\n      return extraKeys;\n    }\n  }\n\n  function has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  }\n\n  function isFunction(obj) {\n    return typeof obj === 'function';\n  }\n\n  function isObjectConstructor(ctor) {\n    // aCtor instanceof aCtor is true for the Object and Function\n    // constructors (since a constructor is-a Function and a function is-a\n    // Object). We don't just compare ctor === Object because the constructor\n    // might come from a different frame with different globals.\n    return isFunction(ctor) && ctor instanceof ctor;\n  }\n};\n\ngetJasmineRequireObj().toBe = function() {\n  function toBe() {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: actual === expected\n        };\n      }\n    };\n  }\n\n  return toBe;\n};\n\ngetJasmineRequireObj().toBeCloseTo = function() {\n\n  function toBeCloseTo() {\n    return {\n      compare: function(actual, expected, precision) {\n        if (precision !== 0) {\n          precision = precision || 2;\n        }\n\n        return {\n          pass: Math.abs(expected - actual) < (Math.pow(10, -precision) / 2)\n        };\n      }\n    };\n  }\n\n  return toBeCloseTo;\n};\n\ngetJasmineRequireObj().toBeDefined = function() {\n  function toBeDefined() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: (void 0 !== actual)\n        };\n      }\n    };\n  }\n\n  return toBeDefined;\n};\n\ngetJasmineRequireObj().toBeFalsy = function() {\n  function toBeFalsy() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: !!!actual\n        };\n      }\n    };\n  }\n\n  return toBeFalsy;\n};\n\ngetJasmineRequireObj().toBeGreaterThan = function() {\n\n  function toBeGreaterThan() {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: actual > expected\n        };\n      }\n    };\n  }\n\n  return toBeGreaterThan;\n};\n\n\ngetJasmineRequireObj().toBeGreaterThanOrEqual = function() {\n\n  function toBeGreaterThanOrEqual() {\n    return {\n      compare: function(actual, expected) {\n        return {\n          pass: actual >= expected\n        };\n      }\n    };\n  }\n\n  return toBeGreaterThanOrEqual;\n};\n\ngetJasmineRequireObj().toBeLessThan = function() {\n  function toBeLessThan() {\n    return {\n\n      compare: function(actual, expected) {\n        return {\n          pass: actual < expected\n        };\n      }\n    };\n  }\n\n  return toBeLessThan;\n};\ngetJasmineRequireObj().toBeLessThanOrEqual = function() {\n  function toBeLessThanOrEqual() {\n    return {\n\n      compare: function(actual, expected) {\n        return {\n          pass: actual <= expected\n        };\n      }\n    };\n  }\n\n  return toBeLessThanOrEqual;\n};\n\ngetJasmineRequireObj().toBeNaN = function(j$) {\n\n  function toBeNaN() {\n    return {\n      compare: function(actual) {\n        var result = {\n          pass: (actual !== actual)\n        };\n\n        if (result.pass) {\n          result.message = 'Expected actual not to be NaN.';\n        } else {\n          result.message = function() { return 'Expected ' + j$.pp(actual) + ' to be NaN.'; };\n        }\n\n        return result;\n      }\n    };\n  }\n\n  return toBeNaN;\n};\n\ngetJasmineRequireObj().toBeNull = function() {\n\n  function toBeNull() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: actual === null\n        };\n      }\n    };\n  }\n\n  return toBeNull;\n};\n\ngetJasmineRequireObj().toBeTruthy = function() {\n\n  function toBeTruthy() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: !!actual\n        };\n      }\n    };\n  }\n\n  return toBeTruthy;\n};\n\ngetJasmineRequireObj().toBeUndefined = function() {\n\n  function toBeUndefined() {\n    return {\n      compare: function(actual) {\n        return {\n          pass: void 0 === actual\n        };\n      }\n    };\n  }\n\n  return toBeUndefined;\n};\n\ngetJasmineRequireObj().toContain = function() {\n  function toContain(util, customEqualityTesters) {\n    customEqualityTesters = customEqualityTesters || [];\n\n    return {\n      compare: function(actual, expected) {\n\n        return {\n          pass: util.contains(actual, expected, customEqualityTesters)\n        };\n      }\n    };\n  }\n\n  return toContain;\n};\n\ngetJasmineRequireObj().toEqual = function() {\n\n  function toEqual(util, customEqualityTesters) {\n    customEqualityTesters = customEqualityTesters || [];\n\n    return {\n      compare: function(actual, expected) {\n        var result = {\n          pass: false\n        };\n\n        result.pass = util.equals(actual, expected, customEqualityTesters);\n\n        return result;\n      }\n    };\n  }\n\n  return toEqual;\n};\n\ngetJasmineRequireObj().toHaveBeenCalled = function(j$) {\n\n  var getErrorMsg = j$.formatErrorMsg('<toHaveBeenCalled>', 'expect(<spyObj>).toHaveBeenCalled()');\n\n  function toHaveBeenCalled() {\n    return {\n      compare: function(actual) {\n        var result = {};\n\n        if (!j$.isSpy(actual)) {\n          throw new Error(getErrorMsg('Expected a spy, but got ' + j$.pp(actual) + '.'));\n        }\n\n        if (arguments.length > 1) {\n          throw new Error(getErrorMsg('Does not take arguments, use toHaveBeenCalledWith'));\n        }\n\n        result.pass = actual.calls.any();\n\n        result.message = result.pass ?\n          'Expected spy ' + actual.and.identity() + ' not to have been called.' :\n          'Expected spy ' + actual.and.identity() + ' to have been called.';\n\n        return result;\n      }\n    };\n  }\n\n  return toHaveBeenCalled;\n};\n\ngetJasmineRequireObj().toHaveBeenCalledTimes = function(j$) {\n\n  var getErrorMsg = j$.formatErrorMsg('<toHaveBeenCalledTimes>', 'expect(<spyObj>).toHaveBeenCalledTimes(<Number>)');\n\n  function toHaveBeenCalledTimes() {\n    return {\n      compare: function(actual, expected) {\n        if (!j$.isSpy(actual)) {\n          throw new Error(getErrorMsg('Expected a spy, but got ' + j$.pp(actual) + '.'));\n        }\n\n        var args = Array.prototype.slice.call(arguments, 0),\n          result = { pass: false };\n\n        if (!j$.isNumber_(expected)){\n          throw new Error(getErrorMsg('The expected times failed is a required argument and must be a number.'));\n        }\n\n        actual = args[0];\n        var calls = actual.calls.count();\n        var timesMessage = expected === 1 ? 'once' : expected + ' times';\n        result.pass = calls === expected;\n        result.message = result.pass ?\n          'Expected spy ' + actual.and.identity() + ' not to have been called ' + timesMessage + '. It was called ' +  calls + ' times.' :\n          'Expected spy ' + actual.and.identity() + ' to have been called ' + timesMessage + '. It was called ' +  calls + ' times.';\n        return result;\n      }\n    };\n  }\n\n  return toHaveBeenCalledTimes;\n};\n\ngetJasmineRequireObj().toHaveBeenCalledWith = function(j$) {\n\n  var getErrorMsg = j$.formatErrorMsg('<toHaveBeenCalledWith>', 'expect(<spyObj>).toHaveBeenCalledWith(...arguments)');\n\n  function toHaveBeenCalledWith(util, customEqualityTesters) {\n    return {\n      compare: function() {\n        var args = Array.prototype.slice.call(arguments, 0),\n          actual = args[0],\n          expectedArgs = args.slice(1),\n          result = { pass: false };\n\n        if (!j$.isSpy(actual)) {\n          throw new Error(getErrorMsg('Expected a spy, but got ' + j$.pp(actual) + '.'));\n        }\n\n        if (!actual.calls.any()) {\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but it was never called.'; };\n          return result;\n        }\n\n        if (util.contains(actual.calls.allArgs(), expectedArgs, customEqualityTesters)) {\n          result.pass = true;\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' not to have been called with ' + j$.pp(expectedArgs) + ' but it was.'; };\n        } else {\n          result.message = function() { return 'Expected spy ' + actual.and.identity() + ' to have been called with ' + j$.pp(expectedArgs) + ' but actual calls were ' + j$.pp(actual.calls.allArgs()).replace(/^\\[ | \\]$/g, '') + '.'; };\n        }\n\n        return result;\n      }\n    };\n  }\n\n  return toHaveBeenCalledWith;\n};\n\ngetJasmineRequireObj().toMatch = function(j$) {\n\n  var getErrorMsg = j$.formatErrorMsg('<toMatch>', 'expect(<expectation>).toMatch(<string> || <regexp>)');\n\n  function toMatch() {\n    return {\n      compare: function(actual, expected) {\n        if (!j$.isString_(expected) && !j$.isA_('RegExp', expected)) {\n          throw new Error(getErrorMsg('Expected is not a String or a RegExp'));\n        }\n\n        var regexp = new RegExp(expected);\n\n        return {\n          pass: regexp.test(actual)\n        };\n      }\n    };\n  }\n\n  return toMatch;\n};\n\ngetJasmineRequireObj().toThrow = function(j$) {\n\n  var getErrorMsg = j$.formatErrorMsg('<toThrow>', 'expect(function() {<expectation>}).toThrow()');\n\n  function toThrow(util) {\n    return {\n      compare: function(actual, expected) {\n        var result = { pass: false },\n          threw = false,\n          thrown;\n\n        if (typeof actual != 'function') {\n          throw new Error(getErrorMsg('Actual is not a Function'));\n        }\n\n        try {\n          actual();\n        } catch (e) {\n          threw = true;\n          thrown = e;\n        }\n\n        if (!threw) {\n          result.message = 'Expected function to throw an exception.';\n          return result;\n        }\n\n        if (arguments.length == 1) {\n          result.pass = true;\n          result.message = function() { return 'Expected function not to throw, but it threw ' + j$.pp(thrown) + '.'; };\n\n          return result;\n        }\n\n        if (util.equals(thrown, expected)) {\n          result.pass = true;\n          result.message = function() { return 'Expected function not to throw ' + j$.pp(expected) + '.'; };\n        } else {\n          result.message = function() { return 'Expected function to throw ' + j$.pp(expected) + ', but it threw ' +  j$.pp(thrown) + '.'; };\n        }\n\n        return result;\n      }\n    };\n  }\n\n  return toThrow;\n};\n\ngetJasmineRequireObj().toThrowError = function(j$) {\n\n  var getErrorMsg =  j$.formatErrorMsg('<toThrowError>', 'expect(function() {<expectation>}).toThrowError(<ErrorConstructor>, <message>)');\n\n  function toThrowError () {\n    return {\n      compare: function(actual) {\n        var threw = false,\n          pass = {pass: true},\n          fail = {pass: false},\n          thrown;\n\n        if (typeof actual != 'function') {\n          throw new Error(getErrorMsg('Actual is not a Function'));\n        }\n\n        var errorMatcher = getMatcher.apply(null, arguments);\n\n        try {\n          actual();\n        } catch (e) {\n          threw = true;\n          thrown = e;\n        }\n\n        if (!threw) {\n          fail.message = 'Expected function to throw an Error.';\n          return fail;\n        }\n\n        if (!(thrown instanceof Error)) {\n          fail.message = function() { return 'Expected function to throw an Error, but it threw ' + j$.pp(thrown) + '.'; };\n          return fail;\n        }\n\n        if (errorMatcher.hasNoSpecifics()) {\n          pass.message = 'Expected function not to throw an Error, but it threw ' + j$.fnNameFor(thrown) + '.';\n          return pass;\n        }\n\n        if (errorMatcher.matches(thrown)) {\n          pass.message = function() {\n            return 'Expected function not to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() + '.';\n          };\n          return pass;\n        } else {\n          fail.message = function() {\n            return 'Expected function to throw ' + errorMatcher.errorTypeDescription + errorMatcher.messageDescription() +\n              ', but it threw ' + errorMatcher.thrownDescription(thrown) + '.';\n          };\n          return fail;\n        }\n      }\n    };\n\n    function getMatcher() {\n      var expected = null,\n          errorType = null;\n\n      if (arguments.length == 2) {\n        expected = arguments[1];\n        if (isAnErrorType(expected)) {\n          errorType = expected;\n          expected = null;\n        }\n      } else if (arguments.length > 2) {\n        errorType = arguments[1];\n        expected = arguments[2];\n        if (!isAnErrorType(errorType)) {\n          throw new Error(getErrorMsg('Expected error type is not an Error.'));\n        }\n      }\n\n      if (expected && !isStringOrRegExp(expected)) {\n        if (errorType) {\n          throw new Error(getErrorMsg('Expected error message is not a string or RegExp.'));\n        } else {\n          throw new Error(getErrorMsg('Expected is not an Error, string, or RegExp.'));\n        }\n      }\n\n      function messageMatch(message) {\n        if (typeof expected == 'string') {\n          return expected == message;\n        } else {\n          return expected.test(message);\n        }\n      }\n\n      return {\n        errorTypeDescription: errorType ? j$.fnNameFor(errorType) : 'an exception',\n        thrownDescription: function(thrown) {\n          var thrownName = errorType ? j$.fnNameFor(thrown.constructor) : 'an exception',\n              thrownMessage = '';\n\n          if (expected) {\n            thrownMessage = ' with message ' + j$.pp(thrown.message);\n          }\n\n          return thrownName + thrownMessage;\n        },\n        messageDescription: function() {\n          if (expected === null) {\n            return '';\n          } else if (expected instanceof RegExp) {\n            return ' with a message matching ' + j$.pp(expected);\n          } else {\n            return ' with message ' + j$.pp(expected);\n          }\n        },\n        hasNoSpecifics: function() {\n          return expected === null && errorType === null;\n        },\n        matches: function(error) {\n          return (errorType === null || error instanceof errorType) &&\n            (expected === null || messageMatch(error.message));\n        }\n      };\n    }\n\n    function isStringOrRegExp(potential) {\n      return potential instanceof RegExp || (typeof potential == 'string');\n    }\n\n    function isAnErrorType(type) {\n      if (typeof type !== 'function') {\n        return false;\n      }\n\n      var Surrogate = function() {};\n      Surrogate.prototype = type.prototype;\n      return (new Surrogate()) instanceof Error;\n    }\n  }\n\n  return toThrowError;\n};\n\ngetJasmineRequireObj().interface = function(jasmine, env) {\n  var jasmineInterface = {\n    describe: function(description, specDefinitions) {\n      return env.describe(description, specDefinitions);\n    },\n\n    xdescribe: function(description, specDefinitions) {\n      return env.xdescribe(description, specDefinitions);\n    },\n\n    fdescribe: function(description, specDefinitions) {\n      return env.fdescribe(description, specDefinitions);\n    },\n\n    it: function() {\n      return env.it.apply(env, arguments);\n    },\n\n    xit: function() {\n      return env.xit.apply(env, arguments);\n    },\n\n    fit: function() {\n      return env.fit.apply(env, arguments);\n    },\n\n    beforeEach: function() {\n      return env.beforeEach.apply(env, arguments);\n    },\n\n    afterEach: function() {\n      return env.afterEach.apply(env, arguments);\n    },\n\n    beforeAll: function() {\n      return env.beforeAll.apply(env, arguments);\n    },\n\n    afterAll: function() {\n      return env.afterAll.apply(env, arguments);\n    },\n\n    expect: function(actual) {\n      return env.expect(actual);\n    },\n\n    pending: function() {\n      return env.pending.apply(env, arguments);\n    },\n\n    fail: function() {\n      return env.fail.apply(env, arguments);\n    },\n\n    spyOn: function(obj, methodName) {\n      return env.spyOn(obj, methodName);\n    },\n\n    jsApiReporter: new jasmine.JsApiReporter({\n      timer: new jasmine.Timer()\n    }),\n\n    jasmine: jasmine\n  };\n\n  jasmine.addCustomEqualityTester = function(tester) {\n    env.addCustomEqualityTester(tester);\n  };\n\n  jasmine.addMatchers = function(matchers) {\n    return env.addMatchers(matchers);\n  };\n\n  jasmine.clock = function() {\n    return env.clock;\n  };\n\n  return jasmineInterface;\n};\n\ngetJasmineRequireObj().version = function() {\n  return '2.5.2';\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 859,
    "kind": "variable",
    "name": "getJasmineRequireObj",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~getJasmineRequireObj",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "function",
    "name": "requireMatchers",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~requireMatchers",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "jRequire",
        "types": [
          "*"
        ]
      },
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 861,
    "kind": "function",
    "name": "base",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~base",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      },
      {
        "name": "jasmineGlobal",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 862,
    "kind": "function",
    "name": "util",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~util",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 863,
    "kind": "function",
    "name": "Spec",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Spec",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 864,
    "kind": "function",
    "name": "Order",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Order",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 865,
    "kind": "function",
    "name": "Env",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Env",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 866,
    "kind": "function",
    "name": "JsApiReporter",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~JsApiReporter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1033,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 867,
    "kind": "function",
    "name": "CallTracker",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~CallTracker",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1114,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "function",
    "name": "Clock",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Clock",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1187,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 869,
    "kind": "function",
    "name": "DelayedFunctionScheduler",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~DelayedFunctionScheduler",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1321,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 870,
    "kind": "function",
    "name": "ExceptionFormatter",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~ExceptionFormatter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1477,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 871,
    "kind": "function",
    "name": "Expectation",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Expectation",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1507,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 872,
    "kind": "function",
    "name": "buildExpectationResult",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~buildExpectationResult",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1602,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 873,
    "kind": "function",
    "name": "MockDate",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~MockDate",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1652,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "function",
    "name": "pp",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~pp",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1735,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 875,
    "kind": "function",
    "name": "QueueRunner",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~QueueRunner",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1898,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 876,
    "kind": "function",
    "name": "ReportDispatcher",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~ReportDispatcher",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2004,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "function",
    "name": "SpyRegistry",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~SpyRegistry",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2052,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 878,
    "kind": "function",
    "name": "SpyStrategy",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~SpyStrategy",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2134,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "function",
    "name": "Suite",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Suite",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2197,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "function",
    "name": "Timer",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Timer",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2373,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 881,
    "kind": "function",
    "name": "TreeProcessor",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~TreeProcessor",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2396,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "function",
    "name": "Any",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Any",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2603,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 883,
    "kind": "function",
    "name": "Anything",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~Anything",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2646,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "function",
    "name": "ArrayContaining",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~ArrayContaining",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2661,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 885,
    "kind": "function",
    "name": "ObjectContaining",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~ObjectContaining",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2687,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 886,
    "kind": "function",
    "name": "StringMatching",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~StringMatching",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2737,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 887,
    "kind": "function",
    "name": "errors",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~errors",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2758,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "{\"ExpectationFailed\": *}"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "function",
    "name": "formatErrorMsg",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~formatErrorMsg",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2768,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 889,
    "kind": "function",
    "name": "matchersUtil",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~matchersUtil",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2780,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"equals\": *, \"contains\": *, \"buildFailureMessage\": *}"
      ]
    }
  },
  {
    "__docId__": 890,
    "kind": "function",
    "name": "toBe",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBe",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3036,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 891,
    "kind": "function",
    "name": "toBeCloseTo",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeCloseTo",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3050,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "function",
    "name": "toBeDefined",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeDefined",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3069,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "function",
    "name": "toBeFalsy",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeFalsy",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3083,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "function",
    "name": "toBeGreaterThan",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeGreaterThan",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3097,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "function",
    "name": "toBeGreaterThanOrEqual",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeGreaterThanOrEqual",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3113,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 896,
    "kind": "function",
    "name": "toBeLessThan",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeLessThan",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3128,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 897,
    "kind": "function",
    "name": "toBeLessThanOrEqual",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeLessThanOrEqual",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3142,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 898,
    "kind": "function",
    "name": "toBeNaN",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeNaN",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3157,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 899,
    "kind": "function",
    "name": "toBeNull",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeNull",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3180,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 900,
    "kind": "function",
    "name": "toBeTruthy",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeTruthy",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3195,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 901,
    "kind": "function",
    "name": "toBeUndefined",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toBeUndefined",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3210,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 902,
    "kind": "function",
    "name": "toContain",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toContain",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3225,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 903,
    "kind": "function",
    "name": "toEqual",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toEqual",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3242,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "function",
    "name": "toHaveBeenCalled",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toHaveBeenCalled",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3263,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 905,
    "kind": "function",
    "name": "toHaveBeenCalledTimes",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toHaveBeenCalledTimes",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3294,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 906,
    "kind": "function",
    "name": "toHaveBeenCalledWith",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toHaveBeenCalledWith",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3327,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 907,
    "kind": "function",
    "name": "toMatch",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toMatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3363,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 908,
    "kind": "function",
    "name": "toThrow",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toThrow",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3386,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 909,
    "kind": "function",
    "name": "toThrowError",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~toThrowError",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3435,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "j$",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 910,
    "kind": "function",
    "name": "interface",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~interface",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3573,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "jasmine",
        "types": [
          "*"
        ]
      },
      {
        "name": "env",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 911,
    "kind": "function",
    "name": "version",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js~version",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/jasmine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3653,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 912,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/json2.js",
    "content": "/*\n    json2.js\n    2014-02-04\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as '\\t' or '&nbsp;'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the value\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? '0' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + '-' +\n                         f(this.getUTCMonth() + 1) + '-' +\n                         f(this.getUTCDate())      + 'T' +\n                         f(this.getUTCHours())     + ':' +\n                         f(this.getUTCMinutes())   + ':' +\n                         f(this.getUTCSeconds())   + 'Z';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}]);\n            // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n            // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    'Date(' + this[key] + ')' : value;\n            });\n            // text is '[\"Date(---current time---)\"]'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === 'string') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n                var d;\n                if (typeof value === 'string' &&\n                        value.slice(0, 5) === 'Date(' &&\n                        value.slice(-1) === ')') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n*/\n\n/*jslint evil: true, regexp: true */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== 'object') {\n    JSON = {};\n}\n\n(function () {\n    'use strict';\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10 ? '0' + n : n;\n    }\n\n    if (typeof Date.prototype.toJSON !== 'function') {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear()     + '-' +\n                    f(this.getUTCMonth() + 1) + '-' +\n                    f(this.getUTCDate())      + 'T' +\n                    f(this.getUTCHours())     + ':' +\n                    f(this.getUTCMinutes())   + ':' +\n                    f(this.getUTCSeconds())   + 'Z'\n                : null;\n        };\n\n        String.prototype.toJSON      =\n            Number.prototype.toJSON  =\n            Boolean.prototype.toJSON = function () {\n                return this.valueOf();\n            };\n    }\n\n    var cx,\n        escapable,\n        gap,\n        indent,\n        meta,\n        rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        escapable.lastIndex = 0;\n        return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string'\n                ? c\n                : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"' : '\"' + string + '\"';\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i,          // The loop counter.\n            k,          // The member key.\n            v,          // The member value.\n            length,\n            mind = gap,\n            partial,\n            value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === 'object' &&\n                typeof value.toJSON === 'function') {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === 'function') {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case 'string':\n            return quote(value);\n\n        case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value) ? String(value) : 'null';\n\n        case 'boolean':\n        case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n        case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n            if (!value) {\n                return 'null';\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? '[]'\n                    : gap\n                    ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n                    : '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === 'string') {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? '{}'\n                : gap\n                ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n                : '{' + partial.join(',') + '}';\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== 'function') {\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n        meta = {    // table of character substitutions\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = '';\n            indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === 'number') {\n                for (i = 0; i < space; i += 1) {\n                    indent += ' ';\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === 'string') {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== 'function' &&\n                    (typeof replacer !== 'object' ||\n                    typeof replacer.length !== 'number')) {\n                throw new Error('JSON.stringify');\n            }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n            return str('', {'': value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== 'function') {\n        cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k, v, value = holder[key];\n                if (value && typeof value === 'object') {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            cx.lastIndex = 0;\n            if (cx.test(text)) {\n                text = text.replace(cx, function (a) {\n                    return '\\\\u' +\n                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with '()' and 'new'\n// because they can cause invocation, and '=' because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n// replace all simple value tokens with ']' characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or ']' or\n// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n            if (/^[\\],:{}\\s]*$/\n                    .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                        .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                        .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval('(' + text + ')');\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return typeof reviver === 'function'\n                    ? walk({'': j}, '')\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError('JSON.parse');\n        };\n    }\n}());\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/json2.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 913,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core/node_boot.js",
    "content": "/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nmodule.exports = function(jasmineRequire) {\n  var jasmine = jasmineRequire.core(jasmineRequire);\n\n  var consoleFns = require('../console/console.js');\n  consoleFns.console(consoleFns, jasmine);\n\n  var env = jasmine.getEnv();\n\n  var jasmineInterface = jasmineRequire.interface(jasmine, env);\n\n  extend(global, jasmineInterface);\n\n  function extend(destination, source) {\n    for (var property in source) destination[property] = source[property];\n    return destination;\n  }\n\n  return jasmine;\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/node_boot.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 914,
    "kind": "function",
    "name": "exports",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core/node_boot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core/node_boot.js~exports",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core/node_boot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "jasmineRequire",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "file",
    "name": "js/test/node_modules/jasmine-core/lib/jasmine-core.js",
    "content": "module.exports = require(\"./jasmine-core/jasmine.js\");\nmodule.exports.boot = require('./jasmine-core/node_boot.js');\n\nvar path = require('path'),\n    fs = require('fs');\n\nvar rootPath = path.join(__dirname, \"jasmine-core\"),\n    bootFiles = ['boot.js'],\n    nodeBootFiles = ['node_boot.js'],\n    cssFiles = [],\n    jsFiles = [],\n    jsFilesToSkip = ['jasmine.js'].concat(bootFiles, nodeBootFiles);\n\nfs.readdirSync(rootPath).forEach(function(file) {\n  if(fs.statSync(path.join(rootPath, file)).isFile()) {\n    switch(path.extname(file)) {\n      case '.css':\n        cssFiles.push(file);\n      break;\n      case '.js':\n        if (jsFilesToSkip.indexOf(file) < 0) {\n        jsFiles.push(file);\n      }\n      break;\n    }\n  }\n});\n\nmodule.exports.files = {\n  path: rootPath,\n  bootDir: rootPath,\n  bootFiles: bootFiles,\n  nodeBootFiles: nodeBootFiles,\n  cssFiles: cssFiles,\n  jsFiles: ['jasmine.js'].concat(jsFiles),\n  imagesDir: path.join(__dirname, '../images')\n};\n",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 916,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 917,
    "kind": "variable",
    "name": "rootPath",
    "memberof": "js/test/node_modules/jasmine-core/lib/jasmine-core.js",
    "static": true,
    "longname": "js/test/node_modules/jasmine-core/lib/jasmine-core.js~rootPath",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/jasmine-core/lib/jasmine-core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 918,
    "kind": "file",
    "name": "js/test/node_modules/minimatch/minimatch.js",
    "content": "module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 919,
    "kind": "variable",
    "name": "path",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~path",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"sep\": string}"
      ]
    }
  },
  {
    "__docId__": 920,
    "kind": "variable",
    "name": "GLOBSTAR",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~GLOBSTAR",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 921,
    "kind": "variable",
    "name": "expand",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~expand",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 922,
    "kind": "variable",
    "name": "plTypes",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~plTypes",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"!\": *, \"?\": *, \"+\": *, \"*\": *, \"@\": *}"
      ]
    }
  },
  {
    "__docId__": 923,
    "kind": "variable",
    "name": "qmark",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~qmark",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 924,
    "kind": "variable",
    "name": "star",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~star",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 925,
    "kind": "variable",
    "name": "twoStarDot",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~twoStarDot",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 926,
    "kind": "variable",
    "name": "twoStarNoDot",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~twoStarNoDot",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 927,
    "kind": "variable",
    "name": "reSpecials",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~reSpecials",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 928,
    "kind": "function",
    "name": "charSet",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~charSet",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 929,
    "kind": "variable",
    "name": "slashSplit",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~slashSplit",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 930,
    "kind": "function",
    "name": "filter",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~filter",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 931,
    "kind": "function",
    "name": "ext",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~ext",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 932,
    "kind": "function",
    "name": "defaults",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~defaults",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "def",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 933,
    "kind": "function",
    "name": "defaults",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~defaults",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "def",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 934,
    "kind": "function",
    "name": "minimatch",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 935,
    "kind": "function",
    "name": "Minimatch",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~Minimatch",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 936,
    "kind": "function",
    "name": "debug",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~debug",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 937,
    "kind": "function",
    "name": "make",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~make",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 938,
    "kind": "function",
    "name": "parseNegate",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~parseNegate",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 939,
    "kind": "function",
    "name": "braceExpand",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~braceExpand",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 940,
    "kind": "function",
    "name": "braceExpand",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~braceExpand",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 941,
    "kind": "variable",
    "name": "SUBPARSE",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~SUBPARSE",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 942,
    "kind": "function",
    "name": "parse",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~parse",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "isSub",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 943,
    "kind": "function",
    "name": "makeRe",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~makeRe",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 637,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 944,
    "kind": "function",
    "name": "makeRe",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~makeRe",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 642,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 945,
    "kind": "function",
    "name": "match",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~match",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 687,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 946,
    "kind": "function",
    "name": "match",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~match",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 700,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "partial",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 947,
    "kind": "function",
    "name": "matchOne",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~matchOne",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 760,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "file",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "partial",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 948,
    "kind": "function",
    "name": "globUnescape",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~globUnescape",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 917,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 949,
    "kind": "function",
    "name": "regExpEscape",
    "memberof": "js/test/node_modules/minimatch/minimatch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/minimatch/minimatch.js~regExpEscape",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/minimatch/minimatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 921,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 950,
    "kind": "file",
    "name": "js/test/node_modules/once/once.js",
    "content": "var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n",
    "static": true,
    "longname": "js/test/node_modules/once/once.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 951,
    "kind": "variable",
    "name": "wrappy",
    "memberof": "js/test/node_modules/once/once.js",
    "static": true,
    "longname": "js/test/node_modules/once/once.js~wrappy",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/once/once.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 952,
    "kind": "function",
    "name": "once",
    "memberof": "js/test/node_modules/once/once.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/once/once.js~once",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/once/once.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 953,
    "kind": "function",
    "name": "onceStrict",
    "memberof": "js/test/node_modules/once/once.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/once/once.js~onceStrict",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/once/once.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 954,
    "kind": "file",
    "name": "js/test/node_modules/path-is-absolute/index.js",
    "content": "'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n}\n\nfunction win32(path) {\n\t// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = Boolean(device && device.charAt(1) !== ':');\n\n\t// UNC paths are always absolute\n\treturn Boolean(result[2] || isUnc);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n",
    "static": true,
    "longname": "js/test/node_modules/path-is-absolute/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 955,
    "kind": "function",
    "name": "posix",
    "memberof": "js/test/node_modules/path-is-absolute/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/path-is-absolute/index.js~posix",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/path-is-absolute/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 956,
    "kind": "function",
    "name": "win32",
    "memberof": "js/test/node_modules/path-is-absolute/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/path-is-absolute/index.js~win32",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/path-is-absolute/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 957,
    "kind": "file",
    "name": "js/test/node_modules/wrappy/wrappy.js",
    "content": "// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n",
    "static": true,
    "longname": "js/test/node_modules/wrappy/wrappy.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 958,
    "kind": "function",
    "name": "wrappy",
    "memberof": "js/test/node_modules/wrappy/wrappy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/node_modules/wrappy/wrappy.js~wrappy",
    "access": null,
    "export": false,
    "importPath": "./js/test/node_modules/wrappy/wrappy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 959,
    "kind": "file",
    "name": "js/test/spec/HelloSpec.js",
    "content": "/* global describe, it, expect */\n'use strict';\n/**\n * http://pivotal.github.io/jasmine/\n */\ndescribe('Hello Test', function () {\n\n    it('test', function () {\n        var a = 'test';\n        var e = 'test';\n        expect(a).toEqual(e);\n    });\n});\n",
    "static": true,
    "longname": "js/test/spec/HelloSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 960,
    "kind": "file",
    "name": "js/test/test.js",
    "content": "'use strict';\n\nfunction startTest() {\n    sleep(500);\n\n    const eReport = document.createElement('div');\n    eReport.id = 'test_report';\n    eReport.style.position = 'fixed';\n    eReport.style.zindex = 1000;\n    eReport.style.bottom = '0px';\n    eReport.style.left = '0px';\n    eReport.style.width = '100%';\n    eReport.style.height = '100px';\n    eReport.style.backgroundColor = 'grey';\n\n    const p = document.createElement('p');\n    p.id = 'test_message';\n    eReport.appendChild(p);\n    document.body.appendChild(eReport);\n\n    click('btn_open_file', 'push file button!');\n}\n\nfunction sleep(millis) {\n    let cnt = 0;\n    const interval = setInterval(function () {\n        console.log(cnt);\n        cnt++;\n        if (cnt === 5) {\n            clearInterval(interval);\n            console.log('end');\n        }\n    key('sentence_container', 65, false, 'key \"あ\"');\n    }, millis);\n}\n\nfunction click(id, msg) {\n    const clickElem = document.getElementById(id);\n    console.log(clickElem);\n\n    if (document.all) {\n        clickElem.fireEvent('onclick');\n    } else {\n        console.log('click');\n        const event = document.createEvent('MouseEvents');\n        event.initEvent('click', false, true);\n        clickElem.dispatchEvent(event);\n    }\n\n    message(msg);\n}\n\nfunction test_click() {\n    click('btn_open_file', 'push file button!');\n}\n\nfunction test_key() {\n    key('sentence_container', 65, false, 'key auto');\n    return 'end test_key';\n}\n\nfunction key(id, key_code, with_shift, msg) {\n    const type = 'keydown';\n    const elem = document.getElementById(id);\n    console.log(elem);\n    if (document.createEventObject) {\n        const f_event = document.createEventObject();\n        f_event.keyCode = key_code;\n        f_event.shiftKey = with_shift;\n        elem.fireEvent('on' + type, f_event);\n    } else {\n        const f_event = document.createEvent('Event');\n        f_event.initEvent(type, true, false);\n        f_event.keyCode = key_code;\n        f_event.shiftKey = with_shift;\n        elem.dispatchEvent(f_event);\n        console.log(f_event);\n    }\n    message(msg);\n}\n\nfunction message(msg) {\n    const eMsg = document.getElementById('test_message');\n    eMsg.textContent = msg;\n}\n",
    "static": true,
    "longname": "js/test/test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 961,
    "kind": "function",
    "name": "startTest",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~startTest",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 962,
    "kind": "function",
    "name": "sleep",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~sleep",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "millis",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 963,
    "kind": "function",
    "name": "click",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~click",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 964,
    "kind": "function",
    "name": "test_click",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~test_click",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 965,
    "kind": "function",
    "name": "test_key",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~test_key",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 966,
    "kind": "function",
    "name": "key",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~key",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "key_code",
        "types": [
          "*"
        ]
      },
      {
        "name": "with_shift",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 967,
    "kind": "function",
    "name": "message",
    "memberof": "js/test/test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/test/test.js~message",
    "access": null,
    "export": false,
    "importPath": "./js/test/test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 968,
    "kind": "file",
    "name": "js/undo-redo.js",
    "content": "'use strict';\n\n\n/**\n * Undo,Redoを担当するクラス\n *     Undo可能な操作を行った際に、addメソッドを使ってDoMemoryクラスの操作に対応するサブクラスを追加してください\n *     そうすることでDoManagerクラスのundoメソッド、redoメソッドで各操作に対するundo,redoを統一された操作によって行うことが可能になります\n */\nexport class DoManager {  // jshint ignore:line\n    //{{{\n    // constructor {{{\n    /**\n     * @param {SentenceContainer} 対応する文章コンテナのインスタンス\n     */\n    constructor(sentenceContainer) {\n        this._sentenceContainer = sentenceContainer;\n        this._undos = [];\n        this._redos = [];\n    }//}}}\n\n    /**\n     * Undo可能かどうかを検査します\n     * @return Undoのスタックに要素が残っていればtrue、そうでなければfalse\n     */\n    hasUndo() {\n        return this._undos.length > 0;\n    }\n\n    /**\n     * Redo可能かどうかを検査します\n     * @return Redoのスタックに要素が残っていればtrue、そうでなければfalse\n     */\n    hasRedo() {\n        return this._redos.length > 0;\n    }\n\n    /**\n     * Undoを実行し、使い終わったタスクをRedoスタックに再度積みます\n     * @return {DoManager} 自身のインスタンス\n     */\n    undo() {\n        const doMemory = this._undos.pop();\n        doMemory.undo();\n        this._redos.push(doMemory);\n        this._sentenceContainer.isChanged(true);\n        return this;\n    }\n\n    /**\n     * Redoを実行し、使い終わったタスクをUndoスタックに再度積みます\n     * @return {DoManager} 自身のインスタンス\n     */\n    redo() {\n        const doMemory = this._redos.pop();\n        doMemory.redo();\n        this._undos.push(doMemory);\n        this._sentenceContainer.isChanged(true);\n        return this;\n    }\n\n    /**\n     * undo可能な新たな操作を行った場合に、対応するDoMemoryオブジェクトを追加します\n     * @param {DoMemory} memory 追加するDoMemoryオブジェクト\n     * @return {DoManager} 自身のインスタンス\n     */\n    add(memory) {\n        this._undos.push(memory);\n        this._redos = [];\n        return this;\n    }\n\n    /**\n     * スタックを初期化します\n     * @return {DoManager} 自身のインスタンス\n     */\n    reset() {\n        this._undos = [];\n        this._redos = [];\n        return this;\n    }\n}//}}}\n\n\n/**\n * Undo, Redoを記憶するすべてのオブジェクトの基底クラス\n */\nexport class DoMemory {\n    //{{{\n    constructor() {\n    }\n\n    /**\n     * Undoします\n     * このメソッドは、サブクラスでオーバーライドする必要があります\n     */\n    undo() {\n        throw new Error('このメソッドは、サブクラスでオーバーライドする必要があります');\n    }\n\n    /**\n     * Redoします\n     * このメソッドは、サブクラスでオーバーライドする必要があります\n     */\n    redo() {\n        throw new Error('このメソッドは、サブクラスでオーバーライドする必要があります');\n    }\n}//}}}\n\n\n/**\n * 文字をカーソルから入力した際のUndo,Redoを担当するクラス\n */\nexport class PrintDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n\n    /**\n     * @param {Cursor} cursor カーソルオブジェクト\n     * @param {Char[]} targets 対象となる文字の配列\n     */\n    constructor(cursor, targets) {\n        super();\n        this._cursor = cursor;\n        this._memoryChar = cursor.getChar();\n        this._targets = targets;\n    }\n\n    undo() {\n        this._cursor.setChar(this._memoryChar);\n        for (let i = 0, len = this._targets.length; i < len; i++) {\n            this._cursor.backSpace();\n        }\n        return this;\n    }\n\n    redo() {\n        this._cursor.setChar(this._memoryChar);\n        this._cursor.insert(this._targets);\n        return this;\n    }\n}//}}}\n\n\n/**\n * 文字をカーソルから削除した際のUndo,Redoを担当するクラス\n */\nexport class DeleteDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    // TODO: backspaceで段落をつなげた際のUndo,Redoは別途作成すること\n    /**\n     * @param {Cursor} cursor カーソルオブジェクト\n     * @param {Char[]} targets 対象となる文字の配列\n     */\n    constructor(cursor, targets) {\n        super();\n        this._cursor = cursor;\n        this._memoryChar = cursor.getChar();\n        this._targets = targets;\n    }\n\n    undo() {\n        this._cursor.setChar(this._memoryChar);\n        this._cursor.insert(this._targets);\n        return this;\n    }\n\n    redo() {\n        this._cursor.setChar(this._memoryChar);\n        for (let i = 0, len = this._targets.length; i < len; i++) {\n            this._cursor.backSpace();\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class LineBreakDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n\n    /**\n     * @param {Cursor} cursor カーソルオブジェクト\n     */\n    constructor(cursor) {\n        super();\n        this._cursor = cursor;\n        this._memoryChar = cursor.getChar();\n    }\n\n    undo() {\n        this._cursor.setChar(this._memoryChar)\n            .backSpace();\n        return this;\n    }\n\n    redo() {\n        this._cursor.setChar(this._memoryChar)\n            .lineBreak();\n        return this;\n    }\n}//}}}\n\n\nexport class ColorDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い文字色も情報として必要となるので、必ず文字色変更前に作成してください\n     * @param {Char[]} 文字色を変更したCharインスタンスの配列\n     * @param {string} 変更後の文字色\n     */\n    constructor(targets, newColor) {\n        super();\n        this._targets = targets;\n        this._oldColors = targets.map(char => char.color());\n        this._newColor = newColor;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].color(this._oldColors[entry[0]]);\n        }\n        return this;\n    }\n    redo() {\n        for (let char of this._targets) {\n            char.color(this._newColor);\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class ItalicDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください\n     * @param {Char[]} targets 斜体に変更されたCharインスタンスの配列\n     * @param {boolean} 変更後の状態を表す真偽値\n     */\n    constructor(targets, blNew) {\n        super();\n        this._targets = targets;\n        this._olders = targets.map(char => char.italic());\n        this._blNew = blNew;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].italic(this._olders[entry[0]]);\n        }\n        return this;\n    }\n\n    redo() {\n        for (let char of this._targets) {\n            char.italic(this._blNew);\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class BoldDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください\n     * @param {Char[]} targets 太字に変更されたCharインスタンスの配列\n     * @param {boolean} 変更後の状態を表す真偽値\n     */\n    constructor(targets, blNew) {\n        super();\n        this._targets = targets;\n        this._olders = targets.map(char => char.bold());\n        this._blNew = blNew;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].bold(this._olders[entry[0]]);\n        }\n        return this;\n    }\n\n    redo() {\n        for (let char of this._targets) {\n            char.bold(this._blNew);\n        }\n        return this;\n    }\n}//}}}\n\n\nexport class FontSizeDoMemory extends DoMemory {  // jshint ignore:line\n    //{{{\n    /**\n     * このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください\n     * @param {Char[]} targets フォントサイズが変更されたCharインスタンスの配列\n     * @param {number string} newSize 変更後のフォントサイズ\n     */\n    constructor(targets, newSize) {\n        this._targets = targets;\n        this._olders = targets.map(char => char.fontSize());\n        this._newSize = newSize;\n    }\n\n    undo() {\n        for (let entry of this._targets.entries()) {\n            entry[1].fontSize(this._olders[entry[0]]);\n        }\n        return this;\n    }\n\n    redo() {\n        for (let char of this._targets) {\n            char.fontSize(this._newSize);\n        }\n        return this;\n    }\n\n    // TODO: align\n}//}}}",
    "static": true,
    "longname": "js/undo-redo.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 969,
    "kind": "class",
    "name": "DoManager",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~DoManager",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{DoManager}",
    "description": "Undo,Redoを担当するクラス\n    Undo可能な操作を行った際に、addメソッドを使ってDoMemoryクラスの操作に対応するサブクラスを追加してください\n    そうすることでDoManagerクラスのundoメソッド、redoメソッドで各操作に対するundo,redoを統一された操作によって行うことが可能になります",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 970,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "対応する文章コンテナのインスタンス",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 971,
    "kind": "member",
    "name": "_sentenceContainer",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 972,
    "kind": "member",
    "name": "_undos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_undos",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 973,
    "kind": "member",
    "name": "_redos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_redos",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "hasUndo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#hasUndo",
    "access": null,
    "description": "Undo可能かどうかを検査します",
    "lineNumber": 25,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Undoのスタックに要素が残っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 975,
    "kind": "method",
    "name": "hasRedo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#hasRedo",
    "access": null,
    "description": "Redo可能かどうかを検査します",
    "lineNumber": 33,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Redoのスタックに要素が残っていればtrue、そうでなければfalse"
    }
  },
  {
    "__docId__": 976,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#undo",
    "access": null,
    "description": "Undoを実行し、使い終わったタスクをRedoスタックに再度積みます",
    "lineNumber": 41,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 977,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#redo",
    "access": null,
    "description": "Redoを実行し、使い終わったタスクをUndoスタックに再度積みます",
    "lineNumber": 53,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "add",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#add",
    "access": null,
    "description": "undo可能な新たな操作を行った場合に、対応するDoMemoryオブジェクトを追加します",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "DoMemory"
        ],
        "spread": false,
        "optional": false,
        "name": "memory",
        "description": "追加するDoMemoryオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 979,
    "kind": "member",
    "name": "_redos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_redos",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "reset",
    "memberof": "js/undo-redo.js~DoManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoManager#reset",
    "access": null,
    "description": "スタックを初期化します",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "DoManager"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    }
  },
  {
    "__docId__": 981,
    "kind": "member",
    "name": "_undos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_undos",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 982,
    "kind": "member",
    "name": "_redos",
    "memberof": "js/undo-redo.js~DoManager",
    "static": false,
    "longname": "js/undo-redo.js~DoManager#_redos",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 983,
    "kind": "class",
    "name": "DoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~DoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{DoMemory}",
    "description": "Undo, Redoを記憶するすべてのオブジェクトの基底クラス",
    "lineNumber": 87,
    "interface": false
  },
  {
    "__docId__": 984,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~DoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoMemory#constructor",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~DoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoMemory#undo",
    "access": null,
    "description": "Undoします\nこのメソッドは、サブクラスでオーバーライドする必要があります",
    "lineNumber": 96,
    "params": []
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~DoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DoMemory#redo",
    "access": null,
    "description": "Redoします\nこのメソッドは、サブクラスでオーバーライドする必要があります",
    "lineNumber": 104,
    "params": []
  },
  {
    "__docId__": 987,
    "kind": "class",
    "name": "PrintDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~PrintDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{PrintDoMemory}",
    "description": "文字をカーソルから入力した際のUndo,Redoを担当するクラス",
    "lineNumber": 113,
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 988,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cursor"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "カーソルオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "対象となる文字の配列"
      }
    ]
  },
  {
    "__docId__": 989,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 990,
    "kind": "member",
    "name": "_memoryChar",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#_memoryChar",
    "access": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 991,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 992,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 993,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~PrintDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~PrintDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 994,
    "kind": "class",
    "name": "DeleteDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~DeleteDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{DeleteDoMemory}",
    "description": "文字をカーソルから削除した際のUndo,Redoを担当するクラス",
    "lineNumber": 146,
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 995,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cursor"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "カーソルオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "対象となる文字の配列"
      }
    ]
  },
  {
    "__docId__": 996,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 997,
    "kind": "member",
    "name": "_memoryChar",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#_memoryChar",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 998,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 999,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~DeleteDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~DeleteDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1001,
    "kind": "class",
    "name": "LineBreakDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~LineBreakDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{LineBreakDoMemory}",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 1002,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cursor"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "カーソルオブジェクト"
      }
    ]
  },
  {
    "__docId__": 1003,
    "kind": "member",
    "name": "_cursor",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1004,
    "kind": "member",
    "name": "_memoryChar",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#_memoryChar",
    "access": null,
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1005,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1006,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~LineBreakDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~LineBreakDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1007,
    "kind": "class",
    "name": "ColorDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~ColorDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{ColorDoMemory}",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 1008,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い文字色も情報として必要となるので、必ず文字色変更前に作成してください",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "文字色を変更したCharインスタンスの配列",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "変更後の文字色",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1009,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1010,
    "kind": "member",
    "name": "_oldColors",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#_oldColors",
    "access": null,
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1011,
    "kind": "member",
    "name": "_newColor",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#_newColor",
    "access": null,
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1012,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1013,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~ColorDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ColorDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1014,
    "kind": "class",
    "name": "ItalicDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~ItalicDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{ItalicDoMemory}",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 1015,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "斜体に変更されたCharインスタンスの配列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "変更後の状態を表す真偽値",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1016,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1017,
    "kind": "member",
    "name": "_olders",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#_olders",
    "access": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1018,
    "kind": "member",
    "name": "_blNew",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#_blNew",
    "access": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1019,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1020,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~ItalicDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~ItalicDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "class",
    "name": "BoldDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~BoldDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{BoldDoMemory}",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 1022,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "太字に変更されたCharインスタンスの配列"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "変更後の状態を表す真偽値",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1023,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1024,
    "kind": "member",
    "name": "_olders",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#_olders",
    "access": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1025,
    "kind": "member",
    "name": "_blNew",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#_blNew",
    "access": null,
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1026,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1027,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~BoldDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~BoldDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1028,
    "kind": "class",
    "name": "FontSizeDoMemory",
    "memberof": "js/undo-redo.js",
    "static": true,
    "longname": "js/undo-redo.js~FontSizeDoMemory",
    "access": null,
    "export": true,
    "importPath": "./js/undo-redo.js",
    "importStyle": "{FontSizeDoMemory}",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "DoMemory"
    ]
  },
  {
    "__docId__": 1029,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#constructor",
    "access": null,
    "description": "このクラスでは古い状態も情報として必要となるので、必ず文字の変更前に作成してください",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char[]"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "フォントサイズが変更されたCharインスタンスの配列"
      },
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "newSize",
        "description": "変更後のフォントサイズ"
      }
    ]
  },
  {
    "__docId__": 1030,
    "kind": "member",
    "name": "_targets",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#_targets",
    "access": null,
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1031,
    "kind": "member",
    "name": "_olders",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#_olders",
    "access": null,
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1032,
    "kind": "member",
    "name": "_newSize",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#_newSize",
    "access": null,
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1033,
    "kind": "method",
    "name": "undo",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#undo",
    "access": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1034,
    "kind": "method",
    "name": "redo",
    "memberof": "js/undo-redo.js~FontSizeDoMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/undo-redo.js~FontSizeDoMemory#redo",
    "access": null,
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1035,
    "kind": "file",
    "name": "js/utils.js",
    "content": "'use strict';\n// \t要素の再利用のため、要素作成のみクロージャで行う\n\n\nexport const Util = {  // jshint ignore:line\n    //{{{\n    /**\n     * baseArrayをcnt個ずつの配列に分割する\n     */\n    splitArray:function(baseArray,  cnt) {\n        const b = baseArray.length;\n        const newArray = [];\n\n        for (let i = 0,j,p; i < Math.ceil(b/cnt); i++) {\n            j = i * cnt;\n            p = baseArray.slice(j,j+cnt);\n            newArray.push(p);\n        }\n        return newArray;\n    },\n\n    copyArray:function (array) {\n        const retArray = [];\n        for (let value of array) {\n            retArray.push(value);\n        }\n        return retArray;\n    },\n\n    // ２点間の距離を計算する\n    computeDistanceP2P:function(x1, y1, x2, y2) {\n        // ２乗を使っているので、戻り値は必ず正の数になる\n        // √{(b.x - a.x)^2+ (b.y - a.y)^2}\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    },\n\n    post: function (url, data, callback) {\n        this._communicate(url, callback, 'POST', data);\n    },\n\n    get: function (url, callback, opt_data) {\n        this._communicate(url, callback, 'GET', opt_data);\n    },\n\n    _communicate: function (url, callback, methodType, opt_data) {\n        let sendData = '';\n        if (opt_data) {\n            for (let name in opt_data) {\n                if (sendData !== '') {\n                    sendData += '&';\n                }\n                sendData += name + '=' + encodeURI(opt_data[name]).replace(/&/g, '%26');\n            }\n        }\n\n        if (methodType === 'GET') {\n            url += sendData !== '' ? '?' + sendData : '';  // GET通信ではsendの引数は無視されるのでurlにデータを追加する\n        }\n\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'json';\n        xhr.open(methodType, url);\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n        xhr.addEventListener('load', function (e) {\n            if (xhr.response) {\n                callback(xhr.response);\n            } else {\n            }\n        });\n        xhr.addEventListener('abort', function (e) {\n            console.log('abort', e);\n        });\n        xhr.send(sendData);\n    },\n\n    log: function (msg) {\n        try {\n            throw new Error(msg);\n        } catch(e) {\n            console.log(msg);\n            console.log('from ', e.stack);\n        }\n    }\n};//}}}\n\n\n/**\n * DOM要素を生成する関数の集まりです\n */\nexport const ElemCreator = {};//{{{\n\nElemCreator.createCharElement = (function () {//{{{\n    const eCharTemplate = document.createElement('span');\n    eCharTemplate.classList.add('char');\n    eCharTemplate.classList.add('display');\n\n    return function (data) {\n        const eChar = eCharTemplate.cloneNode(true);\n        const char = data.char;\n        const classArr = data.decolation;\n        const fontSize = data.fontSize;\n        eChar.textContent = char;\n        eChar.dataset.fontSize = fontSize || 'auto';\n        for (let decolation of classArr) {\n            eChar.classList.add(decolation);\n        }\n\n        // 文字の種類に応じて付与するクラス\n        if (/[。、,.,]/.test(char)) {\n            eChar.classList.add('vertical-dot');\n        } else if (/[「『]/.test(char)) {\n            eChar.classList.add('vertical-before-kagi-bracket');\n        } else if (/[」』]/.test(char)) {\n            eChar.classList.add('vertical-after-kagi-bracket');\n        } else if (/[（\\[<\\{【\\(［〈]/.test(char)) {\n            eChar.classList.add('vertical-before-bracket');\n        } else if (/[\\)\\]>\\}】）］〉]/.test(char)) {\n            eChar.classList.add('vertical-after-bracket');\n        } else if (/[-ー―〜]/.test(char)) {\n            eChar.classList.add('character-line');\n        } else if (/[a-z]/.test(char)) {\n            eChar.classList.add('alphabet');\n        } else if (/[１-９]/.test(char)) {\n            eChar.classList.add('number');\n        } else if (/[っゃゅょぁぃぅぇぉァィゥェォッャュョ]/.test(char)) {\n            eChar.classList.add('yoin');\n        }\n\n        return eChar;\n    };\n})();//}}}\n\nElemCreator.createRowElement = (function () {//{{{\n    /*\n     *\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n     *\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n     *\t\t\t\"char\":\"あ\",\n     *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     *\t\t},\n     *\t\t{\n     *\t\t\t\"char\":\"い\",\n     *\t\t\t\"decolation\":null\n     *\t\t}\n     *\t]\n     */\n    const eRowTemplate = document.createElement('div');\n    eRowTemplate.classList.add('row');\n    eRowTemplate.classList.add('display');\n    const eEOL = document.createElement('span');\n    eEOL.classList.add('char');\n    eEOL.classList.add('EOL');\n    eEOL.classList.add('display');\n    eRowTemplate.appendChild(eEOL);\n\n    return function (data) {\n        const eRow = eRowTemplate.cloneNode(true);\n        return eRow;\n    };\n})();//}}}\n\nElemCreator.createParagraphElement = (function () {//{{{\n    /*\n     * \t\t\t[\n     * \t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n     * \t\t\t\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n     * \t\t\t\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n     * \t\t\t\t\t\t\"char\":\"あ\",\n     * \t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"]\n     * \t\t\t\t\t},\n     * \t\t\t\t\t{\n     * \t\t\t\t\t\t\"char\":\"い\",\n     * \t\t\t\t\t\t\"decolation\":[]\n     * \t\t\t\t\t}\n     * \t\t\t\t\t]\n     * \t\t\t]\n     */\n    const eParagraphTemplate = document.createElement('div');\n    eParagraphTemplate.classList.add('paragraph');\n\n    return function (data) {\n        const eParagraph = eParagraphTemplate.cloneNode(true);\n        // 段落そのものにクラスを付与する\n        for (let className of data[0]) {\n            eParagraph.classList.add(className);\n        }\n        return eParagraph;\n    };\n})();//}}}\n\nElemCreator.createCharPosElement = (function () {//{{{\n    const eCharPosTemplate = document.createElement('span');\n    eCharPosTemplate.classList.add('char-pos');\n\n    return function (strLen) {\n        const flagment = document.createDocumentFragment();\n        for (var i = 0; i <= strLen; i++) { // EOLの分も作成する\n            const eCharPos = eCharPosTemplate.cloneNode(true);\n            flagment.appendChild(eCharPos);\n        }\n        return flagment;\n    };\n})();//}}}\n\nElemCreator.createConvertViewElement = (function () {//{{{\n    const eViewTemplate = document.createElement('div');\n    eViewTemplate.classList.add('convert-view');\n\n    return function () {\n        const eView = eViewTemplate.cloneNode(true);\n        return eView;\n    };\n})();//}}}\n\n// file_listの中に入れるファイル行を作成する\nElemCreator.createFileElement = (function () {//{{{\n    /*\n     * 作成例\n     * <li>\n     * <a class=\"file\"\n     * data-type=\"file\"\n     * href=\"#\"\n     * data-file-id=\"1\"\n     * data-file-name=\"filename\"\n     * >\n     * filename\n     * </a>\n     * </li>\n     */\n    const eFileTemplate = document.createElement('li');\n    eFileTemplate.classList.add('fileLi');\n    const eFileLinkTemplate = document.createElement('a');\n    eFileLinkTemplate.classList.add('file');\n    eFileLinkTemplate.dataset.type = 'file';\n    eFileLinkTemplate.href = '#';\n\n    return function (id,filename) {\n        const eFile = eFileTemplate.cloneNode(true);\n        const eFileLink = eFileLinkTemplate.cloneNode(true);\n        eFileLink.dataset.fileId = id;\n        eFileLink.dataset.fileName = filename;\n        eFileLink.textContent = filename;\n        eFile.appendChild(eFileLink);\n        return eFile;\n    };\n})();//}}}\n\n// file_listの中に入れるディレクトリ行を作成する\nElemCreator.createDirectoryElement = (function () {//{{{\n    /*\n     * 作成例\n     * <li>\n     * \t<a class=\"directory\"\n     * \tdata-type=\"directory\"\n     * \tdata-toggle=\"collapse\"\n     * \tdata-directory-id=\"1\"\n     * \tdata-directory-name=\"filename.directoryname\"\n     * \thref=\"#directory1\"\n     * \t>\n     *\t\t<span\n     *\t\tclass=\"glyphicon glyphicon-folder-close\"\n     *\t\taria-hidden=\"true\">\n     *\t\t</span>\n     *\t\tfilename.directoryname\n     *\t\t</a>\n     *\n     *\t\t<div class=\"collapse\" id=\"directory1\">\n     *\t\t\t<div class=\"well\">\n     *\t\t\t\t<ul>\n     *\t\t\t\t\t<li>filename</li>\n     *\t\t\t\t\t<li>filename</li>\n     *\t\t\t\t\t<li>filename</li>\n     *\t\t\t\t</ul>\n     *\t\t\t</div>\n     *\t\t</div>\n     *\t</li>\n     */\n    const eDirectoryTemplete = document.createElement('li');\n    eDirectoryTemplete.classList.add('dirLi');\n    const eDirLinkTemplete = document.createElement('a');\n    eDirLinkTemplete.classList.add('directory');\n    eDirLinkTemplete.dataset.type = 'directory';\n    eDirLinkTemplete.dataset.toggle = 'collapse';\n    eDirLinkTemplete.innerHTML =\n        '<span class=\"glyphicon glyphicon-folder-close\" aria-hidden=\"true\"></span>'; // フォルダアイコン\n\n    const eCollapseTemplate = document.createElement('div');\n    const eInnerUlTemplate = document.createElement('ul');\n    const eWellTemplate = document.createElement('div');\n    eCollapseTemplate.classList.add('collapse');\n    eWellTemplate.classList.add('well');\n\n    return function (id,innerData) {\n        const eDirectory = eDirectoryTemplete.cloneNode(true);\n        const eDirLink = eDirLinkTemplete.cloneNode(true);\n        const directoryname = innerData.directoryname;\n        eDirLink.dataset.directoryId = id;\n        eDirLink.dataset.directoryName = directoryname;\n        eDirLink.href = '#directory' + id;\n        eDirLink.insertAdjacentHTML('beforeend',directoryname);\n\n        eDirectory.appendChild(eDirLink);\n\n        const eCollapse = eCollapseTemplate.cloneNode(true);\n        const eInnerUl = eInnerUlTemplate.cloneNode(true);\n        const eWell = eWellTemplate.cloneNode(true);\n        eCollapse.id = 'directory' + id;\n\n        // eInnerUl内にファイルリストを加える\n\n        eCollapse.appendChild(eWell);\n        eWell.appendChild(eInnerUl);\n\n        eDirectory.appendChild(eCollapse); // コラプスも加える\n        return eDirectory;\n    };\n})();//}}}//}}}\n\n\n/**\n * キーコードから日本語文字列を作成します\n */\nexport const KeyTable = {  // jshint ignore:line\n    //{{{\n    makeString : function (buffer_string, keycode) {//{{{\n        // bufferに文字なし キーコードの文字をそのまま返す\n        if (buffer_string.length === 0) {\n            return this.keyTable[keycode];\n        }\n        if(buffer_string.length === 1) {\n            return this.makeStringFromOnceBufferString(buffer_string, keycode);\n        }\n        return this.makeStringFromMultipleBufferString(buffer_string, keycode);\n    },\n\n    makeStringFromOnceBufferString : function (buffer_string, keycode) {\n        // bufferの文字がアルファベットでなければbufferの文字とキーコード文字を連結した文字列を返す\n        if (!this.convertable.includes(buffer_string)) {\n            return buffer_string + this.keyTable[keycode];\n        }\n\n        // bufferの文字が変換可能アルファベット\n        const s = this.keyTable[buffer_string]; // keytableからオブジェクト取得\n        // オブジェクトにキーコードを与えて、変換文字取得\n        const str =  s[keycode];\n        if (str) {\n            return str; // 変換できた場合 buffer文字をkeytableに与えて返ってきたオブジェクトにkeycodeを与えて得た文字を返す\n        }\n\n        // 変換文字が取得できないということは、アルファベット二文字が変換可能な組み合わせではないということ\n        const typestr = this.keyTable[keycode];\n        // 例えばzzと打つなど同じアルファベットの連続の場合、'っｚ'と返す\n        if (buffer_string === typestr) {\n            return 'っ' + typestr;\n        }\n\n        // 異なるアルファベットの場合、そのまま連結\n        return buffer_string + typestr;\n    },\n\n    makeStringFromMultipleBufferString : function (buffer_string, keycode) {\n        const noEncode = buffer_string.substring(0,buffer_string.length - 2); // 変換しない文字\n        const first = buffer_string.charAt(buffer_string.length - 2);\n        const second = buffer_string.charAt(buffer_string.length -1);\n\n        // bufferの後ろから二文字目がアルファベット\n        if (this.convertable.includes(first)) {\n            // 最後の文字がアルファベットでないならそのまま連結 'sた + r'などの場合\n            if (!this.convertable.includes(second)) {\n                return buffer_string + this.keyTable[keycode];\n            }\n\n            // bufferの最後に変換可能アルファベット二文字\n            const o = this.keyTable[first][second]; // 第一添字がアルファベットなら必ず第二添字のためのオブジェクトは返ってくる\n            if (o) {\n                const str = o[keycode];\n                // 三文字で１文字が完成した場合\n                // sy + a →  'しゃ' など\n                if (str) {\n                    return noEncode + str;\n                }\n            }\n        }\n\n        // 最後から二文字目が変換可能アルファベットではない\n        // 三文字で一文字が完成しない場合、後ろ二文字で１文字が完成する可能性 staの三文字で'sた'となる場合がある\n        //     後ろ二文字で１文字が完成しなければそのまま二文字が返ってくるので、やはりfirstを挟んで連結\n        return noEncode + first + this.makeStringFromOnceBufferString(second, keycode);\n    },//}}}\n\n    convertable :\n        ['k','s','t','n','h','m','y','r','w','g','z','d','b','p','j','f','l','x','c','v','q'],\n\n    katakana : {//{{{\n        'あ' : 'ア',\n        'い' : 'イ',\n        'う' : 'ウ',\n        'え' : 'エ',\n        'お' : 'オ',\n        'か' : 'カ',\n        'き' : 'キ',\n        'く' : 'ク',\n        'け' : 'ケ',\n        'こ' : 'コ',\n        'さ' : 'サ',\n        'し' : 'シ',\n        'す' : 'ス',\n        'せ' : 'セ',\n        'そ' : 'ソ',\n        'た' : 'タ',\n        'ち' : 'チ',\n        'つ' : 'ツ',\n        'て' : 'テ',\n        'と' : 'ト',\n        'な' : 'ナ',\n        'に' : 'ニ',\n        'ぬ' : 'ヌ',\n        'ね' : 'ネ',\n        'の' : 'ノ',\n        'は' : 'ハ',\n        'ひ' : 'ヒ',\n        'ふ' : 'フ',\n        'へ' : 'ヘ',\n        'ほ' : 'ホ',\n        'ま' : 'マ',\n        'み' : 'ミ',\n        'む' : 'ム',\n        'め' : 'メ',\n        'も' : 'モ',\n        'や' : 'ヤ',\n        'ゆ' : 'ユ',\n        'よ' : 'ヨ',\n        'ら' : 'ラ',\n        'り' : 'リ',\n        'る' : 'ル',\n        'れ' : 'レ',\n        'ろ' : 'ロ',\n        'わ' : 'ワ',\n        'を' : 'ヲ',\n        'ん' : 'ン',\n        'が' : 'ガ',\n        'ぎ' : 'ギ',\n        'ぐ' : 'グ',\n        'げ' : 'ゲ',\n        'ご' : 'ゴ',\n        'ざ' : 'ザ',\n        'じ' : 'ジ',\n        'ず' : 'ズ',\n        'ぜ' : 'ゼ',\n        'ぞ' : 'ゾ',\n        'だ' : 'ダ',\n        'ぢ' : 'ヂ',\n        'づ' : 'ヅ',\n        'で' : 'デ',\n        'ど' : 'ド',\n        'ば' : 'バ',\n        'び' : 'ビ',\n        'ぶ' : 'ブ',\n        'べ' : 'ベ',\n        'ぼ' : 'ボ',\n        'ゃ' : 'ャ',\n        'ゅ' : 'ュ',\n        'ょ' : 'ョ',\n        'ぁ' : 'ァ',\n        'ぃ' : 'ィ',\n        'ぅ' : 'ゥ',\n        'ぇ' : 'ェ',\n        'ぉ' : 'ォ',\n        'っ' : 'ッ'\n    },//}}}\n\n    shiftKey : {//{{{\n        '49' : '!',\n        '50' : '”',\n        '51' : '＃',\n        '52' : '＄',\n        '53' : '％',\n        '54' : '＆',\n        '55' : '\\’',\n        '56' : '（',\n        '57' : '）',\n        '187' : '〜',\n        '188' : '〈',\n        '190' : '〉',\n        '191' : '？',\n        '220' : '}',\n        '221' : '{',\n        '65': 'A',\n        '66': 'B',\n        '67': 'C',\n        '68': 'D',\n        '69': 'E',\n        '70': 'F',\n        '71': 'G',\n        '72': 'H',\n        '73': 'I',\n        '74': 'J',\n        '75': 'K',\n        '76': 'L',\n        '77': 'M',\n        '78': 'N',\n        '79': 'O',\n        '80': 'P',\n        '81': 'Q',\n        '82': 'R',\n        '83': 'S',\n        '84': 'T',\n        '85': 'U',\n        '86': 'V',\n        '87': 'W',\n        '88': 'X',\n        '89': 'Y',\n        '90': 'Z'\n    },//}}}\n\n    keyTable : {//{{{\n        '48': '０',//{{{\n        '49': '１',\n        '50': '２',\n        '51': '３',\n        '52': '４',\n        '53': '５',\n        '54': '６',\n        '55': '７',\n        '56': '８',\n        '57': '９',\n        '65': 'あ',\n        '73': 'い',\n        '85': 'う',\n        '69': 'え',\n        '79': 'お',\n        '75': 'k',\n        '83': 's',\n        '84': 't',\n        '78': 'n',\n        '72': 'h',\n        '77': 'm',\n        '89': 'y',\n        '82': 'r',\n        '87': 'w',\n        '71': 'g',\n        '90': 'z',\n        '68': 'd',\n        '66': 'b',\n        '80': 'p',\n        '74': 'j',\n        '70': 'f',\n        '76': 'l',\n        '88': 'x',\n        '67': 'c',\n        '86': 'v',\n        '81': 'q',\n        '188': '、',\n        '189': 'ー',\n        '190': '。',\n        '191': '・',\n        '219' : '＠',\n        '220' : '」',\n        '221' : '「',//}}}\n        'k': { '65': 'か', '73': 'き', '85': 'く', '69': 'け', '79': 'こ',//{{{\n            'y':{\n                '65': 'きゃ', '73': 'きぃ', '85': 'きゅ', '69': 'きぇ', '79': 'きょ'\n            }\n        },\n        's': {\n            '65': 'さ', '73': 'し', '85': 'す', '69': 'せ', '79': 'そ',\n            'y' : {\n                '65': 'しゃ', '73': 'しぃ', '85': 'しゅ', '69': 'しぇ', '79': 'しょ'\n            },\n            'h' : {\n                '65': 'しゃ', '73': 'し', '85': 'しゅ', '69': 'しぇ', '79': 'しょ'\n            }\n        } ,\n        't': { '65': 'た', '73': 'ち', '85': 'つ', '69': 'て', '79': 'と',\n            'y' : {\n                '65': 'ちゃ', '73': 'ちぃ', '85': 'ちゅ', '69': 'ちぇ', '79': 'ちょ'\n            }\n        },\n        'n': { '65': 'な', '73': 'に', '85': 'ぬ', '69': 'ね', '79': 'の','78': 'ん',\n            'y' : {\n                '65': 'にゃ', '73': 'にぃ', '85': 'にゅ', '69': 'にぇ', '79': 'にょ'\n            }\n        },\n        'h': { '65': 'は', '73': 'ひ', '85': 'ふ', '69': 'へ', '79': 'ほ',\n            'y' : {\n                '65': 'ひゃ', '73': 'ひぃ', '85': 'ひゅ', '69': 'ひぇ', '79': 'ひょ'\n            }\n        },\n        'm': { '65': 'ま', '73': 'み', '85': 'む', '69': 'め', '79': 'も',\n            'y' : {\n                '65': 'みゃ', '73': 'みぃ', '85': 'みゅ', '69': 'みぇ', '79': 'みょ'\n            }\n        },\n        'y': { '65': 'や', '73': 'い', '85': 'ゆ', '69': 'いぇ', '79': 'よ' },\n        'r': { '65': 'ら', '73': 'り', '85': 'る', '69': 'れ', '79': 'ろ',\n            'y' : {\n                '65': 'りゃ', '73': 'りぃ', '85': 'りゅ', '69': 'りぇ', '79': 'りょ'\n            }\n        },\n        'w': { '65': 'わ', '73': 'うぃ', '85': 'う', '69': 'うぇ', '79': 'を' },\n        'g': { '65': 'が', '73': 'ぎ', '85': 'ぐ', '69': 'げ', '79': 'ご',\n            'y' : {\n                '65': 'ぎゃ', '73': 'ぎぃ', '85': 'ぎゅ', '69': 'ぎぇ', '79': 'ぎょ'\n            }\n        },\n        'z': { '65': 'ざ', '73': 'じ', '85': 'ず', '69': 'ぜ', '79': 'ぞ',\n            'y' : {\n                '65': 'じゃ', '73': 'じぃ', '85': 'じゅ', '69': 'じぇ', '79': 'じょ'\n            }\n        },\n        'd': { '65': 'だ', '73': 'ぢ', '85': 'づ', '69': 'で', '79': 'ど',\n            'y' : {\n                '65': 'ぢゃ', '73': 'ぢぃ', '85': 'ぢゅ', '69': 'ぢぇ', '79': 'ぢょ'\n            }\n        },\n        'b': { '65': 'ば', '73': 'び', '85': 'ぶ', '69': 'べ', '79': 'ぼ',\n            'y' : {\n                '65': 'びゃ', '73': 'びぃ', '85': 'びゅ', '69': 'びぇ', '79': 'びょ'\n            }\n        },\n        'p': { '65': 'ぱ', '73': 'ぴ', '85': 'ぷ', '69': 'ぺ', '79': 'ぽ',\n            'y' : {\n                '65': 'ぴゃ', '73': 'ぴぃ', '85': 'ぴゅ', '69': 'ぴぇ', '79': 'ぴょ'\n            }\n        },\n        'j': { '65': 'じゃ', '73': 'じ', '85': 'じゅ', '69': 'じぇ', '79': 'じょ' },\n        'f': { '65': 'ふぁ', '73': 'ふぃ', '85': 'ふ', '69': 'ふぇ', '79': 'ふぉ' },\n        'l': { '65': 'ぁ', '73': 'ぃ', '85': 'ぅ', '69': 'ぇ', '79': 'ぉ' },\n        'x': { '65': 'ぁ', '73': 'ぃ', '85': 'ぅ', '69': 'ぇ', '79': 'ぉ' },\n        'c': { '65': 'か', '73': 'し', '85': 'く', '69': 'せ', '79': 'こ' },\n        'v': { '65': 'ヴァ', '73': 'ヴィ', '85': 'ヴ', '69': 'ヴェ', '79': 'ヴォ' },\n        'q': { '65': 'くぁ', '73': 'くぃ', '85': 'く', '69': 'くぇ', '79': 'くぉ' }//}}}\n    }//}}}\n};//}}}",
    "static": true,
    "longname": "js/utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1036,
    "kind": "variable",
    "name": "Util",
    "memberof": "js/utils.js",
    "static": true,
    "longname": "js/utils.js~Util",
    "access": null,
    "export": true,
    "importPath": "./js/utils.js",
    "importStyle": "{Util}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"splitArray\": *, \"copyArray\": *, \"computeDistanceP2P\": *, \"post\": *, \"get\": *, \"_communicate\": *, \"log\": *}"
      ]
    }
  },
  {
    "__docId__": 1037,
    "kind": "variable",
    "name": "ElemCreator",
    "memberof": "js/utils.js",
    "static": true,
    "longname": "js/utils.js~ElemCreator",
    "access": null,
    "export": true,
    "importPath": "./js/utils.js",
    "importStyle": "{ElemCreator}",
    "description": "DOM要素を生成する関数の集まりです",
    "lineNumber": 91,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1038,
    "kind": "variable",
    "name": "KeyTable",
    "memberof": "js/utils.js",
    "static": true,
    "longname": "js/utils.js~KeyTable",
    "access": null,
    "export": true,
    "importPath": "./js/utils.js",
    "importStyle": "{KeyTable}",
    "description": "キーコードから日本語文字列を作成します",
    "lineNumber": 323,
    "type": {
      "types": [
        "{\"makeString\": *, \"makeStringFromOnceBufferString\": *, \"makeStringFromMultipleBufferString\": *, \"convertable\": *, \"katakana\": *, \"shiftKey\": *, \"keyTable\": *}"
      ]
    }
  },
  {
    "__docId__": 1040,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1041,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1042,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1043,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1044,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1045,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1046,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1047,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1048,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1049,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1050,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1051,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1052,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1053,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1054,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1055,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1056,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1057,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1058,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1059,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1060,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1061,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1062,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1063,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1064,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1065,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1066,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1067,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1068,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1069,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1070,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1071,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1072,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1073,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1074,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1075,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1076,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1077,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1078,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1079,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1080,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1081,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1082,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1083,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1084,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1085,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1086,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 1088,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1089,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1090,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1091,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1092,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1093,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1094,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 1095,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]