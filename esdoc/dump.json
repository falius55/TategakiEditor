[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/key_table.js",
    "memberof": null,
    "longname": "js/key_table.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "console.log('key_table.js');\nvar key_table = {\n\tgetString : function (buffer_string,keycode) {\n\t\tif (buffer_string.length === 0) {\n\t\t\t// bufferに文字なし\n\t\t\t// キーコードの文字をそのまま返す\n\t\t\treturn this.key_table_jpn[keycode];\n\t\t} else if(buffer_string.length === 1) {\n\t\t\t// bufferに一文字のみ\n\t\t\tif (this.convertable.indexOf(buffer_string) !== -1) {\n\t\t\t\t// bufferの文字が変換可能アルファベット\n\t\t\t\t// keytableからオブジェクト取得\n\t\t\t\tvar s = this.key_table_jpn[buffer_string];\n\t\t\t\t// オブジェクトにキーコードを与えて、変換文字取得\n\t\t\t\tvar str =  s[keycode];\n\t\t\t\tif ( str == null) {\n\t\t\t\t\t// 変換文字が取得できないということは、アルファベット二文字が変換可能な組み合わせではないということ\n\t\t\t\t\tvar typestr = this.key_table_jpn[keycode];\n\t\t\t\t\tif (buffer_string === typestr) {\n\t\t\t\t\t\t// 例えばzzと打つなど同じアルファベットの連続の場合、\"っｚ\"と返す\n\t\t\t\t\t\treturn \"っ\" + typestr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 異なるアルファベットの場合、そのまま連結\n\t\t\t\t\t\treturn buffer_string + typestr;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 変換できた場合\n\t\t\t\t\t// buffer文字をkeytableに与えて返ってきたオブジェクトにkeycodeを与えて得た文字を返す\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// bufferの文字がアルファベットでなければbufferの文字とキーコード文字を連結した文字列を返す\n\t\t\t\treturn buffer_string + this.key_table_jpn[keycode];\n\t\t\t}\n\t\t}\n\t\t// 以下はbufferの文字列が二文字以上であることが保証されている\n\t\tvar noEncode = buffer_string.substring(0,buffer_string.length - 2); // 変換しない文字\n\t\tvar first = buffer_string.substring(buffer_string.length - 2,buffer_string.length -1);\n\t\tvar second = buffer_string.substring(buffer_string.length -1,buffer_string.length);\n\t\tif (this.convertable.indexOf(first) === -1) {\n\t\t\t// 最後から二文字目が変換可能アルファベットではない\n\t\t\tif (this.convertable.indexOf(second) === -1) {\n\t\t\t\t// bufferに変換する変換可能アルファベットがない\n\t\t\t\t// キーコード文字列をbufferに連結した文字列を返す\n\t\t\t\treturn buffer_string + this.key_table_jpn[keycode];\n\t\t\t} else {\n\t\t\t\t// bufferの最終文字だけがアルファベット\n\t\t\t\tvar s = this.key_table_jpn[second];\n\t\t\t\tvar str =  s[keycode];\n\t\t\t\tif ( str == null) {\n\t\t\t\t\t// 変換文字が取得できないということは、アルファベット二文字が変換可能な組み合わせではないということ\n\t\t\t\t\tvar typestr = this.key_table_jpn[keycode];\n\t\t\t\t\tif (second === typestr) {\n\t\t\t\t\t\t// 例えばzzと打つなど同じアルファベットの連続の場合、\"っｚ\"と返す\n\t\t\t\t\t\treturn noEncode + first + \"っ\" + typestr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 異なるアルファベットの場合、そのまま連結\n\t\t\t\t\t\treturn buffer_string + typestr;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 最後から二文字目はアルファベット以外で、最終文字だけがアルファベット\n\t\t\t\t\t// 変換文字取得成功\n\t\t\t\t\t// 無変換文字 + first + buffer文字をkeytableに与えて返ってきたオブジェクトにkeycodeを与えて得た文字を返す\n\t\t\t\t\treturn noEncode + first + str;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// bufferの後ろから二文字目がアルファベット\n\t\t\t// 最後の文字がアルファベットでないならそのまま連結 \"sた + r\"などの場合\n\t\t\tif (this.convertable.indexOf(second) === -1) return buffer_string + this.key_table_jpn[keycode];\n\t\t\t// bufferの最後に変換可能アルファベット二文字\n\t\t\t// 第一添字がアルファベットなら必ず第二添字のためのオブジェクトは返ってくる\n\t\t\t//\n\t\t\tvar o = this.key_table_jpn[first][second];\n\t\t\tif (o != null) {\n\t\t\t\tvar str = o[keycode];\n\t\t\t\t// 三文字で１文字が完成した場合\n\t\t\t\t// sy + a →  \"しゃ\" など\n\t\t\t\tif (str != null) return noEncode + str;\n\t\t\t}\n\t\t\t// 三文字で一文字が完成しない場合、後ろ二文字で１文字が完成する可能性があるので再帰\n\t\t\t// staの三文字で\"sた\"となる場合がある\n\t\t\t// 後ろ二文字で１文字が完成しなければそのまま二文字が返ってくるので、やはりfirstを挟んで連結\n\t\t\treturn noEncode + first + this.getString(second,keycode);\n\t\t}\n\t},\n\tconvertable : [\"k\",\"s\",\"t\",\"n\",\"h\",\"m\",\"y\",\"r\",\"w\",\"g\",\"z\",\"d\",\"b\",\"p\",\"j\",\"f\",\"l\",\"x\",\"c\",\"v\",\"q\"],\n\tkatakana : {\n\t\t\"あ\" : \"ア\",\n\t\t\"い\" : \"イ\",\n\t\t\"う\" : \"ウ\",\n\t\t\"え\" : \"エ\",\n\t\t\"お\" : \"オ\",\n\t\t\"か\" : \"カ\",\n\t\t\"き\" : \"キ\",\n\t\t\"く\" : \"ク\",\n\t\t\"け\" : \"ケ\",\n\t\t\"こ\" : \"コ\",\n\t\t\"さ\" : \"サ\",\n\t\t\"し\" : \"シ\",\n\t\t\"す\" : \"ス\",\n\t\t\"せ\" : \"セ\",\n\t\t\"そ\" : \"ソ\",\n\t\t\"た\" : \"タ\",\n\t\t\"ち\" : \"チ\",\n\t\t\"つ\" : \"ツ\",\n\t\t\"て\" : \"テ\",\n\t\t\"と\" : \"ト\",\n\t\t\"な\" : \"ナ\",\n\t\t\"に\" : \"ニ\",\n\t\t\"ぬ\" : \"ヌ\",\n\t\t\"ね\" : \"ネ\",\n\t\t\"の\" : \"ノ\",\n\t\t\"は\" : \"ハ\",\n\t\t\"ひ\" : \"ヒ\",\n\t\t\"ふ\" : \"フ\",\n\t\t\"へ\" : \"ヘ\",\n\t\t\"ほ\" : \"ホ\",\n\t\t\"ま\" : \"マ\",\n\t\t\"み\" : \"ミ\",\n\t\t\"む\" : \"ム\",\n\t\t\"め\" : \"メ\",\n\t\t\"も\" : \"モ\",\n\t\t\"や\" : \"ヤ\",\n\t\t\"ゆ\" : \"ユ\",\n\t\t\"よ\" : \"ヨ\",\n\t\t\"ら\" : \"ラ\",\n\t\t\"り\" : \"リ\",\n\t\t\"る\" : \"ル\",\n\t\t\"れ\" : \"レ\",\n\t\t\"ろ\" : \"ロ\",\n\t\t\"わ\" : \"ワ\",\n\t\t\"を\" : \"ヲ\",\n\t\t\"ん\" : \"ン\",\n\t\t\"が\" : \"ガ\",\n\t\t\"ぎ\" : \"ギ\",\n\t\t\"ぐ\" : \"グ\",\n\t\t\"げ\" : \"ゲ\",\n\t\t\"ご\" : \"ゴ\",\n\t\t\"ざ\" : \"ザ\",\n\t\t\"じ\" : \"ジ\",\n\t\t\"ず\" : \"ズ\",\n\t\t\"ぜ\" : \"ゼ\",\n\t\t\"ぞ\" : \"ゾ\",\n\t\t\"だ\" : \"ダ\",\n\t\t\"ぢ\" : \"ヂ\",\n\t\t\"づ\" : \"ヅ\",\n\t\t\"で\" : \"デ\",\n\t\t\"ど\" : \"ド\",\n\t\t\"ば\" : \"バ\",\n\t\t\"び\" : \"ビ\",\n\t\t\"ぶ\" : \"ブ\",\n\t\t\"べ\" : \"ベ\",\n\t\t\"ぼ\" : \"ボ\",\n\t\t\"ゃ\" : \"ャ\",\n\t\t\"ゅ\" : \"ュ\",\n\t\t\"ょ\" : \"ョ\",\n\t\t\"ぁ\" : \"ァ\",\n\t\t\"ぃ\" : \"ィ\",\n\t\t\"ぅ\" : \"ゥ\",\n\t\t\"ぇ\" : \"ェ\",\n\t\t\"ぉ\" : \"ォ\",\n\t\t\"っ\" : \"ッ\"\n\t},\n\tshift_key : {\n\t\t\"49\" : \"!\",\n\t\t\"50\" : \"\\”\",\n\t\t\"51\" : \"＃\",\n\t\t\"52\" : \"＄\",\n\t\t\"53\" : \"％\",\n\t\t\"54\" : \"＆\",\n\t\t\"55\" : \"\\’\",\n\t\t\"56\" : \"（\",\n\t\t\"57\" : \"）\",\n\t\t\"187\" : \"〜\",\n\t\t\"188\" : \"〈\",\n\t\t\"190\" : \"〉\",\n\t\t\"191\" : \"？\",\n\t\t\"220\" : \"}\",\n\t\t\"221\" : \"{\",\n\t\t\"65\": \"A\",\n\t\t\"66\": \"B\",\n\t\t\"67\": \"C\",\n\t\t\"68\": \"D\",\n\t\t\"69\": \"E\",\n\t\t\"70\": \"F\",\n\t\t\"71\": \"G\",\n\t\t\"72\": \"H\",\n\t\t\"73\": \"I\",\n\t\t\"74\": \"J\",\n\t\t\"75\": \"K\",\n\t\t\"76\": \"L\",\n\t\t\"77\": \"M\",\n\t\t\"78\": \"N\",\n\t\t\"79\": \"O\",\n\t\t\"80\": \"P\",\n\t\t\"81\": \"Q\",\n\t\t\"82\": \"R\",\n\t\t\"83\": \"S\",\n\t\t\"84\": \"T\",\n\t\t\"85\": \"U\",\n\t\t\"86\": \"V\",\n\t\t\"87\": \"W\",\n\t\t\"88\": \"X\",\n\t\t\"89\": \"Y\",\n\t\t\"90\": \"Z\"\n\t},\n\tkey_table_jpn : {\n\t\t\"48\": \"０\",\n\t\t\"49\": \"１\",\n\t\t\"50\": \"２\",\n\t\t\"51\": \"３\",\n\t\t\"52\": \"４\",\n\t\t\"53\": \"５\",\n\t\t\"54\": \"６\",\n\t\t\"55\": \"７\",\n\t\t\"56\": \"８\",\n\t\t\"57\": \"９\",\n\t\t\"65\": \"あ\",\n\t\t\"73\": \"い\",\n\t\t\"85\": \"う\",\n\t\t\"69\": \"え\",\n\t\t\"79\": \"お\",\n\t\t\"75\": \"k\",\n\t\t\"83\": \"s\",\n\t\t\"84\": \"t\",\n\t\t\"78\": \"n\",\n\t\t\"72\": \"h\",\n\t\t\"77\": \"m\",\n\t\t\"89\": \"y\",\n\t\t\"82\": \"r\",\n\t\t\"87\": \"w\",\n\t\t\"71\": \"g\",\n\t\t\"90\": \"z\",\n\t\t\"68\": \"d\",\n\t\t\"66\": \"b\",\n\t\t\"80\": \"p\",\n\t\t\"74\": \"j\",\n\t\t\"70\": \"f\",\n\t\t\"76\": \"l\",\n\t\t\"88\": \"x\",\n\t\t\"67\": \"c\",\n\t\t\"86\": \"v\",\n\t\t\"81\": \"q\",\n\t\t\"188\": \"、\",\n\t\t\"189\": \"ー\",\n\t\t\"190\": \"。\",\n\t\t\"191\": \"・\",\n\t\t\"219\" : \"＠\",\n\t\t\"220\" : \"」\",\n\t\t\"221\" : \"「\",\n\t\t\"k\": { \"65\": \"か\", \"73\": \"き\", \"85\": \"く\", \"69\": \"け\", \"79\": \"こ\",\n\t\t\t\"y\":{\n\t\t\t\t\"65\": \"きゃ\", \"73\": \"きぃ\", \"85\": \"きゅ\", \"69\": \"きぇ\", \"79\": \"きょ\"\n\t\t\t}\n\t\t},\n\t\t\"s\": {\n\t\t\t\"65\": \"さ\", \"73\": \"し\", \"85\": \"す\", \"69\": \"せ\", \"79\": \"そ\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"しゃ\", \"73\": \"しぃ\", \"85\": \"しゅ\", \"69\": \"しぇ\", \"79\": \"しょ\"\n\t\t\t},\n\t\t\t\"h\" : {\n\t\t\t\t\"65\": \"しゃ\", \"73\": \"し\", \"85\": \"しゅ\", \"69\": \"しぇ\", \"79\": \"しょ\"\n\t\t\t}\n\t\t} ,\n\t\t\"t\": { \"65\": \"た\", \"73\": \"ち\", \"85\": \"つ\", \"69\": \"て\", \"79\": \"と\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"ちゃ\", \"73\": \"ちぃ\", \"85\": \"ちゅ\", \"69\": \"ちぇ\", \"79\": \"ちょ\"\n\t\t\t}\n\t\t},\n\t\t\"n\": { \"65\": \"な\", \"73\": \"に\", \"85\": \"ぬ\", \"69\": \"ね\", \"79\": \"の\",\"78\": \"ん\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"にょ\", \"73\": \"にぃ\", \"85\": \"にゅ\", \"69\": \"にぇ\", \"79\": \"にょ\"\n\t\t\t}\n\t\t},\n\t\t\"h\": { \"65\": \"は\", \"73\": \"ひ\", \"85\": \"ふ\", \"69\": \"へ\", \"79\": \"ほ\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"ひょ\", \"73\": \"ひぃ\", \"85\": \"ひゅ\", \"69\": \"ひぇ\", \"79\": \"ひょ\"\n\t\t\t}\n\t\t},\n\t\t\"m\": { \"65\": \"ま\", \"73\": \"み\", \"85\": \"む\", \"69\": \"め\", \"79\": \"も\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"みょ\", \"73\": \"みぃ\", \"85\": \"みゅ\", \"69\": \"みぇ\", \"79\": \"みょ\"\n\t\t\t}\n\t\t},\n\t\t\"y\": { \"65\": \"や\", \"73\": \"い\", \"85\": \"ゆ\", \"69\": \"いぇ\", \"79\": \"よ\" },\n\t\t\"r\": { \"65\": \"ら\", \"73\": \"り\", \"85\": \"る\", \"69\": \"れ\", \"79\": \"ろ\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"りょ\", \"73\": \"りぃ\", \"85\": \"りゅ\", \"69\": \"りぇ\", \"79\": \"りょ\"\n\t\t\t}\n\t\t},\n\t\t\"w\": { \"65\": \"わ\", \"73\": \"うぃ\", \"85\": \"う\", \"69\": \"うぇ\", \"79\": \"を\" },\n\t\t\"g\": { \"65\": \"が\", \"73\": \"ぎ\", \"85\": \"ぐ\", \"69\": \"げ\", \"79\": \"ご\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"ぎゃ\", \"73\": \"ぎぃ\", \"85\": \"ぎゅ\", \"69\": \"ぎぇ\", \"79\": \"ぎょ\"\n\t\t\t}\n\t\t},\n\t\t\"z\": { \"65\": \"ざ\", \"73\": \"じ\", \"85\": \"ず\", \"69\": \"ぜ\", \"79\": \"ぞ\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"じゃ\", \"73\": \"じぃ\", \"85\": \"じゅ\", \"69\": \"じぇ\", \"79\": \"じょ\"\n\t\t\t}\n\t\t},\n\t\t\"d\": { \"65\": \"だ\", \"73\": \"ぢ\", \"85\": \"づ\", \"69\": \"で\", \"79\": \"ど\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"ぢゃ\", \"73\": \"ぢぃ\", \"85\": \"ぢゅ\", \"69\": \"ぢぇ\", \"79\": \"ぢょ\"\n\t\t\t}\n\t\t},\n\t\t\"b\": { \"65\": \"ば\", \"73\": \"び\", \"85\": \"ぶ\", \"69\": \"べ\", \"79\": \"ぼ\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"びゃ\", \"73\": \"びぃ\", \"85\": \"びゅ\", \"69\": \"びぇ\", \"79\": \"びょ\"\n\t\t\t}\n\t\t},\n\t\t\"p\": { \"65\": \"ぱ\", \"73\": \"ぴ\", \"85\": \"ぷ\", \"69\": \"ぺ\", \"79\": \"ぽ\",\n\t\t\t\"y\" : {\n\t\t\t\t\"65\": \"ぴゃ\", \"73\": \"ぴぃ\", \"85\": \"ぴゅ\", \"69\": \"ぴぇ\", \"79\": \"ぴょ\"\n\t\t\t}\n\t\t},\n\t\t\"j\": { \"65\": \"じゃ\", \"73\": \"じ\", \"85\": \"じゅ\", \"69\": \"じぇ\", \"79\": \"じょ\" },\n\t\t\"f\": { \"65\": \"ふぁ\", \"73\": \"ふぃ\", \"85\": \"ふ\", \"69\": \"ふぇ\", \"79\": \"ふぉ\" },\n\t\t\"l\": { \"65\": \"ぁ\", \"73\": \"ぃ\", \"85\": \"ぅ\", \"69\": \"ぇ\", \"79\": \"ぉ\" },\n\t\t\"x\": { \"65\": \"ぁ\", \"73\": \"ぃ\", \"85\": \"ぅ\", \"69\": \"ぇ\", \"79\": \"ぉ\" },\n\t\t\"c\": { \"65\": \"か\", \"73\": \"し\", \"85\": \"く\", \"69\": \"せ\", \"79\": \"こ\" },\n\t\t\"v\": { \"65\": \"ヴァ\", \"73\": \"ヴィ\", \"85\": \"ヴ\", \"69\": \"ヴェ\", \"79\": \"ヴォ\" },\n\t\t\"q\": { \"65\": \"くぁ\", \"73\": \"くぃ\", \"85\": \"く\", \"69\": \"くぇ\", \"79\": \"くぉ\" }\n\t}\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "key_table",
    "memberof": "js/key_table.js",
    "longname": "js/key_table.js~key_table",
    "access": null,
    "export": false,
    "importPath": "./js/key_table.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "js/object.js",
    "memberof": null,
    "longname": "js/object.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\n/*\n *\tオブジェクト指向\n *\tParagraph,Row,Charは、親や子の参照を保持するのはもちろんのこと、木構造を無視して異なる親であっても次と前にある同種オブジェクトの参照を持つ\n *\tDom要素の参照を持つコンポジション\n *\t要素の再利用のため、要素作成のみクロージャで行う\n *\tjQyeryの使用箇所:width(),height(),addwheelEventlistener(),removeWheelEventListener(),bootstrap関係\n */\nconsole.log('object.js');\nconst Util = {\n\t// baseArrayをcnt個ずつの配列に分割する\n\tsplitArray:function(baseArray,cnt) {\n\t\t'use strict';\n\t\tconst b = baseArray.length;\n\t\tconst newArray = [];\n\n\t\tfor (let i = 0,j,p; i < Math.ceil(b/cnt); i++) {\n\t\t\tj = i*cnt;\n\t\t\tp = baseArray.slice(j,j+cnt);\n\t\t\tnewArray.push(p);\n\t\t}\n\t\treturn newArray;\n\t},\n\tcopyArray:function (array) {\n\t\t'use strict';\n\t\tconst retArray = [];\n\t\tfor (let value of array) {\n\t\t\tretArray.push(value);\n\t\t}\n\t\treturn retArray;\n\t},\n\t// ２点間の距離を計算する\n\tcomputeDistanceP2P:function(x1,y1,x2,y2) {\n\t\t// ２乗を使っているので、戻り値は必ず正の数になる\n\t\t// √{(b.x - a.x)^2+ (b.y - a.y)^2}\n\t\treturn Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));\n\t},\n\tpost: function (url,data,callback) {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.responseType = 'json';\n\t\txhr.open('POST',url);\n\t\txhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded;charset=UTF-8');\n\n\t\tlet sendData = '';\n\t\tfor (let name in data) {\n\t\t\tif (sendData != '') {\n\t\t\t\tsendData += '&';\n\t\t\t}\n\t\t\tsendData += name + '=' + encodeURI(data[name]).replace(/&/g,'%26');\n\t\t}\n\n\t\txhr.addEventListener('load',function (e) {\n\t\t\tif (xhr.response) {\n\t\t\t\tcallback(xhr.response);\n\t\t\t} else {\n\t\t\t\tconsole.log('unsuccess');\n\t\t\t}\n\t\t});\n\t\txhr.addEventListener('abort',function (e) {\n\t\t\tconsole.log('abort');\n\t\t});\n\t\txhr.send(sendData);\n\t}\n};\n// closer\nUtil.createCharElement = (function () {\n\tconst eCharTemplate = document.createElement('span');\n\teCharTemplate.classList.add('char');\n\teCharTemplate.classList.add('display');\n\n\treturn function (data) {\n\t\tconst eChar = eCharTemplate.cloneNode(true);\n\t\tconst char = data['char'];\n\t\tconst classArr = data['decolation'];\n\t\tconst fontSize = data['fontSize'];\n\t\teChar.textContent = char;\n\t\teChar.dataset.fontSize = fontSize || 'auto';\n\t\tfor (let decolation of classArr) {\n\t\t\teChar.classList.add(decolation);\n\t\t}\n\n\t\t// 文字の種類に応じて付与するクラス\n\t\tif (/[。、,.,]/.test(char))\n\t\t\teChar.classList.add('vertical-dot');\n\t\telse if (/[「『]/.test(char))\n\t\t\teChar.classList.add('vertical-before-kagi-bracket');\n\t\telse if (/[」』]/.test(char))\n\t\t\teChar.classList.add('vertical-after-kagi-bracket');\n\t\telse if (/[（\\[<\\{【\\(［〈]/.test(char))\n\t\t\teChar.classList.add('vertical-before-bracket');\n\t\telse if (/[\\)\\]>\\}】）］〉]/.test(char))\n\t\t\teChar.classList.add('vertical-after-bracket');\n\t\telse if (/[-ー―〜]/.test(char))\n\t\t\teChar.classList.add('character-line');\n\t\telse if (/[a-z]/.test(char))\n\t\t\teChar.classList.add('alphabet');\n\t\telse if (/[１-９]/.test(char))\n\t\t\teChar.classList.add('number');\n\t\telse if (/[っゃゅょぁぃぅぇぉァィゥェォッャュョ]/.test(char))\n\t\t\teChar.classList.add('yoin');\n\n\t\treturn eChar;\n\t}\n})();\nUtil.createRowElement = (function () {\n\t/*\n\t *\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n\t *\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n\t *\t\t\t\"char\":\"あ\",\n\t *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t *\t\t},\n\t *\t\t{\n\t *\t\t\t\"char\":\"い\",\n\t *\t\t\t\"decolation\":null\n\t *\t\t}\n\t *\t]\n\t */\n\tconst eRowTemplate = document.createElement('div');\n\teRowTemplate.classList.add('row');\n\teRowTemplate.classList.add('display');\n\tconst eEOL = document.createElement('span');\n\teEOL.classList.add('char');\n\teEOL.classList.add('EOL');\n\teEOL.classList.add('display');\n\teRowTemplate.appendChild(eEOL);\n\n\treturn function (data) {\n\t\tconst eRow = eRowTemplate.cloneNode(true);\n\t\treturn eRow;\n\t}\n})();\nUtil.createParagraphElement = (function () {\n\t/*\n\t * \t\t\t[\n\t * \t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t * \t\t\t\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n\t * \t\t\t\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n\t * \t\t\t\t\t\t\"char\":\"あ\",\n\t * \t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t * \t\t\t\t\t},\n\t * \t\t\t\t\t{\n\t * \t\t\t\t\t\t\"char\":\"い\",\n\t * \t\t\t\t\t\t\"decolation\":[]\n\t * \t\t\t\t\t}\n\t * \t\t\t\t\t]\n\t * \t\t\t]\n\t */\n\tconst eParagraphTemplate = document.createElement('div');\n\teParagraphTemplate.classList.add('paragraph');\n\n\treturn function (data) {\n\t\tconst eParagraph = eParagraphTemplate.cloneNode(true);\n\t\t// 段落そのものにクラスを付与する\n\t\tfor (let className of data[0]) {\n\t\t\teParagraph.classList.add(className);\n\t\t}\n\t\treturn eParagraph;\n\t}\n})();\nUtil.createCharPosElement = (function () {\n\tconst eCharPosTemplate = document.createElement('span');\n\teCharPosTemplate.classList.add('char-pos');\n\n\treturn function (strLen) {\n\t\tconst flagment = document.createDocumentFragment();\n\t\tfor (var i = 0; i <= strLen; i++) { // EOLの分も作成する\n\t\t\tconst eCharPos = eCharPosTemplate.cloneNode(true);\n\t\t\tflagment.appendChild(eCharPos);\n\t\t}\n\t\treturn flagment;\n\t}\n})();\nUtil.createConvertViewElement = (function () {\n\tconst eViewTemplate = document.createElement('div');\n\teViewTemplate.classList.add('convert-view');\n\n\treturn function () {\n\t\t'use strict';\n\t\tconst eView = eViewTemplate.cloneNode(true);\n\t\treturn eView;\n\t}\n})();\n// file_listの中に入れるファイル行を作成する\nUtil.createFileElement = (function () {\n\t/*\n\t * 作成例\n\t * <li>\n\t * <a class=\"file\"\n\t * data-type=\"file\"\n\t * href=\"#\"\n\t * data-file-id=\"1\"\n\t * data-file-name=\"filename\"\n\t * >\n\t * filename\n\t * </a>\n\t * </li>\n\t */\n\tconst eFileTemplate = document.createElement('li');\n\teFileTemplate.classList.add('fileLi');\n\tconst eFileLinkTemplate = document.createElement('a');\n\teFileLinkTemplate.classList.add('file');\n\teFileLinkTemplate.dataset.type = 'file';\n\teFileLinkTemplate.href = '#';\n\n\treturn function (id,filename) {\n\t\tconst eFile = eFileTemplate.cloneNode(true);\n\t\tconst eFileLink = eFileLinkTemplate.cloneNode(true);\n\t\teFileLink.dataset.fileId = id;\n\t\teFileLink.dataset.fileName = filename;\n\t\teFileLink.textContent = filename;\n\t\teFile.appendChild(eFileLink);\n\t\treturn eFile;\n\t}\n})();\n// file_listの中に入れるディレクトリ行を作成する\nUtil.createDirectoryElement = (function () {\n\t/*\n\t * 作成例\n\t * <li>\n\t * \t<a class=\"directory\"\n\t * \tdata-type=\"directory\"\n\t * \tdata-toggle=\"collapse\"\n\t * \tdata-directory-id=\"1\"\n\t * \tdata-directory-name=\"filename.directoryname\"\n\t * \thref=\"#directory1\"\n\t * \t>\n\t *\t\t<span\n\t *\t\tclass=\"glyphicon glyphicon-folder-close\"\n\t *\t\taria-hidden=\"true\">\n\t *\t\t</span>\n\t *\t\tfilename.directoryname\n\t *\t\t</a>\n\t *\n\t *\t\t<div class=\"collapse\" id=\"directory1\">\n\t *\t\t\t<div class=\"well\">\n\t *\t\t\t\t<ul>\n\t *\t\t\t\t\t<li>filename</li>\n\t *\t\t\t\t\t<li>filename</li>\n\t *\t\t\t\t\t<li>filename</li>\n\t *\t\t\t\t</ul>\n\t *\t\t\t</div>\n\t *\t\t</div>\n\t *\t</li>\n\t */\n\tconst eDirectoryTemplete = document.createElement('li');\n\teDirectoryTemplete.classList.add('dirLi');\n\tconst eDirLinkTemplete = document.createElement('a');\n\teDirLinkTemplete.classList.add('directory');\n\teDirLinkTemplete.dataset.type = 'directory';\n\teDirLinkTemplete.dataset.toggle = 'collapse';\n\teDirLinkTemplete.innerHTML = '<span class=\"glyphicon glyphicon-folder-close\" aria-hidden=\"true\"></span>'; // フォルダアイコン\n\n\tconst eCollapseTemplate = document.createElement('div');\n\tconst eInnerUlTemplate = document.createElement('ul');\n\tconst eWellTemplate = document.createElement('div');\n\teCollapseTemplate.classList.add('collapse');\n\teWellTemplate.classList.add('well');\n\n\treturn function (id,innerData) {\n\t\tconst eDirectory = eDirectoryTemplete.cloneNode(true);\n\t\tconst eDirLink = eDirLinkTemplete.cloneNode(true);\n\t\tconst directoryname = innerData.directoryname;\n\t\teDirLink.dataset.directoryId = id;\n\t\teDirLink.dataset.directoryName = directoryname;\n\t\teDirLink.href = '#directory' + id;\n\t\teDirLink.insertAdjacentHTML('beforeend',directoryname);\n\n\t\teDirectory.appendChild(eDirLink);\n\n\t\tconst eCollapse = eCollapseTemplate.cloneNode(true);\n\t\tconst eInnerUl = eInnerUlTemplate.cloneNode(true);\n\t\tconst eWell = eWellTemplate.cloneNode(true);\n\t\teCollapse.id = 'directory' + id;\n\n\t\t// eInnerUl内にファイルリストを加える\n\n\t\teCollapse.appendChild(eWell);\n\t\teWell.appendChild(eInnerUl);\n\n\t\teDirectory.appendChild(eCollapse); // コラプスも加える\n\t\treturn eDirectory;\n\t}\n})();\n\n// Class\n/**\n * メニューバーを担当するクラス\n */\nexport class Menu {\n\t/**\n\t * @param {SentenceContainer} sentenceContainer 対応する文章コンテナ\n\t */\n\tconstructor(sentenceContainer) {\n\t\tthis._sentenceContainer = sentenceContainer;\n\t\tthis._fontSizeInputElem = document.getElementById('fontsize_input');\n\t\tthis._confStrLenElem = document.getElementById('conf_str_len');\n\t\tthis._confRowLenElem = document.getElementById('conf_row_len');\n\t\tthis.addEventListeners();\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * このMenuが対応する文章コンテナのインスタンスを返す\n\t * @return {SentenceContainer} SentenceContainerのインスタンス\n\t */\n\tsentenceContainer() {\n\t\treturn this._sentenceContainer;\n\t}\n\t/**\n\t * 設定モーダルの文字数inputフォームのDOM要素を返す\n\t * @return {Element} 文字数設定inputフォームのDOM要素\n\t */\n\tconfStrLenElem() {\n\t\treturn this._confStrLenElem;\n\t}\n\t/**\n\t * 設定モーダルの行数inputフォームのDOM要素を返す\n\t * @return {Element} 行数設定inputフォームのDOM要素\n\t */\n\tconfRowLenElem() {\n\t\treturn this._confRowLenElem;\n\t}\n\n\t// --Status\n\n\t/**\n\t * フォントサイズinputフォームに値を設定する、あるいは引数省略で現在のinputフォームの値を返す\n\t * @param {number string} [opt_newSize] inputに設定する値(数値か、文字列の'auto')\n\t * @return {Menu number string} 自身のインスタンス(引数を渡した場合)、あるいは現在のinputフォームの値(引数を省略した場合。'auto'の場合は文字列で返す)\n\t */\n\tfontSizeInput(opt_newSize) {\n\t\tif (opt_newSize === undefined) {\n\t\t\treturn this._fontSizeInputElem.value === 'auto' ? 'auto' : parseInt(this._fontSizeInputElem.value);\n\t\t} else {\n\t\t\tthis._fontSizeInputElem.value = opt_newSize;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 現在アクティブになっている文字装飾のクラスを配列にする\n\t * @return {string[]} 現在アクティブになっている文字装飾のクラスの配列\n\t */\n\tcharDecolations() {\n\t\tconst ret = [];\n\t\tif (this.boldButton()) {\n\t\t\tret.push('decolation-font-bold');\n\t\t}\n\t\tif (this.italicButton()) {\n\t\t\tret.push('decolation-font-italic');\n\t\t}\n\t\tif (this.colorButton() !== 'black') {\n\t\t\tret.push('decolation-color-'+ this.colorButton());\n\t\t}\n\t\treturn ret;\n\t}\n\t/**\n\t * 現在の設定情報を表すオブジェクトを作成する\n\t * @return {object} 現在の設定情報を表すオブジェクト\n\t */\n\tconfigueData() {\n\t\tconst ret = {};\n\t\tret[\"strLen\"] = this.confStrLenElem().value;\n\t\tret[\"rowLen\"] = this.confRowLenElem().value;\n\t\treturn ret;\n\t}\n\n\t// --Style\n\n\t/**\n\t * 文字色ボタンに色を付ける\n\t *     引数を省略すると現在の色を取得\n\t * @param {string} [opt_color] 文字色ボタンにつける色の名前\n\t * @return {Menu string} 自身のインスタンス(引数を渡した場合) 現在の文字色ボタンに付いている色の名前(引数を省略した場合)\n\t */\n\tcolorButton(opt_color) {\n\t\tconst eColorButton = document.getElementById('color_btn');\n\t\tif(opt_color) {\n\t\t\tconst oldColor = eColorButton.className.match(/select-\\S+/);\n\t\t\tconst newColor = opt_color;\n\t\t\tif (oldColor) eColorButton.classList.remove(oldColor[0]);\n\t\t\tif (newColor === 'black') return this;\n\t\t\teColorButton.classList.add('select-'+ newColor);\n\t\t\treturn this;\n\t\t}\n\t\tif (opt_color === undefined) {\n\t\t\tconst color = eColorButton.className.match(/select-(\\S+)/);\n\t\t\treturn color ? color[1] : 'black';\n\t\t}\n\t}\n\t/**\n\t * 選択範囲の文字色を変える\n\t * @param {string} color 新しい文字色\n\t * @return {Menu} 自身のインスタンス\n\t */\n\taddColor(color) {\n\t\tconst chars = this.sentenceContainer().selectChars(true);\n\t\tfor (let char of chars) {\n\t\t\tchar.color(color);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 太字ボタンのオンオフを切り替える 引数省略で、現在の太字ボタンのオンオフをbool値で返す\n\t * @param {boolean} [opt_bl] trueで太字ボタンをオンにする。falseでオフにする\n\t * @return {Menu boolean} 自身のインスタンス(引数を渡した場合) 現在の太字ボタンの状態(引数省略の場合)\n\t */\n\tboldButton(opt_bl) {\n\t\tconst eButton = document.getElementById('btn-bold');\n\t\tif (opt_bl === undefined) {\n\t\t\treturn eButton.classList.contains('active');\n\t\t}\n\t\tif (opt_bl) {\n\t\t\teButton.classList.add('active');\n\t\t} else {\n\t\t\teButton.classList.remove('active');\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 選択範囲を太字にする。または太字を外す\n\t * @param {boolean} bl trueで太字にする。falseで外す\n\t * @return {Menu} 自身のインスタンス\n\t */\n\tbold(bl) {\n\t\tconst chars = this.sentenceContainer().selectChars(true);\n\t\tfor (let char of chars) {\n\t\t\tchar.bold(bl);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 斜体ボタンのオンオフを切り替える 引数省略で、現在の斜体ボタンのオンオフをbool値で返す\n\t * @param {boolean} [opt_bl] trueで太字ボタンをオンにする。falseでオフにする\n\t * @return {Menu boolean} 自身のインスタンス(引数を渡した場合) 現在の斜体ボタンの状態(引数省略の場合)\n\t */\n\titalicButton(opt_bl) {\n\t\tconst eButton = document.getElementById('btn-italic');\n\t\tif (opt_bl === undefined) {\n\t\t\treturn eButton.classList.contains('active');\n\t\t}\n\t\tif (opt_bl) {\n\t\t\teButton.classList.add('active');\n\t\t} else {\n\t\t\teButton.classList.remove('active');\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 選択範囲を斜体にする。または太字を外す\n\t * @param {boolean} bl trueで斜体にする。falseで外す\n\t * @return {Menu} 自身のインスタンス\n\t */\n\titalic(bl) {\n\t\tconst chars = this.sentenceContainer().selectChars(true);\n\t\tfor (let char of chars) {\n\t\t\tchar.italic(bl);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 選択範囲のフォントサイズを変更する\n\t * @param {number} size 新しいフォントサイズ\n\t * @return {Menu} 自身のインスタンス\n\t */\n\tfontSize(size) {\n\t\tconst chars = this.sentenceContainer().selectChars(true);\n\t\tfor (let char of chars) {\n\t\t\tchar.fontSize(size);\n\t\t}\n\t\tthis.sentenceContainer().cordinate().checkKinsoku().changeDisplay().breakPage().printInfo();\n\t\treturn this;\n\t}\n\t// 'center','left','right'\n\t/**\n\t * カーソルのある段落のtext-alignを変更する\n\t * @param {string} align 'center','left','right'のいずれか\n\t * @return {Menu} 自身のインスタンス\n\t */\n\talign(align) {\n\t\tconst cursorParagraph = this.sentenceContainer().cursor().getParagraph();\n\t\tcursorParagraph.align(align);\n\t\treturn this;\n\t}\n\n\t/**\n\t * メニューの各コンポーネントにイベントリスナーを付加する\n\t *     newボタン、saveボタン、deleteボタン、開くボタン、モーダルの開閉、\n\t *     文字色ボタン、文字色ドロップダウン、太字ボタン、斜体ボタン、\n\t * \t text-alignボタン、フォントサイズのドロップダウン、設定モーダル\n\t * @return {Menu} 自身のインスタンス\n\t */\n\taddEventListeners() {\n\t\t// メニューボタン\n\t\tdocument.getElementById('menu_new').addEventListener('click',function (e) {  this.sentenceContainer().newFile(); }.bind(this),false);\n\t\tdocument.getElementById('menu_save').addEventListener('click',function (e) { this.sentenceContainer().saveFile(); }.bind(this),false);\n\t\tdocument.getElementById('menu_delete').addEventListener('click',function (e) { this.sentenceContainer().fileList().currentFile().delete(); }.bind(this),false);\n\t\tdocument.getElementById('modal_fileopen_link').addEventListener('click',function (e) {\n\t\t\tconst filterInputElem = this.sentenceContainer().fileList().filterInputElem();\n\t\t\t// モーダルが開くのはブートストラップで行われるので、その前処理だけを行う\n\t\t\tfilterInputElem.value = '';\n\t\t\tfilterInputElem.focus();\n\t\t\tthis.sentenceContainer().fileList().resetList();\n\t\t}.bind(this),false);\n\n\t\t// モーダル開閉\n\t\t$('div.modal').on('shown.bs.modal',function (e) {\n\t\t\tthis.sentenceContainer().removeKeydownEventListener();\n\t\t\tif (this.sentenceContainer().inputBuffer().isDisplay()) {\n\t\t\t\tthis.sentenceContainer().inputBuffer().empty().hide();\n\t\t\t}\n\t\t}.bind(this));\n\t\t$('div.modal').on('hidden.bs.modal',function (e) {\n\t\t\tif (this.sentenceContainer().command().isActive()) { return; }\n\t\t\tthis.sentenceContainer().addKeydownEventListener();\n\t\t}.bind(this));\n\n\t\t// パレットボタン\n\t\t// 文字色ボタン\n\t\tdocument.getElementById('color_btn').addEventListener('click',function (e) {\n\t\t\tthis.addColor(this.colorButton());\n\t\t}.bind(this),false);\n\t\t// 文字色ドロップダウン\n\t\tthis.addColorSelectClickEvent();\n\n\t\t// bold italic\n\t\tdocument.getElementById('btn-bold').addEventListener('click',function (e) {\n\t\t\tconst eBtn = document.getElementById('btn-bold');\n\t\t\teBtn.classList.toggle('active');\n\t\t\tthis.bold(this.boldButton());\n\t\t}.bind(this),false);\n\t\tdocument.getElementById('btn-italic').addEventListener('click',function (e) {\n\t\t\tconst eBtn = document.getElementById('btn-italic');\n\t\t\teBtn.classList.toggle('active');\n\t\t\tthis.italic(this.italicButton());\n\t\t}.bind(this),false);\n\n\t\t// align\n\t\tthis.addAlignClickEvent();\n\n\t\t// font size\n\t\tthis.addFontSizeEvnet();\n\n\t\t// configue modal\n\t\tthis.addConfigueEvent();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * 文字色(ドロップダウンの方)をクリックするとボタンの色と選択範囲の文字色が変わるイベントを付加する\n\t *     querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱う色を増やすことが可能\n\t * @return {Menu} 自身のインスタンス\n\t */\n\taddColorSelectClickEvent() {\n\t\tconst eSelectColors = document.querySelectorAll('#color_dropdown a');\n\t\tfor (let i = 0,eSelColor; eSelColor = eSelectColors[i]; i++) {\n\t\t\tconst color = eSelColor.dataset.color;\n\t\t\teSelColor.addEventListener('click',function (e) {\n\t\t\t\tthis.colorButton(color);\n\t\t\t\tthis.addColor(color);\n\t\t\t}.bind(this),false);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * text-alignボタンをクリックするとカーソルのある段落のtext-alignが変更されるイベントを付加する\n\t * @return {Menu} 自身のインスタンス\n\t */\n\taddAlignClickEvent() {\n\t\tconst eAligns = document.querySelectorAll('#align_btns button');\n\t\tfor (let i = 0,eAlign; eAlign = eAligns[i]; i++) {\n\t\t\teAlign.addEventListener('click',function (e) {\n\t\t\t\tconst align = eAlign.id.match(/text_btn_(\\S+)/);\n\t\t\t\tthis.align(align[1]);\n\t\t\t}.bind(this),false);\n\t\t}\n\t\treturn this;\n\t}\n\n\t// font size\n\n\t/**\n\t * フォントサイズのドロップダウンをクリックするとフォントサイズのinputの数値が変更され、選択範囲の文字のフォントサイズが変更されるイベントを付加する\n\t *     querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱うフォントサイズを増やすことが可能\n\t * @return {Menu} 自身のインスタンス\n\t */\n\taddFontSizeEvnet() {\n\t\tconst eFontSizeDropdowns = document.querySelectorAll('#fontsize_dropdown a');\n\t\tfor (let i = 0,eFontSize; eFontSize = eFontSizeDropdowns[i]; i++) {\n\t\t\teFontSize.addEventListener('click',function (e) {\n\t\t\t\tconst size = parseInt(e.target.dataset.size) || 'auto';\n\t\t\t\tthis.fontSizeInput(size);\n\t\t\t\tthis.fontSize(size);\n\t\t\t}.bind(this),false);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 設定モーダルのinputとsaveボタン、resetボタンにイベントを付加する\n\t * @return {Menu} 自身のインスタンス\n\t */\n\taddConfigueEvent() {\n\t\tdocument.getElementById('btn_conf_save').addEventListener('click',function (e) {\n\t\t\tconst strLen = parseInt(this.confStrLenElem().value || 18);\n\t\t\tconst rowLen = parseInt(this.confRowLenElem().value || 40);\n\t\t\tthis.sentenceContainer().strLenOnRow(strLen).rowLenOnPage(rowLen);\n\t\t\t$('#configue_modal').modal('hide');\n\t\t}.bind(this),false);\n\t\tdocument.getElementById('btn_conf_reset').addEventListener('click',function (e) { // html上でtype=\"reset\"にすると、元に戻すというよりinputを空にしてしまう\n\t\t\tthis.confStrLenElem().value = this.sentenceContainer().strLenOnRow();\n\t\t\tthis.confRowLenElem().value = this.sentenceContainer().rowLenOnPage();\n\t\t}.bind(this),false);\n\t\t// inputからフォーカスから外れた際に、不正な文字が入力されていたら元に戻す\n\t\tthis.confStrLenElem().addEventListener('focusout',function (e) {\n\t\t\tif (!/^[0-9]+$/.test(this.confStrLenElem().value)) {\n\t\t\t\tthis.confStrLenElem().value = this.sentenceContainer().strLenOnRow();\n\t\t\t}\n\t\t}.bind(this),false);\n\t\tthis.confRowLenElem().addEventListener('focusout',function (e) {\n\t\t\tif (!/^[0-9]+$/.test(this.confRowLenElem().value)) {\n\t\t\t\tthis.confRowLenElem().value = this.sentenceContainer().rowLenOnPage();\n\t\t\t}\n\t\t}.bind(this),false);\n\t\treturn this;\n\t}\n}\n/**\n * コマンドラインを表すクラス\n */\nexport class CommandLine {\n\t/**\n\t * @param {SentenceContainer} sentenceContainer 対応する文章コンテナ\n\t */\n\tconstructor(sentenceContainer) {\n\t\tthis._elem = document.getElementById('command');\n\t\tthis._sentenceContainer = sentenceContainer;\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自身のHTML要素を返す\n\t * @return {Element} 自身のHTML要素\n\t */\n\telem() {\n\t\treturn this._elem;\n\t}\n\t/**\n\t * 対応する文章コンテナの参照を返す\n\t * @return {SentenceContainer} 対応する文章コンテナ\n\t */\n\tsentenceContainer() {\n\t\treturn this._sentenceContainer;\n\t}\n\t/**\n\t * 操作するファイルリストの参照を返す\n\t * @return {FileList} ファイルリストのインスタンス\n\t */\n\tfileList() {\n\t\treturn this.sentenceContainer().fileList();\n\t}\n\n\t// --判定\n\n\t/**\n\t * コマンドラインがアクティブかどうかを返す\n\t * @return {boolean} true=アクティブ、false=アクティブではない\n\t */\n\tisActive() {\n\t\treturn this.elem().classList.contains('active');\n\t}\n\n\t// --Style\n\n\t/**\n\t * コマンドラインをアクティブにする\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tactive() {\n\t\tthis.elem().classList.add('active');\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドラインを非アクティブにする\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tunActive() {\n\t\tthis.elem().classList.remove('active');\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドラインにフォーカスを与える\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tfocus() {\n\t\tthis.elem().focus();\n\t\treturn this;\n\t}\n\t/**\n\t * ファイルリストのモーダルをコマンドライン用に開く\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tdisplayFileModal() {\n\t\tthis.fileList().$modal().addClass('command-modal').modal();\n\t\t$('.modal-backdrop.fade.in').addClass('none_modal-backdrop'); // モーダルウィンドウ表示時の半透明背景を見えなくする\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドライン用に開いたモーダルを閉じる。ファイル検索がされていてもリセットする\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\thideFileModal() {\n\t\tif (this.fileList().isOpen()) {\n\t\t\t// あらかじめbootstrapより先回りしてstyle適用で非表示にしておかなければ、消える前に一瞬中央表示になってしまう\n\t\t\tthis.fileList().$modal()\n\t\t\t\t.attr('style','display: none;')\n\t\t\t\t.removeClass('command-modal')\n\t\t\t\t.modal('hide');\n\t\t}\n\t\tthis.fileList().resetList();\n\n\t\treturn this;\n\t}\n\n\n\t// --DOM\n\n\t/**\n\t * コマンドラインに値を設定する\n\t * @param {string} text コマンドラインに設定する値\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tval(text) {\n\t\tif (text === undefined) {\n\t\t\treturn this.elem().value;\n\t\t} else {\n\t\t\tthis.elem().value = text;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * コマンドモードを始める\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tstart() {\n\t\tthis.active();\n\t\tthis.sentenceContainer().removeKeydownEventListener();\n\t\tthis.focus().val(':');\n\t\tthis.addKeyupEventListener().addFocusoutEventListener();\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドモードを終了する\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tstop() {\n\t\tthis.unActive();\n\t\tthis.removeKeyupEventListener().removeFocusoutEventListener();\n\t\tthis.sentenceContainer().addKeydownEventListener();\n\t\tthis.hideFileModal();\n\t\treturn this;\n\t}\n\n\t// --イベント\n\n\t/**\n\t * コマンドのinputにkeyupイベントを付加する。重ねがけは無効\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\taddKeyupEventListener() {\n\t\tif (this._keyupArg) return this;\n\t\tthis._keyupArg = this.onKeyup.bind(this); // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n\t\tdocument.addEventListener('keyup',this._keyupArg);\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドのinputへのkeyupイベントを除去する\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tremoveKeyupEventListener() {\n\t\tif (!this._keyupArg) return this;\n\t\tdocument.removeEventListener('keyup',this._keyupArg);\n\t\tthis._keyupArg = null;\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * keyupイベントの前処理を行い、イベントを実行する\n\t */\n\tonKeyup(e) {\n\t\t'use strict';\n\t\tlet keycode;\n\t\tif (document.all) {\n\t\t\t// IE\n\t\t\tkeycode = e.keyCode\n\t\t} else {\n\t\t\t// IE以外\n\t\t\tkeycode = e.which;\n\t\t}\n\t\tif (keycode === 123) { return; } // F12のみブラウザショートカットキー\n\t\tthis.runKeyup(e,keycode);\n\t\t// デフォルトの動作を無効化する\n\t\te.preventDefault();\n\t}\n\t/**\n\t * コマンドのkeyupイベントの実行内容\n\t * @param {Event} e イベントオブジェクト\n\t * @param {number} keycode 押下されたキーのキーコード\n\t */\n\trunKeyup(e,keycode) {\n\t\tif (keycode == 13) {\n\t\t\t// enter\n\t\t\tthis.runCommand();\n\t\t\tthis.stop();\n\t\t\te.stopPropagation(); // 親要素へのイベントの伝播(バブリング)を止める。そうしなければ先にaddeventlistenerをしてしまっているので、documentにまでエンターキーが渡ってしまい改行されてしまう。\n\t\t} else if (keycode == 27 || this.val() == '') {\n\t\t\t// Esc\n\t\t\t// あるいは全文字削除\n\t\t\tthis.stop();\n\t\t\te.stopPropagation();\n\t\t} else {\n\t\t\t// :eなどの後に途中まで引数を打てばファイルの検索ダイアログが出るようにする\n\t\t\tconst command = this.val().split(' ').length > 1 ? this.val().split(' ') : this.val().split('　'); // 全角スペースも区切りとして有効。ただし、半角スペースとの混在は現状不可\n\t\t\tswitch (command[0]) {\n\t\t\t\tcase ':e':\n\t\t\t\tcase ':o':\n\t\t\t\tcase ':open':\n\t\t\t\tcase ':mv':\n\t\t\t\tcase ':delete':\n\t\t\t\tcase ':del':\n\t\t\t\tcase ':d':\n\t\t\t\tcase ':え':\n\t\t\t\tcase ':お':\n\t\t\t\tcase ':おぺｎ':\n\t\t\t\tcase ':ｍｖ':\n\t\t\t\tcase ':でぇて':\n\t\t\t\tcase ':でｌ':\n\t\t\t\tcase ':ｄ':\n\t\t\t\t\t\t if (keycode !== 8 && command[1] && !($('body').hasClass('modal-open'))) {\n\t\t\t\t\t\t\t // モーダルウィンドウを表示する\n\t\t\t\t\t\t\t this.displayFileModal();\n\t\t\t\t\t\t\t this.fileList().filter(command[1]);\n\t\t\t\t\t\t } else if (keycode === 8 && !(command[1])) {\n\t\t\t\t\t\t\t // BSを押した結果、引数がなくなった\n\t\t\t\t\t\t\t this.hideFileModal();\n\t\t\t\t\t\t } else if (command[1] && command[2]) {\n\t\t\t\t\t\t\t // 引数ふたつ目\n\t\t\t\t\t\t\t this.fileList().filter(command[2]);\n\t\t\t\t\t\t } else if (command[1]) {\n\t\t\t\t\t\t\t // 引数ひとつ\n\t\t\t\t\t\t\t this.fileList().filter(command[1]);\n\t\t\t\t\t\t }\n\t\t\t\t\t\t break;\n\t\t\t\tdefault:\n\t\t\t\t\t\t break;\n\t\t\t}\n\t\t}\n\t\te.preventDefault();\n\t}\n\t/**\n\t * コマンドラインからフォーカスが外れた際のイベントを付加する\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\taddFocusoutEventListener() {\n\t\tif (this._focusoutArg) return this;\n\t\tthis._focusoutArg = this.onFocusout.bind(this); // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n\t\tdocument.addEventListener('focusout',this._focusoutArg);\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドラインからフォーカスが外れた際のイベントを除去する\n\t * @return {CommandLine} 自身のインスタンス\n\t */\n\tremoveFocusoutEventListener() {\n\t\tif (!this._focusoutArg) return this;\n\t\tdocument.removeEventListener('focusout',this._focusoutArg);\n\t\tthis._focusoutArg = null;\n\t\treturn this;\n\t}\n\t/**\n\t * コマンドラインからフォーカスが外れた際のイベントの実行内容\n\t * @param {Event} e イベントオブジェクト\n\t */\n\tonFocusout(e) {\n\t\tthis.stop();\n\t}\n\t/**\n\t * コマンドの実行内容\n\t */\n\trunCommand() {\n\t\t// 半角スペースで区切られていないようなら、全角スペースの区切りでも可\n\t\tconst command = this.val().split(' ').length > 1 ? this.val().split(' ') : this.val().split('　');\n\t\tswitch (command[0]) {\n\t\t\tcase ':w':\n\t\t\tcase ':save':\n\t\t\tcase ':s':\n\t\t\tcase ': ｗ':\n\t\t\tcase ':さヴぇ':\n\t\t\tcase ':ｓ':\n\t\t\t\t\t if (command[1]) {\n\t\t\t\t\t\t this.sentenceContainer().saveAsFile(command[1]);\n\t\t\t\t\t } else {\n\t\t\t\t\t\t this.sentenceContainer().saveFile();\n\t\t\t\t\t }\n\t\t\t\t\t break;\n\t\t\tcase ':e':\n\t\t\tcase ':o':\n\t\t\tcase ':open':\n\t\t\tcase ':え':\n\t\t\tcase ':お':\n\t\t\tcase ':おぺｎ':\n\t\t\t\t\t if (command[1]) {\n\t\t\t\t\t\t const files = this.fileList().findFile(commnad[1]);\n\t\t\t\t\t\t files.length > 0 && files[0].open();\n\t\t\t\t\t } else {\n\t\t\t\t\t\t this.sentenceContainer().newFile();\n\t\t\t\t\t }\n\t\t\t\t\t break;\n\t\t\tcase ':jumpr':\n\t\t\tcase ':jumprow':\n\t\t\tcase ':jr':\n\t\t\tcase ':じゅｍｐｒ':\n\t\t\tcase ':じゅｍｐろｗ':\n\t\t\tcase ':ｊｒ':\n\t\t\t\t\t if (command[1]) this.sentenceContainer().cursor().jumpRow(parseInt(command[1]));\n\t\t\t\t\t break;\n\t\t\tcase ':jumpp':\n\t\t\tcase ':jumppage':\n\t\t\tcase ':jp':\n\t\t\tcase ':じゅｍっｐ':\n\t\t\tcase ':じゅｍっぱげ':\n\t\t\tcase ':ｊｐ':\n\t\t\t\t\t if (command[1]) this.sentenceContainer().cursor().jumpPage(parseInt(command[1]));\n\t\t\t\t\t break;\n\t\t\tcase ':new':\n\t\t\tcase ':n':\n\t\t\tcase ':ねｗ':\n\t\t\tcase ':ｎ':\n\t\t\t\t\t this.sentenceContainer().newFile(command[1]);\n\t\t\t\t\t break;\n\t\t\tcase ':delete':\n\t\t\tcase ':del':\n\t\t\tcase ':d':\n\t\t\tcase ':rm':\n\t\t\tcase ':でぇて':\n\t\t\tcase ':でｌ':\n\t\t\tcase ':ｄ':\n\t\t\tcase ':ｒｍ':\n\t\t\t\t\t if (command[1]) {\n\t\t\t\t\t\t this.fileList().deleteFile(command[1]);\n\t\t\t\t\t } else {\n\t\t\t\t\t\t const currentFile = this.fileList().currentFile();\n\t\t\t\t\t\t currentFile && currentFile.delete();\n\t\t\t\t\t }\n\t\t\t\t\t break;\n\t\t\tcase ':next':\n\t\t\tcase ':ねｘｔ':\n\t\t\t\t\t // 次のファイルを開く\n\t\t\t\t\t this.fileList().openNextFile();\n\t\t\t\t\t break;\n\t\t\tcase ':prev':\n\t\t\tcase ':ｐれｖ':\n\t\t\t\t\t // 前のファイルを開く\n\t\t\t\t\t this.fileList().openPrevFile();\n\t\t\t\t\t break;\n\t\t\tcase ':title':\n\t\t\tcase ':name':\n\t\t\tcase ':t':\n\t\t\tcase ':ちｔぇ':\n\t\t\tcase ':なめ':\n\t\t\tcase ':ｔ':\n\t\t\t\t\t if (command[1]) {\n\t\t\t\t\t\t this.sentenceContainer().filename(command[1]);\n\t\t\t\t\t }\n\t\t\t\t\t break;\n\t\t\tcase ':mv':\n\t\t\tcase ':ｍｖ':\n\t\t\t\t\t this.fileList().moveFile(command[1],command[2]);\n\t\t\t\t\t break;\n\t\t\tcase ':mkdir':\n\t\t\tcase ':ｍｋぢｒ':\n\t\t\t\t\t this.fileList().mkdir(command[1]);\n\t\t\t\t\t break;\n\t\t\tcase ':deldir':\n\t\t\tcase ':でｌぢｒ':\n\t\t\t\t\t this.fileList().deleteDirectory(command[1],false);\n\t\t\t\t\t break;\n\t\t\tcase ':noh':\n\t\t\tcase ':のｈ':\n\t\t\t\t\t this.sentenceContainer().stopSearchMode();\n\t\t\t\t\t break;\n\t\t\tcase '::':\n\t\t\t\t\t this.sentenceContainer().cursor().insert(':');\n\t\t\t\t\t break;\n\t\t\tcase ':;':\n\t\t\t\t\t this.sentenceContainer().cursor().insert(';');\n\t\t\t\t\t break;\n\t\t\tcase ':/':\n\t\t\t\t\t  this.sentenceContainer().cursor().insert('/');\n\t\t\t\t\t  break;\n\t\t\tcase ':i':\n\t\t\t\t\t command[1] && this.sentenceContainer().cursor().insert(command[1]);\n\t\t\t\t\t break;\n\t\t\tcase ':bold':\n\t\t\t\t\t this.sentenceContainer().menu().boldButton(!this.sentenceContainer().menu().boldButton());\n\t\t\t\t\t break;\n\t\t\tcase ':italic':\n\t\t\t\t\t this.sentenceContainer().menu().italicButton(!this.sentenceContainer().menu().italicButton());\n\t\t\t\t\t break;\n\t\t\tdefault:\n\t\t\t\t\t break;\n\t\t}\n\t}\n}\n// 段落最後のEOL以外のEOLにカーソルは止まらない(EOLは基本、文字挿入のために存在)\n/**\n * カーソルを表すクラス\n */\nexport class Cursor {\n\t/**\n\t * @param {SentenceContainer} sentenceContainer 対応する文章コンテナのインスタンス\n\t */\n\tconstructor(sentenceContainer) {\n\t\tthis._sentenceContainer = sentenceContainer;\n\t\tthis._cursorLineElem = document.getElementById('cursor_line');\n\t}\n\t/**\n\t * カーソルを初期化して一文字目にカーソルを与える\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tinit() {\n\t\tconst firstChar = this.sentenceContainer().firstChild().firstChild().firstChild();\n\t\tthis._char = firstChar;\n\t\tthis.createCursorLine();\n\t\tthis._char.addCursor().setPosMemory();\n\t\treturn this;\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 対応する文章コンテナのインスタンスを返す\n\t * @return {SentenceContainer} 対応する文章コンテナのインスタンス\n\t */\n\tsentenceContainer() {\n\t\treturn this._sentenceContainer;\n\t}\n\t/**\n\t * カーソルのある文字のインスタンスを返す\n\t * @return {Char} カーソル文字のインスタンス\n\t */\n\tgetChar() {\n\t\treturn this._char;\n\t}\n\t/**\n\t * カーソル行のインスタンスを返す\n\t * @return {Row} カーソル行のインスタンス\n\t */\n\tgetRow() {\n\t\treturn this.getChar().row();\n\t}\n\t/**\n\t * カーソルのある段落のインスタンスを返す\n\t * @return {Paragraph} カーソルのある段落のインスタンス\n\t */\n\tgetParagraph() {\n\t\treturn this.getRow().paragraph();\n\t}\n\t/**\n\t * カーソル位置を記憶するためのDOM要素を返す\n\t * @return {Element} カーソル位置を記憶するための要素\n\t */\n\tcursorLineElem() {\n\t\treturn this._cursorLineElem;\n\t}\n\n\t// --参照操作\n\n\t/**\n\t * @private\n\t * カーソル文字への参照を変更する\n\t * @param {Char} newChar 新しいカーソル文字\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tsetChar(newChar) {\n\t\tthis._char = newChar;\n\t\treturn this;\n\t}\n\t/**\n\t * charにカーソルを与える\n\t * @param {Char} char 新しいカーソル文字\n\t * @param {boolean} [bShift] シフトキーが押された状態でカーソルが与えられたかどうか。trueなら選択範囲を拡張する。falseなら解除する。省略(undefined)すると選択範囲には影響しない\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\taddCursor(char,bShift) {\n\t\tif (this.getChar()) {\n\t\t\tthis.memorySelection();\n\t\t\tthis.getChar().removeClass('cursor');\n\t\t}\n\t\tchar.addClass('cursor');\n\t\tthis.setChar(char);\n\n\t\t// 前の文字に装飾があれば、そのボタンをオンにする\n\t\tconst prevChar = char.prevCharOnParagraph();\n\t\tconst menu = this.sentenceContainer().menu();\n\t\tmenu.colorButton(prevChar ? prevChar.color() : 'black');\n\t\tmenu.boldButton(prevChar ? prevChar.isBold() : false);\n\t\tmenu.italicButton(prevChar ? prevChar.isItalic() : false);\n\t\tmenu.fontSizeInput(prevChar ? prevChar.fontSize() : 'auto');\n\n\t\t// シフトキーが押されながらなら、選択範囲を広げる\n\t\tthis.extendSelection(bShift);\n\t\tthis.sentenceContainer().printInfo();\n\t\treturn this;\n\t}\n\n\t// --Status\n\n\t/**\n\t * カーソル位置を記憶するDOM要素から、記憶されたインデックスを返す\n\t * @return {number} 記憶されたカーソル位置のインデックス。記憶された位置が見つからなければ-1\n\t */\n\tgetPosMemory() {\n\t\tconst eCharPoses = this.cursorLineElem().children;\n\t\tfor (let i = 0,eCharPos; eCharPos = eCharPoses[i]; i++) {\n\t\t\tif (eCharPos.classList.contains('cursor-pos-memory'))\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1;\n\t}\n\t/**\n\t * カーソル位置を記憶するDOM要素に位置を記憶する\n\t * @param {number} index 記憶する位置のインデックス\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tsetPosMemory(index) {\n\t\tconst oldPos = this.getPosMemory();\n\t\tif (index === oldPos) {\n\t\t\treturn this;\n\t\t}\n\t\tconst eCharPoses = this.cursorLineElem().children;\n\t\tif (eCharPoses[oldPos]) eCharPoses[oldPos].classList.remove('cursor-pos-memory');\n\t\tconst maxIndex = eCharPoses.length - 1;\n\t\tif (index > maxIndex) index = maxIndex; // char-posの最大数を超える数値は覚えられない\n\t\teCharPoses[index].classList.add('cursor-pos-memory');\n\t\treturn this;\n\t}\n\t/**\n\t * 現在行のうち何文字目にカーソルがあるかを返す。行頭で１，EOLでは行の総文字数＋１\n\t * @return {number} カーソルの位置。入力の始まる位置のインデックスと同じ\n\t */\n\tcurrentCharPos() {\n\t\treturn this.getChar().index() + 1;\n\t}\n\t/**\n\t * 現在行の総文字数を返す\n\t * @return {number} 現在行の総文字数\n\t */\n\tstrLenOfRow() {\n\t\treturn this.getRow().charLen();\n\t}\n\t/**\n\t * カーソル行がそのページで何行目かを返す\n\t * @return {number} カーソル行がページ内で何行目か。改ページが見つからなければ-1\n\t */\n\tcurrentRowPos() {\n\t\tfor (let row = this.getRow(),cnt = 1; row; row = row.prev(),cnt++) {\n\t\t\tif (row.isPageBreak()) return cnt;\n\t\t}\n\t\treturn -1;\n\t}\n\t/**\n\t * 現在ページの総行数を返す。最終ページのみ設定行数と異なる\n\t * @return {number} 現在ページの総行数。ページの終わりが見つからなければ-1\n\t */\n\trowLenOnPage() {\n\t\tfor (let row = this.getRow(),cnt = this.currentRowPos(); row; row = row.next(),cnt++) {\n\t\t\tif (row.isPageLast()) return cnt;\n\t\t}\n\t\treturn -1;\n\t}\n\t// 現在ページ\n\t/**\n\t * 現在ページを返す\n\t * @return {number} 現在ページ\n\t */\n\tcurrentPage() {\n\t\tlet cnt = 0;\n\t\tfor (let row = this.getRow(); row; row = row.prev()) {\n\t\t\tif (row.isPageBreak()) cnt++;\n\t\t}\n\t\treturn cnt;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * カーソル位置を記憶するDOM要素を文章コンテナの標準文字数に合わせて構築する。主にカーソルの左右移動の際に、そのカーソルが何文字目の位置から移動してきたのかを記憶するために用いる\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tcreateCursorLine() {\n\t\tconst eCursorLine = document.getElementById('cursor_line');\n\t\tconst eOldCharPoses = eCursorLine.children;\n\t\tfor (let eOldCharPos; eOldCharPos = eOldCharPoses[0];) {\n\t\t\teCursorLine.removeChild(eOldCharPos);\n\t\t}\n\t\teCursorLine.appendChild(Util.createCharPosElement(this.sentenceContainer().strLenOnRow()));\n\t\treturn this;\n\t}\n\n\t/**\n\t * カーソル位置に文字を挿入する\n\t * @param {string} str 挿入する文字列\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tinsert(str) {\n\t\tconst cursorChar = this.getChar();\n\t\tfor (let char of str) {\n\t\t\tconst newChar = new Char(cursorChar.createData(char));\n\t\t\tcursorChar.before(newChar);\n\t\t}\n\n\t\tcursorChar.paragraph().cordinate().checkKinsoku();\n\t\tthis.getChar().setPosMemory(); // cordinate()によってカーソル文字が変わっている可能性があるため、cursorCharは使えず取得しなおし\n\t\tthis.sentenceContainer().changeDisplay().breakPage().printInfo();\n\t\treturn this;\n\t}\n\t/**\n\t * カーソル位置でバックスペースを押下した時の処理を行う\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tbackSpace() {\n\t\tconst cursorChar = this.getChar();\n\t\tif (!cursorChar.prev()) return this; // 文章先頭からのバックスペースは何もしない\n\n\t\t// 段落先頭からのバックスペースでは、前の行に段落をつなげる\n\t\tif (cursorChar.isFirst() && cursorChar.row().isFirst()) {\n\t\t\tconst cursorParagraph = cursorChar.row().paragraph();\n\t\t\tconst newParagraph = cursorParagraph.prev(); // 融合先の段落\n\t\t\tfor (let moveRow of cursorParagraph.rows()) {\n\t\t\t\tmoveRow.moveLastBefore();\n\t\t\t}\n\t\t\tnewParagraph.cordinate().checkKinsoku();\n\t\t\t// HACK: 最終行が表示されている状態でbackSpace()すると、カーソル行が表示されているために表示開始行が変わらず、行数が足りているにも関わらず表示行数が少なくなってしまう\n\t\t\tthis.sentenceContainer().changeDisplay().breakPage().printInfo();\n\t\t\treturn this;\n\t\t}\n\n\t\t//  段落先頭以外からのバックスペース\n\t\t//  カーソルの前の位置にある文字を削除する(行頭なら行をまたいで前の文字)\n\t\tif (!(cursorChar.isFirst() && cursorChar.row().isFirst())) {\n\t\t\tcursorChar.prevChar().delete();\n\t\t\tthis.sentenceContainer().changeDisplay().breakPage().printInfo();\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * カーソル位置で改行した時の処理を行う\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tlineBreak() {\n\t\t// 段落の分割\n\t\tconst cursorParagraph = this.getParagraph().divide(this.getChar());\n\t\t// 新しくできた段落の最初の文字にカーソルを移動する\n\t\tconst newParagraph = cursorParagraph.next(); // divide()で新しく挿入された段落\n\t\tnewParagraph.firstChild().firstChild().addCursor().setPosMemory();\n\t\t// HACK:changeDisplay()を二回続けている:新しい段落がdisplayされて表示されるので、最終表示行から改行した場合にカーソル行が表示から外れる(最終表示行とカーソル行が等しいため、表示開始行を変えずに表示)\n\t\t// かといって新しい段落を非表示にしてから挿入すると、表示行が文章コンテナを埋めていない状態の時に改行すると表示開始行が毎回ひとつ後ろにずれる(カーソル行が最終表示行より後ろにあるため)という現象が起こるので、行数が十分にあっても表示行が不足してしまう\n\t\tthis.sentenceContainer().changeDisplay().changeDisplay().breakPage().printInfo();\n\t\treturn this;\n\t}\n\n\t// --カーソル操作\n\n\t// カーソル移動\n\t/**\n\t * カーソルを下方向に一つ動かす。ひとつ下が段落途中のEOLなら、さらにその次に動かす\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tmoveNext(bShift) {\n\t\tconst nextChar = this.getChar().next();\n\t\tif (!nextChar) return this;\n\t\tnextChar.slideNextCursor().addCursor(bShift).setPosMemory();\n\t\tthis.sentenceContainer().changeDisplay();\n\t\treturn this;\n\t}\n\t/**\n\t * カーソルを上方向に一つ動かす。段落途中の行頭なら、前の行の最終文字に動かす\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tmovePrev(bShift) {\n\t\tconst prevChar = this.getChar().prev();\n\t\tif (!prevChar) return this;\n\t\tprevChar.slidePrevCursor().addCursor(bShift).setPosMemory();\n\t\tthis.sentenceContainer().changeDisplay();\n\t\treturn this;\n\t}\n\t/**\n\t * カーソルを右方向に一つ動かす。一つ右が段落途中のEOLなら、移動先の前の文字にさらに動かす\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tmoveRight(bShift) {\n\t\tconst prevRow = this.getChar().row().prev();\n\t\tthis.moveRow(prevRow,bShift);\n\t\tthis.sentenceContainer().changeDisplay();\n\t\treturn this;\n\t}\n\t/**\n\t * カーソルを左方向に一つ動かす。一つ左が段落途中のEOLなら、移動先の前の文字にさらに動かす\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalseを指定する\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tmoveLeft(bShift) {\n\t\tconst nextRow = this.getChar().row().next();\n\t\tthis.moveRow(nextRow,bShift);\n\t\tthis.sentenceContainer().changeDisplay();\n\t\treturn this;\n\t}\n\t// 引数で指定された行にカーソルを移動する\n\t/**\n\t * rowにカーソルを移動する。移動先の文字は記憶されたカーソル位置のインデックスの文字で、それがEOLならその前の文字に移動する\n\t * @param {Row} row 移動先の行のインスタンス\n\t * @param {boolean} bShift シフトキーが押されているかどうか。trueなら、選択範囲を拡張する\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tmoveRow(row,bShift) {\n\t\tconst index = this.getPosMemory();\n\t\tif (!row) return this;\n\t\tconst char = row.children(index); // 同じインデックスの文字がprevRowに存在しなければ、children()内でlastChild()が選択される\n\t\tchar.slidePrevCursor().addCursor(bShift);\n\t\treturn this;\n\t}\n\t/**\n\t * num行目の最初の文字にカーソルを移動する。移動先の行が中央となるように表示される\n\t * @param {number} num 移動先が何行目か。１から始まる。ページ内ではなく、文章全体で数える。０位下が渡されると最初の行に移動される\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tjumpRow(num) {\n\t\tif (typeof num !== 'number') return this;\n\t\tconst row = this.sentenceContainer().row(num);\n\t\tif (row) {\n\t\t\trow.firstChild().addCursor().setPosMemory();\n\t\t\tthis.sentenceContainer().changeDisplay('center');\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * numページ目の一行目最初の文字にカーソルが移動する。その行から始まるように表示される\n\t * @param {number} num 何ページ目に移動するか\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tjumpPage(num) {\n\t\tif (typeof num !== 'number') return this;\n\t\tconst row = this.sentenceContainer().pageRow(num);\n\t\tif (row) {\n\t\t\trow.firstChild().addCursor().setPosMemory();\n\t\t\tthis.sentenceContainer().changeDisplay('right');\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 次の検索語句にカーソルを移動する。見つからなければ何もしない\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tnextSearch() {\n\t\tconst next = this.nextSearchChar();\n\t\tif (!next) { return this; }\n\t\tnext.addCursor().setPosMemory();\n\t\tthis.sentenceContainer().changeDisplay();\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * 次の検索語句を返す\n\t * @return {Char} 次の検索語句の１文字目のインスタンス。見つからなければnull\n\t */\n\tnextSearchChar() {\n\t\tfor (let char = this.getChar().nextChar() || this.sentenceContainer().firstChar(); !char.is(this.getChar()); char = char.nextChar() || this.sentenceContainer().firstChar()) {\n\t\t\tif (char.hasClass('search-label')) return char;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * 前の検索語句にカーソルを移動する。見つからなければ何もしない\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tprevSearch() {\n\t\tconst prev = this.prevSearchChar();\n\t\tif (!prev) { return this; }\n\t\tprev.addCursor().setPosMemory();\n\t\tthis.sentenceContainer().changeDisplay();\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * 前の検索語句を返す\n\t * @return {Char} 前の検索語句の１文字目のインスタンス。見つからなければnull\n\t */\n\tprevSearchChar() {\n\t\tfor (let char = this.getChar().prevChar() || this.sentenceContainer().lastChar(); !char.is(this.getChar()); char = char.prevChar() || this.sentenceContainer().lastChar()) {\n\t\t\tif (char.hasClass('search-label')) return char;\n\t\t}\n\t\treturn null;\n\t}\n\t// カーソル移動前に、selectionにカーソル位置を覚えさせる\n\t/**\n\t * @private\n\t * selectionにカーソル位置を覚えさせる\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\tmemorySelection() {\n\t\tconst selection = getSelection();\n\t\tif (selection.rangeCount === 0) {\n\t\t\tselection.selectAllChildren(this.getChar().elem());\n\t\t}\n\t\treturn this;\n\t}\n\t// 選択範囲を動かす(カーソル移動時)\n\t/**\n\t * bShiftがtrueなら選択範囲を拡張する\n\t * @param {boolean} [opt_bShift] true=選択範囲を拡張する、false=選択範囲を解除する。省略されると何もしない\n\t * @return {Cursor} 自身のインスタンス\n\t */\n\textendSelection(opt_bShift) {\n\t\tconst selection = getSelection();\n\t\tif (opt_bShift) {\n\t\t\t// シフトキーが押されていれば、カーソルのオフセット０までselectionを拡張\n\t\t\tselection.extend(this.getChar().elem(),0);\n\t\t} else if (opt_bShift === false) {\n\t\t\t// シフトキー無しでカーソルが動いたならselectionを解除する(省略でなく、明確にfalseが渡された場合)\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n// 文書を構成する各クラスの基底クラス\n/**\n * 各クラスの基底クラス\n */\nexport class AbstractHierarchy {\n\t/**\n\t * @param {Element} elem 自身のDOM要素\n\t */\n\tconstructor(elem) {\n\t\tthis._elem = elem;\n\t\tthis._parent = null;\n\t\tthis._next = null;\n\t\tthis._prev = null;\n\t\tthis._children = [];\n\t\tthis._width = null;\n\t\tthis._height = null;\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自身のDOM要素を返す\n\t * @return {Element} 自身のDOM要素\n\t */\n\telem() {\n\t\treturn this._elem;\n\t}\n\t/**\n\t * 自身の親を設定する。引数を省略すると自身の親を取得する\n\t * @param {AbstractHierarchy} [opt_newParent] 新たに設定する親\n\t * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)\n\t */\n\tparent(opt_newParent) {\n\t\tif (opt_newParent === undefined) { // nullが渡されることもあるのでundefinedと厳密に比較\n\t\t\treturn this._parent;\n\t\t} else {\n\t\t\tthis._parent = opt_newParent;;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 自身の次にある同列のインスタンスを新たに設定する。引数を省略すると自身の次にある同列のインスタンスを取得する\n\t * @param {AbstractHierarchy} [opt_newNext] 新たに設定するインスタンス\n\t * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の次にある同列のインスタンス(引数を省略した場合)\n\t */\n\tnext(opt_newNext) {\n\t\tif (opt_newNext === undefined) {\n\t\t\treturn this._next;\n\t\t} else {\n\t\t\tthis._next = opt_newNext;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 自身の前にある同列のインスタンスを新たに設定する。引数を省略すると自身の前にある同列のインスタンスを取得する\n\t * @param {AbstractHierarchy} [opt_newPrev] 新たに設定するインスタンス\n\t * @return {AbstractHierarchy} 自身のインスタンス(引数を渡した場合)あるいは自身の前にある同列のインスタンス(引数を省略した場合)\n\t */\n\tprev(opt_newPrev) {\n\t\tif (opt_newPrev === undefined) {\n\t\t\treturn this._prev;\n\t\t} else {\n\t\t\tthis._prev = opt_newPrev;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 指定されたインデックスの子を取得する。引数省略で自身の子を配列で取得する\n\t * @param {number} [opt_index] 取得する子のインデックス。範囲外ならundefinedが返される\n\t * @return {AbstractHierarchy} indexで指定された子(引数を渡した場合)あるいは自身の子の配列(引数を省略した場合)\n\t */\n\tchildren(opt_index) {\n\t\tif (opt_index === undefined) {\n\t\t\treturn Util.copyArray(this._children);\n\t\t} else {\n\t\t\treturn this._children[opt_index];\n\t\t}\n\t}\n\t/**\n\t * 自身の最初の子を取得する\n\t * @return {AbstractHierarchy} 自身の最初の子。子がいなければnull\n\t */\n\tfirstChild() {\n\t\tif (this.hasChild()) {\n\t\t\treturn this._children[0];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t/**\n\t * 自身の最後の子を取得する\n\t * @return {AbstractHierarchy} 自身の最後の子。子がいなければnull\n\t */\n\tlastChild() {\n\t\tif (this.hasChild()) {\n\t\t\treturn this._children[this.childLength()-1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// --判定\n\n\t/**\n\t * objが自身と同一のオブジェクトかどうか\n\t * @param {AbstractHierarchy} obj 比較するオブジェクト\n\t * @return {boolean} objが自身と同一ならtrue、そうでなければfalse\n\t */\n\tis(obj) {\n\t\treturn obj === this;\n\t}\n\t/**\n\t * 自身がクラスにclassNameを持っているかどうかを返す\n\t * @param {string} className 判定するクラス名\n\t * @return {boolean} 自身がclassNameを付与されていればtrue、そうでなければfalse\n\t */\n\thasClass(className) {\n\t\treturn this._elem.classList.contains(className);\n\t}\n\t/**\n\t * 自身が子を持っているかどうかを返す\n\t * @return {boolean} 自身が子を持っていればtrue、そうでなければfalse\n\t */\n\thasChild() {\n\t\treturn this._children.length > 0;\n\t}\n\t/**\n\t * 自身が親にとって唯一の子であるかどうかを返す\n\t * @return {boolean} 自身が親にとって唯一の子であればtrue、そうでなければfalse\n\t */\n\tisOnlyChild() {\n\t\treturn this.parent().childLength() === 1\n\t\t\t&& this.parent().children(0) === this;\n\t}\n\t/**\n\t * 自身が空であるかどうかを返す\n\t * @return {boolean} 自身が子を持っていなければtrue、そうでなければfalse\n\t */\n\tisEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\t/**\n\t * 同一の親を持つ次の兄弟が存在するかどうかを返す\n\t * @return {boolean} 自身の次のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse\n\t */\n\thasNextSibling() {\n\t\tif (this.next()) {\n\t\t\treturn this.next().parent() === this.parent();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t/**\n\t * 同一の親を持つ前の兄弟が存在するかどうかを返す\n\t * @return {boolean} 自身の前のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse\n\t */\n\thasPrevSibling() {\n\t\tif (this.prev()) {\n\t\t\treturn this.prev().parent() === this.parent();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t/**\n\t * 自身が親の第一の子であるかどうかを返す\n\t * @return {boolean} 自身の前のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse\n\t */\n\tisFirst() {\n\t\treturn !this.hasPrevSibling();\n\t}\n\t/**\n\t * 自身が親の最後の子であるかどうかを返す。Charの場合は、EOLの前の文字とEOLの２つでtrueを返す\n\t * @return {boolean} 自身の次のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse\n\t */\n\tisLast() {\n\t\treturn !this.hasNextSibling();\n\t}\n\n\t// --参照操作\n\n\t/**\n\t * childを自身の子の最後に加える\n\t * @param {AbstractHierarchy} child 自身の子の最後に加えるインスタンス\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tpushChild(child) {\n\t\tthis._children.push(child);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の子のpos番目にchildを加える\n\t * @param {number} pos childを加える位置のインデックス(０始まり)\n\t * @param {AbstractHierarchy} child 子に加えるインスタンス\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tinsertChild(pos,child) {\n\t\t// 配列の範囲外の数値を渡されたらpushに切り替える\n\t\tif (pos < 0 || pos >= this._children.length) {\n\t\t\treturn this.pushChild(child);\n\t\t}\n\t\tthis._children.splice(pos,0,child);\n\t\treturn this;\n\t}\n\t/**\n\t * childを自身の子から削除する\n\t * @param {AbstractHierarchy} child 自身の子から削除するインスタンス\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tdeleteChild(child) {\n\t\tconst pos = child.index();\n\t\tthis._children.splice(pos,1);\n\t\tchild.parent(null);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の子のoldChildを子から削除し、新たにnewChildを同じ位置に加える\n\t * @param {AbstractHierarchy} oldChild 入替えられる自身の子のインスタンス\n\t * @param {AbstractHierarchy} newChild 入れ替える自身の子でなかったインスタンス\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\treplaceChild(oldChild,newChild) {\n\t\tconst pos = oldChild.index();\n\t\tthis._children.splice(pos,1,newChild);\n\t\treturn this;\n\t}\n\t/**\n\t * この参照を自身から切り離して空にする。DOM要素には影響しない\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\temptyChild() {\n\t\tthis._children = [];\n\t\treturn this;\n\t}\n\n\t// --Status\n\n\t/**\n\t * 自身が表す文字列を返す\n\t * @return {string} 自身の内部にある文字列\n\t */\n\ttext() {\n\t\treturn this.elem().textContent;\n\t}\n\t/**\n\t * 自身が表す文字列の文字数を返す\n\t * @return {number} 自身の内部にある文字列の文字数\n\t */\n\tlength() {\n\t\treturn this.text().length;\n\t}\n\t/**\n\t * 同一の親を持つ兄弟の中でのインデックスを返す\n\t * @return {number} 同一の親を持つ兄弟の中での０始まりのインデックス\n\t */\n\tindex() {\n\t\tconst siblings = this.parent().children();\n\t\treturn siblings.indexOf(this);\n\t}\n\t/**\n\t * 自身の子の数を返す\n\t * @return {number} 自身の子の数\n\t */\n\tchildLength() {\n\t\treturn this._children.length; // Rowではchildren()の意味が違うので、混同しないようchildren()をさけて直接プロパティにアクセスする\n\t}\n\n\t// --Style\n\n\t/**\n\t * 自身の持つクラスすべてをひとつの文字列で返す\n\t * @return {string} 自身の持つすべてのクラス名\n\t */\n\tclassName() {\n\t\treturn this._elem.className || ''; // クラスがひとつもなければ空文字\n\t}\n\t/**\n\t * 自身のクラスにclassNameを加える\n\t * @param {string} className 自身のクラスに加えるクラス名\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\taddClass(className) {\n\t\tthis._elem.classList.add(className);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身のクラスからclassNameを除去する\n\t * @param {string} className 自身のクラスから除去するクラス名\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tremoveClass(className) {\n\t\tthis._elem.classList.remove(className);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の持つすべての子のクラスからclassNameを除去する\n\t * @param {string} className 除去するクラス名\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tremoveClassFromAllChild(className) {\n\t\tfor (let child of this._children) {\n\t\t\tchild.removeClass(className);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の高さを取得する\n\t * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n\t * @return {number} 自身の高さ\n\t */\n\theight(opt_useCache) {\n\t\t// elementが不可視状態にあれば長さが０になったり、ブラウザごとに取得手段に違いがあったり直接指定されているstyleとcssでの指定の違い、cssでの指定が'auto'になっていると文字列が返ってきたりと\n\t\t// javascriptでのcss値の取得は複雑で困難であることから、jQueryの使用が適していると判断した(不可視の要素は一時的に可視状態にしてから取得するので、レンダリングが発生する可能性は高い)\n\t\t// 読み込み時には時間がかかるが、キャッシュすることで行移動などでは最低限の計算になると期待\n\t\tif (opt_useCache == undefined) opt_useCache = true;\n\t\tif (opt_useCache && this._height) {\n\t\t\treturn this._height;\n\t\t}\n\t\treturn this._height = parseInt($(this.elem()).css('height'));\n\t}\n\t/**\n\t * 自身の幅を取得する\n\t * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n\t * @return {number} 自身の幅\n\t */\n\twidth(opt_useCache) {\n\t\tif (opt_useCache == undefined) opt_useCache = true;\n\t\tif (opt_useCache && this._width) {\n\t\t\treturn this._width;\n\t\t}\n\t\treturn this._width = parseInt($(this.elem()).css('width'));\n\t}\n\t/**\n\t * 要素左上のX座標を返す\n\t * @return {number} 要素左上のX座標\n\t */\n\tx() {\n\t\treturn this.elem().getBoundingClientRect().left + window.pageXOffset;\n\t}\n\t/**\n\t * 要素左上のY座標を返す\n\t * @return {number} 要素左上のY座標\n\t */\n\ty() {\n\t\treturn this.elem().getBoundingClientRect().top + window.pageYOffset;\n\t}\n\t/**\n\t * ある点からオブジェクトの中心点までの距離を計算する\n\t * @param {number} x 基準点のX座標\n\t * @param {number} y 基準点のY座標\n\t * @return {number} 計算された距離のピクセル数\n\t */\n\tcomputeDistanceFromPoint(x,y) {\n\t\tconst ownPos = this.computeCenterPoint();\n\t\treturn Util.computeDistanceP2P(x,y,ownPos.x,ownPos.y);\n\t}\n\t/**\n\t * 中心点の座標を返す\n\t * @return {object} プロバティxにX座標、プロパティyにY座標の入ったオブジェクト\n\t */\n\tcomputeCenterPoint() {\n\t\treturn {\n\t\t\tx: this.x() + this.width()/2,\n\t\t\ty: this.y() + this.height()/2\n\t\t}\n\t}\n\n\t// --DOM操作関係\n\n\t/**\n\t * 内部のエレメントを空にする。childrenとして持っていない要素(EOLなど)は削除されない\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\temptyElem() {\n\t\tfor (let child of this._children) {\n\t\t\tthis.elem().removeChild(child.elem());\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 内部のエレメントに加え、内部の参照も空にする\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tempty() {\n\t\tthis.emptyElem();\n\t\tthis.emptyChild();\n\t\treturn this;\n\t}\n\n\t// --イベント\n\n\t/**\n\t * 自身にkeydownイベントリスナーを付加する。重ねがけは無効\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\taddKeydownEventListener() {\n\t\tif (this._keydownArg) return this;\n\t\tthis._keydownArg = this.onKeydown.bind(this); // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n\t\tdocument.addEventListener('keydown',this._keydownArg);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身のkeydownイベントリスナーを除去する\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tremoveKeydownEventListener() {\n\t\tif (!this._keydownArg) return this;\n\t\tdocument.removeEventListener('keydown',this._keydownArg);\n\t\tthis._keydownArg = null;\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * keydownイベントの前処理を行い、イベントを実行する\n\t * @param {object} e イベントオブジェクト\n\t */\n\tonKeydown(e) {\n\t\t'use strict';\n\t\tlet keycode;\n\t\tif (document.all) {\n\t\t\t// IE\n\t\t\tkeycode = e.keyCode\n\t\t} else {\n\t\t\t// IE以外\n\t\t\tkeycode = e.which;\n\t\t}\n\t\tif (keycode === 123) { return; } // F12のみブラウザショートカットキー\n\t\tthis.runKeydown(e,keycode);\n\t\t// デフォルトの動作を無効化する\n\t\te.preventDefault();\n\t}\n\t/**\n\t * @private\n\t * keydownイベントの実行内容。onkeydown()内で使用するために定義しておくが、内容はサブクラスで上書きする\n\t * @param {object} e イベントオブジェクト\n\t * @param {number} keycode 押下されたキーのキーコード\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\trunKeydown(e,keycode) {\n\t\treturn this;\n\t}\n\t/**\n\t * 自身にクリックイベントを付加する。重ねがけは無効\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\taddClickEventListener() {\n\t\tif (this._clickArg) return this;\n\t\tthis._clickArg = this.onClick.bind(this); // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n\t\tthis.elem().addEventListener('click',this._clickArg);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身のクリックイベントを除去する\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tremoveClickEventListener() {\n\t\tif (!this._clickArg) return this;\n\t\tthis.elem().removeEventListener('click',this._clickArg);\n\t\tthis._clickArg = null;\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * クリックイベントを実行する\n\t * @param {Event} e イベントオブジェクト\n\t */\n\tonClick(e) {\n\t\tthis.runClick(e);\n\t}\n\t/**\n\t * @private\n\t * clickイベントの実行内容。onClick()内で使用するために定義しておくが、内容はサブクラスで上書きする\n\t * @param {object} e イベントオブジェクト\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\trunClick(e) {\n\t\treturn this;\n\t}\n\t/**\n\t * 自身にホイールイベントを付加する。重ねがけは無効\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\taddWheelEventListener() {\n\t\tif (this._wheelArg) return this;\n\t\tthis._wheelArg = this.onWheel.bind(this); // removeするときと引数を同一にするためプロパティに保持する(それぞれでbindすると異なる参照になる？)\n\t\tconst selector = '#' + this.elem().id;\n\t\t$('body').on('mousewheel',selector,this._wheelArg)\n\t\t\treturn this;\n\t}\n\t/**\n\t * 自身のホイールイベントを除去する\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\tremoveWheelEventListener() {\n\t\tif (!this._wheelArg) return this;\n\t\tconst selector = '#' + this.elem().id;\n\t\t$('body').off('mousewheel',selector,this._wheelArg);\n\t\tthis._wheelArg = null;\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * keydownイベントの前処理を行い、イベントを実行する\n\t * @param {object} e イベントオブジェクト\n\t * @param {number} delta ホイールの移動量\n\t * @param {number} deltaX\n\t * @param {number} deltaY\n\t */\n\tonWheel(e,delta,deltaX,deltaY) {\n\t\tthis.runWheel(e,delta > 0);\n\t}\n\t// onWheel()内で使用するために定義しておくが、内容はサブクラスで上書きする\n\t/**\n\t * @private\n\t * ホイールイベントの実行内容。onWheel()内で使用するために定義しておくが、内容はサブクラスで上書きする\n\t * @param {object} e イベントオブジェクト\n\t * @param {boolean} isUp ホイールが上方向に動いたならtrue、そうでなければfalse\n\t * @return {AbstractHierarchy} 自身のインスタンス\n\t */\n\trunWheel(e,isUp) {\n\t\treturn this;\n\t}\n}\n\n/**\n * 文字を表すクラス\n */\nexport class Char extends AbstractHierarchy {\n\t/**\n\t * @param {object} data 文字を表すオブジェクト<br>\n\t * 例\n\t * <pre>\n\t * <code>\n\t *\t\t{\n\t *\t\t\t\"char\":\"あ\",\n\t *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t *\t\t\t\"fontSize\": \"auto\"\n\t *\t\t}\n\t *\t</code>\n\t *\t</pre>\n\t */\n\tconstructor(data) {\n\t\tsuper(data.char ? Util.createCharElement(data) : data); // dataオブジェクトにcharプロパティがなければEOLからの呼び出しで、dataにはエレメントが入っている\n\t\tdata.fontSize && (this._fontSize = data.fontSize);\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自身の親であるRowインスタンスをnewRowに設定する、あるいは引数省略で取得する\n\t * @param {Row} [opt_newRow] 新たに設定する行のインスタンス\n\t * @return {Char Row} 自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)\n\t */\n\trow(opt_newRow) {\n\t\treturn this.parent(opt_newRow);\n\t}\n\t/**\n\t * 自身の属する段落のインスタンスを取得する\n\t * @return {Paragraph} 自身の属する段落のインスタンス\n\t */\n\tparagraph() {\n\t\treturn this.row().paragraph();\n\t}\n\t/**\n\t * 自身の属する文章コンテナのインスタンスを取得する\n\t * @return {SentenceContainer} 自身の属する文章コンテナのインスタンス\n\t */\n\tsentenceContainer() {\n\t\treturn this.paragraph().container();\n\t}\n\t/**\n\t * カーソルのインスタンスを取得する\n\t * @return {Cursor} 自身の属する文章コンテナの持つカーソルのインスタンス\n\t */\n\tcursor() {\n\t\treturn this.row().paragraph().container().cursor();\n\t}\n\t// Cursor用\n\t/**\n\t * カーソル文字として自身が不適なら自身の次のCharを返す。自身が段落途中のEOLならその次の文字となる\n\t * @return {Char} 自身も含めた自身以降でカーソル文字として適したインスタンス\n\t */\n\tslideNextCursor() {\n\t\t// 段落最後のEOL以外のEOLには止まらない\n\t\t// 段落途中のEOLならその次の文字に変更する\n\t\tif (this.isEOL() && this.row().hasNextSibling()) {\n\t\t\treturn this.next();\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * カーソル文字として自身が不適なら自身の前のCharを返す。自身が段落途中のEOLならその前の文字となる\n\t * @return {Char} 自身も含めた自身以前でカーソル文字として適したインスタンス\n\t */\n\tslidePrevCursor() {\n\t\t// 段落最後のEOL以外のEOLには止まらない\n\t\t// 段落途中のEOLならその前の文字に変更する\n\t\tif (this.isEOL() && this.row().hasNextSibling()) {\n\t\t\treturn this.prev();\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 自身の次の文字を表すCharインスタンスを返す。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返す\n\t * @return {Char} 自身の次のCharインスタンス。見つからなければnull\n\t */\n\tnextChar() {\n\t\tif (this.next() && this.next().isEOL()) {\n\t\t\treturn this.next().nextChar();\n\t\t} else {\n\t\t\treturn this.next();\n\t\t}\n\t}\n\t/**\n\t * 自身の前の文字を表すCharインスタンスを返す。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返す\n\t * @return {Char} 自身の前のCharインスタンス。見つからなければnull\n\t */\n\tprevChar() {\n\t\tif (this.prev() && this.prev().isEOL()) {\n\t\t\treturn this.prev().prevChar();\n\t\t} else {\n\t\t\treturn this.prev();\n\t\t}\n\t}\n\t/**\n\t * 同一段落内での次の文字を返す。EOLは含まない\n\t * @return {Char} 同一段落内での次の文字のインスタンス。なければnull\n\t */\n\tnextCharOnParagraph() {\n\t\tif (this.hasNextCharOnParagraph()) {\n\t\t\treturn this.nextChar();\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * 同一段落内での前の文字を返す。EOLは含まない\n\t * @return {Char} 同一段落内での前の文字のインスタンス。なければnull\n\t */\n\tprevCharOnParagraph() {\n\t\tif (this.hasPrevCharOnParagraph()) {\n\t\t\treturn this.prevChar();\n\t\t}\n\t\treturn null;\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身がEOLであるかどうかを返す\n\t * @return {boolean} オーバーライドされない限り常にfalse\n\t */\n\tisEOL() {\n\t\treturn false;\n\t}\n\t/**\n\t * 自身にカーソルがあたっているかどうかを返す\n\t * @return {boolean} 自身にカーソルがあればtrue、そうでなければfalse\n\t */\n\thasCursor() {\n\t\treturn this.hasClass('cursor');\n\t}\n\t/**\n\t * 自身が可視化されているかどうかを返す\n\t * @return {boolean} 自身が可視化されていればtrue、そうでなければfalse\n\t */\n\tisDisplay() {\n\t\treturn this.hasClass('display');\n\t}\n\t/**\n\t * 自身が同一行内で最終文字であるかどうかを返す。EOLは含まない(次の文字がEOLならfalse,自身がEOLの場合もfalse)\n\t * @return {boolean} 同一行内で最終文字でなければtrue、最終文字ならfalse。\n\t */\n\thasNextSibling() {\n\t\treturn !(this._isEOL || this.next().isEOL());\n\t}\n\t/**\n\t * 同一段落内で次のCharがあるかどうかを返す\n\t * @return {boolean} 同一段落内で次のCharがあればtrue、そうでなければfalse\n\t */\n\thasNextCharOnParagraph() {\n\t\treturn this.nextChar() && this.nextChar().paragraph() === this.paragraph();\n\t}\n\t/**\n\t * 同一段落内で前のCharがあるかどうかを返す\n\t * @return {boolean} 同一段落内で前のCharがあればtrue、そうでなければfalse\n\t */\n\thasPrevCharOnParagraph() {\n\t\treturn this.prevChar() && this.prevChar().paragraph() === this.paragraph();\n\t}\n\t/**\n\t * この要素がrangeの中にあるかどうかを返す\n\t * @param {Range} range 判定の基準となる範囲を表すRange\n\t * @return {boolean} この要素がrangeの中にあればtrue、そうでなければfalse\n\t */\n\tisInRange(range) {\n\t\tconst charRange = document.createRange();\n\t\t// 現在の要素を囲む範囲をcharRangeとして設定。selectNodeContentsをselectNodeにする、あるいは引数をテキストノードではなくspan要素にすると、選択中最初と最終文字が反応しないことがある\n\t\tcharRange.selectNodeContents(this.elem().childNodes.item(0));\n\t\t// 開始位置が同じかselectの開始位置より文字の開始位置が後ろにあり、\n\t\t// 終了位置が同じかselectの終了位置より文字の終了位置が前にある\n\t\tif (charRange.compareBoundaryPoints(Range.START_TO_START,range) >= 0\n\t\t\t\t&& charRange.compareBoundaryPoints(Range.END_TO_END,range) <= 0) {\n\t\t\tcharRange.detach();\n\t\t\treturn true;\n\t\t}\n\t\tcharRange.detach();\n\t\treturn false;\n\t}\n\t/**\n\t * この文字が太字になっているかどうかを返す\n\t * @return {boolean} 太字になっていればtrue、そうでなければfalse\n\t */\n\tisBold() {\n\t\treturn this.hasClass('decolation-font-bold');\n\t}\n\t/**\n\t * この文字が斜体になっているかどうかを返す\n\t * @return {boolean} 斜体になっていればtrue、そうでなければfalse\n\t */\n\tisItalic() {\n\t\treturn this.hasClass('decolation-font-italic');\n\t}\n\n\t// --Status\n\n\t/**\n\t * この文字の状態を表す規定のオブジェクトを作成する\n\t * @return {object} この文字の状態を表す規定のオブジェクト\n\t */\n\tdata() {\n\t\tconst data = {};\n\t\tdata['char'] = this.text();\n\t\tdata['decolation'] = this.classArray();\n\t\tdata['fontSize'] = this.fontSize() + '';\n\t\treturn data;\n\t}\n\t/**\n\t * @private\n\t * この文字にかかっている装飾のクラスを配列にして返す\n\t * @return {string[]} この文字にかかっている装飾のクラスの配列。文字装飾がかかっていなければ空の配列\n\t */\n\tclassArray() {\n\t\treturn this.className().match(/decolation-\\S+/g) || [];\n\t}\n\n\t// --Style\n\n\t/**\n\t * この文字にカーソルを当てる\n\t * @param {boolean} [opt_bShift] シフトキーが押されていればtrue、そうでなければfalse\n\t * @return {Char} 自身のインスタンス\n\t */\n\taddCursor(opt_bShift) {\n\t\tthis.cursor().addCursor(this,opt_bShift);\n\t\treturn this;\n\t}\n\n\t/**\n\t * この文字のフォントサイズを変更する。あるいは引数省略で現在のフォントサイズを取得する\n\t * @param {number} [opt_fontSize] 新たに設定するフォントサイズ\n\t * @return {Char number string} 自身のインスタンス(引数を渡した場合)。現在のフォントサイズ(引数を省略した場合)、フォントサイズが数値で設定されていなければ文字列の'auto'\n\t */\n\tfontSize(opt_fontSize) {\n\t\tif (opt_fontSize) {\n\t\t\tthis._fontSize = opt_fontSize;\n\t\t\tthis._elem.dataset.fontSize = opt_fontSize;\n\t\t\t// フォントサイズが変更されると行の幅が変わる可能性があるため、計算し直しておく\n\t\t\tthis.row().width(false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (this._fontSize) {\n\t\t\t\tif (this._fontSize === 'auto') {\n\t\t\t\t\treturn this._fontSize;\n\t\t\t\t} else {\n\t\t\t\t\treturn parseInt(this._fontSize);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 'auto';\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * この文字に文字色を設定する。あるいは引数省略で現在の文字色を取得する\n\t * @param {string boolean} [opt_color] 文字列ならその色に設定する、falseを渡せば文字色を解除する\n\t * @return {Char string} 自身のインスタンス(引数を渡した場合)、あるいは現在の文字色(引数を省略した場合。文字色が設定されていなければ'black')\n\t */\n\tcolor(opt_color) {\n\t\tif (opt_color) {\n\t\t\tthis.addColor(opt_color);\n\t\t\treturn this;\n\t\t}\n\t\tif (opt_color === false) {\n\t\t\tthis.removeColor();\n\t\t\treturn this;\n\t\t}\n\t\tif (opt_color === undefined) {\n\t\t\tconst color = this.className().match(/decolation-color-(\\S+)/);\n\t\t\treturn color ? color[1] : 'black';\n\t\t}\n\t}\n\t/**\n\t * この文字の太字を設定、解除する\n\t * @param {boolean} bl trueなら太字にする、falseなら太字を解除する\n\t * @return {Char} 自身のインスタンス\n\t */\n\tbold(bl) {\n\t\tif (bl) {\n\t\t\tthis.addClass('decolation-font-bold');\n\t\t} else {\n\t\t\tthis.removeClass('decolation-font-bold');\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * この文字の斜体を設定、解除する\n\t * @param {boolean} bl trueなら斜体にする、falseなら斜体を解除する\n\t * @return {Char} 自身のインスタンス\n\t */\n\titalic(bl) {\n\t\tif (bl) {\n\t\t\tthis.addClass('decolation-font-italic');\n\t\t} else {\n\t\t\tthis.removeClass('decolation-font-italic');\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * 文字色を設定する\n\t * @param {string} color 設定する文字色\n\t * @return {Char} 自身のインスタンス\n\t */\n\taddColor(color) {\n\t\t// 同一種のクラスをすでに持っていたら外す\n\t\tthis.removeColor();\n\t\tif (color === 'decolation-color-black') return; // ブラックなら外して終わり\n\t\tthis.addClass('decolation-color-'+ color);\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * 文字色を解除する\n\t * @return {Char} 自身のインスタンス\n\t */\n\tremoveColor() {\n\t\tconst regexp = new RegExp('decolation-color-\\\\S+');\n\t\tconst rmClass = this.className().match(regexp);\n\t\tif (rmClass) { this.removeClass(rmClass[0]); }\n\t\treturn this;\n\t}\n\t/**\n\t * この文字から始まる文字列がstrと合致するなら、その文字列のCharにクラスを付与する\n\t * @param {string} str 判定する文字列\n\t * @return {Char} 自身のインスタンス\n\t */\n\tmarkSearchPhrase(str) {\n\t\t// １文字ずつ比較し、渡された文字列の長さ分のループを終えるまでに異なる文字が現れるか段落に残りの文字がなくなればreturn\n\t\t// 最初のループを無事に終えればこの文字から始まる文字列はstrに合致しているということなので、それぞれクラスを付与する\n\n\t\t// 合致しているかの判定\n\t\t// 合致しない文字が現れたか、文字列を比較し終える前に段落の最後に達したらreturn\n\t\tfor (let i = 0,len = str.length,char = this; i < len; i++,char = char.nextCharOnParagraph()) {\n\t\t\tif (!char || str.charAt(i) !== char.text()) return this;\n\t\t}\n\n\t\t// クラスの付与\n\t\tthis.addClass('search-label');\n\t\tfor (let i = 0,len = str.length,char = this; i < len; char = char.nextChar(),i++) {\n\t\t\tchar.addClass('search-word');\n\t\t}\n\t\treturn this;\n\t}\n\n\t// --DOM操作関係\n\n\t/**\n\t * charを自身の直前に挿入する\n\t * @param {Char} char 挿入するインスタンス\n\t * @return {Char} 自身のインスタンス\n\t */\n\tbefore(char) {\n\t\t// DOM\n\t\t// this.elem().before(char.elem()); // before(),after()はまだサポートされず\n\t\tthis.row().elem().insertBefore(char.elem(),this.elem());\n\n\t\t// ポインタ調整\n\t\t// oldPrev - char - this\n\n\t\t// char\n\t\tconst oldPrev = this.prev();\n\t\toldPrev && this.prev().next(char);\n\t\tchar.prev(oldPrev);\n\t\tchar.next(this);\n\t\tthis.prev(char);\n\t\t// parent\n\t\tchar.row(this.row());\n\t\tconst pos = this.index();\n\t\tthis.row().insertChar(pos,char);\n\t\treturn this;\n\t}\n\t/**\n\t * charを自身の直後に挿入する\n\t * @param {Char} char 挿入するインスタンス\n\t * @return {Char} 自身のインスタンス\n\t */\n\tafter(char) {\n\t\tif (this.isEOL()) { return this; } // todo: 例外を使用したほうがいいかも EOLからのafterはできない\n\t\t// DOM\n\t\tif (this.hasNextSibling()) {\n\t\t\tthis.row().elem().insertBefore(char.elem(),this.next().elem());\n\t\t} else {\n\t\t\tthis.row().elem().appendChild(char.elem());\n\t\t}\n\n\t\t// ポインタ調整\n\t\t// this - char - oldNextChar\n\n\t\t// char\n\t\tconst oldNextChar = this.next();\n\t\tthis.next(char);\n\t\tchar.prev(this);\n\t\tchar.next(oldNextChar);\n\t\toldNextChar && oldNextChar.prev(char);\n\t\t// parent\n\t\tchar.row(this.row());\n\t\tconst pos = this.index() + 1;\n\t\tthis.row().insertChar(pos,char);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を削除する。文書整形は行われない\n\t * @return {Char} 自身のインスタンス\n\t */\n\tremove() {\n\t\t// 要素と参照の削除\n\t\tif (this.isEOL()) return this; // EOLは削除不可\n\t\tconst row = this.row();\n\t\trow.elem().removeChild(this.elem());\n\t\t// oldPrev - this - oldNext →　oldPrev - oldNext\n\t\tconst oldPrev = this.prev();\n\t\tconst oldNext = this.next();\n\t\tif (oldPrev) oldPrev.next(oldNext);\n\t\tif (oldNext) oldNext.prev(oldPrev);\n\t\t// 古い親の配列から削除\n\t\trow.deleteChar(this);\n\t\treturn this;\n\t}\n\t// 文書整形も含む削除\n\t/**\n\t * 自身を削除し、文書整形を行う(空行ができたらその行も削除し、文字数調整や禁則処理を行う)\n\t * @return {Char} 自身のインスタンス\n\t */\n\tdelete() {\n\t\tconst row = this.row();\n\t\tconst paragraph = row.paragraph();\n\t\tthis.remove();\n\n\t\t// 段落先頭以外の行で、文字を削除した結果行が空になった場合、その行を削除する\n\t\tif (!row.isFirst() && row.isEmpty()) {\n\t\t\trow.lastChild().hasCursor() && row.prev().EOL().addCursor().setPosMemory(); // 削除行にカーソルがあれば、その前の行のEOLにカーソルを移動する\n\t\t\trow.remove();\n\t\t}\n\n\t\tparagraph.cordinate().checkKinsoku();\n\t\treturn this;\n\t}\n\t/**\n\t * 自分自身をnewCharと入れ替える\n\t * @param {Char} newChar 自身と入れ替える文字のインスタンス\n\t * @return {Char} 自身のインスタンス\n\t */\n\treplace(newChar) {\n\t\tnewChar.prev(this.prev());\n\t\tnewChar.next(this.next());\n\t\tif (this.prev()) { this.prev().next(newChar); }\n\t\tif (this.next()) { this.next().prev(newChar); }\n\t\tthis.prev(null);\n\t\tthis.next(null);\n\t\tthis.row().replaceChild(this,newChar);\n\t\tthis.row(null);\n\t\treturn this;\n\t}\n\t/**\n\t * 前の行の最後に移動する。その結果空行ができたら削除し、カーソルがその行にあれば自身の次のEOLに移動する。\n\t *     段落はまたがず、移動前の自身が段落最初の文字であれば何もしない\n\t * @return {Char} 自身のインスタンス\n\t */\n\tmoveLastBefore() {\n\t\tif (this.isEOL() || !this.isFirst()) { return this; } // 各行最初の文字でのみ有効\n\t\tif (this.row().isFirst()) return this; // 段落はまたがない\n\n\t\tconst oldRow = this.row();\n\t\tthis.remove(); // delete()内でcordinate()を使い、cordinate()内でmoveLastBefore()を使っているので、ここでdelete()を使うと無限再帰の恐れあり\n\t\toldRow.prev().append(this);\n\n\t\t// 移動した結果、空行ができたら削除する\n\t\tif (oldRow.isEmpty()){\n\t\t\toldRow.hasCursor() && this.next().addCursor(); // 削除行にカーソルが含まれていれば移動する\n\t\t\toldRow.remove();\n\t\t}\n\t\tthis.setPosMemory();\n\t\treturn this;\n\t}\n\t/**\n\t * 次の行の最初に移動する。次の行が同じ段落になければ新しく行を作り、カーソルは自身の次のEOLに移動する\n\t * @return {Char} 自身のインスタンス\n\t */\n\tmoveFirstAfter() {\n\t\tif (this.isEOL() || !this.isLast()) return this; // 各行最後の文字でのみ有効\n\n\t\tconst oldRow = this.row();\n\t\t// 次の行がなければ新しく作る(段落はまたがない)\n\t\tif (oldRow.isLast()) {\n\t\t\tconst newRow = Row.createEmptyRow();\n\t\t\toldRow.after(newRow);\n\t\t\toldRow.EOL().hasCursor() && newRow.EOL().addCursor(); // 段落最後のEOLにカーソルがあれば動かないので、移動する\n\t\t}\n\n\t\tthis.remove();\n\t\toldRow.next().prepend(this.display(true)); // displayしておかなければ、changeDisplay()での計算に狂いが生じる\n\n\t\tthis.setPosMemory(); // カーソルが付与されている文字は変わらないが、その文字の位置が変わる可能性があるためposMemoryを付け替える\n\t\treturn this;\n\t}\n\n\t// --Display関係\n\t/**\n\t * 自身の表示非表示を切り替える\n\t * @param {boolean} bDisplay trueなら表示、falseなら非表示\n\t * @return {Char} 自身のインスタンス\n\t */\n\tdisplay(bDisplay) {\n\t\tif (bDisplay) {\n\t\t\tthis._elem.classList.add('display');\n\t\t} else {\n\t\t\tthis._elem.classList.remove('display');\n\t\t}\n\t\treturn this;\n\t}\n\n\t// Utility\n\n\t/**\n\t * 現在のメニューバーの状態に即してcを内容に持つ規定のオブジェクトを作成する。メソッドを持つ既存のCharインスタンスには影響しない\n\t * @param {string} c 作成するオブジェクトが表す文字(１文字)\n\t * @return {object} 文字データを表す規定のオブジェクト\n\t */\n\tcreateData(c) {\n\t\t// Menuインスタンスを取得しやすくするため、インスタンスメソッドとして定義\n\t\tconst ret = {};\n\t\tret[\"char\"] = c;\n\t\tconst menu = this.paragraph().container().menu();\n\t\tret[\"decolation\"] = menu.charDecolations();\n\t\tret[\"fontSize\"] = menu.fontSizeInput();\n\t\treturn ret;\n\t}\n\t/**\n\t * 文字装飾のない文字の文字データを返す\n\t * @param {string} c 作成するオブジェクトが表す文字(１文字)\n\t * @return {object} 文字データを表す規定のオブジェクト\n\t */\n\tstatic createPlainCharData(c) {\n\t\tconst ret = {};\n\t\tret['char'] = c;\n\t\tret['decolation'] = [];\n\t\tret['fontSize'] = 'auto';\n\t\treturn ret;\n\t}\n\n\t// -- other\n\n\t/**\n\t * この文字のインデックスをカーソル位置として記憶する\n\t * @return {Char} 自身のインスタンス\n\t */\n\tsetPosMemory() {\n\t\tconst index = this.index();\n\t\tthis.cursor().setPosMemory(index);\n\t\treturn this;\n\t}\n\n\t/**\n\t * 自分を含めて、自分以降で同じ段落内のChar全てに処理を行う(EOLは含まない)\n\t * @param {function} func 処理内容が定義された関数オブジェクト\n\t * @return {Char} 自身のインスタンス\n\t */\n\tafterEach(func) {\n\t\tconst index = this.index();\n\t\tlet cnt = 0;\n\t\tfor (let char of this.row().chars()) {\n\t\t\tif (cnt >= index) func(char);\n\t\t\tcnt++;\n\t\t}\n\t\treturn this;\n\t}\n}\n\n/**\n * 行の末端を表すクラス\n */\nexport class EOL extends Char {\n\t// Rowとともに要素を作ってしまうため、要素を引数に取る必要がある。CharとEOLはis-a関係が成り立つと考え、継承を選択\n\t/**\n\t * @param {Element} elem 自身のDOM要素\n\t */\n\tconstructor(elem) {\n\t\tsuper(elem); // 最初にスーパークラスのコンストラクタを呼ばなければエラー\n\t}\n\n\t/**\n\t * 自身がEOLであるかどうかを返す\n\t * @return {boolean} 常にtrue\n\t */\n\tisEOL() {\n\t\treturn true;\n\t}\n\n\t// -- Status\n\n\t/**\n\t * 自身のインデックスを返す\n\t * @return {number} 自身は親の配列に入っていないので、親の配列の長さと同じ数値を返す\n\t */\n\tindex() {\n\t\treturn this.row().childLength();\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * rowを親として紐付ける\n\t * @param {Row} row 親となる行のインスタンス\n\t * @return {EOL} 自身のインスタンス\n\t */\n\tappended(row) {\n\t\t// EOLは各行一文字目であるのとDom要素が先に作られるためRowのappend()が利用できない\n\t\t// EOLがappendedされるのはまだrowが文書内に組み込まれる前なので、nextとprevの操作は不要\n\t\trow.elem().appendChild(this.elem());\n\t\tthis.row(row);\n\t\treturn this;\n\t}\n}\n\n/**\n * 行を表すクラス\n */\nexport class Row extends AbstractHierarchy {\n\t/**\n\t * @param {object} data 行を表すオブジェクト<br>\n\t * 例\n\t * <pre>\n\t * <code>\n\t *\t// 各文字のオブジェクトが配列で格納される\n\t *\t[\n\t *\t\t{\t // 文字を表すオブジェクト\n\t *\t\t\t\"char\":\"あ\",\n\t *\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t *\t\t\t\"fontSize\":\"auto\"\n\t *\t\t},\n\t *\t\t{\n\t *\t\t\t\"char\":\"い\",\n\t *\t\t\t\"decolation\":null\n\t *\t\t\t\"fontSize\":\"18\"\n\t *\t\t}\n\t *\t]\n\t *\t</code>\n\t *\t</pre>\n\t */\n\tconstructor(data) {\n\t\t// 配列が渡されたら新しく要素を作り、そうでなければ要素が渡されたとしてそれを元にインスタンスを作る\n\t\tif (Array.isArray(data)) {\n\t\t\tsuper(Util.createRowElement(data));\n\t\t} else {\n\t\t\t// InputBufferの場合\n\t\t\tsuper(data);\n\t\t\tdata = [];\n\t\t}\n\t\tthis._EOL = new EOL(this._elem.lastElementChild);\n\t\tthis._EOL.appended(this);\n\t\tif (!Array.isArray(data)) return;\n\t\tfor (let charData of data) {\n\t\t\tconst char = new Char(charData);\n\t\t\tthis.append(char);\n\t\t}\n\n\t\tthis.addClickEventListener();\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自身のEOLのインスタンスを返す\n\t * @return {EOL} 自身のEOLのインスタンス\n\t */\n\tEOL() {\n\t\treturn this._EOL;\n\t}\n\t/**\n\t * 自身の属する文章コンテナのインスタンスを返す\n\t * @return {SentenceContainer} 自身の属する文章コンテナのインスタンス\n\t */\n\tcontainer() {\n\t\treturn this.paragraph().container();\n\t}\n\t/**\n\t * 自身の親の段落を新たに設定する、あるいは現在の親段落を取得する\n\t * @param {Paragraph} [opt_newParagraph] 新たに設定する親段落\n\t * @return {Row Paragraph} 自身のインスタンス(引数を渡した場合)あるいは自身の親段落のインスタンス(引数を省略した場合)\n\t */\n\tparagraph(opt_newParagraph) {\n\t\treturn this.parent(opt_newParagraph);\n\t}\n\t/**\n\t * カーソルを持つ文字のインスタンスを取得する\n\t * @return {Char} カーソルを持つ文字のインスタンス\n\t */\n\tcursorChar() {\n\t\treturn this.paragraph().container().cursor().getChar();\n\t}\n\t/**\n\t * 自身の内部にある最初のインスタンスを返す\n\t * @return {Char} 自身の第一文字のインスタンス。それがなければ自身のEOLのインスタンス\n\t */\n\tfirstChild() {\n\t\t// 空行ではEOLが選択されるため、firstChar()ではなくfirstChild()\n\t\t// RowではEOLが絡むためオーバーライドする\n\t\tif (this.hasChar()) {\n\t\t\treturn this.chars()[0];\n\t\t} else {\n\t\t\treturn this.EOL();\n\t\t}\n\t}\n\t/**\n\t * 自身の内部にある最後のインスタンスであるEOLのインスタンスを返す\n\t * @return {Char} 自身のEOLのインスタンス\n\t */\n\tlastChild() {\n\t\treturn this.EOL();\n\t}\n\t/**\n\t * 自身の最終文字のインスタンスを返す\n\t * @return {Char} 自身の最終文字のインスタンス。空行であればnull\n\t */\n\tlastChar() {\n\t\treturn super.lastChild();\n\t}\n\t/**\n\t * 指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得する。EOLは含まれない\n\t * @param {number} [opt_index] 取得する子のインデックス\n\t * @return {Char Char[]} 指定された子のインスタンス(引数を渡した場合。範囲外の数値ならundefined)、あるいは子のインスタンスの配列(引数を省略した場合。子がいなければ空の配列)\n\t */\n\tchars(opt_index) { // EOLは含まれない\n\t\treturn super.children(opt_index);\n\t}\n\t/**\n\t * EOLを含む、指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得する\n\t * @param {number} [opt_index] 取得する子のインデックス\n\t * @return {Char} 指定された子のインスタンス(引数を渡した場合。範囲外のインデックスならEOL)、あるいはEOLを含む子のインスタンスの配列(引数を省略した場合。子がいなければ要素がEOLのみである配列)\n\t */\n\tchildren(opt_index) { // EOLを含む\n\t\tif (opt_index === undefined) {\n\t\t\tconst ret = super.children(); // push()の戻り値はlenghtプロパティの値なので、一旦変数に入れる必要あり\n\t\t\tret.push(this.EOL());\n\t\t\treturn ret;\n\t\t} else {\n\t\t\treturn super.children(opt_index) || this.EOL();\n\t\t}\n\t}\n\n\t// --判定\n\n\t/**\n\t * 内部に文字があるかどうかを返す\n\t * @return {boolean} 内部に文字があればtrue、EOLのみの空行ならfalse\n\t */\n\thasChar() {\n\t\treturn super.hasChild();\n\t}\n\t/**\n\t * 行内にカーソルがあるかどうかを返す\n\t * @return {boolean} 行内にカーソルが含まれていればtrue、そうでなければfalse\n\t */\n\thasCursor() {\n\t\tfor (let char of this.children()) {\n\t\t\tif (char.hasCursor()) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * この要素が可視化されているかどうかを返す\n\t * @return {boolean} 可視化されていたらtrue、そうでなければfalse\n\t */\n\tisDisplay() {\n\t\treturn this.hasClass('display');\n\t}\n\t/**\n\t * objが行内に含まれているかどうかを返す\n\t * @param {Char} obj 判定するインスタンス\n\t * @return {Char} objが行内にあるCharおよびEOLのいずれかに一致するとtrue、そうでなければfalse\n\t */\n\tcontains(obj) {\n\t\tif (!obj instanceof Char) return false;\n\t\tfor (let char of this.children()) {\n\t\t\tif (char.is(obj)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * ページ内で最初の行であるかどうかを返す\n\t * @return {boolean} ページ内で最初の行であればtrue、そうでなければfalse\n\t */\n\tisPageBreak() {\n\t\treturn this.hasClass('page-break');\n\t}\n\t/**\n\t * ページ内で最終行であるかどうかを返す\n\t * @return {boolean} ページ内で最終行ならtrue、そうでなければfalse\n\t */\n\tisPageLast() {\n\t\treturn this.hasClass('page-last-row');\n\t}\n\n\t// --参照操作\n\n\t/**\n\t * charを自身の子の最後に加える\n\t * @param {Char} char 子に加える文字のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tpushChar(char) {\n\t\treturn this.pushChild(char);\n\t}\n\t/**\n\t * charを自身の子の指定された位置に加える\n\t * @param {number} pos 加える位置のインデックス\n\t * @param {Char} char 加える子のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tinsertChar(pos,char) {\n\t\treturn this.insertChild(pos,char);\n\t}\n\t/**\n\t * charを自身の子から削除する\n\t * @param {Char} char 削除する子のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tdeleteChar(char) {\n\t\treturn this.deleteChild(char);\n\t}\n\n\t// --Status\n\n\t/**\n\t * この行の状態を表す規定のオブジェクトを作成する\n\t * @return {object[]} この行の状態を表す規定のオブジェクト\n\t */\n\tdata() {\n\t\tconst data = [];\n\t\tfor (let char of this.chars()) {\n\t\t\tdata.push(char.data());\n\t\t}\n\t\treturn data;\n\t}\n\t/**\n\t * この行の文字数を返す。EOLは含まない\n\t * @return {number} この行の文字数。空行なら０\n\t */\n\tcharLen() {\n\t\treturn super.childLength();\n\t}\n\t/**\n\t * この行の内部にある文字のうち、最も大きいフォントサイズを返す。'auto'は18として計算する\n\t * @return {number} 最大のフォント数\n\t */\n\tmaxFont() {\n\t\tlet max = 0; // 空行では０になる\n\t\tfor (let char of this.chars()) {\n\t\t\tmax = Math.max(max,char.fontSize() === 'auto' ? 18 : char.fontSize());\n\t\t}\n\t\treturn max;\n\t}\n\n\t// --Style\n\n\t/**\n\t * この行の横幅を返す。行は９０度回転しているため、css上は高さのこと\n\t * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n\t * @return {number} 自身の幅\n\t */\n\twidth(opt_useCache) {\n\t\treturn super.height(opt_useCache);\n\t}\n\t/**\n\t * この行の高さを返す。行は９０度回転しているため、css上は幅のこと\n\t * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n\t * @return {number} 自身の高さ\n\t */\n\theight(opt_useCache) {\n\t\treturn super.width(opt_useCache);\n\t}\n\n\t// --DOM操作関係\n\n\t/**\n\t * 子を空にして参照を整える\n\t * @return {Row} 自身のインスタンス\n\t */\n\tempty() {\n\t\t// emptyElem()に加え、オブジェクト参照も切り離す\n\t\tthis.emptyElem();\n\t\tconst prevRow = this.prev();\n\t\tif (prevRow) {\n\t\t\tthis.EOL().prev(prevRow.lastChild());\n\t\t\tprevRow.lastChild().next(this.EOL());\n\t\t} else {\n\t\t\tthis.EOL().prev(null);\n\t\t}\n\t\tthis.emptyChild();\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の最初にcharを挿入する\n\t * @param {Char} char 挿入する文字のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tprepend(char) {\n\t\tthis.firstChild().before(char);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の最後(EOLの直前)にcharを挿入する\n\t * @param {Char} char 挿入する文字のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tappend(char) {\n\t\tthis.EOL().before(char);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の直前にrowを挿入する\n\t * @param {Row} row 挿入する行のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tbefore(row) {\n\t\t// DOM\n\t\tthis.paragraph().elem().insertBefore(row.elem(),this.elem());\n\n\t\t// ポインタ調整\n\t\t// oldPrev - row - this\n\n\t\t// row\n\t\tconst oldPrev = this.prev();\n\t\toldPrev && oldPrev.next(row);\n\t\trow.prev(oldPrev);\n\t\trow.next(this);\n\t\tthis.prev(row);\n\t\t// char\n\t\toldPrev && oldPrev.lastChild().next(row.firstChild());\n\t\toldPrev && row.firstChild().prev(oldPrev.lastChild());\n\t\trow.lastChild().next(this.firstChild());\n\t\tthis.firstChild().prev(row.lastChild());\n\t\t// parent\n\t\trow.paragraph(this.paragraph());\n\t\tconst pos = this.index();\n\t\tthis.paragraph().insertRow(pos,row);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の直後にrowを挿入する\n\t * @param {Row} row 挿入する行のインスタンス\n\t * @return {Row} 自身のインスタンス\n\t */\n\tafter(row) {\n\t\t// DOM\n\t\tif (this.hasNextSibling()) {\n\t\t\tthis.paragraph().elem().insertBefore(row.elem(),this.next().elem());\n\t\t} else {\n\t\t\tthis.paragraph().elem().appendChild(row.elem());\n\t\t}\n\n\t\t// ポインタ調整\n\t\t// this - row - oldNext\n\n\t\t// row\n\t\tconst oldNext = this.next();\n\t\tthis.next(row);\n\t\trow.prev(this);\n\t\trow.next(oldNext);\n\t\toldNext && oldNext.prev(row);\n\t\t// char\n\t\tthis.lastChild().next(row.firstChild());\n\t\trow.firstChild().prev(this.lastChild());\n\t\toldNext && row.lastChild().next(oldNext.firstChild());\n\t\toldNext && oldNext.firstChild().prev(row.lastChild());\n\t\t// parent\n\t\trow.paragraph(this.paragraph());\n\t\tconst pos = this.index() + 1;\n\t\tthis.paragraph().insertRow(pos,row);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を削除する。文書整形は行われない\n\t * @return {Row} 自身のインスタンス\n\t */\n\tremove() {\n\t\t// 段落に自分しか行がない場合、段落ごと削除する\n\t\tif (this.isOnlyChild()) {\n\t\t\tthis.paragraph().remove();\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.paragraph().elem().removeChild(this.elem());\n\t\t// oldPrev - this - oldNext →　oldPrev - oldNext\n\t\t// row\n\t\tconst oldPrevRow = this.prev();\n\t\tconst oldNextRow = this.next();\n\t\toldPrevRow && oldPrevRow.next(oldNextRow);\n\t\toldNextRow && oldNextRow.prev(oldPrevRow);\n\t\t// char\n\t\tconst oldPrevChar = oldPrevRow && oldPrevRow.lastChild();\n\t\tconst oldNextChar = oldNextRow && oldNextRow.firstChild();\n\t\toldPrevChar && oldPrevChar.next(oldNextChar);\n\t\toldNextChar && oldNextChar.prev(oldPrevChar);\n\n\t\tthis.paragraph().deleteRow(this);\n\n\t\tthis.next(null);\n\t\tthis.prev(null);\n\t\tthis.firstChild().prev(null);\n\t\tthis.lastChild().next(null);\n\t\treturn this;\n\t}\n\t// 文章整形を含む削除\n\t// カーソルが含まれていれば前の行に平行移動する\n\t// カーソルを動かしたくなければremove()を使う\n\t/**\n\t * 自身を削除し、文書整形を行う(カーソルが含まれていれば前の行、前の行がなければ次の行にカーソルを移動する)\n\t * @return {Row} 自身のインスタンス\n\t */\n\tdelete() {\n\t\tconst oldPrevRow = this.prev();\n\t\tconst oldNextRow = this.next();\n\n\t\tthis.remove();\n\n\t\t// カーソルが削除行に含まれていれば、その前の行にカーソルを移動する\n\t\tif (this.hasCursor()) {\n\t\t\tif (oldPrevRow) {\n\t\t\t\tthis.cursor().moveRow(oldPrevRow);\n\t\t\t} else {\n\t\t\t\tthis.cursor().moveRow(oldNextRow);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 前の段落の最終行として移動する。各段落最初の行でのみ有効。自身が空行であれば削除される\n\t * @return {Row} 自身のインスタンス\n\t */\n\tmoveLastBefore() {\n\t\tif (!this.isFirst()) { return this; } // 各段落最初の行でのみ有効\n\t\tif (this.paragraph().isFirst()) return this; // 文章先頭では無効\n\n\t\tconst prevParagraph = this.paragraph().prev();\n\n\t\t// 空行を移動しようとした時の処理\n\t\tif (this.isEmpty()) {\n\t\t\t// 前の段落に移動せず削除する\n\t\t\t// カーソルが含まれていれば、カーソルを前の行のEOLに移動\n\t\t\tthis.remove();\n\t\t\tthis.hasCursor() && prevParagraph.lastChild().EOL().addCursor().setPosMemory();\n\t\t\treturn this;\n\t\t}\n\n\t\t// 空行ではない\n\t\tif (!this.isEmpty()) {\n\t\t\tthis.remove(); // カーソルはいじる必要なし\n\t\t\tprevParagraph.append(this);\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 隣のRowの第一文字を、自らの最後に移動する。段落内でのみ有効\n\t * @return {Row} 自身のインスタンス\n\t */\n\tbringChar() {\n\t\tif (this.isLast()) return this;\n\t\tthis.next().firstChild().moveLastBefore();\n\t\treturn this;\n\t}\n\t/**\n\t * 隣のRowの最初のnum文字を、自らの最後に移動する。段落内でのみ有効。文字同士の順番は崩さない\n\t * @param {number} num 移動する文字数\n\t * @return {Row} 自身のインスタンス\n\t */\n\tbringChars(num) {\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tthis.bringChar();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 自分の最後の文字を、次の行の最初に移動する。次の行がなければ新しく作成される\n\t * @return {Row} 自身のインスタンス\n\t */\n\ttakeChar() {\n\t\tif (!this.hasChar()) return this; // lastChar()でnullが取得される可能性があるため\n\t\tthis.lastChar().moveFirstAfter(); // lastChild()では毎回EOLが取得されるのでlastChar()\n\t\treturn this;\n\t}\n\t/**\n\t * 自分の最後のnum文字を、次の行の最初に移動する。次の行がなければ新しく作成される\n\t * @param {number} num 移動する文字数\n\t * @return {Row} 自身のインスタンス\n\t */\n\ttakeChars(num) {\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tthis.takeChar();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 引数の文字列から作成された装飾のない文字のインスタンスを自らの最後に追加する\n\t * @return {Row} 自身のインスタンス\n\t */\n\tcreatePlainContent(str) {\n\t\tfor (let c of str) {\n\t\t\tthis.append(new Char(Char.createPlainCharData(c)));\n\t\t}\n\t\treturn this;\n\t}\n\n\t// --文章整理\n\n\t/**\n\t * 指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節する。標準以外のフォントサイズの文字があれば文字数は調整される。また、自身が空段落以外での空行であれば削除する\n\t * @return {Row} 自身のインスタンス\n\t */\n\tcordinate() {\n\t\tif (this.index() > 0 && this.isEmpty()) return this.delete(); // 空段落以外での空行は削除する\n\n\t\tconst strLen = this.container().strLenOnRow();\n\t\tconst len = this.charLen();\n\t\tif (len < strLen) {\n\t\t\tthis.bringChars(strLen - len);\n\t\t}\n\n\t\t// 多すぎる文字数は減らす\n\t\t// フォントの異なる文字が混ざっている場合、他の行と高さが異なってしまうため、その行の文字を変える必要がある\n\t\tconst maxSize = strLen * 18; // 標準フォント×文字数の数値が基準\n\t\tlet sum = 0;\n\t\tfor (let array of this.chars().entries()) {\n\t\t\tconst char = array[1];\n\t\t\tsum += char.fontSize() === 'auto' ? 18 : char.fontSize();\n\t\t\tif (sum > maxSize) {\n\t\t\t\tconst index = array[0];\n\t\t\t\tthis.takeChars(this.charLen() - index);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 行内の禁則処理を行う\n\t * @return {Row} 自身のインスタンス\n\t */\n\tcheckKinsoku() {\n\t\tif (this.isEmpty()) { return this; }\n\t\t// 行頭にあるべきではないもの\n\t\tfor (let firstText = this.firstChild().text(); !this.isFirst() && /[」』）。、？]/.test(firstText); firstText = this.firstChild().text()) {\n\t\t\tthis.firstChild().moveLastBefore();\n\t\t}\n\t\t// 行末にあるべきではないもの\n\t\tfor (let lastText = this.lastChar().text(); !this.isLast() && /[「『（]/.test(lastText); lastText = this.lastChar().text()) {\n\t\t\tthis.lastChar().moveFirstAfter();\n\t\t}\n\t\treturn this;\n\t}\n\n\t// --Display関係\n\n\t/**\n\t * 自身と子のCharを表示、あるいは非表示にする。内部の文字はfirst文字以降で自身に収まる文字を表示し、それ以外の文字は非表示にする\n\t * @param {boolean} bDisplay trueであれば自身を表示し、falseで非表示にする\n\t * @param {number} first 自身内部のCharを何文字目から表示するかのインデックス(０始まり)\n\t * @return {Row} 自身のインスタンス\n\t */\n\tdisplay(bDisplay,first) {\n\t\tif (!bDisplay) {\n\t\t\tthis.elem().classList.remove('display');\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.elem().classList.add('display');\n\t\tconst dispHeight = this.height();\n\t\tlet heightSum = 0;\n\t\tconst addArray = [];\n\t\tfor (let array of this.chars().entries()) {\n\t\t\tconst index = array[0];\n\t\t\tconst char = array[1];\n\t\t\tif (index < first) {\n\t\t\t\tchar.display(false);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst fontHeight = char.fontSize(); // sizeの取得はDOMにアクセスせずに行っているため、ここではレンダリングは発生しない\n\t\t\theightSum += fontHeight === 'auto' ? 18 : fontHeight;\n\t\t\tchar.display(index >= first && heightSum < dispHeight); // trueになれば表示、falseになれば非表示\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * カーソル行を基準に、文字を何文字目から表示すべきかの計算結果を返す\n\t * @return {number} 文字の表示開始位置のインデックス\n\t */\n\tcomputeDisplayCharPos() {\n\t\tconst cursorIndex = this.cursorChar().index();\n\t\tconst currentFirst = this.firstDisplayCharPos();\n\t\tconst currentEnd = this.lastDisplayCharPos();\n\t\tif (cursorIndex <= currentFirst) {\n\t\t\t// カーソルが前にある\n\t\t\treturn cursorIndex;\n\t\t} else if ( cursorIndex > currentEnd) {\n\t\t\t// カーソルが後ろにある\n\t\t\treturn currentFirst + (cursorIndex - currentEnd);\n\t\t} else {\n\t\t\treturn currentFirst;\n\t\t}\n\t}\n\t/**\n\t * この行が何文字目から表示されているかのインデックスを返す\n\t * @return {number} EOL含め最初に表示された文字のインデックス。文字が全て非表示になっていれば-1\n\t */\n\tfirstDisplayCharPos() {\n\t\tfor (let char of this.children()) {\n\t\t\tif (char.isDisplay()) return char.index();\n\t\t}\n\t\treturn -1; // displayがひとつもない(EOLは常にdisplayなので、ここまで来たら異常)\n\t}\n\t/**\n\t * この行が何文字目まで表示されているかのインデックスを返す\n\t * @return {number} EOL含め最後に表示された文字のインデックス。文字が全て非表示になっていれば-1\n\t */\n\tlastDisplayCharPos() {\n\t\tif (!this.hasChar) return 0;\n\t\tfor (let i = this.charLen()-1,char; char = this.chars(i); i--) {\n\t\t\tif (char.isDisplay()) return char.next().isEOL() ? i + 1 : i; // すべての文字がdisplayしていればEOLのインデックスを返す\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// --イベント\n\n\t/**\n\t * 行のクリックイベントの実行内容。行をクリックすると最も近い文字にカーソルが当たる\n\t * @param {Event} e イベントオブジェクト\n\t */\n\trunClick(e) {\n\t\tif (this.container().inputBuffer().isDisplay()) return;\n\t\tconst clickX = e.pageX;\n\t\tconst clickY = e.pageY;\n\t\tlet min = Number.MAX_VALUE;\n\t\tlet closestChar;\n\n\t\tfor (let char of this.children()) {\n\t\t\tconst distance = char.computeDistanceFromPoint(clickX,clickY);\n\t\t\tif (distance < min) {\n\t\t\t\tmin = distance;\n\t\t\t\tclosestChar = char;\n\t\t\t}\n\t\t}\n\t\tclosestChar.slidePrevCursor().addCursor().setPosMemory();\n\t}\n\n\t// --静的メソッド\n\n\t/**\n\t * 空行のRowインスタンスを新たに作成する\n\t * @return {Row} 作成されたインスタンス\n\t */\n\tstatic createEmptyRow() {\n\t\treturn new Row([]);\n\t}\n\n\t// -- other\n\n\t/**\n\t * 同一段落で自分以降の行に処理を行う。 処理中に同一段落の行でなくなったなどしても影響せず処理される\n\t * @param {function} func 処理が定義された関数オブジェクト\n\t * @return {Row} 自身のインスタンス\n\t */\n\tafterEach(func) {\n\t\tconst index = this.index();\n\t\tlet cnt = 0;\n\t\tfor (let row of this.paragraph().rows()) {\n\t\t\tif (cnt >= index) func(row);\n\t\t\tcnt++;\n\t\t}\n\t\treturn this;\n\t}\n\n}\n\n/**\n * 段落を表すクラス\n */\nexport class Paragraph extends AbstractHierarchy {\n\t/**\n\t * @param {object} data 段落を表すオブジェクト<br>\n\t * 例\n\t * <pre>\n\t * <code>\n\t *  // 段落のクラスと各文字オブジェクトの配列の入った配列\n\t *\t[\n\t *\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t *\t\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n\t *\t\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n\t *\t\t\t\t\"char\":\"あ\",\n\t *\t\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t *\t\t\t\t\"fontSize\":\"auto\"\n\t *\t\t\t},\n\t *\t\t\t{\n\t *\t\t\t\t\"char\":\"い\",\n\t *\t\t\t\t\"decolation\":[]\n\t *\t\t\t\t\"fontSize\":\"30\"\n\t *\t\t\t}\n\t *\t\t\t]\n\t *\t]\n\t *\t</code>\n\t *\t</pre>\n\t */\n\tconstructor(data) {\n\t\tsuper(Util.createParagraphElement(data));\n\t\tconst strLen = 40;\n\t\tconst spArray = Util.splitArray(data[1],strLen); // data[1]が空配列なら、spArrayにも空配列が入る\n\t\tfor (let charArray of spArray) {\n\t\t\tthis.append(new Row(charArray));\n\t\t}\n\t\t// data[1]が空配列 = 空段落(空行)の場合は上記for文が実行されないので、別に空行を作成して連結する\n\t\tif (spArray.length === 0) {\n\t\t\tthis.append(Row.createEmptyRow());\n\t\t}\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 親の文章コンテナを設定、または引数省略で取得する\n\t * @param {SentenceContainer} [opt_newContainer] 新たに設定する、自身の属する文章コンテナのインスタンス\n\t * @return {Paragraph SentenceContainer} 自身のインスタンス(引数を渡した場合)、あるいは自身の親の文章コンテナのインスタンス\n\t */\n\tcontainer(opt_newContainer) {\n\t\treturn this.parent(opt_newContainer);\n\t}\n\t/**\n\t * 指定された行のインスタンス、あるいは引数省略で子のインスタンスの配列を取得する\n\t * @param {number} [opt_index] 取得する子のインスタンスのインデックス\n\t * @return {Row Row[]} 指定された行のインスタンス(引数を渡した場合)、あるいは子の配列(引数を省略した場合)\n\t */\n\trows(opt_index) {\n\t\treturn this.children(opt_index);\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身が内部に行を持っているかどうかを返す\n\t * @return {boolean} 自身が子を持っていればtrue、そうでなければfalse\n\t */\n\thasRow() {\n\t\treturn this.hasChild();\n\t}\n\t/**\n\t * 自身が空段落であるかどうかを返す。空行がひとつだけあってもtrue(空行は空段落にしか存在しないのが正常であるため)\n\t * @return {boolean} 内部に行が存在しないか、空行が一つだけならtrue\n\t */\n\tisEmpty() {\n\t\treturn !this.hasChild() || this.firstChild().isEmpty();\n\t}\n\t/**\n\t * 段落内にカーソルが含まれているかどうかを返す\n\t * @return {boolean} 段落内にカーソルが含まれていればtrue、そうでなければfalse\n\t */\n\thasCursor() {\n\t\tfor (let row of this.rows()) {\n\t\t\tif (row.hasCursor()) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * 引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するかどうかを返す\n\t * @param {AbstractHierarchy} obj 判定するインスタンス\n\t * @return {boolean} 引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するとtrue、そうでなければfalse\n\t */\n\tcontains(obj) {\n\t\tfor (let row of this.rows()) {\n\t\t\tif (row.is(obj)) return true;\n\t\t\tif (row.contains(obj)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// --参照操作\n\n\t/**\n\t * 自身の子の最後にrowを加える\n\t * @param {Row} row 自身の子の最後に加えるインスタンス\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tpushRow(row) {\n\t\treturn this.pushChild(row);\n\t}\n\t/**\n\t * 自身の子の指定された位置にrowを挿入する\n\t * @param {number} pos rowを挿入する位置のインデックス\n\t * @param {Row} row 挿入するインスタンス\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tinsertRow(pos,row) {\n\t\treturn this.insertChild(pos,row);\n\t}\n\t/**\n\t * 自身の子からrowを削除する\n\t * @param {Row} row 削除する子のインスタンス\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tdeleteRow(row) {\n\t\treturn this.deleteChild(row);\n\t}\n\n\t// --Status\n\n\t/**\n\t * この段落の状態を表す規定のオブジェクトを作成する\n\t * @return {object[]} この段落の状態を表す規定のオブジェクト\n\t */\n\tdata() {\n\t\tconst data = [];\n\t\tdata[0] = this.classArray();\n\t\tconst charArray = [];\n\t\tfor (let row of this.rows()) {\n\t\t\tfor (let char of row.chars()) {\n\t\t\t\tcharArray.push(char.data());\n\t\t\t}\n\t\t}\n\t\tdata[1] = charArray;\n\t\treturn data;\n\t}\n\t/**\n\t * この段落の装飾のクラスを文字列の配列にする\n\t * @return {string[]} 装飾関係のクラスの配列。なければ空の配列\n\t */\n\tclassArray() {\n\t\treturn this.elem().className.match(/decolation-\\S+/g) || [];\n\t}\n\t/**\n\t * 段落内の文字数を数える\n\t * @return {number} 段落内の文字数\n\t */\n\tcountChar() {\n\t\tlet cnt = 0;\n\t\tfor (let row of this.rows()) {\n\t\t\tcnt += row.charLen();\n\t\t}\n\t\treturn cnt;\n\t}\n\n\t// --Style\n\n\t/**\n\t * 段落にtext-alignを設定する、あるいは引数省略で現在のtext-alignの状態を取得する\n\t * @param {string boolean} [opt_align] 新たに設定する'left','center','right'の文字列。'left'あるいはfalseならalignを解除する\n\t * @return {Paragraph string} 自身のインスタンス(引数を渡した場合)、あるいは現在のtext-alignの状態(引数を省略した場合)\n\t */\n\talign(opt_align) {\n\t\tif (opt_align === undefined) {\n\t\t\tconst align = this.className().match(/decolation-textalign-(\\S+)/);\n\t\t\treturn align ? align[1] : 'left';\n\t\t}\n\t\tif (opt_align) {\n\t\t\tconst oldAlign = this.className().match(/decolation-textalign-\\S+/);\n\t\t\tif (oldAlign) this.removeClass(oldAlign[0]);\n\t\t\tif (opt_align !== 'left') this.addClass('decolation-textalign-'+ opt_align);\n\t\t} else {\n\t\t\tconst oldAlign = this.className().match(/decolation-textalign-\\S+/);\n\t\t\tif (oldAlign) this.removeClass(oldAlign[0]);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 自身内部にあるすべてのCharから指定クラスを除去する\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tremoveClassFromAllChar(className) {\n\t\tfor (let row of this.rows()) {\n\t\t\trow.removeClassFromAllChild(className);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 自身内部にある文字にstrと合致する文字列があればクラスを付与する\n\t * @param {string} str 判定する文字列\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tsearch(str) {\n\t\tthis.removeClassFromAllChar('search-label');\n\t\tthis.removeClassFromAllChar('search-word');\n\t\tfor (let row of this.rows()) {\n\t\t\tfor (let char of row.chars()) {\n\t\t\t\tchar.markSearchPhrase(str);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t// --DOM操作関係\n\n\t/**\n\t * 自身の最後にrowを追加する\n\t * @param {Row} row 追加するインスタンス\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tappend(row) {\n\t\tthis.elem().appendChild(row.elem());\n\t\trow.paragraph(this);\n\t\tconst nextParagraph = this.next();\n\t\t// rowの後側接続\n\t\tif (nextParagraph) {\n\t\t\t// row\n\t\t\tconst nextRow = nextParagraph.firstChild();\n\t\t\tnextRow.prev(row);\n\t\t\trow.next(nextRow);\n\t\t\t// char\n\t\t\tnextRow.firstChild().prev(row.lastChild());\n\t\t\trow.lastChild().next(nextRow.firstChild());\n\t\t}\n\t\t// rowの前側接続\n\t\tconst oldLastRow = this.hasRow() ? this.lastChild() : (this.prev() ? this.prev().lastChild() : null); // 自段落の最終行　→　前の段落の最終行　→　null\n\n\t\tthis.pushRow(row);\n\t\tif (oldLastRow === null) {\n\t\t\t// 一行も存在しない状態からのappend\n\t\t\treturn this;\n\t\t}\n\t\t// row\n\t\toldLastRow.next(row);\n\t\trow.prev(oldLastRow);\n\t\t// char\n\t\toldLastRow.lastChild().next(row.firstChild());\n\t\trow.firstChild().prev(oldLastRow.lastChild());\n\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の直後にparagraphを挿入する\n\t * @param {Paragraph} paragraph 挿入するインスタンス\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tafter(paragraph) {\n\t\t// DOM\n\t\tif (this.hasNextSibling()) {\n\t\t\tthis.container().elem().insertBefore(paragraph.elem(),this.next().elem());\n\t\t} else {\n\t\t\tthis.container().elem().appendChild(paragraph.elem());\n\t\t}\n\n\t\t// ポインタ調整\n\t\t// this - paragraph - oldNext\n\n\t\t// paragraph\n\t\tconst oldNext = this.next();\n\t\tthis.next(paragraph);\n\t\tparagraph.prev(this);\n\t\tparagraph.next(oldNext);\n\t\toldNext && oldNext.prev(paragraph);\n\t\t// row\n\t\tthis.lastChild().next(paragraph.firstChild());\n\t\tparagraph.firstChild().prev(this.lastChild());\n\t\toldNext && paragraph.lastChild().next(oldNext.firstChild());\n\t\toldNext && oldNext.firstChild().prev(paragraph.lastChild());\n\t\t// char\n\t\tthis.lastChild().lastChild().next(paragraph.firstChild().firstChild());\n\t\tparagraph.firstChild().firstChild().prev(this.lastChild().lastChild());\n\t\toldNext && paragraph.lastChild().lastChild().next(oldNext.firstChild().firstChild());\n\t\toldNext && oldNext.firstChild().firstChild().prev(paragraph.lastChild().lastChild());\n\t\t// parent\n\t\tparagraph.container(this.container());\n\t\tconst pos = this.index() + 1;\n\t\tthis.container().insertParagraph(pos,paragraph);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を削除する。文書整形は行われない\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tremove() {\n\t\tthis.container().elem().removeChild(this.elem());\n\t\t// oldPrev - this - oldNext →　oldPrev - oldNext\n\n\t\t// paragraph\n\t\t// oldPrevParagraph - oldNextParagraph\n\t\tconst oldPrevParagraph = this.prev();\n\t\tconst oldNextParagraph = this.next();\n\t\toldPrevParagraph && oldPrevParagraph.next(oldNextParagraph);\n\t\toldNextParagraph && oldNextParagraph.prev(oldPrevParagraph);\n\n\t\t// row\n\t\t// oldPrevParagraph.lastChild() - oldNextParagraph.firstChild();\n\t\t// oldPrevRow - oldNextRow\n\t\tconst oldPrevRow = oldPrevParagraph && oldPrevParagraph.lastChild();\n\t\tconst oldNextRow = oldNextParagraph && oldNextParagraph.firstChild();\n\t\toldPrevRow && oldPrevRow.next(oldNextRow);\n\t\toldNextRow && oldNextRow.prev(oldPrevRow);\n\n\t\t// char\n\t\t// oldPrevRow.lastChild() - oldNextRow.lastChild();\n\t\t// oldPrevChar - oldNextChar\n\t\tconst oldPrevChar = oldPrevRow && oldPrevRow.lastChild();\n\t\tconst oldNextChar = oldNextRow && oldNextRow.firstChild();\n\t\toldPrevChar && oldPrevChar.next(oldNextChar);\n\t\toldNextChar && oldNextChar.prev(oldPrevChar);\n\n\t\tthis.container().deleteParagraph(this);\n\t\tthis.prev(null).firstChild() && this.firstChild().prev(null).firstChild() && this.firstChild().firstChild().prev(null);\n\t\tthis.next(null).lastChild() && this.lastChild().next(null).lastChild() && this.lastChild().lastChild().next(null);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を削除し、文書を整形する(内部にカーソルがあれば直前の行に平行移動する。直前の行がなければ直後の行)\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tdelete() {\n\t\tconst oldPrevRow = this.prev() && this.prev().lastChild();\n\t\tconst oldNextRow = this.next() && this.next().firstChild();\n\n\t\tthis.remove();\n\n\t\tif (this.hasCursor()) {\n\t\t\tif (oldPrevRow) {\n\t\t\t\tthis.cursor().moveRow(oldPrevRow);\n\t\t\t} else { // 直前の行がなければ直後\n\t\t\t\tthis.cursor().moveRow(oldNextRow);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 渡された文字以降を新しい段落に移動して、段落を２つに分ける\n\t * @param {Char} char 段落分割の基準文字のインスタンス\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tdivide(char) {\n\t\t// 段落先頭から:一行目の文字が丸々新しい行に移って次の段落の一行目となる。二行目以降は行ごと次の段落へ →　基準文字のあった行は空行となりもともとの段落の唯一の行となるため、あたかも空段落が基準行の前に挿入されたようになる\n\t\t// 行頭から:基準行の文字がまるまる新しい行に移って次の段落の一行目になる。基準行以降の行は行ごと新しい段落に移る。　→　基準行以降が新しい段落に移り、それ以前の行はもともとの段落に残るため、段落が２つに別れる。この時点では、もともとの段落の最後に空行が残っている状態なので、cordinate()で対応する\n\t\t// 行の途中から:基準文字以降の同じ行の文字が新しい行に移って次の段落の一行目になる。それ以降は行ごと次の段落に移る。　→　基準文字以降が新しい段落になる。この時点では一行目の文字数がおかしいので、cordinate()で調整する\n\t\t// 段落最後のEOLから: 基準文字のインデックスが同一行の他の文字より大きいため、afterEach()が一度も実行されない。次の行も存在しないのでnextRowが存在せず、nextRow.afterEach()は実行されない。ただし、新しい行はnewParagraphを作成した時点で存在している。 →　新しい段落が今いる段落の後ろに追加されるだけ\n\t\tif (!this.contains(char)) return this;\n\t\tconst paragraph = char.row().paragraph();\n\t\tconst newParagraph = Paragraph.createEmptyParagraph().align(paragraph.align()); // 作成時点で空行が含まれている 段落にテキストアラインが付与されていれば、新しい段落も同様にする\n\t\tconst nextRow = char.row().hasNextSibling() ? char.row().next() : null; // この行以降を新しい段落に移動\n\t\t// 一行目\n\t\t// 基準文字以降を新しい行に移し、新しい段落に挿入する\n\t\t// 元々の行は空になってもそのまま\n\t\tconst newRow = newParagraph.firstChild();\n\t\tchar.afterEach(function (c) {\n\t\t\tc.remove();\n\t\t\tnewRow.append(c);\n\t\t});\n\n\t\t// 二行目以降\n\t\t// 行ごと新しい段落に移動\n\t\tif (nextRow) {\n\t\t\tnextRow.afterEach(function (row) {\n\t\t\t\trow.remove();\n\t\t\t\tnewParagraph.append(row);\n\t\t\t});\n\t\t}\n\n\t\tthis.after(newParagraph);\n\t\tparagraph.cordinate().checkKinsoku();\n\t\tnewParagraph.cordinate().checkKinsoku();\n\t\treturn this;\n\t}\n\n\t// --文章整理\n\n\t/**\n\t * 内部行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節する。標準以外のフォントサイズの文字があれば文字数は調整される。また、自身が空段落ではなく内部に空行があれば削除する\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tcordinate() {\n\t\t// エラー原因まとめ\n\t\t// ここで一旦rows()の内容が保存され、そこから一つ一つrowを取り出す(rows()はコピーされた配列が返される)\n\t\t// row.cordinate()内のbringChar()によって、最終行が削除されることがある\n\t\t// 削除された最終行でも、先に保存されていたためrow.cordinate()が実行される\n\t\t// 削除行の参照は保持されているのでcordinate()はエラーが起きずに実行される\n\t\t// ただしremove()された時にparentにnullが代入されているので、内部でparagraph().container()が実行されるときにNullPointer\n\t\tfor (let row of this.rows()) {\n\t\t\tif (!row.paragraph()) continue; // cordinate()内で行が削除された場合の対策\n\t\t\trow.cordinate();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 段落内に禁則処理を施す\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tcheckKinsoku() {\n\t\tfor (let row of this.rows()) {\n\t\t\tif (!row.paragraph()) continue;\n\t\t\trow.checkKinsoku();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 内部にあるすべての行の表示非表示を切り替える\n\t * @param {boolean} bDisplay 表示するならtrue、そうでなければfalseを指定する\n\t * @return {Paragraph} 自身のインスタンス\n\t */\n\tdisplay(bDisplay) {\n\t\tfor (let row of this.rows()) {\n\t\t\trow.display(bDisplay);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * 空段落のインスタンスを新たに作成する\n\t * @return {Paragraph} 空段落のインスタンス\n\t */\n\tstatic createEmptyParagraph() {\n\t\tconst arg = [];\n\t\targ[0] = [];\n\t\targ[1] = [];\n\t\treturn new Paragraph(arg);\n\t}\n}\n\n// classは巻き上げが起こらないため、Char・Rowの下に作る必要がある。ただし、SentenceContainer内で利用するのでSentenceContainerよりは上になければならない\n/**\n * 漢字変換ビューを表すクラス。それぞれ一つの文節を担当し、複数の漢字変換候補を持つ。また、内部には変換候補としてRowクラスのインスタンスを持つ\n */\nexport class ConvertView extends AbstractHierarchy {\n\t// 文節番号は、ConvertViewのindex()と同じ\n\t/**\n\t * @param {object} data 変換候補を表すオブジェクト<br>\n\t * 例\n\t * <pre>\n\t * <code>\n\t * [[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n\t *\t</code>\n\t *\t</pre>\n\t */\n\tconstructor(data) {\n\t\tsuper(Util.createConvertViewElement());\n\t\tdata[1].push(data[0]); // 末尾に明確にひらがなを入れる\n\t\tfor (let str of data[1]) {\n\t\t\tconst row = Row.createEmptyRow();\n\t\t\trow.createPlainContent(str);\n\t\t\tthis.append(row);\n\t\t}\n\t\tthis.removeClass('paragraph');\n\t\tthis.addClass('convert-view');\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自分の属する漢字変換コンテナのインスタンスを新たに設定する、あるいは引数省略で現在属しているの漢字変換コンテナを取得する\n\t * @param {ConvertContainer} [opt_newContainer] 新たに設定する漢字変換コンテナのインスタンス\n\t * @return {ConvertView ConvertContainer} 自身のインスタンス(引数を渡した場合)、あるいは所属する漢字変換コンテナ(引数を省略した場合)\n\t */\n\tcontainer(opt_newContainer) {\n\t\treturn this.parent(opt_newContainer);\n\t}\n\t/**\n\t * 指定されたインデックスの変換候補を表すインスタンス、あるいは引数省略で変換候補インスタンスの配列を取得する\n\t * @param {number} [opt_index] 取得する変換候補のインデックス\n\t * @return {Row Row[]} 指定されたインデックスの変換候補インスタンス(引数を渡した場合)、あるいは変換候補インスタンスの配列(引数を省略した場合) \n\t */\n\trows(opt_index) {\n\t\treturn this.children(opt_index);\n\t}\n\t/**\n\t * 現在選択中の行を取得する\n\t * @return {Row} 現在選択中の行のインスタンス。選択行がなければ候補最後のひらがな行のインスタンス\n\t */\n\tgetSelect() {\n\t\tfor (let row of this.rows()) {\n\t\t\tif (row.hasClass('select')) return row;\n\t\t}\n\t\treturn this.lastChild(); // 選択行がなければひらがな行\n\t}\n\n\t// --判定\n\n\t/**\n\t * この候補一覧が可視化されているかどうか\n\t * @return {boolean} 可視化されていればtrue、そうでなければfalse\n\t */\n\tisActive() {\n\t\treturn this.hasClass('active');\n\t}\n\n\t// --Status\n\n\t/**\n\t * この候補一覧が担当する文節のひらがなを文字列で返す\n\t * @return {string} 担当文節のひらがな\n\t */\n\thiragana() {\n\t\treturn this.lastChild().text(); // 最終行は必ずひらがな\n\t}\n\n\t/**\n\t * ひらがなでの文字数を返す\n\t * @return {number} ひらがなでの文字数\n\t */\n\tkanaLength() {\n\t\treturn this.hiragana().length;\n\t}\n\t/**\n\t * 担当する文節のインデックスを返す\n\t * @return {number} 担当文節のインデックス(０始まり)\n\t */\n\tphraseNum() {\n\t\treturn this.index();\n\t}\n\n\t// --Style\n\n\t/**\n\t * この漢字変換候補一覧を可視化する\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tactive() {\n\t\tfor (let view of this.container().views()) {\n\t\t\tif (view.hasClass('active')) { view.removeClass('active'); }\n\t\t}\n\t\tthis.addClass('active');\n\t\treturn this;\n\t}\n\t/**\n\t * 変換候補の選択をひとつ左に移動する\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tselectLeft() {\n\t\tconst index = this.getSelect().index() + 1;\n\t\tthis.select(index);\n\t\treturn this;\n\t}\n\t/**\n\t * 変換候補の選択をひとつ右に移動する\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tselectRight() {\n\t\tconst index = this.getSelect().index() - 1;\n\t\tthis.select(index);\n\t\treturn this;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * 指定されたインデックスの変換候補を選択する\n\t * @param {number} index 選択する候補のインデックス\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tselect(index) {\n\t\tif (index < 0) index = 0;\n\t\tif (index >= this.childLength()) index = this.childLength() - 1;\n\n\t\tfor (let row of this.rows()) {\n\t\t\tif (row.hasClass('select')) row.removeClass('select');\n\t\t}\n\t\tconst newRow = this.rows(index);\n\t\tnewRow.addClass('select');\n\t\tthis.container().inputBuffer().insertPhrase(this.phraseNum(),newRow.text());\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の最後に変換候補を追加する\n\t * @param {Row} row 追加する変換候補\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tappend(row) {\n\t\t// DOM\n\t\tthis.elem().appendChild(row.elem());\n\t\t// ポインタ調整\n\t\t// view\n\t\tif (this.hasChild()) {\n\t\t\tthis.lastChild().next(row);\n\t\t\trow.prev(this.lastChild());\n\t\t}\n\t\t// parent\n\t\trow.parent(this);\n\t\tthis.pushChild(row);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の直前に変換候補一覧を挿入する\n\t * @param {ConvertView} view 挿入する変換候補一覧\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tbefore(view) {\n\t\t// DOM\n\t\tthis.container().elem().insertBefore(view.elem(),this.elem());\n\n\t\t// ポインタ調整\n\t\t// oldPrev - view - this\n\n\t\t// view\n\t\tconst oldPrev = this.prev();\n\t\toldPrev && oldPrev.next(view);\n\t\tview.prev(oldPrev);\n\t\tview.next(this);\n\t\tthis.prev(view);\n\t\t// paretn\n\t\tview.container(this.container());\n\t\tconst pos = this.index();\n\t\tthis.container().insertChild(pos,view);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の直後に変換候補一覧を挿入する\n\t * @param {ConvertView} view 挿入する変換候補一覧\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tafter(view) {\n\t\t// DOM\n\t\tif (this.hasNextSibling()) {\n\t\t\tthis.container().elem().insertBefore(view.elem(),this.next().elem());\n\t\t} else {\n\t\t\tthis.container().elem().appendChild(view.elem());\n\t\t}\n\n\t\t// ポインタ調整\n\t\t// this - view - oldNext\n\n\t\t// view\n\t\tconst oldNext = this.next();\n\t\tthis.next(view);\n\t\tview.prev(this);\n\t\tview.next(oldNext);\n\t\toldNext && oldNext.prev(view);\n\t\t// parent\n\t\tview.container(this.container());\n\t\tconst pos = this.index() + 1;\n\t\tthis.container().insertChild(pos,view);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を削除する\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\tremove() {\n\t\t// DOM\n\t\tthis.container().elem().removeChild(this.elem());\n\n\t\t// ポインタ調整\n\t\t// oldPrev - this - oldNext →　oldPrev - oldNext\n\n\t\t// view\n\t\tconst oldPrev = this.prev();\n\t\tconst oldNext = this.next();\n\t\toldPrev && oldPrev.next(oldNext);\n\t\toldNext && oldNext.prev(oldPrev);\n\t\tthis.prev(null);\n\t\tthis.next(null);\n\t\t// parent\n\t\tthis.container().deleteChild(this);\n\t\tthis.container(null);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身をviewと入れ替える\n\t * @param {ConvertView} view 入れ替える変換候補一覧\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\treplace(view) {\n\t\tthis.before(view);\n\t\tif (this.isActive()) view.active();\n\t\treturn this.remove();\n\t}\n\t/**\n\t * 自身が担当する文節をカタカナに変換する\n\t * @return {ConvertView} 自身のインスタンス\n\t */\n\ttoKatakana() {\n\t\tthis.container().inputBuffer().insertPhrase(this.phraseNum(),this.getKatakana());\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * 自身が担当する文節のカタカナを文字列で取得する\n\t * @return {string} カタカナに変換した場合の文字列\n\t */\n\tgetKatakana() {\n\t\tconst str = this.hiragana();\n\t\tlet rtnKatakana = '';\n\t\tfor (let char of str) {\n\t\t\tconst cKatakana = key_table.katakana[char];\n\t\t\tif (cKatakana) {\n\t\t\t\trtnKatakana += cKatakana;\n\t\t\t} else {\n\t\t\t\t// 変換できなければ元の文字をそのまま連結\n\t\t\t\trtnKatakana += char;\n\t\t\t}\n\t\t}\n\t\treturn rtnKatakana;\n\t}\n}\n/**\n * 変換候補一覧を束ねる漢字変換コンテナを表すクラス\n */\nexport class ConvertContainer extends AbstractHierarchy {\n\t/**\n\t * @param {InputBuffer} inputBuffer 入力元のインスタンス\n\t */\n\tconstructor(inputBuffer) {\n\t\tsuper(document.getElementById('convert_container'));\n\t\tthis._inputBuffer = inputBuffer;\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 入力元のインスタンスを取得する\n\t * @return {InputBuffer} 入力元のインスタンス\n\t */\n\tinputBuffer() {\n\t\treturn this._inputBuffer;\n\t}\n\t/**\n\t * 指定された変換候補一覧、あるいは引数省略で変換候補一覧の配列を取得する\n\t * @param {number} [opt_index] 取得する候補一覧のインデックス\n\t * @return {ConvertView ConvertView[]} 指定された候補一覧(引数を渡した場合)、あるいは候補一覧の配列(引数を省略した場合)\n\t */\n\tviews(opt_index) {\n\t\treturn super.children(opt_index);\n\t}\n\t/**\n\t * 現在アクティブになっている変換候補一覧のインスタンスを取得する\n\t * @return {ConvertView} 現在アクティブな変換候補一覧のインスタンス。なければnull\n\t */\n\tactiveView() {\n\t\tfor (let view of this.views()) {\n\t\t\tif (view.isActive()) return view;\n\t\t}\n\t\treturn null;\n\t}\n\n\t// --判定\n\n\t/**\n\t * 漢字変換が行われているところかどうかを返す\n\t * @return {boolean} 候補一覧がひとつでも内部にあればtrue、そうでなければfalse\n\t */\n\tisActive() {\n\t\treturn this.childLength() > 0;\n\t}\n\n\t// --Style\n\n\t/**\n\t * 表示位置をカーソル横に移動する\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\treposition() {\n\t\tconst x = this.cursorX();\n\t\tconst y = this.cursorY();\n\t\tthis.elem().style.top = y + 'px';\n\t\tthis.elem().style.left = (x - this.width()) + 'px';\n\t\treturn this;\n\t}\n\t/**\n\t * カーソル位置のX座標を返す\n\t * @return {number} カーソル位置のX座標\n\t */\n\tcursorX() {\n\t\treturn this.inputBuffer().cursorX();\n\t}\n\t/**\n\t * カーソル位置のY座標を返す\n\t * @return {number} カーソル位置のY座標\n\t */\n\tcursorY() {\n\t\treturn this.inputBuffer().cursorY();\n\t}\n\t/**\n\t * 自身を表示する\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tshow() {\n\t\tthis.elem().style.display = 'block';\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を非表示にする\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\thide() {\n\t\tthis.elem().style.display = 'none';\n\t\tthis.removeKeydownEventListener();\n\t\treturn this;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * カーソル位置から文字を挿入して、内部の変換候補一覧を破棄する\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tprint() {\n\t\tthis.inputBuffer().print();\n\t\treturn this;\n\t}\n\t/**\n\t * 内部に変換候補一覧のインスタンス群を構築する\n\t * @param {object} data 文節分け及び変換候補を示すオブジェクト<br>\n\t * <pre>\n\t * <code>\n\t *  // data形式例\n\t * [[ひらがな,[漢字１,漢字２,漢字３]],[ひらがな２,[漢字４,漢字５]],[[ひらがな３,[漢字６,漢字７]]]]\n\t * </code>\n\t * </pre>\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tcreateViews(data) {\n\t\tthis.empty();\n\t\tfor (let phraseData of data) {\n\t\t\tthis.append(new ConvertView(phraseData));\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 漢字変換を始める(非同期通信)\n\t * @param {string} str 変換する文字列\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tconvert(str) {\n\t\tUtil.post(\"/tategaki/KanjiProxy\",{\n\t\t\tsentence: str\n\t\t},function (json) {\n\t\t\tthis.createViews(json);\n\t\t\tthis.inputBuffer().setPhraseNum();\n\t\t\t// すべて変換第一候補を選択する\n\t\t\tfor (let view of this.views()) {\n\t\t\t\tview.select(0);\n\t\t\t}\n\t\t\t// 最初の文節を選択\n\t\t\tthis.inputBuffer().select(0);\n\n\t\t\tthis.reposition();\n\t\t\tthis.addKeydownEventListener();\n\t\t}.bind(this));\n\t\tthis.show();\n\n\t\treturn this;\n\t}\n\t/**\n\t * 文節区切りをひとつ前にずらして変換し直す(非同期通信)\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tshiftUp() {\n\t\tconst activeView = this.activeView();\n\n\t\tif (activeView.kanaLength() === 1) { return this; }\n\n\t\t// 最終文節から\n\t\t// 最後の一字を分離して、二文節を変換し直す\n\t\tif (activeView.isLast()) {\n\t\t\tconst activeKana = activeView.hiragana();\n\t\t\tconst sendString = activeKana.slice(0,-1) + ',' + activeKana.slice(-1);\n\t\t\tUtil.post(\"/tategaki/KanjiProxy\",{\n\t\t\t\tsentence: sendString\n\t\t\t},function (json) {\n\t\t\t\tthis.replace(activeView.phraseNum(),json);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t}\n\n\t\t// 最終文節からではない\n\t\t// 選択文字列から最後の一文字を取り除き、その次の文節の頭につなげてそれぞれを変換し直す\n\t\tif (!activeView.isLast()) {\n\t\t\tconst activeKana = activeView.hiragana();\n\t\t\tconst nextView = activeView.next();\n\t\t\tconst nextKana = nextView.hiragana();\n\t\t\tconst sendString = activeKana.slice(0,-1) + ',' + activeKana.slice(-1) + nextKana;\n\t\t\tUtil.post(\"/tategaki/KanjiProxy\",{\n\t\t\t\tsentence: sendString\n\t\t\t},function (json) {\n\t\t\t\tconst newFirst = new ConvertView(json[0]);\n\t\t\t\tactiveView.replace(newFirst);\n\t\t\t\tnewFirst.select(0);\n\t\t\t\tconst newSecond = new ConvertView(json[1]);\n\t\t\t\tnextView.replace(newSecond);\n\t\t\t\tnewSecond.select(0);\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 文節区切りをひとつ下にずらして変換し直す(非同期通信)\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tshiftDown() {\n\t\tconst activeView = this.activeView();\n\t\tconst nextView = activeView.next();\n\n\t\tif (activeView.isLast()) return;\n\n\t\t// 次の文節の文字数が１文字だけなら融合して、１文節として変換する\n\t\tif (nextView.kanaLength() === 1) {\n\t\t\tconst nextPhrase = this.inputBuffer().phrases(nextView.phraseNum())[0];\n\t\t\tconst sendString = activeView.hiragana() + nextView.hiragana() + ','; // 文節を区切られないよう、,を末尾に追加する\n\t\t\tUtil.post(\"/tategaki/KanjiProxy\",{\n\t\t\t\tsentence: sendString\n\t\t\t},function (json) {\n\t\t\t\tconst newView = new ConvertView(json[0]);\n\t\t\t\tactiveView.replace(newView);\n\t\t\t\tnextView.remove();\n\t\t\t\tnextPhrase.remove();\n\t\t\t\tnewView.select(0);\n\t\t\t\tthis.inputBuffer().setPhraseNum();\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t}\n\n\t\t// 次の文節が二文字以上\n\t\t// 次の文節の１文字目を選択文節に移動して、それぞれを変換し直す\n\t\tconst activeKana = activeView.hiragana();\n\t\tconst nextKana = nextView.hiragana();\n\t\tconst sendString = activeKana + nextKana.slice(0,1) + ',' + nextKana.slice(1);\n\t\tUtil.post(\"/tategaki/KanjiProxy\",{\n\t\t\tsentence: sendString\n\t\t},function (json) {\n\t\t\tconst newFirst = new ConvertView(json[0]);\n\t\t\tactiveView.replace(newFirst);\n\t\t\tnewFirst.select(0);\n\t\t\tconst newSecond = new ConvertView(json[1]);\n\t\t\tnextView.replace(newSecond);\n\t\t\tnewSecond.select(0);\n\t\t});\n\t\treturn this;\n\t}\n\t/**\n\t * 入力元の文字がひらがなにして１文字しかなければ全て破棄して入力を終了する。二文字以上あれば最後の１音のみ削除して選択文節を変換し直す(非同期通信)\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tbackSpace() {\n\t\tconst activeView = this.activeView();\n\t\t// buffer文字がひらがなにして一文字しかない\n\t\t// 文字を削除してinput終了\n\t\tif (activeView.isOnlyChild() && activeView.kanaLength() === 1) {\n\t\t\tthis.empty();\n\t\t\tthis.inputBuffer().decreace();\n\t\t\treturn this;\n\t\t}\n\n\t\t// 文節がひらがなにして一文字しかない\n\t\t// その文節を削除してひとつ前の文節を選択する\n\t\tif (activeView.kanaLength() === 1) {\n\t\t\tconst phraseNum = activeView.phraseNum();\n\t\t\tconst phraseChar = this.inputBuffer().phrases(phraseNum)[0];\n\t\t\tphraseChar.remove();\n\t\t\tactiveView.remove();\n\t\t\tthis.inputBuffer().setPhraseNum()\n\t\t\t\t.select(phraseNum > 0 ? phraseNum - 1 : phraseNum); // 一つ前の文節がなければ、一つ次の文節\n\t\t\treturn this;\n\t\t}\n\n\t\t// 文節にひらがなにして二文字以上ある\n\t\t// 最後の一字を削除して、その文節を変換し直す\n\t\tconst phraseNum = activeView.phraseNum();\n\t\tconst newString = activeView.hiragana().slice(0,-1) + ','; // 文節を区切られないよう、,を末尾に追加する\n\t\tUtil.post(\"/tategaki/KanjiProxy\",{\n\t\t\tsentence: newString\n\t\t},function (json) {\n\t\t\tthis.replace(phraseNum,json);\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\t/**\n\t * インデックスがnumの文節の変換候補一覧を、新たなdataで入れ替える\n\t * @param {number} num 入れ替える文節のインデックス\n\t * @param {object} data 変換候補を表すオブジェクト<br>\n\t * 例\n\t * <pre>\n\t * <code>\n\t * [[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n\t *\t</code>\n\t *\t</pre>\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\treplace(num,data) {\n\t\tconst oldView = this.views(num);\n\t\tconst newViews = []; // 文節番号を振り直した後でないとview.select()できない(中でinsertPhrase()をしているため)ので、いったん新しいインスタンスを入れておく\n\t\t// viewを入れ替え、bufferにはいったんひらがなを挿入する\n\t\tfor (let phraseData of data.entries()) {\n\t\t\t// view\n\t\t\tconst newView = new ConvertView(phraseData[1]);\n\t\t\tnewViews.push(newView);\n\t\t\toldView.before(newView);\n\t\t\t// input_buffer\n\t\t\t// setPhraseNum()は、select()する前のviewではひらがなの長さを使って文節番号を割り振る。そのため、いったんひらがなをbufferに追加する\n\t\t\tif (phraseData[0] === 0) // ひとつめだけ入替えで、他はその後に追加していく\n\t\t\t\tthis.inputBuffer().insertPhrase(num,oldView.prev().hiragana()); // 古いbuffer文字はここでなくなる\n\t\t\telse\n\t\t\t\tthis.inputBuffer().insertPhraseAfter(num,oldView.prev().hiragana()); // HACK:追加分の文字の順番がこの時点ではおかしくなるが、合計のひらがなの数は正しくなっているので、buffer.setPhraseNum()とnewView.select(0)で正しく文字が置き換わる\n\t\t}\n\t\toldView.remove();\n\n\t\t// 文節番号の振り直し\n\t\tthis.inputBuffer().setPhraseNum();\n\t\t// 最初の候補で置き換える\n\t\tfor (let newView of newViews) {\n\t\t\tnewView.select(0);\n\t\t}\n\t\tif (oldView.isActive()) newViews[0].active();\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の最後に変換候補一覧を追加する\n\t * @param {ConvertContainer} view 追加する変換候補一覧のインスタンス\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\tappend(view) {\n\t\tthis.elem().appendChild(view.elem());\n\t\tif (this.hasChild()) {\n\t\t\tthis.lastChild().next(view);\n\t\t\tview.prev(this.lastChild());\n\t\t}\n\t\tview.container(this);\n\t\tthis.pushChild(view);\n\t\treturn this;\n\t}\n\n\t// --イベント\n\n\t/**\n\t * 漢字変換中のkeydownイベントリスナーを付加する。重ねがけは無効\n\t * @return {ConvertContainer} 自身のインスタンス\n\t */\n\taddKeydownEventListener() {\n\t\tthis.inputBuffer().removeKeydownEventListener()\n\t\t\t.container().removeKeydownEventListener();\n\t\tsuper.addKeydownEventListener();\n\t\treturn this;\n\t}\n\t/**\n\t * keydownイベントの実行内容\n\t * @param {Event} e イベントオブジェクト\n\t * @param {number} keycode 押下されたキーのキーコード\n\t */\n\trunKeydown(e,keycode) {\n\t\tswitch (keycode) {\n\t\t\tcase 8:\n\t\t\t\tthis.backSpace();\n\t\t\t\tbreak;\n\t\t\tcase 13:\n\t\t\t\t// Enter\n\t\t\t\tthis.print();\n\t\t\t\tbreak;\n\t\t\tcase 32:\n\t\t\tcase 37:\n\t\t\t\t// space\n\t\t\t\t// Left\n\t\t\t\tthis.activeView().selectLeft();\n\t\t\t\tbreak;\n\t\t\tcase 38:\n\t\t\t\t// Up\n\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\tthis.shiftUp();\n\t\t\t\t} else {\n\t\t\t\t\tthis.inputBuffer().selectPrev();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 39:\n\t\t\t\t// Right\n\t\t\t\tthis.activeView().selectRight();\n\t\t\t\tbreak;\n\t\t\tcase 40:\n\t\t\t\t// Down\n\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\tthis.shiftDown();\n\t\t\t\t} else {\n\t\t\t\t\tthis.inputBuffer().selectNext();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 118:\n\t\t\t\t// F7\n\t\t\t\tthis.activeView().toKatakana();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n/**\n * 入力文字を表すクラス\n */\nexport class InputChar extends Char {\n\t/**\n\t * @param {object} data 文字を表すオブジェクト<br>\n\t * 例\n\t * <pre>\n\t * <code>\n\t *\t{\n\t *\t\t\"char\":\"あ\",\n\t *\t\t\"decolation\":[\"decolation-color-blue\"]\n\t *\t\t\"fontSize\": \"auto\"\n\t *\t}\n\t *\t</code>\n\t *\t</pre>\n\t *\t@param {number} [opt_phraseNum=-1] 文節のインデックス\n\t */\n\tconstructor(data,opt_phraseNum) {\n\t\tsuper(data);\n\t\tif (opt_phraseNum === undefined) opt_phraseNum = -1;\n\t\tthis.phraseNum(opt_phraseNum);\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身の文節番号がnumであるかどうか\n\t * @param {number} num 判定するインデックス\n\t * @return {boolean} 自身の文節番号がnumであればtrue、そうでなければfalse\n\t */\n\tisPhraseNum(num) {\n\t\treturn num === this.phraseNum();\n\t}\n\t/**\n\t * 自身が選択されているかどうかを表す\n\t * @return {boolean} 自身が選択されていればtrue、そうでなければfalse。漢字変換が一度もされていなければfalse\n\t */\n\tisSelect() {\n\t\treturn this.hasClass('select-phrase');\n\t}\n\n\t// --Status\n\n\t/**\n\t * この文字の文節番号をnewNumに設定する、あるいは引数省略で現在の文節番号を取得する\n\t * @param {number} [opt_newNum] 新たに設定する文節番号(０始まり)\n\t * @return {InputChar number} 自身のインスタンス(引数を渡した場合)、あるいは現在の文節のインデックス(引数を省略した場合)\n\t */\n\tphraseNum(opt_newNum) {\n\t\tif (opt_newNum === undefined) {\n\t\t\treturn this._phraseNum;\n\t\t} else {\n\t\t\tthis.elem().dataset.phraseNum = opt_newNum;\n\t\t\tthis._phraseNum = opt_newNum;\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t// --Style\n\n\t/**\n\t * この文字を選択状態にする\n\t * @return {InputChar} 自身のインスタンス\n\t */\n\tselect() {\n\t\tthis.addClass('select-phrase');\n\t\treturn this;\n\t}\n\t/**\n\t * この文字を非選択状態にする\n\t * @return {InputChar} 自身のインスタンス\n\t */\n\tremoveSelect() {\n\t\tthis.removeClass('select-phrase');\n\t\treturn this;\n\t}\n\n}\n\n/**\n * 入力された文字をいったん保持するバッファーを表すクラス。内部の子にInputCharのインスタンス群を持つ。\n *     また、一度も漢字変換がされず文節番号がすべて-1の場合と、漢字変換が行われ文節が分けられている場合と２つの状態がある\n */\nexport class InputBuffer extends Row {\n\t/**\n\t * @param {SentenceContainer} container 自身の属する文章コンテナのインスタンス\n\t */\n\tconstructor(container) {\n\t\tsuper(document.getElementById('input_buffer'));\n\t\tthis._container = container;\n\t\tthis._convertContainer = new ConvertContainer(this);\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自身の属する文章コンテナのインスタンスを取得する\n\t * @return {SentenceContainer} 自身の属する文章コンテナ\n\t */\n\tcontainer() {\n\t\treturn this._container;\n\t}\n\t/**\n\t * カーソルのインスタンスを取得する\n\t * @return {Cursor} カーソルのインスタンス\n\t */\n\tcursor() {\n\t\treturn this.container().cursor();\n\t}\n\t/**\n\t * カーソルのある文字のインスタンスを取得する\n\t * @return {Char} カーソル文字のインスタンス\n\t */\n\tcursorChar() {\n\t\treturn this.cursor().getChar();\n\t}\n\t/**\n\t * 漢字変換コンテナのインスタンスを取得する\n\t * @return {ConvertContainer} 漢字変換コンテナのインスタンス\n\t */\n\tconvertContainer() {\n\t\treturn this._convertContainer;\n\t}\n\t/**\n\t * 指定された文節番号の入力文字インスタンスを配列にして返す\n\t * @param {number} num 集める入力文字の文節番号\n\t * @return {InputChar[]} 指定された文節番号の入力文字インスタンスの配列\n\t */\n\tphrases(num) {\n\t\tconst ret = [];\n\t\tfor (let char of this.chars()) {\n\t\t\tif (char.isPhraseNum(num)) ret.push(char);\n\t\t}\n\t\treturn ret;\n\t}\n\t/**\n\t * 選択中の文節の入力文字インスタンスを返す\n\t * @return {InputChar[]} 選択中の入力文字インスタンスの配列。選択されていなければ空の配列\n\t */\n\tselectPhrases() {\n\t\tconst ret = [];\n\t\tfor (let char of this.chars()) {\n\t\t\tif (char.isSelect()) ret.push(char);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身が可視化されている(文字入力中)かどうかを返す\n\t * @return {boolean} 自身が可視化されていればtrue、そうでなければfalse\n\t */\n\tisDisplay() {\n\t\treturn this.elem().style.display === 'block';\n\t}\n\n\t// --Status\n\n\t/**\n\t * 変換候補一覧群を作成した後に、各入力文字に文節番号をふる\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tsetPhraseNum() {\n\t\tlet cnt = 0;\n\t\tfor (let view of this.convertContainer().views()) {\n\t\t\tconst num = view.phraseNum();\n\t\t\tconst len = view.getSelect().length(); // 選択行がなければひらがなを使って計算\n\t\t\tfor (let i = 0; i < len; i++,cnt++) {\n\t\t\t\tthis.chars(cnt).phraseNum(num);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 選択されている文節のインデックスを返す\n\t * @return {number} 選択文節のインデックス。選択されていなければ-1\n\t */\n\tselectIndex() {\n\t\tfor (let char of this.chars()) {\n\t\t\tif (char.isSelect()) return char.phraseNum();\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// --Style\n\n\t/**\n\t * 自身の幅を取得する。文章内のRowと異なり回転されていないため、css上の幅と一致する\n\t * @return {number} 自身の幅\n\t */\n\twidth() {\n\t\treturn super.super.width();\n\t}\n\t/**\n\t * 自身の高さを取得する。文章内のRowと異なり回転されていないため、css上の高さと一致する\n\t * @return {number} 自身の高さ\n\t */\n\theight() {\n\t\treturn super.super.height();\n\t}\n\t/**\n\t * 自身の高さや幅を内部の各入力文字に合わせて調整する\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tresize() {\n\t\tconst style = this.elem().style;\n\t\tstyle.width = this.newWidth() + 'px';\n\t\tstyle.height = this.newHeight() + 'px';\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の表示位置をカーソルに合わせる\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tmove() {\n\t\tthis.elem().style.left = this.cursorX() + 'px';\n\t\tthis.elem().style.top = this.cursorY() + 'px';\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を表示する\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tshow() {\n\t\tthis.elem().style.display = 'block';\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を非表示にする\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\thide() {\n\t\tthis.elem().style.display = 'none';\n\t\tthis.removeKeydownEventListener();\n\t\treturn this;\n\t}\n\t/**\n\t * 選択文節を次の文節に変更する。最後の文節から実行されれば、最初の文節が選択される\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tselectNext() {\n\t\treturn this.select(this.selectIndex() + 1);\n\t}\n\t/**\n\t * 選択文節を前の文節に変更する。最初の文節から実行されれば、最後の文節が選択される\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tselectPrev() {\n\t\treturn this.select(this.selectIndex() - 1);\n\t}\n\t/**\n\t * 文節番号がindexの文字を選択する。引数が負になれば最後の文節を、最大の文節番号を越えれば最初の文節を選択する\n\t * @param {number} index 選択する文節のインデックス。負の数なら最後の文節、範囲より大きな数なら最初の文節が選択される\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tselect(index) {\n\t\tconst maxIndex = this.lastChar().phraseNum();\n\t\tif (index < 0) index = maxIndex;\n\t\tif (index > maxIndex) index = 0;\n\n\t\tfor (let char of this.chars()) {\n\t\t\tif (char.phraseNum() === index)\n\t\t\t\tchar.select();\n\t\t\telse\n\t\t\t\tchar.removeSelect();\n\t\t}\n\t\tthis.convertContainer().views(index).active();\n\t\treturn this;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * 自身を空にして、文字入力を終了する\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tempty() {\n\t\tsuper.empty();\n\t\tif (this.convertContainer().isActive()) {\n\t\t\tthis.convertContainer().empty().hide();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * keycodeを追加した場合の新たな文字列で入力文字を置き換える\n\t * @param {number} keycode 追加するキーのキーコード\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tincreace(keycode,bShift) {\n\t\tconst newInputStr = this.newString(keycode,bShift);\n\n\t\tif (newInputStr === undefined || newInputStr.indexOf('undefined') !== -1) {\n\t\t\t// 未定義文字(alt,ctrl,tabなど)はreturn\n\t\t\treturn this;\n\t\t}\n\t\tthis.update(newInputStr);\n\t\tthis.resize();\n\t\treturn this;\n\t}\n\t/**\n\t * bufferの最後の文字を削除する。内部に文字がなくなれば入力を終了する\n\t * @return {InputChar} 削除した入力文字のインスタンス\n\t */\n\tdecreace() {\n\t\tif (!this.hasChar) return this;\n\t\tconst ret = this.lastChar().remove();\n\t\tthis.resize();\n\t\tif (!this.hasChar()) {\n\t\t\tthis.hide();\n\t\t\tthis.container().addKeydownEventListener();\n\t\t}\n\t\treturn ret;\n\t}\n\t/**\n\t * 内部の入力文字をstrで置き換える\n\t * @param {string} str 置き換える文字列\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tupdate(str) {\n\t\tthis.empty();\n\t\tfor (let char of str) {\n\t\t\tthis.append(new InputChar(this.cursorChar().createData(char)));\n\t\t}\n\t\tthis.show();\n\t\treturn this;\n\t}\n\t/**\n\t * カーソル位置に文字を挿入し、後処理を行って入力状態を終了する\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tprint() {\n\t\tthis.cursor().insert(this.text());\n\t\tthis.empty().hide();\n\t\tthis.container().addKeydownEventListener();\n\t\tthis.container().changeDisplay();\n\t\treturn this;\n\t}\n\t/**\n\t * 入力文字をすべてカタカナに置き換える\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\ttoKatakanaAll() {\n\t\tthis.update(this.getKatakana());\n\t\treturn this;\n\t}\n\t/**\n\t * 入力文字すべてを漢字変換する\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tconvert() {\n\t\tthis.convertContainer().convert(this.text());\n\t\treturn this;\n\t}\n\t/**\n\t * インデックスがnumである文節の入力文字をstrで入れ替える\n\t * @param {number} num 入れ替える文節のインデックス\n\t * @param {string} str 入れ替える文字列\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tinsertPhrase(num,str) {\n\t\tconst phrases = this.phrases(num);\n\t\tif (phrases.length === 0) return this; // 指定された文節番号の文字が見つからなかった\n\t\t// 新しいInputCharをもともとあった文字の前に挿入していく\n\t\tfor (let c of str) {\n\t\t\tconst newChar = new InputChar(this.cursorChar().createData(c),num);\n\t\t\tphrases[0].before(newChar);\n\t\t\tif (phrases[0].isSelect()) newChar.select(); // 選択中の文節なら入替え文字も選択\n\t\t}\n\t\t// 古い文字を削除\n\t\tfor (let old of phrases) {\n\t\t\told.remove();\n\t\t}\n\t\tthis.resize();\n\t\treturn this;\n\t}\n\t/**\n\t * インデックスがnumである文節の後ろにstrを追加する。追加した文字の文節番号は負の値になる\n\t * @param {number} num 挿入位置の指定\n\t * @param {string} str 挿入する文字列\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\tinsertPhraseAfter(num,str) {\n\t\tconst phrases = this.phrases(num);\n\t\tif (phrases.length === 0) return this; // 指定された文節番号の文字が見つからなかった\n\t\tconst nextChar = phrases[phrases.length -1].next(); // 挿入用の文字。最後にはEOLがあるので、必ず存在する\n\t\tfor (let c of str) {\n\t\t\tnextChar.before(new InputChar(this.cursorChar().createData(c),-num));\n\t\t}\n\t\tthis.resize();\n\t\treturn this;\n\t}\n\n\t// --外からの情報取得\n\n\t/**\n\t * @private\n\t * 現在の文字列にkeycodeを加えて作られる文字列を取得する\n\t * @param {number} keycode 追加するキーのキーコード\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n\t * @return {string} keycodeを追加して作られた文字列\n\t */\n\tnewString(keycode,bShift) {\n\t\tconst inputStr = this.text(); //もともとの文字列\n\t\tif (bShift) {\n\t\t\treturn inputStr + key_table.shift_key[keycode];\n\t\t} else {\n\t\t\treturn key_table.getString(inputStr,keycode); //keycodeを加えた新しい文字列\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * 現在の入力文字をカタカナに変換した場合の文字列。変換できない文字があれば変換せずに元の文字をそのまま連結する\n\t * @return {string} カタカナに置き換えた文字列\n\t */\n\tgetKatakana() {\n\t\tconst str = this.text();\n\t\tlet rtnKatakana = '';\n\t\tfor (let char of str) {\n\t\t\tconst cKatakana = key_table.katakana[char];\n\t\t\tif (cKatakana) {\n\t\t\t\trtnKatakana += cKatakana;\n\t\t\t} else {\n\t\t\t\t// 変換できなければ元の文字をそのまま連結\n\t\t\t\trtnKatakana += char;\n\t\t\t}\n\t\t}\n\t\treturn rtnKatakana;\n\t}\n\t/**\n\t * @private\n\t * 内部の入力文字を元に、適切な幅を計算する\n\t * @return {number} 計算された幅のピクセル数\n\t */\n\tnewWidth() {\n\t\tconst cache = {};\n\t\tlet width = 0;\n\t\tfor (let char of this.chars()) {\n\t\t\tconst size = char.fontSize();\n\t\t\tif (cache[size]) {\n\t\t\t\twidth = Math.max(width,cache[size]);\n\t\t\t} else {\n\t\t\t\tcache[size] = char.width();\n\t\t\t\twidth = Math.max(width,char.width());\n\t\t\t}\n\t\t}\n\t\treturn width + 5; // 5px余裕をもたせる\n\t}\n\t/**\n\t * @private\n\t * 内部の入力文字を元に、適切な高さを計算する\n\t * @return {number} 計算された高さのピクセル数\n\t */\n\tnewHeight() {\n\t\tconst cache = {};\n\t\tlet height = 0;\n\t\tfor (let char of this.chars()) {\n\t\t\tconst size = char.fontSize();\n\t\t\tif (cache[size]) {\n\t\t\t\theight += cache[size];\n\t\t\t} else {\n\t\t\t\tcache[size] = char.height();\n\t\t\t\theight += cache[size];\n\t\t\t}\n\t\t}\n\t\treturn height + 5; // 5px余裕をもたせる\n\t}\n\t/**\n\t * カーソル位置のX座標を返す\n\t * @return {number} カーソル位置のX座標\n\t */\n\tcursorX() {\n\t\treturn this.cursorChar().x();\n\t}\n\t/**\n\t * カーソル位置のY座標を返す\n\t * @return {number} カーソル位置のY座標\n\t */\n\tcursorY() {\n\t\treturn this.cursorChar().y();\n\t}\n\n\t// --イベント\n\n\t/**\n\t * keyeventがSentenceContainerから移動するかどうかを判定して前処理を行う(キーコードをincreace()して入力文字ができれば入力モードに移行する)\n\t * @param {number} keycode 押下されたキーのキーコード\n\t * @param {boolean} bShift シフトキーが押されていればtrue、そうでなければfalse\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\ttransfer(keycode,bShift) {\n\t\tthis.increace(keycode,bShift);\n\t\tif (this.hasChar()) {\n\t\t\tthis.addKeydownEventListener();\n\t\t\tthis.move();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 入力時のkeydownイベントリスナーを付加する\n\t * @return {InputBuffer} 自身のインスタンス\n\t */\n\taddKeydownEventListener() {\n\t\tthis.container().removeKeydownEventListener();\n\t\tthis.convertContainer().removeKeydownEventListener();\n\t\tsuper.addKeydownEventListener();\n\t\treturn this;\n\t}\n\t/**\n\t * 入力時のkeydownイベントの実行内容\n\t * @param {Event} e イベントオブジェクト\n\t * @param {number} keycode 押下されたキーのキーコード\n\t */\n\trunKeydown(e,keycode) {\n\t\tswitch (keycode) {\n\t\t\tcase 8:\n\t\t\t\t// backspace\n\t\t\t\tthis.decreace();\n\t\t\t\tbreak;\n\t\t\tcase 13:\n\t\t\t\t// enter\n\t\t\t\tthis.print();\n\t\t\t\tbreak;\n\t\t\tcase 32:\n\t\t\t\t// space\n\t\t\t\tthis.convert();\n\t\t\t\tbreak;\n\t\t\tcase 118:\n\t\t\t\t// F7\n\t\t\t\tthis.toKatakanaAll();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.increace(keycode,e.shiftKey);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * ユーザーのファイル情報のひとつを扱うクラス\n */\nexport class File extends AbstractHierarchy {\n\t/**\n\t * @param {number} id ファイルのID\n\t * @param {string} filename ファイル名\n\t */\n\tconstructor(id,filename) {\n\t\tsuper(Util.createFileElement(id,filename));\n\t\tthis._link = this.elem().getElementsByTagName('a')[0];\n\t\tthis._id = id;\n\t\tthis._name = filename;\n\t\tthis._nextFile = null;\n\t\tthis._prevFile = null;\n\t\tthis.addClickEventListener();\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 自身の属するファイルリストの参照を探して取得する\n\t * @return {FileList} 自身の属するファイルリストのインスタンス。見つからなければnull\n\t */\n\tfileList() {\n\t\tfor (let parentDir = this.parent(); parentDir ;parentDir = parentDir.parent() ) {\n\t\t\tif (parentDir.isRoot()) return parentDir;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 内部のaタグのDOM要素を取得する\n\t * @return {Element} 自身の持つaタグのDOM要素\n\t */\n\tlink() {\n\t\treturn this._link;\n\t}\n\t/**\n\t * 自身の次に位置するファイルのインスタンスを新たに設定、または引数省略で取得する。\n\t *     通常のnext()はディレクトリも含め同階層のみをつなぐ。nextFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぐ\n\t * @param {File} [opt_file] 新たに設定するファイルのインスタンス\n\t * @return {File} 自身のインスタンス(引数を渡した場合)、あるいは自身の次のファイルのインスタンス(引数を省略した場合)\n\t */\n\tnextFile(opt_file) {\n\t\tif (opt_file === undefined) {\n\t\t\treturn this._nextFile;\n\t\t} else {\n\t\t\tthis._nextFile = opt_file;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 自身の前に位置するファイルのインスタンスを新たに設定、または引数省略で取得する。\n\t *     通常のやprev()はディレクトリも含め同階層のみをつなぐ。prevFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぐ\n\t * @param {File} [opt_file] 新たに設定するファイルのインスタンス\n\t * @return {File} 自身のインスタンス(引数を渡した場合)、あるいは自身の前のファイルのインスタンス(引数を省略した場合)\n\t */\n\tprevFile(opt_file) {\n\t\tif (opt_file === undefined) {\n\t\t\treturn this._prevFile;\n\t\t} else {\n\t\t\tthis._prevFile = opt_file;\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身がFileListのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にfalse\n\t */\n\tisRoot() {\n\t\treturn false;\n\t}\n\t/**\n\t * 自身がディレクトリのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にfalse\n\t */\n\tisDirectory() {\n\t\treturn false;\n\t}\n\t/**\n\t * 自身がファイルのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にtrue\n\t */\n\tisFile() {\n\t\treturn true;\n\t}\n\t/**\n\t * 自身が最初のファイルであるかどうかを返す(ディレクトリ単位ではなく、ファイルリスト全体の中で最初のファイルであるかどうか)\n\t * @return {boolean} 自身がファイルリストの中で最初のファイルならtrue、そうでなければfalse\n\t */\n\tisFirstFile() {\n\t\treturn this.prevFile() === null;\n\t}\n\t/**\n\t * 自身が最後のファイルであるかどうかを返す(ディレクトリ単位ではなく、ファイルリスト全体の中で最後のファイルであるかどうか)\n\t * @return {boolean} 自身がファイルリストの中で最後のファイルならtrue、そうでなければfalse\n\t */\n\tisLastFile() {\n\t\treturn this.nextFile() === null;\n\t}\n\t/**\n\t * 自身が表すファイルが文章コンテナに読み込まれているかどうかを返す\n\t * @return {boolean} 自身が現在読み込まれていればtrue、そうでなければfalse\n\t */\n\tisOpen() {\n\t\treturn this.fileList().sentenceContainer().fileId() === this.id();\n\t}\n\t/**\n\t * 自身が表すファイルが文章コンテナに読み込まれていないかどうかを返す\n\t * @return {boolean} 自身が現在読み込まれていなければtrue、そうでなければfalse\n\t */\n\tisClose() {\n\t\treturn this.fileList().sentenceContainer().fileId() !== this.id();\n\t}\n\n\t// --Status\n\t/**\n\t * 自身のファイルIDを返す\n\t * @return {number} 自身のファイルID\n\t */\n\tid() {\n\t\treturn this._id;\n\t}\n\t/**\n\t * 自身のファイル名を返す\n\t * @return {string} 自身のファイル名\n\t */\n\tname() {\n\t\treturn this._name;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * 文章コンテナに自身のファイルを非同期で読み込む\n\t * @return {File} 自身のインスタンス\n\t */\n\topen() {\n\t\tconst sentenceContainer = this.fileList().sentenceContainer();\n\n\t\tconst data = {};\n\t\tdata.user_id = sentenceContainer.userId();\n\t\tdata.file_id = this.id();\n\t\tsentenceContainer.userAlert('読込中');\n\t\tUtil.post('/tategaki/ReadJsonFile',data,function (json) {\n\t\t\tsentenceContainer.init(json).userAlert('読み込み完了');\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の要素及び自身への参照を削除し、自身が表すファイルを削除する(非同期通信)\n\t * @return {File} 自身のインスタンス\n\t */\n\tdelete() {\n\t\tUtil.post('/tategaki/DeleteFile',{\n\t\t\tuser_id: this.fileList().sentenceContainer().userId(),\n\t\t\tfile_id: this.id()\n\t\t},function (json) {\n\t\t\tif (!result) { console.log('ファイル削除エラーです(ファイル番号：'+ this.id() + ')'); }\n\t\t\t\t\t// 現在開いているファイルを削除したなら、前後どちらかのファイルを開く\n\t\t\t\t\t// 同じディレクトリに他のファイルがなければ新しいファイルを開く\n\t\t\t\t\t// 最後に、ファイルリストを作り直す\n\t\t\t\t\tif (this.sentenceContainer().fileList().currentFile() === this) {\n\t\t\t\t\t\tconst nextFile = this.next() || this.prev();\n\t\t\t\t\t\tif (nextFile) {\n\t\t\t\t\t\t\tnextFile.open();\n\t\t\t\t\t\t\tthis.sentenceContainer().fileList().read();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!nextFile) {\n\t\t\t\t\t\t\tthis.sentenceContainer().newFile();\n\t\t\t\t\t\t\tthis.sentenceContainer().fileList().read();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.sentenceContainer().fileList().read();\n\t\t\t\t\t}.bind(this));\n\t\t\treturn this;\n\t}\n\t/**\n\t * 自身をnewParentDirの中に移動し、ファイルリストを作り直す(非同期通信)\n\t * @param {Directory} newParentDir 自身の親となるディレクトリのインスタンス\n\t * @return {File} 自身のインスタンス\n\t */\n\tmove(newParentDir) {\n\t\tconst fileList = this.fileList();\n\t\tUtil.post(\"/tategaki/MoveFile\",{\n\t\t\tuser_id: fileList.sentenceContainer().userId(),\n\t\t\tfile_id: this.id(),\n\t\t\tdirectory_id: newParentDir.id()\n\t\t},function (data) {\n\t\t\tfileList.read();\n\t\t});\n\t\treturn this;\n\t}\n\n\t// --イベント\n\n\t// liタグの要素ではなくaタグ要素にクリックイベントを設定するためオーバーライド\n\t/**\n\t * 自身のリンクにクリックイベントを付加する\n\t * @return {File} 自身のインスタンス\n\t */\n\taddClickEventListener() {\n\t\tthis._clickArg = this.onClick.bind(this);\n\t\tthis.link().addEventListener('click',this._clickArg);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身のリンクへのクリックイベントを除去する\n\t * @return {File} 自身のインスタンス\n\t */\n\tremoveClickEventListener() {\n\t\tif (!this._clickArg) return this;\n\t\tthis.link().removeEventListener('click',this._clickArg);\n\t\tthis._clickArg = null;\n\t\treturn this;\n\t}\n\t/**\n\t * 自身のリンクへのクリックイベントの内容(クリックするとファイルが読み込まれる)\n\t * @param {Event} e イベントオブジェクト\n\t */\n\trunClick(e) {\n\t\tthis.open();\n\t\t$('#file_list_modal').modal('hide');\n\t}\n}\n/**\n * ユーザーのディレクトリ情報のひとつを扱うクラス\n */\nexport class Directory extends AbstractHierarchy {\n\t/**\n\t * @param {number} dirId ディレクトリID\n\t * @param {object} data ディレクトリの情報を持つオブジェクト\n\t * <pre>\n\t * <code>\n\t *  // データの内容例\n\t * {\n\t *\t\t\"directoryname\": \"dirname\",\n\t *\t\t\"4\":\"indirfile\",\n\t *\t\t\"9\":\"file\",\n\t *\t\t\"12\": {\n\t *\t\t\t\"directoryname\": \"seconddir\",\n\t *\t\t\t\"17\": \"file\"\n\t *\t\t}\n\t *\t}\n\t *\t</code>\n\t *\t</pre>\n\t */\n\tconstructor(dirId,data) {\n\t\t/*\n\t\t * dataの中身例(rootから見て)\n\t\t * data = {\n\t\t * \t\"directoryname\": \"root\",\n\t\t * \t\"1\":\"sample\",\n\t\t * \t\"8\":\"file\",\n\t\t * \t\"6\": {\n\t\t * \t\t\"directoryname\": \"dirname\",\n\t\t * \t\t\"4\":\"indirfile\",\n\t\t * \t\t\"9\":\"file\",\n\t\t * \t\t\"12\": {\n\t\t * \t\t\t\"directoryname\": \"seconddir\",\n\t\t * \t\t\t\"17\": \"file\"\n\t\t * \t\t}\n\t\t * \t}\n\t\t * }\n\t\t * fileId:filename\n\t\t */\n\t\tsuper(Util.createDirectoryElement(dirId,data));\n\t\tthis._link = this.elem().getElementsByTagName('a')[0];\n\t\tthis._innerList = this.elem().getElementsByTagName('ul')[0];\n\n\t\tthis._id = parseInt(dirId);\n\t\tthis._name = data['directoryname'];\n\t\tfor (let id in data) {\n\t\t\tif (id === 'directoryname') continue;\n\t\t\tif (typeof data[id] === 'string') {\n\t\t\t\tthis.append(new File(id,data[id]));\n\t\t\t} else {\n\t\t\t\tthis.append(new Directory(id,data[id]));\n\t\t\t}\n\t\t}\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 内部のaタグのDOM要素を取得する\n\t * @return {Element} 自身の持つaタグのDOM要素\n\t */\n\tlink() {\n\t\treturn this._link;\n\t}\n\t/**\n\t * 自身の内部の要素の構築先であるDOM要素(コラプスの内容の格納先)を返す\n\t * @return {Element} 自身の内部リストのDOM要素\n\t */\n\tinnerList() {\n\t\treturn this._innerList;\n\t}\n\t/**\n\t * 自身の属するファイルリストの参照を探して取得する\n\t * @return {FileList} 自身の属するファイルリストのインスタンス。見つからなければnull\n\t */\n\tfileList() {\n\t\tfor (let parentDir = this.parent(); parentDir ;parentDir = parentDir.parent() ) {\n\t\t\tif (parentDir.isRoot()) return parentDir;\n\t\t}\n\t\treturn null;\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身がFileListのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にfalse\n\t */\n\tisRoot() {\n\t\treturn false;\n\t}\n\t/**\n\t * 自身がDirectoryのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にtrue\n\t */\n\tisDirectory() {\n\t\treturn true;\n\t}\n\t/**\n\t * 自身がFileのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にfalse\n\t */\n\tisFile() {\n\t\treturn false;\n\t}\n\n\t// --参照操作\n\n\t// --Status\n\n\t/**\n\t * 自身のIDを返す\n\t * @return {number} 自身のID\n\t */\n\tid() {\n\t\treturn this._id;\n\t}\n\t/**\n\t * 自身のディレクトリ名を返す\n\t * @return {string} 自身のディレクトリ名\n\t */\n\tname() {\n\t\treturn this._name;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * 自身の内部の最後にfileを追加する\n\t * @param {File Directory} file 追加するファイル、あるいはディレクトリのインスタンス\n\t * @return {Directory} 自身のインスタンス\n\t */\n\tappend(file) {\n\t\t// DOM\n\t\tthis.appendElem(file);\n\n\t\t// ポインタ調整\n\t\t// 最初の要素と最後の要素はつなげる\n\n\t\tif (this.hasChild()) {\n\t\t\tthis.lastChild().next(file);\n\t\t\tfile.prev(this.lastChild());\n\t\t}\n\t\tfile.parent(this);\n\t\tthis.pushChild(file);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身の内部リストの内部の最後にfileのDOM要素を追加する\n\t * @param {File Directory} file 追加するファイル、あるいはディレクトリのインスタンス\n\t * @return {Directory} 自身のインスタンス\n\t */\n\tappendElem(file) {\n\t\tthis.innerList().appendChild(file.elem());\n\t\treturn this;\n\t}\n\t/**\n\t * 自身を削除する(非同期通信)\n\t * @param {boolean} [opt_bl=false] 自身の内部にファイルがあるとき、強制的に中のファイルごと削除するならtrue、そうでなければfalseを指定する\n\t * @return {Directory} 自身のインスタンス\n\t */\n\tdelete(opt_bl) {\n\t\tconst bl = opt_bl || false; // 引数省略の場合でも、明確にfalseを入れる\n\t\tUtil.post(\"/tategaki/DeleteDirectory\",{\n\t\t\tdirectory_id: this.id(),\n\t\t\toption: bl\n\t\t},function (data) {\n\t\t\tthis.fileList().read();\n\t\t\tif (data.result === 'within') {\n\t\t\t\talert('ディレクトリが空ではないので削除できませんでした。');\n\t\t\t}\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n}\n/**\n * ファイルやディレクトリを一覧にするファイルリストを表すクラス\n */\nexport class FileList extends AbstractHierarchy {\n\t/**\n\t * @param {SentenceContainer} sentenceContainer 自身のファイルを展開する文章コンテナのインスタンス\n\t * @param {object} [opt_data] ファイルやディレクトリの情報を扱うオブジェクト。省略した場合は、init()にdataを渡して参照やDOMの構築を行う\n\t * <pre>\n\t * <code>\n\t *  // dataの中身例\n\t * {\n\t * \t\"directoryname\": \"root\",\n\t * \t\"1\":\"sample\",\n\t * \t\"8\":\"file\",\n\t * \t\"6\": {\n\t * \t\t\"directoryname\": \"dirname\",\n\t * \t\t\"4\":\"indirfile\",\n\t * \t\t\"9\":\"file\",\n\t * \t\t\"12\": {\n\t * \t\t\t\"directoryname\": \"seconddir\",\n\t * \t\t\t\"17\": \"file\"\n\t * \t\t}\n\t * \t}\n\t * }\n\t * </code>\n\t * </pre>\n\t */\n\tconstructor(sentenceContainer,opt_data) {\n\t\tsuper(document.getElementById('file_list'));\n\t\tthis._sentenceContainer = sentenceContainer;\n\t\tthis._$modal = $('#file_list_modal');\n\t\tthis._filterInputElem = document.getElementById('file_list_filter');\n\t\tthis.addEventListenerOnInput();\n\t\tif (opt_data) {\n\t\t\tthis.init(opt_data);\n\t\t} else {\n\t\t\tthis.read();\n\t\t}\n\t}\n\t/**\n\t * 参照やDOMの構築を行う\n\t * @param {object} data ファイルやディレクトリの情報を扱うオブジェクト。詳細はconstructorの説明へ\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tinit(data) {\n\t\tthis.empty();\n\t\tfor (let id in data) {\n\t\t\tif (id === 'directoryname') continue;\n\t\t\tif (typeof data[id] === 'string') {\n\t\t\t\tthis.append(new File(id,data[id]));\n\t\t\t} else {\n\t\t\t\tthis.append(new Directory(id,data[id]));\n\t\t\t}\n\t\t}\n\t\tthis.chainFile();\n\t\treturn this;\n\t}\n\t// --参照取得\n\n\t/**\n\t * 文章コンテナのインスタンスを返す\n\t * @return {SentenceContainer} 自身のファイルを展開する文章コンテナのインスタンス\n\t */\n\tsentenceContainer() {\n\t\treturn this._sentenceContainer;\n\t}\n\t/**\n\t * 自身の子のうち、最初のファイルのインスタンスを取得する\n\t * @return {File} 最初のファイルのインスタンス\n\t */\n\tfirstFile() {\n\t\treturn this.findNextFile(this);\n\t}\n\t/**\n\t * 自身の子のうち、最後のファイルのインスタンスを取得する\n\t * @return {File} 最後のファイルのインスタンス\n\t */\n\tlastFile() {\n\t\tfor (let file = this.firstFile(); file; file = file.nextFile()) {\n\t\t\tif (file.isLastFile()) return file;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * 現在文章コンテナに展開されているファイルのインスタンスを返す\n\t * @return {File} 現在開かれているファイルのインスタンス\n\t */\n\tcurrentFile() {\n\t\tfor (let file = this.firstFile(); file; file = file.nextFile()) {\n\t\t\tif (file.isOpen()) return file;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * ファイルリストのモーダルのjQueryオブジェクトを返す\n\t * @return {jQuery} ファイルリストモーダルのjQueryオブジェクト\n\t */\n\t$modal() {\n\t\treturn this._$modal;\n\t}\n\t/**\n\t * ファイルリストモーダル下部にある検索ボックスのDOM要素を返す\n\t * @return {Element} 検索用InputのDOM要素\n\t */\n\tfilterInputElem() {\n\t\treturn this._filterInputElem;\n\t}\n\t/**\n\t * 指定されたファイルのインスタンスを探索して返す。同じ名前を持つファイルが複数見つかる場合もあるので、結果は配列にして返す\n\t * @param {number string} idOrName 対象ファイルのID、もしくはファイル名\n\t * @return {File[]} 見つかったファイルインスタンスの配列\n\t */\n\tfindFile(idOrName) {\n\t\tconst ret = [];\n\t\tfor (let file = this.firstFile(); file; file = file.nextFile()) {\n\t\t\tif (file.id() == idOrName || (typeof idOrName === 'string' && new RegExp('^'+ idOrName +'$','i').test(file.name()))) {\n\t\t\t\tret.push(file);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t/**\n\t * 指定されたディレクトリのインスタンスを探索して返す。同じ名前を持つディレクトリが複数見つかる場合もあるので、結果は配列にして返す\n\t * @param {number string} idOrName 対象ディレクトリのID、もしくはディレクトリ名\n\t * @return {Directory[]} 見つかったディレクトリインスタンスの配列\n\t */\n\tfindDirectory(idOrName) {\n\t\tconst ret = [];\n\t\tthis.each(function (dir) {\n\t\t\tif (dir.isDirectory && (dir.id() === idOrName || (typeof idOrName === 'string' && new RegExp('^'+ idOrName +'$','i').test(dir.name())))) {\n\t\t\t\tret.push(dir);\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t}\n\n\t// --判定\n\n\t/**\n\t * 自身がFileListのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にtrue\n\t */\n\tisRoot() {\n\t\treturn true;\n\t}\n\t/**\n\t * 自身がDirectoryのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にfalse\n\t */\n\tisFile() {\n\t\treturn false;\n\t}\n\t/**\n\t * 自身がFileのインスタンスであるかどうかを返す\n\t * @return {boolean} 常にfalse\n\t */\n\tisDirectory() {\n\t\treturn false;\n\t}\n\t/**\n\t * ファイルリストのモーダルが開いているかどうかを返す\n\t * @return {boolean} ファイルリストのモーダルが開いていればtrue、そうでなければfalse\n\t */\n\tisOpen() {\n\t\treturn this.$modal().hasClass('in');\n\t}\n\t/**\n\t * 自身の内部にファイルがあるかどうかを返す\n\t * @return {boolean} ファイルがあればtrue、そうでなければfalse\n\t */\n\thasFile() {\n\t\treturn this.firstFile() !== null;\n\t}\n\n\t// --参照操作\n\n\t/**\n\t * 内部のFile同士をポインタでつなぐ\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tchainFile() {\n\t\tlet prev;\n\t\tthis.each(function (file) {\n\t\t\tif (!file.isFile()) return;\n\t\t\tif (prev) prev.nextFile(file);\n\t\t\tfile.prevFile(prev);\n\t\t\tprev = file;\n\t\t});\n\t\treturn this;\n\t}\n\t/**\n\t * リストで上からファイルだけを数えた場合の、引数の次のファイルを返す\n\t * @param {FileList File Directory} file 基準とするインスタンス\n\t * @return {File} 見つかったファイルのインスタンス。引数の次のファイルが見つからなければnull\n\t */\n\tfindNextFile(file) {\n\t\t// チェックする順番は、ファイルならその次のファイルをチェックし、ディレクトリなら下に潜って最初に見つけたファイルをチェックする\n\t\t// -- 全要素を順に探索していくための道のり --\n\t\t// 引数がファイルなら。引数の次を確認する\n\t\t// 引数がディレクトリなら、その最初の子を確認する(FileListはディレクトリ扱い)\n\t\t// 空ディレクトリ(firstChild()===null)なら、引数の次を確認する\n\t\t// 引数の次が同じ階層になければ(ディレクトリ内の最後と判断する)、親ディレクトリの次を確認する(それでもなければ、さらに上の親ディレクトリの次、と繰り返す)\n\t\t// 引数の次の要素が見つからず親をたどっていく過程でルートディレクトリ(FileList)に辿り着いた場合は、探索が最後に達したとしてnullを返す\n\t\t// -- ここまでで確認要素を取得 --\n\t\t// 取得した確認要素がディレクトリなら、さらに潜って探索を次に進めるため再帰する\n\t\t// 取得した確認要素がファイルなら、その要素が引数の次のファイルなので返す\n\t\tif (file.isEmpty() && file.isRoot()) return null;\n\t\tlet check;\n\t\tif (file.isFile()) {\n\t\t\tcheck = file.next();\n\t\t}\n\t\tif (file.isDirectory() || file.isRoot()) {\n\t\t\tcheck = file.firstChild() || file.next();\n\t\t}\n\t\tif (!check) {\n\t\t\tfor (let parentDir = file.parent(); !(check = parentDir.next()); parentDir = parentDir.parent()) {\n\t\t\t\tif (parentDir.isRoot()) return null;\n\t\t\t}\n\t\t}\n\t\tif (check.isDirectory()) {\n\t\t\treturn this.findNextFile(check);\n\t\t}\n\t\tif (check.isFile()) {\n\t\t\treturn check;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * すべてのファイルとディレクトリを順に引数にして関数を実行する\n\t * @param {function} func 実行する関数オブジェクト\n\t * @return {FileList} 自身のインスタンス\n\t */\n\teach(func) {\n\t\t// fileに子があれば子に進み、なければ次に進む(子のあるディレクトリなら最初の子、fileか空ディレクトリなら次に進む)\n\t\t// 次がなければ親の次に進む。それでもなければさらに親の次、と繰り返す\n\t\t// その過程でルートディレクトリが見つかれば探索終了\n\t\tfor (let file = this.firstChild(),temp = this;; temp = file, file = file.hasChild() ? file.firstChild() : file.next()) {\n\t\t\tif (!file) {\n\t\t\t\tfor (let parentDir = temp.parent(); !(file = parentDir.next()); parentDir = parentDir.parent()) {\n\t\t\t\t\tif (parentDir.isRoot()) return this;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunc(file);\n\t\t}\n\t\treturn this;\n\t}\n\n\t// --Style\n\n\t/**\n\t * ファイルリストのモーダルを開く。その際、ファイル検索ボックスに自動的にフォーカスを当てる\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tshowModal() {\n\t\tthis.filterInputElem().value = '';\n\t\tthis.filterInputElem().focus();\n\t\tthis.resetList();\n\t\tthis.$modal().modal();\n\t\treturn this;\n\t}\n\t/**\n\t * ファイルリストのモーダルを閉じる\n\t * @return {FileList} 自身のインスタンス\n\t */\n\thideModal() {\n\t\tthis.$modal().modal('hide');\n\t\treturn this;\n\t}\n\n\t// --DOM操作\n\n\t/**\n\t * ファイルリストの末端にファイル、またはディレクトリを追加する\n\t * @param {File Directory} file 追加するファイル、またはディレクトリ\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tappend(file) {\n\t\t// DOM\n\t\tthis.appendElem(file);\n\n\t\t// ポインタ調整\n\t\t// 最初の要素と最後の要素はつなげる\n\n\t\tif (this.hasChild()) {\n\t\t\tthis.lastChild().next(file);\n\t\t\tfile.prev(this.lastChild());\n\t\t}\n\t\tfile.parent(this);\n\t\tthis.pushChild(file);\n\t\treturn this;\n\t}\n\t/**\n\t * 自身のDOM要素の内部の最後にfileのDOM要素を追加する\n\t * @param {File Directory} file 追加するファイル、またはディレクトリのインスタンス\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tappendElem(file) {\n\t\tthis.elem().appendChild(file.elem());\n\t\treturn this;\n\t}\n\t/**\n\t * 内部のエレメントを空にする\n\t * @return {FileList} 自身のインスタンス\n\t */\n\temptyElem() {\n\t\t// FileListは内部のエレメントが参照とは独立して変動するため、参照として保持しているエレメントを削除する方式では\n\t\t// 存在しないエレメントを削除しようとすることになりエラーが起こるため、オーバーライドする\n\t\tconst children = this.elem().children;\n\t\tlet child;\n\t\twhile (child = children[0]) {\n\t\t\tthis.elem().removeChild(child);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 各インスタンスの参照はそのままで、DOM要素のみを構築し直す\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tresetList() {\n\t\tthis.emptyElem();\n\t\tthis.each(function (file) {\n\t\t\tfile.parent().appendElem(file);\n\t\t});\n\t\treturn this;\n\t}\n\t/**\n\t * ファイルリストの内容をstrから始まる名前を持つファイル・ディレクトリのみに置き換える(各インスタンスの参照はそのままで、DOM要素のみを変更する)\n\t * @param {string} str この文字列から始まる名前を持つファイル、ディレクトリだけがファイルリスト内に表示される\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tfilter(str) {\n\t\tthis.emptyElem();\n\t\tconst regexp = new RegExp('^'+ str +'.*','i');\n\t\tthis.each(function (file) {\n\t\t\tif (regexp.test(file.name())) {\n\t\t\t\tthis.elem().appendChild(file.elem());\n\t\t\t}\n\t\t}.bind(this));\n\t\tif (this.elem().children.length === 0) {\n\t\t\tconst li = document.createElement('li');\n\t\t\tli.textContent = '該当するファイルは見つかりませんでした。';\n\t\t\tthis.elem().appendChild(li);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * ファイルリストをサーバーから読み込み、各インスタンスを構築し直す(非同期通信)\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tread() {\n\t\tconst userId = this.sentenceContainer().userId();\n\t\tUtil.post(\"/tategaki/FileListMaker\",{\n\t\t\tuser_id: userId\n\t\t},function (json) {\n\t\t\tthis.init(json);\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\t/**\n\t * 現在開いているファイルの次のファイルを読み込み、文章コンテナに展開する\n\t * @return {FileList} 自身のインスタンス\n\t */\n\topenNextFile() {\n\t\tconst currentFile = this.currentFile();\n\t\tconst file = currentFile && currentFile.nextFile();\n\t\tif (file) {\n\t\t\tfile.open();\n\t\t} else if(this.hasFile()) {\n\t\t\tthis.firstFile().open();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 現在開いているファイルの前のファイルを読み込み、文章コンテナに展開する\n\t * @return {FileList} 自身のインスタンス\n\t */\n\topenPrevFile() {\n\t\tconst currentFile = this.currentFile();\n\t\tconst file = currentFile && currentFile.prevFile();\n\t\tif (file) {\n\t\t\tfile.open();\n\t\t} else {\n\t\t\tthis.lastFile().open();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 名前で指定されたファイルを削除する(非同期通信)。同名のファイルが複数見つかった場合は確認する\n\t * @param {string} filename 削除するファイルの名前\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tdeleteFile(filename) {\n\t\tconst files = this.findFile(filename);\n\t\tconst fileLength = files.length;\n\t\tif (fileLength === 0) {\n\t\t\tthis.sentenceContainer().userAlert('存在しないファイルです','red');\n\t\t\treturn this;\n\t\t}\n\t\tif (fileLength === 1) {\n\t\t\tfiles[0].delete();\n\t\t\treturn this;\n\t\t}\n\t\tif (fileLength > 0) {\n\t\t\tif (window.confirm('同一名のファイルが複数存在します。\\nすべてのファイルを削除しますか。\\nこのうちのどれかのファイルを削除する場合はキャンセルし、個別に削除してください。')) {\n\t\t\t\tfor (let i = 0,file; file = files[i]; i++) {\n\t\t\t\t\tfile.delete();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('[複数ファイル]削除できませんでした。:' + filename);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 指定された名前でディレクトリを作成する(非同期通信)\n\t * @param {string} dirname 新しく作成されるディレクトリの名前\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tmkdir(dirname) {\n\t\tif (!dirname) return this;\n\t\tUtil.post(\"/tategaki/DirectoryMaker\",{\n\t\t\tuser_id: this.sentenceContainer().userId(),\n\t\t\tdirectoryname: dirname,\n\t\t\tsaved: Date.now()\n\t\t},function (data) {\n\t\t\tthis.sentenceContainer().userAlert('ディレクトリを作成しました:'+ dirname);\n\t\t\tthis.read();\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\t/**\n\t * 指定された名前のディレクトリを削除する(非同期通信)\n\t * @param {string} dirname 削除するディレクトリの名前\n\t * @param {boolean} isForce ディレクトリ内にファイル等があっても強制的に中身ごと削除するならtrue、そうでなければfalse\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tdeleteDirectory(dirname,isForce) {\n\t\tconst dirs = this.findDirectory(dirname);\n\t\tif (dirs.length === 0) return this;\n\t\tdirs[0].delete(isForce);\n\t\treturn this;\n\t}\n\t/**\n\t * 指定されたファイルを指定されたディレクトリ内に移動する(非同期通信)\n\t * @param {string} filename 移動するファイル名。同名のファイルが見つかった場合は、最初に見つかったファイルが選択される\n\t * @param {string} dirname 移動先のディレクトリ名。同名のディレクトリが見つかった場合は、最初に見つかったディレクトリが選択される\n\t * @return {FileList} 自身のインスタンス\n\t */\n\tmoveFile(filename,dirname) {\n\t\tconst files = this.findFile(filename);\n\t\tconst dirs = this.findDirectory(dirname);\n\t\tif (files.length === 0 || dirs.length === 0) return this;\n\t\tfiles[0].move(dirs[0]);\n\t\treturn this;\n\t}\n\n\t// --イベント\n\n\t/**\n\t * ファイルリストのモーダル内にあるファイル検索ボックス関係のイベントを付加する\n\t */\n\taddEventListenerOnInput() {\n\t\t// モーダルが開くと、検索欄にフォーカスが移動する\n\t\tthis.$modal().on('shown.bs.modal',function (e) {\n\t\t\tthis.filterInputElem().focus();\n\t\t}.bind(this));\n\t\t// ファイル検索欄\n\t\tthis.filterInputElem().addEventListener('keyup',this.onKeyupOnInput.bind(this));\n\t}\n\t/**\n\t * ファイル検索ボックスのkeyupイベントの内容\n\t * @param {Event} e イベントオブジェクト\n\t */\n\tonKeyupOnInput(e) {\n\t\tlet keycode;\n\t\tif (document.all) {\n\t\t\t// IE\n\t\t\tkeycode = e.keyCode\n\t\t} else {\n\t\t\t// IE以外\n\t\t\tkeycode = e.which;\n\t\t}\n\t\tif (keycode === 123) { return; } // F12のみブラウザショートカットキー\n\t\tif (keycode == 13) {\n\t\t\t// enter\n\t\t\tconst file = this.findFile(this.filterInputElem().value)[0];\n\t\t\tif (file) {\n\t\t\t\tfile.open();\n\t\t\t}\n\t\t\tthis.hideModal();\n\t\t\tthis.resetList();\n\t\t} else if (this.filterInputElem().value.length === 0) {\n\t\t\tthis.resetList();\n\t\t} else {\n\t\t\tthis.filter(this.filterInputElem().value);\n\t\t}\n\t}\n}\n\n/**\n * 文章コンテナを表すクラス\n */\nexport class SentenceContainer extends AbstractHierarchy {\n\t/**\n\t * @param {number} userId ユーザーID\n\t * @param {object} [opt_data] 文書情報のオブジェクト\n\t * <pre>\n\t * {\n\t * \t\"filename\": \"sampleFile\",\n\t * \t\"fileId\": \"12\",\n\t *\t\t\"saved\": \"2016-08-23 02:13:05\",\n\t *\t\t\"userId\": \"7\",\n\t *\t\t\"data\": {\n\t *\t\t\t\"conf\": { // 文書全体に関する設定情報\n\t *\t\t\t\t\"strLen\": \"36\",\n\t *\t\t\t\t\"rowLen\": \"42\"\n\t *\t\t\t},\n\t *\t\t\t\"text\":[ // 各段落の情報が入った配列の配列\n\t *\t\t\t\t\t\t[ // 段落の情報が入った配列\n\t *\t\t\t\t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t *\t\t\t\t\t\t\t[\t // 各文字のオブジェクトが配列で格納される\n\t *\t\t\t\t\t\t\t\t{\t // 文字を表すオブジェクト\n\t *\t\t\t\t\t\t\t\t\t\"char\":\"あ\",\n\t *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"],\n\t *\t\t\t\t\t\t\t\t\t\"fontSize\":\"auto\"\n\t *\t\t\t\t\t\t\t\t},\n\t *\t\t\t\t\t\t\t\t{\n\t *\t\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t *\t\t\t\t\t\t\t\t\t\"decolation\":[]\n\t *\t\t\t\t\t\t\t\t}\n\t *\t\t\t\t\t\t\t]\n\t *\t\t\t\t\t\t],\n\t *\t\t\t\t\t\t[\n\t *\t\t\t\t\t\t\t[],\n\t *\t\t\t\t\t\t\t[\n\t *\t\t\t\t\t\t\t\t{\n\t *\t\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t *\t\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t *\t\t\t\t\t\t\t\t},\n\t *\t\t\t\t\t\t\t\t{\n\t *\t\t\t\t\t\t\t\t\t\"char\":\"う\",\n\t *\t\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t *\t\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t *\t\t\t\t\t\t\t\t}\n\t *\t\t\t\t\t\t\t]\n\t *\t\t\t\t\t\t]\n\t *\t\t\t]\n\t *\t\t}\n\t * }\n\t * </pre>\n\t */\n\tconstructor(userId,opt_data) {\n\t\tsuper(document.getElementById('sentence_container'));\n\t\tif (opt_data) this.init(opt_data);\n\t\tthis._userId = userId;\n\t\tthis._titleElem = document.getElementById('file_title');\n\t\tthis._searchInputElem = document.getElementById('search');\n\t\tthis._userAlertElem = document.getElementById('user_info');\n\t\tthis.addFileTitleEvent();\n\t\tthis.addSelectEvent();\n\t\tthis._cursor = new Cursor(this);\n\t\tthis._inputBuffer = new InputBuffer(this);\n\t\tthis._fileList = new FileList(this);\n\t\tthis._command = new CommandLine(this);\n\t\tthis._menu = new Menu(this);\n\n\t\tif (!opt_data) this.newFile();\n\t}\n\t/**\n\t * 文書をコンテナに展開する\n\t * @param {object} data 文書情報のオブジェクト\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tinit(data) {\n\t\tthis.empty();\n\t\t// 文書情報\n\t\tthis.filename(data[\"filename\"]);\n\t\tthis.fileId(data[\"fileId\"]);\n\t\tthis.saved(data[\"saved\"] || (new Date(Date.now()).toLocaleDateString() + ' ' + new Date(Date.now()).toLocaleTimeString()).replace(/\\//g,'-'));\n\t\tthis._strLenOnRow = data[\"data\"][\"conf\"][\"strLen\"] || 40; // １行の文字数\n\t\tthis._rowLenOnPage = data[\"data\"][\"conf\"][\"rowLen\"] || 40; // １ページの行数\n\t\tthis.menu().confStrLenElem().value = this._strLenOnRow;\n\t\tthis.menu().confRowLenElem().value = this._rowLenOnPage;\n\t\t// DOMの構築\n\t\tfor (let paraData of data[\"data\"][\"text\"]) {\n\t\t\tthis.append(new Paragraph(paraData));\n\t\t}\n\n\t\tthis.cursor().init();\n\t\tthis.cordinate().resetDisplay();\n\t\tthis.breakPage().printInfo();\n\t\tthis.addKeydownEventListener();\n\t\tthis.addWheelEventListener();\n\t\treturn this;\n\t}\n\n\t// --参照取得\n\n\t/**\n\t * 指定された段落のインスタンス、あるいは引数省略で子の段落のインスタンスの配列を取得する\n\t * @param {number} [opt_index] 取得する段落のインデックス\n\t * @return {Paragraph Paragraph[]} 指定された段落のインスタンス。あるいは引数省略で段落のインスタンスの配列(子がなければ空の配列)\n\t */\n\tparagraphs(opt_index) {\n\t\treturn this.children(opt_index);\n\t}\n\t/**\n\t * 文章内の最初の行のインスタンスを返す\n\t * @return {Row} 最初の行のインスタンス\n\t */\n\tfirstRow() {\n\t\treturn this.firstChild().firstChild();\n\t}\n\t/**\n\t * 文章内の最終行のインスタンスを返す\n\t * @return {Row} 最終行のインスタンス\n\t */\n\tlastRow() {\n\t\treturn this.lastChild().lastChild();\n\t}\n\t/**\n\t * num行目のRowを取得する。numが負の数なら最初の行、numが行数以上の数値であれば最終行のインスタンスが取得される\n\t * @param {number} num 取得する行のインデックス\n\t * @return {Row} 見つかった行のインスタンス\n\t */\n\trow(num) {\n\t\tif (num <= 0) return this.firstRow();\n\t\tlet cnt = 0;\n\t\tfor (let row = this.firstRow(); row; row = row.next()) {\n\t\t\tcnt++;\n\t\t\tif (cnt === num) return row;\n\t\t}\n\t\treturn this.lastRow();\n\t}\n\t/**\n\t * numページ目の第一行目のRowを取得する。numが負の数なら最初の行、numがページ数以上の数値であれば最終行のインスタンスが取得される\n\t * @param {number} num 何ページ目か\n\t * @return {Row} 見つかった行のインスタンス\n\t */\n\tpageRow(num) {\n\t\tif (num <= 0) return this.firstRow();\n\t\tlet cnt = 0;\n\t\tfor (let row = this.firstRow(); row; row = row.next()) {\n\t\t\tif (row.isPageBreak()) {\n\t\t\t\tcnt++;\n\t\t\t\tif (cnt === num) return row;\n\t\t\t}\n\t\t}\n\t\treturn this.lastRow();\n\t}\n\t/**\n\t * 文書内で最初の文字(あるいはEOL)のインスタンスを返す\n\t * @return {Char EOL} 見つかった文字のインスタンス\n\t */\n\tfirstChar() {\n\t\treturn this.firstRow().firstChild();\n\t}\n\t/**\n\t * 文書内で最終文字(EOLは除く)のインスタンスを返す\n\t * @return {Char} 見つかった文字のインスタンス\n\t */\n\tlastChar() {\n\t\treturn this.lastEOL().prevChar();\n\t}\n\t/**\n\t * 文書内で最終行のEOLを返す\n\t * @return {EOL} 最後のEOL\n\t */\n\tlastEOL() {\n\t\treturn this.lastRow().lastChild();\n\t}\n\t/**\n\t * カーソルのインスタンスを返す\n\t * @return {Cursor} 文書内のカーソルのインスタンス\n\t */\n\tcursor() {\n\t\treturn this._cursor;\n\t}\n\t/**\n\t * この文書内でカーソルのあたっている文字のインスタンスを返す\n\t * @return {Char} カーソル文字のインスタンス\n\t */\n\tcursorChar() {\n\t\treturn this.cursor().getChar();\n\t}\n\t/**\n\t * この文書内でカーソルのある行のインスタンスを返す\n\t * @return {Row} カーソル行のインスタンス\n\t */\n\tcursorRow() {\n\t\treturn this.cursorChar().row();\n\t}\n\t/**\n\t * この文書に入力する際に使用する入力バッファーのインスタンスを返す\n\t * @return {InputBuffer} 入力バッファーのインスタンス\n\t */\n\tinputBuffer() {\n\t\treturn this._inputBuffer;\n\t}\n\t/**\n\t * この文書コンテナを使用するファイルリストのインスタンスを返す\n\t * @return {FileList} ファイルリストのインスタンス\n\t */\n\tfileList() {\n\t\treturn this._fileList;\n\t}\n\t/**\n\t * コマンドラインのインスタンスを返す\n\t * @return {CommandLine} コマンドラインのインスタンス\n\t */\n\tcommand() {\n\t\treturn this._command;\n\t}\n\t/**\n\t * ファイル名InputフォームのDOM要素を返す\n\t * @return {Element} ファイル名inputフォームのDOM要素\n\t */\n\ttitleElem() {\n\t\treturn this._titleElem;\n\t}\n\t/**\n\t * 文書内語句検索で使用するinputフォームのDOM要素を返す\n\t * @return {Element} 語句検索inputフォームのDOM要素\n\t */\n\tsearchInputElem() {\n\t\treturn this._searchInputElem;\n\t}\n\t/**\n\t * ユーザーへの情報を表示するinputフォームのDOM要素を返す\n\t * @return {Element} 情報表示inputフォームのDOM要素\n\t */\n\tuserAlertElem() {\n\t\treturn this._userAlertElem;\n\t}\n\t/**\n\t * この文書を操作するMenuクラスのインスタンスを返す\n\t * @return {Menu} メニューバーのインスタンス\n\t */\n\tmenu() {\n\t\treturn this._menu;\n\t}\n\n\t// --判定\n\n\t/**\n\t * この文書内に段落が存在するかどうかを返す\n\t * @return {boolean} 段落が存在するならtrue、そうでなければfalse\n\t */\n\thasParagraph() {\n\t\treturn this.hasChild();\n\t}\n\n\t// --参照操作\n\n\t/**\n\t * 子の最後にparagraphを追加する\n\t * @param {Paragraph} paragraph 追加する段落のインスタンス\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tpushParagraph(paragraph) {\n\t\treturn this.pushChild(paragraph);\n\t}\n\t/**\n\t * 子の指定された位置にparagraphを挿入する\n\t * @param {number} pos 挿入する位置のインデックス\n\t * @param {Paragraph} paragraph 挿入するインスタンス\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tinsertParagraph(pos,paragraph) {\n\t\treturn this.insertChild(pos,paragraph);\n\t}\n\t/**\n\t * 子からparagraphを削除する\n\t * @param {Paragraph} paragraph 削除する段落のインスタンス\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tdeleteParagraph(paragraph) {\n\t\treturn this.deleteChild(paragraph);\n\t}\n\n\t// --Status\n\n\t/**\n\t * 文書の内容を表したオブジェクトを作成する\n\t * @return {object} 文書内容を表すオブジェクト\n\t */\n\tdata() {\n\t\tconst data = {};\n\t\tdata[\"conf\"] = this.menu().configueData();\n\t\tconst paraArr = [];\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tparaArr.push(paragraph.data());\n\t\t}\n\t\tdata[\"text\"] = paraArr;\n\n\t\treturn JSON.stringify(data);\n\t}\n\t/**\n\t * ユーザーIDを返す\n\t * @return {number} ユーザーID\n\t */\n\tuserId() {\n\t\treturn this._userId;\n\t}\n\t/**\n\t * この文書内に展開しているファイル名を変更する、あるいは引数省略で現在のファイル名を取得する\n\t * @param {string} [opt_newFilename] 新たに設定するファイル名\n\t * @return {SentenceContainer string} 自身のインスタンス(引数を渡した場合)、あるいは現在のファイル名(引数を省略した場合)\n\t */\n\tfilename(opt_newFilename) {\n\t\tif (opt_newFilename === undefined) {\n\t\t\treturn this._filename;\n\t\t} else {\n\t\t\tthis._filename = opt_newFilename;\n\t\t\tthis.titleElem().value = opt_newFilename;\n\t\t\tthis.titleElem().dataset.filename = opt_newFilename;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 現在のファイルに新たなIDを与える、あるいは引数省略で現在のファイルIDを取得する\n\t * @param {number} [opt_newId] 新たに設定するID\n\t * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在のファイルID(引数を省略した場合)\n\t */\n\tfileId(opt_newId) {\n\t\tif (opt_newId === undefined) {\n\t\t\treturn this._fileId;\n\t\t} else {\n\t\t\tconst newId = opt_newId;\n\t\t\tthis._fileId = newId;\n\t\t\tthis.titleElem().dataset.fileId = newId;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 最終更新日時を設定、あるいは引数省略で最終更新日時を取得する\n\t * @param {string} [opt_newSaved] 新たに設定する最終更新日時の文字列\n\t * @return {SentenceContainer string} 自身のインスタンス(引数を渡した場合)、あるいは現在の最終更新日時の文字列(引数を省略した場合)\n\t */\n\tsaved(opt_newSaved) {\n\t\tif (opt_newSaved === undefined) {\n\t\t\treturn this._saved;\n\t\t} else {\n\t\t\tconst newSaved = opt_newSaved;\n\t\t\tthis._saved = newSaved;\n\t\t\tdocument.getElementById('saved').textContent = newSaved;\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 一行の文字数を変更する、あるいは引数省略で現在の設定上の一行の文字数を取得する\n\t * @param {number} [opt_newStrLen] 新たに設定する行内文字数\n\t * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在の設定上の行内文字数(引数を省略した場合)\n\t */\n\tstrLenOnRow(opt_newStrLen) {\n\t\tif (opt_newStrLen === undefined) {\n\t\t\treturn this._strLenOnRow;\n\t\t} else {\n\t\t\tconst newStrLen = opt_newStrLen;\n\t\t\tthis._strLenOnRow = newStrLen;\n\t\t\tthis.cordinate().checkKinsoku().changeDisplay().breakPage().printInfo();\n\t\t\tthis.cursor().createCursorLine();\n\t\t\treturn this;\n\t\t}\n\t}\n\t// 設定上のページ内行数\n\t/**\n\t * 一ページの行数を変更する、あるいは引数省略で現在の一ページの行数を取得する\n\t * @param {number} [opt_newRowLen] 新たに設定するページ内行数\n\t * @return {SentenceContainer number} 自身のインスタンス(引数を渡した場合)、あるいは現在のページ内行数(引数を省略した場合)\n\t */\n\trowLenOnPage(opt_newRowLen) {\n\t\tif (opt_newRowLen === undefined) {\n\t\t\treturn this._rowLenOnPage;\n\t\t} else {\n\t\t\tconst newRowLen = opt_newRowLen;\n\t\t\tthis._rowLenOnPage = newRowLen;\n\t\t\tthis.breakPage().printInfo();\n\t\t\treturn this;\n\t\t}\n\t}\n\t/**\n\t * 文書内文字数を数える\n\t * @return {number} 文書内の総文字数\n\t */\n\tcountChar() {\n\t\tlet cnt = 0;\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tcnt += paragraph.countChar();\n\t\t}\n\t\treturn cnt;\n\t}\n\t// 全行数\n\t/**\n\t * 文書内行数を数える\n\t * @return {number} 文書内の総行数\n\t */\n\tcountRow() {\n\t\tlet cnt = 0;\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tcnt += paragraph.childLength();\n\t\t}\n\t\treturn cnt;\n\t}\n\t/**\n\t * 文書内のページ数を数える\n\t * @return {number} 文書内の総ページ数\n\t */\n\tcountPage() {\n\t\tlet cnt = 0;\n\t\tfor (let row = this.firstRow(); row; row = row.next()) {\n\t\t\tif (row.isPageBreak()) cnt++;\n\t\t}\n\t\treturn cnt;\n\t}\n\n\t// --Style\n\n\t/**\n\t * この文書コンテナの横幅を返す。文書コンテナは９０度回転しているため、css上は高さのこと\n\t * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n\t * @return {number} 自身の幅\n\t */\n\twidth(opt_useCache) {\n\t\treturn super.height(opt_useCache);\n\t}\n\t/**\n\t * この文書コンテナの高さを返す。文書コンテナは９０度回転しているため、css上は横幅のこと\n\t * @param {boolean} [opt_useCache=true] true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある\n\t * @return {number} 自身の高さ\n\t */\n\theight(opt_useCache) {\n\t\treturn super.width(opt_useCache);\n\t}\n\t/**\n\t * 文書内すべての文字から、指定されたクラスを除去する\n\t * @param {string} className 除去するクラス名\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tremoveClassFromAllChar(className) {\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tparagraph.removeClassFromAllChar(className);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 渡された文字列を本文内から探し、見つかった文字列にsearch-wordクラスを付与する。さらに、見つかった文字列の先頭文字にsearch-labelクラスを付与する\n\t *  @param {string} str 検索文字列\n\t *  @return {SentenceContainer} 自身のインスタンス\n\t */\n\tsearch(str) {\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tparagraph.search(str);\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 文書内語句検索を始める。\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tstartSearchMode() {\n\t\tthis.searchInputElem().classList.add('active');\n\t\tthis.searchInputElem().focus();\n\t\tthis.searchInputElem().value = '/';\n\t\tthis.removeKeydownEventListener();\n\t\tif (!this._keyupOnSearchArg) {\n\t\t\tthis._keyupOnSearchArg = this.onKeyupOnSearchMode.bind(this);\n\t\t\tthis.searchInputElem().addEventListener('keyup',this._keyupOnSearchArg,false);\n\t\t\tthis.searchInputElem().addEventListener('focusin',this.onFocusinOnSearchMode.bind(this));\n\t\t\tthis.searchInputElem().addEventListener('focusout',this.onFocusoutOnSearchMode.bind(this));\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 文書内語句検索を完全に終了する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tstopSearchMode() {\n\t\tthis.addKeydownEventListener();\n\t\tthis.searchInputElem().value = '';\n\t\tthis.searchInputElem().classList.remove('active');\n\t\tthis.removeClassFromAllChar('search-label').removeClassFromAllChar('search-word');\n\t\treturn this;\n\t}\n\n\t// selection\n\n\t/**\n\t * 選択範囲にある文字インスタンスを配列で返す\n\t * @param {boolean} [opt_bl] 選択範囲を解除するならtrueを指定する\n\t * @return {Char[]} 選択範囲内にある文字インスタンスの配列\n\t */\n\tselectChars(opt_bl) {\n\t\tconst ret = [];\n\t\tconst selection = getSelection();\n\t\tif (this.selectText().length === 0) return ret; // rangeCount===0とすると、EOLのみ選択されることがある\n\t\tconst selRange = selection.getRangeAt(0);\n\t\tfor (let char = this.firstChar(); char; char = char.nextChar()) {\n\t\t\tif (char.isInRange(selRange)) ret.push(char);\n\t\t}\n\t\tselRange.detach();\n\t\tif (opt_bl) selection.removeAllRanges(); // 選択を解除する\n\t\treturn ret;\n\t}\n\t/**\n\t * 選択範囲内にある文字列をローカルストレージに保存する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tcopySelectText() {\n\t\tlocalStorage.clipBoard = this.selectText();\n\t\treturn this;\n\t}\n\t// ペースト\n\t/**\n\t * ローカルストレージに保存した文字列をカーソル位置から挿入する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tpasteText() {\n\t\tthis.cursor().insert(localStorage.clipBoard);\n\t\treturn this;\n\t}\n\t/**\n\t * 選択範囲内にある文字列を返す\n\t * @return {string} 選択範囲内の文字列\n\t */\n\tselectText() {\n\t\tconst selection = getSelection();\n\t\tlet ret = '';\n\t\tfor (let i = 0,cnt = selection.rangeCount; i < cnt; i++) {\n\t\t\tconst selRange = selection.getRangeAt(i);\n\t\t\tret += selRange.toString();\n\t\t}\n\t\treturn ret;\n\t}\n\n\t// --DOM操作関係\n\n\t/**\n\t * 子を空にし、入力モード、語句検索モードは終了する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tempty() {\n\t\tthis.emptyElem();\n\t\tthis.emptyChild();\n\t\tthis.removeKeydownEventListener();\n\t\tthis.removeWheelEventListener();\n\t\tif (this.inputBuffer().isDisplay()) {\n\t\t\tthis.inputBuffer().empty().hide();\n\t\t}\n\t\tthis.stopSearchMode();\n\t\treturn this;\n\t}\n\t/**\n\t * この文章コンテナの末尾にparagraphを追加する\n\t * @param {Paragraph} paragraph 追加する段落のインスタンス\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tappend(paragraph) {\n\t\tthis.elem().appendChild(paragraph.elem());\n\t\tparagraph.container(this);\n\t\tif (!this.hasParagraph()) {\n\t\t\tthis.pushParagraph(paragraph);\n\t\t\treturn this;\n\t\t}\n\t\t// paragraph\n\t\tthis.lastChild().next(paragraph);\n\t\tparagraph.prev(this.lastChild());\n\t\t// row\n\t\tconst lastRow = this.lastChild().lastChild();\n\t\tlastRow.next(paragraph.firstChild());\n\t\tparagraph.firstChild().prev(lastRow);\n\t\t// char\n\t\tconst lastChar = lastRow.lastChild();\n\t\tlastChar.next(paragraph.firstChild().firstChild());\n\t\tparagraph.firstChild().firstChild().prev(lastChar);\n\n\t\tthis.pushParagraph(paragraph);\n\t\treturn this;\n\t}\n\t/**\n\t * 文書情報を表示する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tprintInfo() {\n\t\tdocument.getElementById('str_pos').textContent = this.cursor().currentCharPos();\n\t\tdocument.getElementById('str_len').textContent = this.cursor().strLenOfRow();\n\t\tdocument.getElementById('row_pos').textContent = this.cursor().currentRowPos();\n\t\tdocument.getElementById('row_len').textContent = this.cursor().rowLenOnPage();\n\t\tdocument.getElementById('page_pos').textContent = this.cursor().currentPage();\n\t\tdocument.getElementById('page_len').textContent = this.countPage();\n\t\treturn this;\n\t}\n\n\t// --文章整理\n\n\t/**\n\t * 各行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節する。標準以外のフォントサイズの文字があれば文字数は調整される。また、空段落以外に空行があれば削除する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tcordinate() {\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tparagraph.cordinate();\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * 禁則処理を行う。各行の文字数への変化が伴うため、必ずcordinate()の後に行うこと\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tcheckKinsoku() {\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tparagraph.checkKinsoku();\n\t\t}\n\t\treturn this;\n\t}\n\t// 改ページ\n\t/**\n\t * ページの最初の行と最終行に目印となるクラスを与える\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tbreakPage() {\n\t\tconst pageNum = this.rowLenOnPage();\n\t\t// page-break\n\t\tlet cnt1 = 0;\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tfor (let row of paragraph.rows()) {\n\t\t\t\tif (cnt1 === 0 || cnt1 % pageNum === 0) { // １行目とpageNumの倍数行目\n\t\t\t\t\trow.addClass('page-break');\n\t\t\t\t} else {\n\t\t\t\t\trow.removeClass('page-break');\n\t\t\t\t}\n\t\t\t\tcnt1++;\n\t\t\t}\n\t\t}\n\t\t// page-last-row\n\t\tlet cnt2 = 0;\n\t\tconst lastRow = this.countRow() -1;\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tfor (let row of paragraph.rows()) {\n\t\t\t\tif ((cnt2 + 1) % pageNum === 0 || cnt2 === lastRow) { // (pageNumの倍数-1)行目と最終行\n\t\t\t\t\trow.addClass('page-last-row');\n\t\t\t\t} else {\n\t\t\t\t\trow.removeClass('page-last-row');\n\t\t\t\t}\n\t\t\t\tcnt2++;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * ユーザーへの情報を表示する\n\t * @param {string} str 表示する情報\n\t * @param {string} [opt_color='black'] 黒文字以外の文字色で表示する場合に色名を指定する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tuserAlert(str,opt_color) {\n\t\tthis.userAlertElem().textContent = str;\n\t\tif (opt_color) this.userAlertElem().style.color = opt_color;\n\t\telse this.userAlertElem().style.color = '';\n\t\treturn this;\n\t}\n\n\t// --ファイル操作\n\n\t/**\n\t * 指定されたファイルを開く(非同期通信)\n\t * @param {number} fileId 開くファイルのID\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\treadFile(fileId) {\n\t\tconst file = this.fileList().findFile(fileId)[0];\n\t\tfile.open();\n\t\treturn this;\n\t}\n\t/**\n\t * 現在開いているファイルを上書き保存する。newFile()されて初めての保存なら名前をつけて保存する。(ともに非同期通信)\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tsaveFile() {\n\t\tif (this.fileId() === -1) {\n\t\t\tthis.saveAsFile(this.filename());\n\t\t\treturn this;\n\t\t}\n\t\tthis.userAlert('保存中');\n\t\tUtil.post('/tategaki/WriteJsonFile',{\n\t\t\tuser_id: this.userId(),\n\t\t\tfile_id: this.fileId(),\n\t\t\tfilename: this.filename(),\n\t\t\tjson: this.data(),\n\t\t\tsaved: Date.now()\n\t\t},function (json) {\n\t\t\tthis.saved(json.strDate).userAlert('保存しました');\n\t\t\tthis.fileList().read();\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\t/**\n\t * 現在開いているファイルを名前をつけて保存する(非同期通信)\n\t * @param {string} filename 新しいファイルの名前\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tsaveAsFile(filename) {\n\t\tUtil.post('/tategaki/FileMaker',{\n\t\t\tuser_id: this.userId(),\n\t\t\tfilename: filename,\n\t\t\tsaved: Date.now()\n\t\t},function (data) {\n\t\t\tthis.filename(data.filename).fileId(data.newFileId);\n\t\t\tconst file = new File(data.newFileId,data.filename);\n\t\t\tthis.fileList().append(file).chainFile();\n\t\t\tthis.saveFile();\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\t/**\n\t * 新しいファイルを開く\n\t * @param {string} filename 新しいファイル名\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tnewFile(filename) {\n\t\tif (filename === undefined) filename = 'newfile';\n\t\tthis.init({\n\t\t\tfileId: -1,\n\t\t\tfilename: filename,\n\t\t\tdata: {\n\t\t\t\tconf:{},\n\t\t\t\ttext:[[[],[]]]\n\t\t\t}\n\t\t}); // 空段落のデータ\n\t\treturn this;\n\t}\n\n\t// --Display関係\n\n\t/**\n\t * 文書を１行目の１文字目から表示する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tresetDisplay() {\n\t\tthis.addDisplay(0,0);\n\t\treturn this;\n\t}\n\t// strPos: 'center','right'\n\t/**\n\t * カーソル位置を基準として文書を表示し直す\n\t * @param {string} [opt_pos] 表示後のカーソル位置を指定する。'center'と'right'に対応。\n\t *     省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tchangeDisplay(opt_pos) {\n\t\tconst cursorChar = this.cursorChar();\n\t\tconst rowPos = this.computeDisplayRowPos(opt_pos);\n\t\tconst charPos = cursorChar.row().computeDisplayCharPos();\n\t\tthis.addDisplay(rowPos,charPos);\n\t\treturn this;\n\t}\n\t/**\n\t * firstRow行目以降を表示する。文字はfirstChar文字目以降が表示される\n\t * @param {number} firstRow 表示される最初の行のインデックス\n\t * @param {number} firstChar 表示される最初の文字のインデックス\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\taddDisplay(firstRow,firstChar) {\n\t\tconst dispWidth = this.width();\n\t\tconst cache = {};\n\t\tlet cnt = 0; // 総行数をカウントする\n\t\tlet sum = 0; // 表示行の幅合計\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tfor (let row of paragraph.rows()) {\n\t\t\t\tif (cnt < firstRow) {\n\t\t\t\t\trow.display(false);\n\t\t\t\t\tcnt++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 行の幅は子の最大のフォントによって決まると考え、最大フォントごとの行幅をキャッシュする(レンダリング頻度の削減)\n\t\t\t\tconst maxFont = row.maxFont();\n\t\t\t\tif (cache[maxFont]) {\n\t\t\t\t\tconst rowWidth = cache[maxFont];\n\t\t\t\t\tsum += rowWidth + 2; // 2はボーダーの幅\n\t\t\t\t} else {\n\t\t\t\t\tcache[maxFont] = row.width();\n\t\t\t\t\tconst rowWidth = cache[maxFont];\n\t\t\t\t\tsum += rowWidth + 2; // 2はボーダーの幅\n\t\t\t\t}\n\t\t\t\trow.display((sum < dispWidth),firstChar);\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * カーソル位置を基準に、最初に表示されるべき行のインデックスを返す\n\t * @param {string} [opt_pos] 表示後のカーソル位置を指定する。'center'なら、カーソル位置を中央にする。'right'なら、カーソル位置が最も右になるよう表示される。\n\t *     省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される\n\t * @return {number} 計算された最初に表示されるべき行のインデックス\n\t */\n\tcomputeDisplayRowPos(opt_pos) {\n\t\tconst currentFirst = this.firstDisplayRowPos();\n\t\tconst cursorIndex = this.cursorRowPos();\n\t\tconst currentEnd = this.lastDisplayRowPos();\n\n\t\t// カーソル位置を中央にする\n\t\t// HACK:計算前のdisplayの数を基準にするので、フォントの大きさなどによってずれもありうる\n\t\tif (opt_pos === 'center') {\n\t\t\tconst harfRange = (currentEnd - currentFirst)/2;\n\t\t\tconst ret = cursorIndex - harfRange;\n\t\t\treturn ret >= 0 ? ret : 0;\n\t\t} else if (opt_pos === 'right') {\n\t\t\treturn cursorIndex;\n\t\t}\n\n\t\tif (cursorIndex < currentFirst) {\n\t\t\t// カーソルが前にある\n\t\t\treturn cursorIndex;\n\t\t} else if (cursorIndex > currentEnd) {\n\t\t\t// カーソルが後ろにある\n\t\t\treturn currentFirst + (cursorIndex - currentEnd);\n\t\t} else {\n\t\t\t// displayに囲まれた部分にdisplayでない行がある場合\n\t\t\t// 途中行数変化\n\t\t\treturn currentFirst;\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * 現在表示されている行の最初の行のインデックスを返す\n\t * @return {number} 現在表示されている行の最初の行のインデックス。表示行がなければ-1\n\t */\n\tfirstDisplayRowPos() {\n\t\tlet cnt = 0;\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tfor (let row of paragraph.rows()) {\n\t\t\t\tif (row.isDisplay())\n\t\t\t\t\treturn cnt;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t/**\n\t * @private\n\t * 現在表示されている行の最後の行のインデックスを返す\n\t * @return {number} 現在表示されている行の最後の行のインデックス。表示行がなければ-1\n\t */\n\tlastDisplayRowPos() {\n\t\tfor (let row = this.lastRow(),cnt = this.countRow() -1; row; row = row.prev(),cnt--) {\n\t\t\tif (row.isDisplay()) return cnt;\n\t\t}\n\t\treturn -1;\n\t}\n\t/**\n\t * @private\n\t * カーソル行の文書全体で何行目かを返す\n\t * @return {number} カーソル行の文書全体でのインデックス。文書内に段落がない、あるいはカーソル行がなければ-1\n\t */\n\tcursorRowPos() {\n\t\tconst cursorRow = this.cursor().getChar().row();\n\t\tlet cnt = 0;\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tfor (let row of paragraph.rows()) {\n\t\t\t\tif (row.is(cursorRow))\n\t\t\t\t\treturn cnt;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t/**\n\t * @private\n\t * 表示されている行のうち最初の行のインスタンスを返す\n\t * @return {Row} 最初の表示行のインスタンス。表示行がなければnull\n\t */\n\tfirstDisplayRow() {\n\t\tfor (let paragraph of this.paragraphs()) {\n\t\t\tfor (let row of paragraph.rows()) {\n\t\t\t\tif (row.isDisplay()) return row;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * @private\n\t * 表示されている行のうち最後の行のインスタンスを返す\n\t * @return {Row} 最後の表示行のインスタンス。表示行がなければnull\n\t */\n\tlastDisplayRow() {\n\t\tfor (let row = this.lastRow(); row; row = row.prev()) {\n\t\t\tif (row.isDisplay()) return row;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 表示を一行分右に動かす\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tshiftRightDisplay() {\n\t\tconst charPos = this.cursorRow().computeDisplayCharPos();\n\t\tconst firstDisplay = this.firstDisplayRow();\n\t\tif (!firstDisplay.prev()) { return this; }\n\t\tfirstDisplay.prev().display(true,charPos);\n\t\tthis.lastDisplayRow().display(false);\n\t\treturn this;\n\t}\n\t/**\n\t * 表示を一行分左に動かす\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\tshiftLeftDisplay() {\n\t\tconst charPos = this.cursorRow().computeDisplayCharPos();\n\t\tconst lastDisplay = this.lastDisplayRow();\n\t\tif (!lastDisplay.next()) { return this; }\n\t\tlastDisplay.next().display(true,charPos);\n\t\tthis.firstDisplayRow().display(false);\n\t\treturn this;\n\t}\n\n\t// --イベント\n\n\t// keydown\n\t/**\n\t * この文書コンテナにkeydownイベントリスナーを付加する\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\taddKeydownEventListener() {\n\t\tthis.inputBuffer().removeKeydownEventListener()\n\t\t\t.convertContainer().removeKeydownEventListener();\n\t\tsuper.addKeydownEventListener();\n\t\treturn this;\n\t}\n\t/**\n\t * keydownイベントの実行内容\n\t * @param {Event} e イベントオブジェクト\n\t * @param {number} keycode 押下されたキーのキーコード\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\trunKeydown(e,keycode) {\n\t\tthis.userAlert('');\n\t\tif (e.ctrlKey) return this.runControlKeyDown(e,keycode);\n\n\t\tswitch (keycode) {\n\t\t\tcase 8:\n\t\t\t\t// backspace\n\t\t\t\tthis.cursor().backSpace();\n\t\t\t\tbreak;\n\t\t\tcase 13:\n\t\t\t\t// Enter\n\t\t\t\tthis.cursor().lineBreak();\n\t\t\t\tbreak;\n\t\t\tcase 32:\n\t\t\t\t// space\n\t\t\t\tthis.cursor().insert('　');\n\t\t\t\tbreak;\n\t\t\tcase 37:\n\t\t\t\t// Left\n\t\t\t\tthis.cursor().moveLeft(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 38:\n\t\t\t\t// Up\n\t\t\t\tthis.cursor().movePrev(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 39:\n\t\t\t\t// Right\n\t\t\t\tthis.cursor().moveRight(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 40:\n\t\t\t\t// Down\n\t\t\t\tthis.cursor().moveNext(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 58: // firefox developer edition\n\t\t\tcase 186: // chrome\n\t\t\t\t// :\n\t\t\t\tthis.command().start();\n\t\t\t\tbreak;\n\t\t\tcase 191:\n\t\t\t\t// /\n\t\t\t\tthis.startSearchMode();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.inputBuffer().transfer(keycode,e.shiftKey);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\t/**\n\t * @private\n\t * コントロールキーを押されていた場合のkeydownイベントの実行内容\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\trunControlKeyDown(e,keycode) {\n\t\tswitch (keycode) {\n\t\t\tcase 67:\n\t\t\t\t// c\n\t\t\t\tthis.copySelectText();\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\tcase 70:\n\t\t\t\t// f\n\t\t\t\tthis.fileList().showModal();\n\t\t\t\tbreak;\n\t\t\tcase 72:\n\t\t\t\t// h\n\t\t\t\tthis.cursor().moveLeft(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 73:\n\t\t\t\t// i\n\t\t\t\tthis.fileList().openNextFile();\n\t\t\t\tbreak;\n\t\t\tcase 74:\n\t\t\t\t// j\n\t\t\t\tthis.cursor().moveNext(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 75:\n\t\t\t\t// k\n\t\t\t\tthis.cursor().movePrev(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 76:\n\t\t\t\t// l\n\t\t\t\tthis.cursor().moveRight(e.shiftKey);\n\t\t\t\tbreak;\n\t\t\tcase 79:\n\t\t\t\t// o\n\t\t\t\tthis.fileList().openPrevFile();\n\t\t\t\tbreak;\n\t\t\tcase 83:\n\t\t\t\t// s\n\t\t\t\tthis.saveFile();\n\t\t\t\tbreak;\n\t\t\tcase 86:\n\t\t\t\t// v\n\t\t\t\tthis.pasteText();\n\t\t\t\tbreak;\n\t\t\tcase 188:\n\t\t\t\t// ,\n\t\t\t\tthis.cursor().nextSearch();\n\t\t\t\tbreak;\n\t\t\tcase 190:\n\t\t\t\t// .\n\t\t\t\tthis.cursor().prevSearch();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t// wheel\n\t/**\n\t * ホイールイベントの実行内容(表示を４行分移動する)\n\t * @param {Event} e イベントオブジェクト\n\t * @param {boolean} isUp 上方向にホイールが動かされたならtrue、そうでなければfalse\n\t * @return {SentenceContainer} 自身のインスタンス\n\t */\n\trunWheel(e,isUp) {\n\t\tconst mvRowNum = 4; // 一度に動かす行数\n\t\tif (isUp) {\n\t\t\tfor (let i = 0; i < mvRowNum; i++) { this.shiftRightDisplay(); }\n\t\t} else {\n\t\t\tfor (let i = 0; i < mvRowNum; i++) { this.shiftLeftDisplay(); }\n\t\t}\n\t\treturn this;\n\t}\n\n\t// 語句検索\n\t/**\n\t * 語句検索inputフォームのkeyupイベント\n\t * @param {Event} e イベントオブジェクト\n\t */\n\tonKeyupOnSearchMode(e) {\n\t\tlet keycode;\n\t\tif (document.all) {\n\t\t\t// IE\n\t\t\tkeycode = e.keyCode\n\t\t} else {\n\t\t\t// IE以外\n\t\t\tkeycode = e.which;\n\t\t}\n\t\tif (keycode === 13) {\n\t\t\t// enter\n\t\t\tthis.searchInputElem().blur(); // enterを押しただけではフォーカスが外れない\n\t\t\treturn;\n\t\t}\n\n\t\t// 中身が空になればsearchモードを完全に終了する\n\t\tif (this.searchInputElem().value === '') {\n\t\t\tthis.searchInputElem().blur();\n\t\t\tthis.stopSearchMode();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.search(this.searchInputElem().value.slice(1));\n\t}\n\t/**\n\t * 語句検索inputフォームからフォーカスが外れた際のイベント実行内容。文書コンテナ本体にkeydownイベントを戻す\n\t */\n\tonFocusoutOnSearchMode() {\n\t\tthis.addKeydownEventListener();\n\t}\n\t/**\n\t * 語句検索inputフォームにフォーカスがあたった際のイベント実行内容。文書コンテナ本体のkeydownイベントを外す\n\t */\n\tonFocusinOnSearchMode() {\n\t\tthis.removeKeydownEventListener();\n\t}\n\n\t// ファイル名input\n\t/**\n\t * ファイル名inputフォームにイベントを付加する(主に、フォーカスがあたった際と外れた際のイベント)。与えっぱなし。実行内容もここで定義\n\t */\n\taddFileTitleEvent() {\n\t\tthis.titleElem().addEventListener('focusin',function (e) {\n\t\t\tif (this.inputBuffer().isDisplay) { this.inputBuffer().empty().hide(); }\n\t\t\tthis.removeKeydownEventListener();\n\t\t}.bind(this),false);\n\t\tthis.titleElem().addEventListener('focusout',function (e) {\n\t\t\tif (this.titleElem().value === '') {\n\t\t\t\tthis.userAlert('ファイル名が入力されていません','red');\n\t\t\t\tthis.titleElem().value = this.titleElem().dataset.filename;\n\t\t\t}\n\t\t\tthis.addKeydownEventListener();\n\t\t}.bind(this),false);\n\t}\n\n\t// selection\n\t/**\n\t * マウスで選択範囲を変更した際のイベントを与える。選択範囲最後の文字の次の文字にカーソルを当てる\n\t */\n\taddSelectEvent() {\n\t\tthis.elem().addEventListener('mouseup',function (e) {\n\t\t\tconst selChars = this.selectChars();\n\t\t\t// 選択範囲の直後にカーソルを当てる\n\t\t\tif (selChars.length > 0) {\n\t\t\t\tconst lastCharOnSelect = selChars[selChars.length -1];\n\t\t\t\tconst newCursor = lastCharOnSelect.hasNextSibling() ? lastCharOnSelect.next() : lastCharOnSelect;\n\t\t\t\tnewCursor.addCursor().setPosMemory();\n\t\t\t}\n\t\t}.bind(this),false);\n\t}\n}\n\n"
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Util",
    "memberof": "js/object.js",
    "longname": "js/object.js~Util",
    "access": null,
    "export": false,
    "importPath": "./js/object.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Menu",
    "memberof": "js/object.js",
    "longname": "js/object.js~Menu",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{Menu}",
    "description": "メニューバーを担当するクラス",
    "lineNumber": 289,
    "interface": false
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#constructor",
    "access": null,
    "description": "",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナ"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sentenceContainer",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_fontSizeInputElem",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#_fontSizeInputElem",
    "access": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_confStrLenElem",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#_confStrLenElem",
    "access": null,
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_confRowLenElem",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#_confRowLenElem",
    "access": null,
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sentenceContainer",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#sentenceContainer",
    "access": null,
    "description": "このMenuが対応する文章コンテナのインスタンスを返す",
    "lineNumber": 307,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "SentenceContainerのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "confStrLenElem",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#confStrLenElem",
    "access": null,
    "description": "設定モーダルの文字数inputフォームのDOM要素を返す",
    "lineNumber": 314,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "文字数設定inputフォームのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "confRowLenElem",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#confRowLenElem",
    "access": null,
    "description": "設定モーダルの行数inputフォームのDOM要素を返す",
    "lineNumber": 321,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "行数設定inputフォームのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fontSizeInput",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#fontSizeInput",
    "access": null,
    "description": "フォントサイズinputフォームに値を設定する、あるいは引数省略で現在のinputフォームの値を返す",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newSize",
        "description": "inputに設定する値(数値か、文字列の'auto')"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu number string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のinputフォームの値(引数を省略した場合。'auto'の場合は文字列で返す)"
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "charDecolations",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#charDecolations",
    "access": null,
    "description": "現在アクティブになっている文字装飾のクラスを配列にする",
    "lineNumber": 344,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "現在アクティブになっている文字装飾のクラスの配列"
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configueData",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#configueData",
    "access": null,
    "description": "現在の設定情報を表すオブジェクトを作成する",
    "lineNumber": 361,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "現在の設定情報を表すオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "colorButton",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#colorButton",
    "access": null,
    "description": "文字色ボタンに色を付ける\n    引数を省略すると現在の色を取得",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_color",
        "description": "文字色ボタンにつける色の名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の文字色ボタンに付いている色の名前(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addColor",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#addColor",
    "access": null,
    "description": "選択範囲の文字色を変える",
    "lineNumber": 396,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "新しい文字色"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "boldButton",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#boldButton",
    "access": null,
    "description": "太字ボタンのオンオフを切り替える 引数省略で、現在の太字ボタンのオンオフをbool値で返す",
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueで太字ボタンをオンにする。falseでオフにする"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の太字ボタンの状態(引数省略の場合)"
    },
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bold",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#bold",
    "access": null,
    "description": "選択範囲を太字にする。または太字を外す",
    "lineNumber": 425,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueで太字にする。falseで外す"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "italicButton",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#italicButton",
    "access": null,
    "description": "斜体ボタンのオンオフを切り替える 引数省略で、現在の斜体ボタンのオンオフをbool値で返す",
    "lineNumber": 437,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "trueで太字ボタンをオンにする。falseでオフにする"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu boolean"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合) 現在の斜体ボタンの状態(引数省略の場合)"
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "italic",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#italic",
    "access": null,
    "description": "選択範囲を斜体にする。または太字を外す",
    "lineNumber": 454,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueで斜体にする。falseで外す"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fontSize",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#fontSize",
    "access": null,
    "description": "選択範囲のフォントサイズを変更する",
    "lineNumber": 466,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "新しいフォントサイズ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "align",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#align",
    "access": null,
    "description": "カーソルのある段落のtext-alignを変更する",
    "lineNumber": 480,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "align",
        "description": "'center','left','right'のいずれか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEventListeners",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#addEventListeners",
    "access": null,
    "description": "メニューの各コンポーネントにイベントリスナーを付加する\n    newボタン、saveボタン、deleteボタン、開くボタン、モーダルの開閉、\n    文字色ボタン、文字色ドロップダウン、太字ボタン、斜体ボタン、\n\t text-alignボタン、フォントサイズのドロップダウン、設定モーダル",
    "lineNumber": 493,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addColorSelectClickEvent",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#addColorSelectClickEvent",
    "access": null,
    "description": "文字色(ドロップダウンの方)をクリックするとボタンの色と選択範囲の文字色が変わるイベントを付加する\n    querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱う色を増やすことが可能",
    "lineNumber": 555,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addAlignClickEvent",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#addAlignClickEvent",
    "access": null,
    "description": "text-alignボタンをクリックするとカーソルのある段落のtext-alignが変更されるイベントを付加する",
    "lineNumber": 570,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFontSizeEvnet",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#addFontSizeEvnet",
    "access": null,
    "description": "フォントサイズのドロップダウンをクリックするとフォントサイズのinputの数値が変更され、選択範囲の文字のフォントサイズが変更されるイベントを付加する\n    querySelectorAll()でドロップダウンの各要素を取得してループでイベントを付加しているため、htmlとcssのみ変更することで扱うフォントサイズを増やすことが可能",
    "lineNumber": 588,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addConfigueEvent",
    "memberof": "js/object.js~Menu",
    "longname": "js/object.js~Menu#addConfigueEvent",
    "access": null,
    "description": "設定モーダルのinputとsaveボタン、resetボタンにイベントを付加する",
    "lineNumber": 604,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandLine",
    "memberof": "js/object.js",
    "longname": "js/object.js~CommandLine",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{CommandLine}",
    "description": "コマンドラインを表すクラス",
    "lineNumber": 632,
    "interface": false
  },
  {
    "__docId__": 30,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#constructor",
    "access": null,
    "description": "",
    "lineNumber": 636,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナ"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_elem",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#_elem",
    "access": null,
    "description": null,
    "lineNumber": 637,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sentenceContainer",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "elem",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#elem",
    "access": null,
    "description": "自身のHTML要素を返す",
    "lineNumber": 647,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身のHTML要素"
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sentenceContainer",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#sentenceContainer",
    "access": null,
    "description": "対応する文章コンテナの参照を返す",
    "lineNumber": 654,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "対応する文章コンテナ"
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fileList",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#fileList",
    "access": null,
    "description": "操作するファイルリストの参照を返す",
    "lineNumber": 661,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "ファイルリストのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isActive",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#isActive",
    "access": null,
    "description": "コマンドラインがアクティブかどうかを返す",
    "lineNumber": 671,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true=アクティブ、false=アクティブではない"
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "active",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#active",
    "access": null,
    "description": "コマンドラインをアクティブにする",
    "lineNumber": 681,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unActive",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#unActive",
    "access": null,
    "description": "コマンドラインを非アクティブにする",
    "lineNumber": 689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "focus",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#focus",
    "access": null,
    "description": "コマンドラインにフォーカスを与える",
    "lineNumber": 697,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "displayFileModal",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#displayFileModal",
    "access": null,
    "description": "ファイルリストのモーダルをコマンドライン用に開く",
    "lineNumber": 705,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hideFileModal",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#hideFileModal",
    "access": null,
    "description": "コマンドライン用に開いたモーダルを閉じる。ファイル検索がされていてもリセットする",
    "lineNumber": 714,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "val",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#val",
    "access": null,
    "description": "コマンドラインに値を設定する",
    "lineNumber": 735,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "コマンドラインに設定する値"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#start",
    "access": null,
    "description": "コマンドモードを始める",
    "lineNumber": 747,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stop",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#stop",
    "access": null,
    "description": "コマンドモードを終了する",
    "lineNumber": 758,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addKeyupEventListener",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#addKeyupEventListener",
    "access": null,
    "description": "コマンドのinputにkeyupイベントを付加する。重ねがけは無効",
    "lineNumber": 772,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_keyupArg",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 774,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeKeyupEventListener",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#removeKeyupEventListener",
    "access": null,
    "description": "コマンドのinputへのkeyupイベントを除去する",
    "lineNumber": 782,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_keyupArg",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#_keyupArg",
    "access": null,
    "description": null,
    "lineNumber": 785,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onKeyup",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#onKeyup",
    "access": "private",
    "description": "",
    "lineNumber": 792,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runKeyup",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#runKeyup",
    "access": null,
    "description": "コマンドのkeyupイベントの実行内容",
    "lineNumber": 812,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFocusoutEventListener",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#addFocusoutEventListener",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントを付加する",
    "lineNumber": 866,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_focusoutArg",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#_focusoutArg",
    "access": null,
    "description": null,
    "lineNumber": 868,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeFocusoutEventListener",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#removeFocusoutEventListener",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントを除去する",
    "lineNumber": 876,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_focusoutArg",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#_focusoutArg",
    "access": null,
    "description": null,
    "lineNumber": 879,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onFocusout",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#onFocusout",
    "access": null,
    "description": "コマンドラインからフォーカスが外れた際のイベントの実行内容",
    "lineNumber": 886,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runCommand",
    "memberof": "js/object.js~CommandLine",
    "longname": "js/object.js~CommandLine#runCommand",
    "access": null,
    "description": "コマンドの実行内容",
    "lineNumber": 892,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Cursor",
    "memberof": "js/object.js",
    "longname": "js/object.js~Cursor",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{Cursor}",
    "description": "カーソルを表すクラス",
    "lineNumber": 1021,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#constructor",
    "access": null,
    "description": "",
    "lineNumber": 1025,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "対応する文章コンテナのインスタンス"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sentenceContainer",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 1026,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_cursorLineElem",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#_cursorLineElem",
    "access": null,
    "description": null,
    "lineNumber": 1027,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#init",
    "access": null,
    "description": "カーソルを初期化して一文字目にカーソルを与える",
    "lineNumber": 1033,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_char",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#_char",
    "access": null,
    "description": null,
    "lineNumber": 1035,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sentenceContainer",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#sentenceContainer",
    "access": null,
    "description": "対応する文章コンテナのインスタンスを返す",
    "lineNumber": 1047,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "対応する文章コンテナのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getChar",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#getChar",
    "access": null,
    "description": "カーソルのある文字のインスタンスを返す",
    "lineNumber": 1054,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRow",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#getRow",
    "access": null,
    "description": "カーソル行のインスタンスを返す",
    "lineNumber": 1061,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "カーソル行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getParagraph",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#getParagraph",
    "access": null,
    "description": "カーソルのある段落のインスタンスを返す",
    "lineNumber": 1068,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "カーソルのある段落のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorLineElem",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#cursorLineElem",
    "access": null,
    "description": "カーソル位置を記憶するためのDOM要素を返す",
    "lineNumber": 1075,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "カーソル位置を記憶するための要素"
    },
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setChar",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#setChar",
    "access": "private",
    "description": "",
    "lineNumber": 1087,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "newChar",
        "description": "新しいカーソル文字"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_char",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#_char",
    "access": null,
    "description": null,
    "lineNumber": 1088,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addCursor",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#addCursor",
    "access": null,
    "description": "charにカーソルを与える",
    "lineNumber": 1097,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "新しいカーソル文字"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "bShift",
        "description": "シフトキーが押された状態でカーソルが与えられたかどうか。trueなら選択範囲を拡張する。falseなら解除する。省略(undefined)すると選択範囲には影響しない"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPosMemory",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#getPosMemory",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素から、記憶されたインデックスを返す",
    "lineNumber": 1125,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "記憶されたカーソル位置のインデックス。記憶された位置が見つからなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPosMemory",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#setPosMemory",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素に位置を記憶する",
    "lineNumber": 1138,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "記憶する位置のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "currentCharPos",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#currentCharPos",
    "access": null,
    "description": "現在行のうち何文字目にカーソルがあるかを返す。行頭で１，EOLでは行の総文字数＋１",
    "lineNumber": 1154,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソルの位置。入力の始まる位置のインデックスと同じ"
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "strLenOfRow",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#strLenOfRow",
    "access": null,
    "description": "現在行の総文字数を返す",
    "lineNumber": 1161,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在行の総文字数"
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "currentRowPos",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#currentRowPos",
    "access": null,
    "description": "カーソル行がそのページで何行目かを返す",
    "lineNumber": 1168,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル行がページ内で何行目か。改ページが見つからなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rowLenOnPage",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#rowLenOnPage",
    "access": null,
    "description": "現在ページの総行数を返す。最終ページのみ設定行数と異なる",
    "lineNumber": 1178,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在ページの総行数。ページの終わりが見つからなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "currentPage",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#currentPage",
    "access": null,
    "description": "現在ページを返す",
    "lineNumber": 1189,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在ページ"
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createCursorLine",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#createCursorLine",
    "access": null,
    "description": "カーソル位置を記憶するDOM要素を文章コンテナの標準文字数に合わせて構築する。主にカーソルの左右移動の際に、そのカーソルが何文字目の位置から移動してきたのかを記憶するために用いる",
    "lineNumber": 1203,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insert",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#insert",
    "access": null,
    "description": "カーソル位置に文字を挿入する",
    "lineNumber": 1218,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "挿入する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "backSpace",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#backSpace",
    "access": null,
    "description": "カーソル位置でバックスペースを押下した時の処理を行う",
    "lineNumber": 1234,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lineBreak",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#lineBreak",
    "access": null,
    "description": "カーソル位置で改行した時の処理を行う",
    "lineNumber": 1263,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveNext",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#moveNext",
    "access": null,
    "description": "カーソルを下方向に一つ動かす。ひとつ下が段落途中のEOLなら、さらにその次に動かす",
    "lineNumber": 1283,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "movePrev",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#movePrev",
    "access": null,
    "description": "カーソルを上方向に一つ動かす。段落途中の行頭なら、前の行の最終文字に動かす",
    "lineNumber": 1295,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveRight",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#moveRight",
    "access": null,
    "description": "カーソルを右方向に一つ動かす。一つ右が段落途中のEOLなら、移動先の前の文字にさらに動かす",
    "lineNumber": 1307,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveLeft",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#moveLeft",
    "access": null,
    "description": "カーソルを左方向に一つ動かす。一つ左が段落途中のEOLなら、移動先の前の文字にさらに動かす",
    "lineNumber": 1318,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveRow",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#moveRow",
    "access": null,
    "description": "rowにカーソルを移動する。移動先の文字は記憶されたカーソル位置のインデックスの文字で、それがEOLならその前の文字に移動する",
    "lineNumber": 1331,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "移動先の行のインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されているかどうか。trueなら、選択範囲を拡張する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "jumpRow",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#jumpRow",
    "access": null,
    "description": "num行目の最初の文字にカーソルを移動する。移動先の行が中央となるように表示される",
    "lineNumber": 1343,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動先が何行目か。１から始まる。ページ内ではなく、文章全体で数える。０位下が渡されると最初の行に移動される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "jumpPage",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#jumpPage",
    "access": null,
    "description": "numページ目の一行目最初の文字にカーソルが移動する。その行から始まるように表示される",
    "lineNumber": 1357,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "何ページ目に移動するか"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nextSearch",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#nextSearch",
    "access": null,
    "description": "次の検索語句にカーソルを移動する。見つからなければ何もしない",
    "lineNumber": 1370,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nextSearchChar",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#nextSearchChar",
    "access": "private",
    "description": "",
    "lineNumber": 1382,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "次の検索語句の１文字目のインスタンス。見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prevSearch",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#prevSearch",
    "access": null,
    "description": "前の検索語句にカーソルを移動する。見つからなければ何もしない",
    "lineNumber": 1392,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prevSearchChar",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#prevSearchChar",
    "access": "private",
    "description": "",
    "lineNumber": 1404,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "前の検索語句の１文字目のインスタンス。見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "memorySelection",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#memorySelection",
    "access": "private",
    "description": "",
    "lineNumber": 1416,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "extendSelection",
    "memberof": "js/object.js~Cursor",
    "longname": "js/object.js~Cursor#extendSelection",
    "access": null,
    "description": "bShiftがtrueなら選択範囲を拡張する",
    "lineNumber": 1429,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bShift",
        "description": "true=選択範囲を拡張する、false=選択範囲を解除する。省略されると何もしない"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AbstractHierarchy",
    "memberof": "js/object.js",
    "longname": "js/object.js~AbstractHierarchy",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{AbstractHierarchy}",
    "description": "各クラスの基底クラス",
    "lineNumber": 1446,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#constructor",
    "access": null,
    "description": "",
    "lineNumber": 1450,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "自身のDOM要素"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_elem",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_elem",
    "access": null,
    "description": null,
    "lineNumber": 1451,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_parent",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_parent",
    "access": null,
    "description": null,
    "lineNumber": 1452,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_next",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_next",
    "access": null,
    "description": null,
    "lineNumber": 1453,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prev",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_prev",
    "access": null,
    "description": null,
    "lineNumber": 1454,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_children",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_children",
    "access": null,
    "description": null,
    "lineNumber": 1455,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_width",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_width",
    "access": null,
    "description": null,
    "lineNumber": 1456,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_height",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_height",
    "access": null,
    "description": null,
    "lineNumber": 1457,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "elem",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#elem",
    "access": null,
    "description": "自身のDOM要素を返す",
    "lineNumber": 1466,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身のDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parent",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#parent",
    "access": null,
    "description": "自身の親を設定する。引数を省略すると自身の親を取得する",
    "lineNumber": 1474,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newParent",
        "description": "新たに設定する親"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_parent",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_parent",
    "access": null,
    "description": null,
    "lineNumber": 1478,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#next",
    "access": null,
    "description": "自身の次にある同列のインスタンスを新たに設定する。引数を省略すると自身の次にある同列のインスタンスを取得する",
    "lineNumber": 1487,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newNext",
        "description": "新たに設定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の次にある同列のインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_next",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_next",
    "access": null,
    "description": null,
    "lineNumber": 1491,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prev",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#prev",
    "access": null,
    "description": "自身の前にある同列のインスタンスを新たに設定する。引数を省略すると自身の前にある同列のインスタンスを取得する",
    "lineNumber": 1500,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newPrev",
        "description": "新たに設定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の前にある同列のインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prev",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_prev",
    "access": null,
    "description": null,
    "lineNumber": 1504,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#children",
    "access": null,
    "description": "指定されたインデックスの子を取得する。引数省略で自身の子を配列で取得する",
    "lineNumber": 1513,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス。範囲外ならundefinedが返される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "indexで指定された子(引数を渡した場合)あるいは自身の子の配列(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#firstChild",
    "access": null,
    "description": "自身の最初の子を取得する",
    "lineNumber": 1524,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身の最初の子。子がいなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#lastChild",
    "access": null,
    "description": "自身の最後の子を取得する",
    "lineNumber": 1535,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身の最後の子。子がいなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "is",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#is",
    "access": null,
    "description": "objが自身と同一のオブジェクトかどうか",
    "lineNumber": 1550,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "比較するオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "objが自身と同一ならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasClass",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#hasClass",
    "access": null,
    "description": "自身がクラスにclassNameを持っているかどうかを返す",
    "lineNumber": 1558,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "判定するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がclassNameを付与されていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#hasChild",
    "access": null,
    "description": "自身が子を持っているかどうかを返す",
    "lineNumber": 1565,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isOnlyChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#isOnlyChild",
    "access": null,
    "description": "自身が親にとって唯一の子であるかどうかを返す",
    "lineNumber": 1572,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が親にとって唯一の子であればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#isEmpty",
    "access": null,
    "description": "自身が空であるかどうかを返す",
    "lineNumber": 1580,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていなければtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasNextSibling",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#hasNextSibling",
    "access": null,
    "description": "同一の親を持つ次の兄弟が存在するかどうかを返す",
    "lineNumber": 1587,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の次のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPrevSibling",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#hasPrevSibling",
    "access": null,
    "description": "同一の親を持つ前の兄弟が存在するかどうかを返す",
    "lineNumber": 1598,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の前のインスタンスの親が自身の親と同一ならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isFirst",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#isFirst",
    "access": null,
    "description": "自身が親の第一の子であるかどうかを返す",
    "lineNumber": 1609,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の前のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLast",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#isLast",
    "access": null,
    "description": "自身が親の最後の子であるかどうかを返す。Charの場合は、EOLの前の文字とEOLの２つでtrueを返す",
    "lineNumber": 1616,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の次のインスタンスの親が自身の親と同一でなければtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#pushChild",
    "access": null,
    "description": "childを自身の子の最後に加える",
    "lineNumber": 1627,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "自身の子の最後に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#insertChild",
    "access": null,
    "description": "自身の子のpos番目にchildを加える",
    "lineNumber": 1637,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "childを加える位置のインデックス(０始まり)"
      },
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "子に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#deleteChild",
    "access": null,
    "description": "childを自身の子から削除する",
    "lineNumber": 1650,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "自身の子から削除するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replaceChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#replaceChild",
    "access": null,
    "description": "自身の子のoldChildを子から削除し、新たにnewChildを同じ位置に加える",
    "lineNumber": 1662,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "oldChild",
        "description": "入替えられる自身の子のインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "newChild",
        "description": "入れ替える自身の子でなかったインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "emptyChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#emptyChild",
    "access": null,
    "description": "この参照を自身から切り離して空にする。DOM要素には影響しない",
    "lineNumber": 1671,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_children",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_children",
    "access": null,
    "description": null,
    "lineNumber": 1672,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#text",
    "access": null,
    "description": "自身が表す文字列を返す",
    "lineNumber": 1682,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身の内部にある文字列"
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "length",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#length",
    "access": null,
    "description": "自身が表す文字列の文字数を返す",
    "lineNumber": 1689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の内部にある文字列の文字数"
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "index",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#index",
    "access": null,
    "description": "同一の親を持つ兄弟の中でのインデックスを返す",
    "lineNumber": 1696,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "同一の親を持つ兄弟の中での０始まりのインデックス"
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "childLength",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#childLength",
    "access": null,
    "description": "自身の子の数を返す",
    "lineNumber": 1704,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の子の数"
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "className",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#className",
    "access": null,
    "description": "自身の持つクラスすべてをひとつの文字列で返す",
    "lineNumber": 1714,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身の持つすべてのクラス名"
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addClass",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#addClass",
    "access": null,
    "description": "自身のクラスにclassNameを加える",
    "lineNumber": 1722,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "自身のクラスに加えるクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeClass",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#removeClass",
    "access": null,
    "description": "自身のクラスからclassNameを除去する",
    "lineNumber": 1731,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "自身のクラスから除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeClassFromAllChild",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#removeClassFromAllChild",
    "access": null,
    "description": "自身の持つすべての子のクラスからclassNameを除去する",
    "lineNumber": 1740,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#height",
    "access": null,
    "description": "自身の高さを取得する",
    "lineNumber": 1751,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#width",
    "access": null,
    "description": "自身の幅を取得する",
    "lineNumber": 1766,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "x",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#x",
    "access": null,
    "description": "要素左上のX座標を返す",
    "lineNumber": 1777,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "要素左上のX座標"
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "y",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#y",
    "access": null,
    "description": "要素左上のY座標を返す",
    "lineNumber": 1784,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "要素左上のY座標"
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeDistanceFromPoint",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#computeDistanceFromPoint",
    "access": null,
    "description": "ある点からオブジェクトの中心点までの距離を計算する",
    "lineNumber": 1793,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "基準点のX座標"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "基準点のY座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された距離のピクセル数"
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeCenterPoint",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#computeCenterPoint",
    "access": null,
    "description": "中心点の座標を返す",
    "lineNumber": 1801,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "プロバティxにX座標、プロパティyにY座標の入ったオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "emptyElem",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#emptyElem",
    "access": null,
    "description": "内部のエレメントを空にする。childrenとして持っていない要素(EOLなど)は削除されない",
    "lineNumber": 1814,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "empty",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#empty",
    "access": null,
    "description": "内部のエレメントに加え、内部の参照も空にする",
    "lineNumber": 1824,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addKeydownEventListener",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#addKeydownEventListener",
    "access": null,
    "description": "自身にkeydownイベントリスナーを付加する。重ねがけは無効",
    "lineNumber": 1836,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_keydownArg",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_keydownArg",
    "access": null,
    "description": null,
    "lineNumber": 1838,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeKeydownEventListener",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#removeKeydownEventListener",
    "access": null,
    "description": "自身のkeydownイベントリスナーを除去する",
    "lineNumber": 1846,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_keydownArg",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_keydownArg",
    "access": null,
    "description": null,
    "lineNumber": 1849,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onKeydown",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#onKeydown",
    "access": "private",
    "description": "",
    "lineNumber": 1857,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runKeydown",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#runKeydown",
    "access": "private",
    "description": "",
    "lineNumber": 1879,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addClickEventListener",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#addClickEventListener",
    "access": null,
    "description": "自身にクリックイベントを付加する。重ねがけは無効",
    "lineNumber": 1886,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_clickArg",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 1888,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeClickEventListener",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#removeClickEventListener",
    "access": null,
    "description": "自身のクリックイベントを除去する",
    "lineNumber": 1896,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_clickArg",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 1899,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onClick",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#onClick",
    "access": "private",
    "description": "",
    "lineNumber": 1907,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runClick",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#runClick",
    "access": "private",
    "description": "",
    "lineNumber": 1916,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addWheelEventListener",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#addWheelEventListener",
    "access": null,
    "description": "自身にホイールイベントを付加する。重ねがけは無効",
    "lineNumber": 1923,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_wheelArg",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_wheelArg",
    "access": null,
    "description": null,
    "lineNumber": 1925,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeWheelEventListener",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#removeWheelEventListener",
    "access": null,
    "description": "自身のホイールイベントを除去する",
    "lineNumber": 1934,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_wheelArg",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#_wheelArg",
    "access": null,
    "description": null,
    "lineNumber": 1938,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onWheel",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#onWheel",
    "access": "private",
    "description": "",
    "lineNumber": 1949,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "ホイールの移動量"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaY",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runWheel",
    "memberof": "js/object.js~AbstractHierarchy",
    "longname": "js/object.js~AbstractHierarchy#runWheel",
    "access": "private",
    "description": "",
    "lineNumber": 1960,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUp",
        "description": "ホイールが上方向に動いたならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractHierarchy"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Char",
    "memberof": "js/object.js",
    "longname": "js/object.js~Char",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{Char}",
    "description": "文字を表すクラス",
    "lineNumber": 1968,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#constructor",
    "access": null,
    "description": "",
    "lineNumber": 1982,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文字を表すオブジェクト<br>\n例\n<pre>\n<code>\n\t{\n\t\t\"char\":\"あ\",\n\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\"fontSize\": \"auto\"\n\t}\n</code>\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "row",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#row",
    "access": null,
    "description": "自身の親であるRowインスタンスをnewRowに設定する、あるいは引数省略で取得する",
    "lineNumber": 1994,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newRow",
        "description": "新たに設定する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char Row"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親のインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paragraph",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#paragraph",
    "access": null,
    "description": "自身の属する段落のインスタンスを取得する",
    "lineNumber": 2001,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身の属する段落のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sentenceContainer",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#sentenceContainer",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを取得する",
    "lineNumber": 2008,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#cursor",
    "access": null,
    "description": "カーソルのインスタンスを取得する",
    "lineNumber": 2015,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナの持つカーソルのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slideNextCursor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#slideNextCursor",
    "access": null,
    "description": "カーソル文字として自身が不適なら自身の次のCharを返す。自身が段落途中のEOLならその次の文字となる",
    "lineNumber": 2023,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身も含めた自身以降でカーソル文字として適したインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slidePrevCursor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#slidePrevCursor",
    "access": null,
    "description": "カーソル文字として自身が不適なら自身の前のCharを返す。自身が段落途中のEOLならその前の文字となる",
    "lineNumber": 2036,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身も含めた自身以前でカーソル文字として適したインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nextChar",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#nextChar",
    "access": null,
    "description": "自身の次の文字を表すCharインスタンスを返す。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返す",
    "lineNumber": 2049,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の次のCharインスタンス。見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prevChar",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#prevChar",
    "access": null,
    "description": "自身の前の文字を表すCharインスタンスを返す。段落途中か段落の最後かに関わらず、EOLは完全排除して文字のみを返す",
    "lineNumber": 2060,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の前のCharインスタンス。見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nextCharOnParagraph",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#nextCharOnParagraph",
    "access": null,
    "description": "同一段落内での次の文字を返す。EOLは含まない",
    "lineNumber": 2071,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "同一段落内での次の文字のインスタンス。なければnull"
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prevCharOnParagraph",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#prevCharOnParagraph",
    "access": null,
    "description": "同一段落内での前の文字を返す。EOLは含まない",
    "lineNumber": 2081,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "同一段落内での前の文字のインスタンス。なければnull"
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEOL",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#isEOL",
    "access": null,
    "description": "自身がEOLであるかどうかを返す",
    "lineNumber": 2094,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "オーバーライドされない限り常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasCursor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#hasCursor",
    "access": null,
    "description": "自身にカーソルがあたっているかどうかを返す",
    "lineNumber": 2101,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身にカーソルがあればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDisplay",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#isDisplay",
    "access": null,
    "description": "自身が可視化されているかどうかを返す",
    "lineNumber": 2108,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が可視化されていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasNextSibling",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#hasNextSibling",
    "access": null,
    "description": "自身が同一行内で最終文字であるかどうかを返す。EOLは含まない(次の文字がEOLならfalse,自身がEOLの場合もfalse)",
    "lineNumber": 2115,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一行内で最終文字でなければtrue、最終文字ならfalse。"
    },
    "generator": false
  },
  {
    "__docId__": 179,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasNextCharOnParagraph",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#hasNextCharOnParagraph",
    "access": null,
    "description": "同一段落内で次のCharがあるかどうかを返す",
    "lineNumber": 2122,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一段落内で次のCharがあればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPrevCharOnParagraph",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#hasPrevCharOnParagraph",
    "access": null,
    "description": "同一段落内で前のCharがあるかどうかを返す",
    "lineNumber": 2129,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "同一段落内で前のCharがあればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isInRange",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#isInRange",
    "access": null,
    "description": "この要素がrangeの中にあるかどうかを返す",
    "lineNumber": 2137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Range"
        ],
        "spread": false,
        "optional": false,
        "name": "range",
        "description": "判定の基準となる範囲を表すRange"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "この要素がrangeの中にあればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isBold",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#isBold",
    "access": null,
    "description": "この文字が太字になっているかどうかを返す",
    "lineNumber": 2155,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "太字になっていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isItalic",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#isItalic",
    "access": null,
    "description": "この文字が斜体になっているかどうかを返す",
    "lineNumber": 2162,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "斜体になっていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#data",
    "access": null,
    "description": "この文字の状態を表す規定のオブジェクトを作成する",
    "lineNumber": 2172,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "この文字の状態を表す規定のオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "classArray",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#classArray",
    "access": "private",
    "description": "",
    "lineNumber": 2184,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "この文字にかかっている装飾のクラスの配列。文字装飾がかかっていなければ空の配列"
    },
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addCursor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#addCursor",
    "access": null,
    "description": "この文字にカーソルを当てる",
    "lineNumber": 2195,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fontSize",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#fontSize",
    "access": null,
    "description": "この文字のフォントサイズを変更する。あるいは引数省略で現在のフォントサイズを取得する",
    "lineNumber": 2205,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_fontSize",
        "description": "新たに設定するフォントサイズ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char number string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)。現在のフォントサイズ(引数を省略した場合)、フォントサイズが数値で設定されていなければ文字列の'auto'"
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_fontSize",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#_fontSize",
    "access": null,
    "description": null,
    "lineNumber": 2207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "color",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#color",
    "access": null,
    "description": "この文字に文字色を設定する。あるいは引数省略で現在の文字色を取得する",
    "lineNumber": 2229,
    "params": [
      {
        "nullable": null,
        "types": [
          "string boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_color",
        "description": "文字列ならその色に設定する、falseを渡せば文字色を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の文字色(引数を省略した場合。文字色が設定されていなければ'black')"
    },
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bold",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#bold",
    "access": null,
    "description": "この文字の太字を設定、解除する",
    "lineNumber": 2248,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueなら太字にする、falseなら太字を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "italic",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#italic",
    "access": null,
    "description": "この文字の斜体を設定、解除する",
    "lineNumber": 2261,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bl",
        "description": "trueなら斜体にする、falseなら斜体を解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addColor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#addColor",
    "access": "private",
    "description": "",
    "lineNumber": 2275,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "設定する文字色"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeColor",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#removeColor",
    "access": "private",
    "description": "",
    "lineNumber": 2287,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "markSearchPhrase",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#markSearchPhrase",
    "access": null,
    "description": "この文字から始まる文字列がstrと合致するなら、その文字列のCharにクラスを付与する",
    "lineNumber": 2298,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "判定する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "before",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#before",
    "access": null,
    "description": "charを自身の直前に挿入する",
    "lineNumber": 2323,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "after",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#after",
    "access": null,
    "description": "charを自身の直後に挿入する",
    "lineNumber": 2348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#remove",
    "access": null,
    "description": "自身を削除する。文書整形は行われない",
    "lineNumber": 2376,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#delete",
    "access": null,
    "description": "自身を削除し、文書整形を行う(空行ができたらその行も削除し、文字数調整や禁則処理を行う)",
    "lineNumber": 2395,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replace",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#replace",
    "access": null,
    "description": "自分自身をnewCharと入れ替える",
    "lineNumber": 2414,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "newChar",
        "description": "自身と入れ替える文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveLastBefore",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#moveLastBefore",
    "access": null,
    "description": "前の行の最後に移動する。その結果空行ができたら削除し、カーソルがその行にあれば自身の次のEOLに移動する。\n    段落はまたがず、移動前の自身が段落最初の文字であれば何もしない",
    "lineNumber": 2430,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveFirstAfter",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#moveFirstAfter",
    "access": null,
    "description": "次の行の最初に移動する。次の行が同じ段落になければ新しく行を作り、カーソルは自身の次のEOLに移動する",
    "lineNumber": 2450,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "display",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#display",
    "access": null,
    "description": "自身の表示非表示を切り替える",
    "lineNumber": 2474,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "trueなら表示、falseなら非表示"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createData",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#createData",
    "access": null,
    "description": "現在のメニューバーの状態に即してcを内容に持つ規定のオブジェクトを作成する。メソッドを持つ既存のCharインスタンスには影響しない",
    "lineNumber": 2490,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "作成するオブジェクトが表す文字(１文字)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文字データを表す規定のオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createPlainCharData",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char.createPlainCharData",
    "access": null,
    "description": "文字装飾のない文字の文字データを返す",
    "lineNumber": 2504,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "作成するオブジェクトが表す文字(１文字)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文字データを表す規定のオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPosMemory",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#setPosMemory",
    "access": null,
    "description": "この文字のインデックスをカーソル位置として記憶する",
    "lineNumber": 2518,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "afterEach",
    "memberof": "js/object.js~Char",
    "longname": "js/object.js~Char#afterEach",
    "access": null,
    "description": "自分を含めて、自分以降で同じ段落内のChar全てに処理を行う(EOLは含まない)",
    "lineNumber": 2529,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "処理内容が定義された関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EOL",
    "memberof": "js/object.js",
    "longname": "js/object.js~EOL",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{EOL}",
    "description": "行の末端を表すクラス",
    "lineNumber": 2543,
    "interface": false,
    "extends": [
      "Char"
    ]
  },
  {
    "__docId__": 208,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~EOL",
    "longname": "js/object.js~EOL#constructor",
    "access": null,
    "description": "",
    "lineNumber": 2548,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "自身のDOM要素"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEOL",
    "memberof": "js/object.js~EOL",
    "longname": "js/object.js~EOL#isEOL",
    "access": null,
    "description": "自身がEOLであるかどうかを返す",
    "lineNumber": 2556,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "index",
    "memberof": "js/object.js~EOL",
    "longname": "js/object.js~EOL#index",
    "access": null,
    "description": "自身のインデックスを返す",
    "lineNumber": 2566,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身は親の配列に入っていないので、親の配列の長さと同じ数値を返す"
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appended",
    "memberof": "js/object.js~EOL",
    "longname": "js/object.js~EOL#appended",
    "access": null,
    "description": "rowを親として紐付ける",
    "lineNumber": 2577,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "親となる行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Row",
    "memberof": "js/object.js",
    "longname": "js/object.js~Row",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{Row}",
    "description": "行を表すクラス",
    "lineNumber": 2589,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 213,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#constructor",
    "access": null,
    "description": "",
    "lineNumber": 2611,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "行を表すオブジェクト<br>\n例\n<pre>\n<code>\n// 各文字のオブジェクトが配列で格納される\n[\n\t{\t // 文字を表すオブジェクト\n\t\t\"char\":\"あ\",\n\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\"fontSize\":\"auto\"\n\t},\n\t{\n\t\t\"char\":\"い\",\n\t\t\"decolation\":null\n\t\t\"fontSize\":\"18\"\n\t}\n]\n</code>\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_EOL",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#_EOL",
    "access": null,
    "description": null,
    "lineNumber": 2620,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "EOL",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#EOL",
    "access": null,
    "description": "自身のEOLのインスタンスを返す",
    "lineNumber": 2637,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "自身のEOLのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "container",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#container",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを返す",
    "lineNumber": 2644,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paragraph",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#paragraph",
    "access": null,
    "description": "自身の親の段落を新たに設定する、あるいは現在の親段落を取得する",
    "lineNumber": 2652,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newParagraph",
        "description": "新たに設定する親段落"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)あるいは自身の親段落のインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#cursorChar",
    "access": null,
    "description": "カーソルを持つ文字のインスタンスを取得する",
    "lineNumber": 2659,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソルを持つ文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstChild",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#firstChild",
    "access": null,
    "description": "自身の内部にある最初のインスタンスを返す",
    "lineNumber": 2666,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の第一文字のインスタンス。それがなければ自身のEOLのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastChild",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#lastChild",
    "access": null,
    "description": "自身の内部にある最後のインスタンスであるEOLのインスタンスを返す",
    "lineNumber": 2679,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身のEOLのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#lastChar",
    "access": null,
    "description": "自身の最終文字のインスタンスを返す",
    "lineNumber": 2686,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "自身の最終文字のインスタンス。空行であればnull"
    },
    "generator": false
  },
  {
    "__docId__": 222,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chars",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#chars",
    "access": null,
    "description": "指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得する。EOLは含まれない",
    "lineNumber": 2694,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char Char[]"
      ],
      "spread": false,
      "description": "指定された子のインスタンス(引数を渡した場合。範囲外の数値ならundefined)、あるいは子のインスタンスの配列(引数を省略した場合。子がいなければ空の配列)"
    },
    "generator": false
  },
  {
    "__docId__": 223,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#children",
    "access": null,
    "description": "EOLを含む、指定されたインデックスの子である文字のインスタンスを取得、あるいは子のインスタンスの配列を取得する",
    "lineNumber": 2702,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "指定された子のインスタンス(引数を渡した場合。範囲外のインデックスならEOL)、あるいはEOLを含む子のインスタンスの配列(引数を省略した場合。子がいなければ要素がEOLのみである配列)"
    },
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#hasChar",
    "access": null,
    "description": "内部に文字があるかどうかを返す",
    "lineNumber": 2718,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内部に文字があればtrue、EOLのみの空行ならfalse"
    },
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasCursor",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#hasCursor",
    "access": null,
    "description": "行内にカーソルがあるかどうかを返す",
    "lineNumber": 2725,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "行内にカーソルが含まれていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDisplay",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#isDisplay",
    "access": null,
    "description": "この要素が可視化されているかどうかを返す",
    "lineNumber": 2735,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "可視化されていたらtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "contains",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#contains",
    "access": null,
    "description": "objが行内に含まれているかどうかを返す",
    "lineNumber": 2743,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "判定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "objが行内にあるCharおよびEOLのいずれかに一致するとtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isPageBreak",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#isPageBreak",
    "access": null,
    "description": "ページ内で最初の行であるかどうかを返す",
    "lineNumber": 2754,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ページ内で最初の行であればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 229,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isPageLast",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#isPageLast",
    "access": null,
    "description": "ページ内で最終行であるかどうかを返す",
    "lineNumber": 2761,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ページ内で最終行ならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 230,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#pushChar",
    "access": null,
    "description": "charを自身の子の最後に加える",
    "lineNumber": 2772,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "子に加える文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 231,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#insertChar",
    "access": null,
    "description": "charを自身の子の指定された位置に加える",
    "lineNumber": 2781,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "加える位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "加える子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 232,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#deleteChar",
    "access": null,
    "description": "charを自身の子から削除する",
    "lineNumber": 2789,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "削除する子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 233,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#data",
    "access": null,
    "description": "この行の状態を表す規定のオブジェクトを作成する",
    "lineNumber": 2799,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "この行の状態を表す規定のオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "charLen",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#charLen",
    "access": null,
    "description": "この行の文字数を返す。EOLは含まない",
    "lineNumber": 2810,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "この行の文字数。空行なら０"
    },
    "generator": false
  },
  {
    "__docId__": 235,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "maxFont",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#maxFont",
    "access": null,
    "description": "この行の内部にある文字のうち、最も大きいフォントサイズを返す。'auto'は18として計算する",
    "lineNumber": 2817,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "最大のフォント数"
    },
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#width",
    "access": null,
    "description": "この行の横幅を返す。行は９０度回転しているため、css上は高さのこと",
    "lineNumber": 2832,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    },
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#height",
    "access": null,
    "description": "この行の高さを返す。行は９０度回転しているため、css上は幅のこと",
    "lineNumber": 2840,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    },
    "generator": false
  },
  {
    "__docId__": 238,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "empty",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#empty",
    "access": null,
    "description": "子を空にして参照を整える",
    "lineNumber": 2850,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepend",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#prepend",
    "access": null,
    "description": "自身の最初にcharを挿入する",
    "lineNumber": 2868,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入する文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 240,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#append",
    "access": null,
    "description": "自身の最後(EOLの直前)にcharを挿入する",
    "lineNumber": 2877,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "挿入する文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 241,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "before",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#before",
    "access": null,
    "description": "自身の直前にrowを挿入する",
    "lineNumber": 2886,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "after",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#after",
    "access": null,
    "description": "自身の直後にrowを挿入する",
    "lineNumber": 2915,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入する行のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#remove",
    "access": null,
    "description": "自身を削除する。文書整形は行われない",
    "lineNumber": 2947,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 244,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#delete",
    "access": null,
    "description": "自身を削除し、文書整形を行う(カーソルが含まれていれば前の行、前の行がなければ次の行にカーソルを移動する)",
    "lineNumber": 2982,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveLastBefore",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#moveLastBefore",
    "access": null,
    "description": "前の段落の最終行として移動する。各段落最初の行でのみ有効。自身が空行であれば削除される",
    "lineNumber": 3002,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bringChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#bringChar",
    "access": null,
    "description": "隣のRowの第一文字を、自らの最後に移動する。段落内でのみ有効",
    "lineNumber": 3028,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bringChars",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#bringChars",
    "access": null,
    "description": "隣のRowの最初のnum文字を、自らの最後に移動する。段落内でのみ有効。文字同士の順番は崩さない",
    "lineNumber": 3038,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動する文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "takeChar",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#takeChar",
    "access": null,
    "description": "自分の最後の文字を、次の行の最初に移動する。次の行がなければ新しく作成される",
    "lineNumber": 3048,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "takeChars",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#takeChars",
    "access": null,
    "description": "自分の最後のnum文字を、次の行の最初に移動する。次の行がなければ新しく作成される",
    "lineNumber": 3058,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "移動する文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 250,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createPlainContent",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#createPlainContent",
    "access": null,
    "description": "引数の文字列から作成された装飾のない文字のインスタンスを自らの最後に追加する",
    "lineNumber": 3068,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cordinate",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#cordinate",
    "access": null,
    "description": "指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節する。標準以外のフォントサイズの文字があれば文字数は調整される。また、自身が空段落以外での空行であれば削除する",
    "lineNumber": 3081,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkKinsoku",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#checkKinsoku",
    "access": null,
    "description": "行内の禁則処理を行う",
    "lineNumber": 3109,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 253,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "display",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#display",
    "access": null,
    "description": "自身と子のCharを表示、あるいは非表示にする。内部の文字はfirst文字以降で自身に収まる文字を表示し、それ以外の文字は非表示にする",
    "lineNumber": 3130,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "trueであれば自身を表示し、falseで非表示にする"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": "自身内部のCharを何文字目から表示するかのインデックス(０始まり)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 254,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeDisplayCharPos",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#computeDisplayCharPos",
    "access": null,
    "description": "カーソル行を基準に、文字を何文字目から表示すべきかの計算結果を返す",
    "lineNumber": 3157,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文字の表示開始位置のインデックス"
    },
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstDisplayCharPos",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#firstDisplayCharPos",
    "access": null,
    "description": "この行が何文字目から表示されているかのインデックスを返す",
    "lineNumber": 3175,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "EOL含め最初に表示された文字のインデックス。文字が全て非表示になっていれば-1"
    },
    "generator": false
  },
  {
    "__docId__": 256,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastDisplayCharPos",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#lastDisplayCharPos",
    "access": null,
    "description": "この行が何文字目まで表示されているかのインデックスを返す",
    "lineNumber": 3185,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "EOL含め最後に表示された文字のインデックス。文字が全て非表示になっていれば-1"
    },
    "generator": false
  },
  {
    "__docId__": 257,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runClick",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#runClick",
    "access": null,
    "description": "行のクリックイベントの実行内容。行をクリックすると最も近い文字にカーソルが当たる",
    "lineNumber": 3199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 258,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createEmptyRow",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row.createEmptyRow",
    "access": null,
    "description": "空行のRowインスタンスを新たに作成する",
    "lineNumber": 3222,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "作成されたインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 259,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "afterEach",
    "memberof": "js/object.js~Row",
    "longname": "js/object.js~Row#afterEach",
    "access": null,
    "description": "同一段落で自分以降の行に処理を行う。 処理中に同一段落の行でなくなったなどしても影響せず処理される",
    "lineNumber": 3233,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "処理が定義された関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 260,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Paragraph",
    "memberof": "js/object.js",
    "longname": "js/object.js~Paragraph",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{Paragraph}",
    "description": "段落を表すクラス",
    "lineNumber": 3248,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#constructor",
    "access": null,
    "description": "",
    "lineNumber": 3273,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "段落を表すオブジェクト<br>\n例\n<pre>\n<code>\n // 段落のクラスと各文字オブジェクトの配列の入った配列\n[\n\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t[\t\t\t\t\t\t\t\t\t\t\t\t // 各文字のオブジェクトが配列で格納される\n\t\t{\t\t\t\t\t\t\t\t\t\t\t // 文字を表すオブジェクト\n\t\t\t\"char\":\"あ\",\n\t\t\t\"decolation\":[\"decolation-color-blue\"]\n\t\t\t\"fontSize\":\"auto\"\n\t\t},\n\t\t{\n\t\t\t\"char\":\"い\",\n\t\t\t\"decolation\":[]\n\t\t\t\"fontSize\":\"30\"\n\t\t}\n\t\t]\n]\n</code>\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 262,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "container",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#container",
    "access": null,
    "description": "親の文章コンテナを設定、または引数省略で取得する",
    "lineNumber": 3293,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newContainer",
        "description": "新たに設定する、自身の属する文章コンテナのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の親の文章コンテナのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 263,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rows",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#rows",
    "access": null,
    "description": "指定された行のインスタンス、あるいは引数省略で子のインスタンスの配列を取得する",
    "lineNumber": 3301,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する子のインスタンスのインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Row[]"
      ],
      "spread": false,
      "description": "指定された行のインスタンス(引数を渡した場合)、あるいは子の配列(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 264,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasRow",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#hasRow",
    "access": null,
    "description": "自身が内部に行を持っているかどうかを返す",
    "lineNumber": 3311,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が子を持っていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 265,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#isEmpty",
    "access": null,
    "description": "自身が空段落であるかどうかを返す。空行がひとつだけあってもtrue(空行は空段落にしか存在しないのが正常であるため)",
    "lineNumber": 3318,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内部に行が存在しないか、空行が一つだけならtrue"
    },
    "generator": false
  },
  {
    "__docId__": 266,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasCursor",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#hasCursor",
    "access": null,
    "description": "段落内にカーソルが含まれているかどうかを返す",
    "lineNumber": 3325,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "段落内にカーソルが含まれていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 267,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "contains",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#contains",
    "access": null,
    "description": "引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するかどうかを返す",
    "lineNumber": 3336,
    "params": [
      {
        "nullable": null,
        "types": [
          "AbstractHierarchy"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "判定するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "引数で渡されたオブジェクトが段落内にある行か文字のいずれかに一致するとtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 268,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushRow",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#pushRow",
    "access": null,
    "description": "自身の子の最後にrowを加える",
    "lineNumber": 3351,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "自身の子の最後に加えるインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 269,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertRow",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#insertRow",
    "access": null,
    "description": "自身の子の指定された位置にrowを挿入する",
    "lineNumber": 3360,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "rowを挿入する位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 270,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteRow",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#deleteRow",
    "access": null,
    "description": "自身の子からrowを削除する",
    "lineNumber": 3368,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "削除する子のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 271,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#data",
    "access": null,
    "description": "この段落の状態を表す規定のオブジェクトを作成する",
    "lineNumber": 3378,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "この段落の状態を表す規定のオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 272,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "classArray",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#classArray",
    "access": null,
    "description": "この段落の装飾のクラスを文字列の配列にする",
    "lineNumber": 3394,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "装飾関係のクラスの配列。なければ空の配列"
    },
    "generator": false
  },
  {
    "__docId__": 273,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "countChar",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#countChar",
    "access": null,
    "description": "段落内の文字数を数える",
    "lineNumber": 3401,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "段落内の文字数"
    },
    "generator": false
  },
  {
    "__docId__": 274,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "align",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#align",
    "access": null,
    "description": "段落にtext-alignを設定する、あるいは引数省略で現在のtext-alignの状態を取得する",
    "lineNumber": 3416,
    "params": [
      {
        "nullable": null,
        "types": [
          "string boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_align",
        "description": "新たに設定する'left','center','right'の文字列。'left'あるいはfalseならalignを解除する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のtext-alignの状態(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 275,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeClassFromAllChar",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#removeClassFromAllChar",
    "access": null,
    "description": "自身内部にあるすべてのCharから指定クラスを除去する",
    "lineNumber": 3435,
    "params": [
      {
        "name": "className",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 276,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#search",
    "access": null,
    "description": "自身内部にある文字にstrと合致する文字列があればクラスを付与する",
    "lineNumber": 3446,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "判定する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 277,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#append",
    "access": null,
    "description": "自身の最後にrowを追加する",
    "lineNumber": 3464,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "追加するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "after",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#after",
    "access": null,
    "description": "自身の直後にparagraphを挿入する",
    "lineNumber": 3500,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 279,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#remove",
    "access": null,
    "description": "自身を削除する。文書整形は行われない",
    "lineNumber": 3537,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#delete",
    "access": null,
    "description": "自身を削除し、文書を整形する(内部にカーソルがあれば直前の行に平行移動する。直前の行がなければ直後の行)",
    "lineNumber": 3573,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 281,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "divide",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#divide",
    "access": null,
    "description": "渡された文字以降を新しい段落に移動して、段落を２つに分ける",
    "lineNumber": 3593,
    "params": [
      {
        "nullable": null,
        "types": [
          "Char"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "段落分割の基準文字のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 282,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cordinate",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#cordinate",
    "access": null,
    "description": "内部行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節する。標準以外のフォントサイズの文字があれば文字数は調整される。また、自身が空段落ではなく内部に空行があれば削除する",
    "lineNumber": 3632,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 283,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkKinsoku",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#checkKinsoku",
    "access": null,
    "description": "段落内に禁則処理を施す",
    "lineNumber": 3649,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 284,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "display",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph#display",
    "access": null,
    "description": "内部にあるすべての行の表示非表示を切り替える",
    "lineNumber": 3662,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bDisplay",
        "description": "表示するならtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 285,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createEmptyParagraph",
    "memberof": "js/object.js~Paragraph",
    "longname": "js/object.js~Paragraph.createEmptyParagraph",
    "access": null,
    "description": "空段落のインスタンスを新たに作成する",
    "lineNumber": 3673,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph"
      ],
      "spread": false,
      "description": "空段落のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 286,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ConvertView",
    "memberof": "js/object.js",
    "longname": "js/object.js~ConvertView",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{ConvertView}",
    "description": "漢字変換ビューを表すクラス。それぞれ一つの文節を担当し、複数の漢字変換候補を持つ。また、内部には変換候補としてRowクラスのインスタンスを持つ",
    "lineNumber": 3685,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#constructor",
    "access": null,
    "description": "",
    "lineNumber": 3696,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "変換候補を表すオブジェクト<br>\n例\n<pre>\n<code>\n[[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n</code>\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 288,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "container",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#container",
    "access": null,
    "description": "自分の属する漢字変換コンテナのインスタンスを新たに設定する、あるいは引数省略で現在属しているの漢字変換コンテナを取得する",
    "lineNumber": 3715,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertContainer"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newContainer",
        "description": "新たに設定する漢字変換コンテナのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは所属する漢字変換コンテナ(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 289,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rows",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#rows",
    "access": null,
    "description": "指定されたインデックスの変換候補を表すインスタンス、あるいは引数省略で変換候補インスタンスの配列を取得する",
    "lineNumber": 3723,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する変換候補のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row Row[]"
      ],
      "spread": false,
      "description": "指定されたインデックスの変換候補インスタンス(引数を渡した場合)、あるいは変換候補インスタンスの配列(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 290,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSelect",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#getSelect",
    "access": null,
    "description": "現在選択中の行を取得する",
    "lineNumber": 3730,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "現在選択中の行のインスタンス。選択行がなければ候補最後のひらがな行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 291,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isActive",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#isActive",
    "access": null,
    "description": "この候補一覧が可視化されているかどうか",
    "lineNumber": 3743,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "可視化されていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 292,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hiragana",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#hiragana",
    "access": null,
    "description": "この候補一覧が担当する文節のひらがなを文字列で返す",
    "lineNumber": 3753,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "担当文節のひらがな"
    },
    "generator": false
  },
  {
    "__docId__": 293,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "kanaLength",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#kanaLength",
    "access": null,
    "description": "ひらがなでの文字数を返す",
    "lineNumber": 3761,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ひらがなでの文字数"
    },
    "generator": false
  },
  {
    "__docId__": 294,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "phraseNum",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#phraseNum",
    "access": null,
    "description": "担当する文節のインデックスを返す",
    "lineNumber": 3768,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "担当文節のインデックス(０始まり)"
    },
    "generator": false
  },
  {
    "__docId__": 295,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "active",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#active",
    "access": null,
    "description": "この漢字変換候補一覧を可視化する",
    "lineNumber": 3778,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 296,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectLeft",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#selectLeft",
    "access": null,
    "description": "変換候補の選択をひとつ左に移動する",
    "lineNumber": 3789,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 297,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectRight",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#selectRight",
    "access": null,
    "description": "変換候補の選択をひとつ右に移動する",
    "lineNumber": 3798,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 298,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "select",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#select",
    "access": null,
    "description": "指定されたインデックスの変換候補を選択する",
    "lineNumber": 3811,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "選択する候補のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 299,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#append",
    "access": null,
    "description": "自身の最後に変換候補を追加する",
    "lineNumber": 3828,
    "params": [
      {
        "nullable": null,
        "types": [
          "Row"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "追加する変換候補"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 300,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "before",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#before",
    "access": null,
    "description": "自身の直前に変換候補一覧を挿入する",
    "lineNumber": 3847,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "挿入する変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 301,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "after",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#after",
    "access": null,
    "description": "自身の直後に変換候補一覧を挿入する",
    "lineNumber": 3871,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "挿入する変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 302,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#remove",
    "access": null,
    "description": "自身を削除する",
    "lineNumber": 3898,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 303,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replace",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#replace",
    "access": null,
    "description": "自身をviewと入れ替える",
    "lineNumber": 3922,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertView"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "入れ替える変換候補一覧"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 304,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toKatakana",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#toKatakana",
    "access": null,
    "description": "自身が担当する文節をカタカナに変換する",
    "lineNumber": 3931,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 305,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getKatakana",
    "memberof": "js/object.js~ConvertView",
    "longname": "js/object.js~ConvertView#getKatakana",
    "access": "private",
    "description": "",
    "lineNumber": 3940,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "カタカナに変換した場合の文字列"
    },
    "generator": false
  },
  {
    "__docId__": 306,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ConvertContainer",
    "memberof": "js/object.js",
    "longname": "js/object.js~ConvertContainer",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{ConvertContainer}",
    "description": "変換候補一覧を束ねる漢字変換コンテナを表すクラス",
    "lineNumber": 3958,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 307,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 3962,
    "params": [
      {
        "nullable": null,
        "types": [
          "InputBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "inputBuffer",
        "description": "入力元のインスタンス"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 308,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inputBuffer",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#_inputBuffer",
    "access": null,
    "description": null,
    "lineNumber": 3964,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "inputBuffer",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#inputBuffer",
    "access": null,
    "description": "入力元のインスタンスを取得する",
    "lineNumber": 3973,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "入力元のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 310,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "views",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#views",
    "access": null,
    "description": "指定された変換候補一覧、あるいは引数省略で変換候補一覧の配列を取得する",
    "lineNumber": 3981,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する候補一覧のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView ConvertView[]"
      ],
      "spread": false,
      "description": "指定された候補一覧(引数を渡した場合)、あるいは候補一覧の配列(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 311,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "activeView",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#activeView",
    "access": null,
    "description": "現在アクティブになっている変換候補一覧のインスタンスを取得する",
    "lineNumber": 3988,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertView"
      ],
      "spread": false,
      "description": "現在アクティブな変換候補一覧のインスタンス。なければnull"
    },
    "generator": false
  },
  {
    "__docId__": 312,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isActive",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#isActive",
    "access": null,
    "description": "漢字変換が行われているところかどうかを返す",
    "lineNumber": 4001,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "候補一覧がひとつでも内部にあればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 313,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reposition",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#reposition",
    "access": null,
    "description": "表示位置をカーソル横に移動する",
    "lineNumber": 4011,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 314,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorX",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#cursorX",
    "access": null,
    "description": "カーソル位置のX座標を返す",
    "lineNumber": 4022,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のX座標"
    },
    "generator": false
  },
  {
    "__docId__": 315,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorY",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#cursorY",
    "access": null,
    "description": "カーソル位置のY座標を返す",
    "lineNumber": 4029,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のY座標"
    },
    "generator": false
  },
  {
    "__docId__": 316,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "show",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#show",
    "access": null,
    "description": "自身を表示する",
    "lineNumber": 4036,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 317,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hide",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#hide",
    "access": null,
    "description": "自身を非表示にする",
    "lineNumber": 4044,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 318,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "print",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#print",
    "access": null,
    "description": "カーソル位置から文字を挿入して、内部の変換候補一覧を破棄する",
    "lineNumber": 4056,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 319,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createViews",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#createViews",
    "access": null,
    "description": "内部に変換候補一覧のインスタンス群を構築する",
    "lineNumber": 4071,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文節分け及び変換候補を示すオブジェクト<br>\n<pre>\n<code>\n // data形式例\n[[ひらがな,[漢字１,漢字２,漢字３]],[ひらがな２,[漢字４,漢字５]],[[ひらがな３,[漢字６,漢字７]]]]\n</code>\n</pre>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 320,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convert",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#convert",
    "access": null,
    "description": "漢字変換を始める(非同期通信)",
    "lineNumber": 4083,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "変換する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 321,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shiftUp",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#shiftUp",
    "access": null,
    "description": "文節区切りをひとつ前にずらして変換し直す(非同期通信)",
    "lineNumber": 4107,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 322,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shiftDown",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#shiftDown",
    "access": null,
    "description": "文節区切りをひとつ下にずらして変換し直す(非同期通信)",
    "lineNumber": 4149,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 323,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "backSpace",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#backSpace",
    "access": null,
    "description": "入力元の文字がひらがなにして１文字しかなければ全て破棄して入力を終了する。二文字以上あれば最後の１音のみ削除して選択文節を変換し直す(非同期通信)",
    "lineNumber": 4193,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 324,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replace",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#replace",
    "access": null,
    "description": "インデックスがnumの文節の変換候補一覧を、新たなdataで入れ替える",
    "lineNumber": 4238,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "入れ替える文節のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "変換候補を表すオブジェクト<br>\n例\n<pre>\n<code>\n[[ひらがな],[平仮名,ヒラガナ,平賀な,平がな,HIRAGANA]]\n</code>\n</pre>"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 325,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#append",
    "access": null,
    "description": "自身の最後に変換候補一覧を追加する",
    "lineNumber": 4270,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConvertContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": "追加する変換候補一覧のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 326,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addKeydownEventListener",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#addKeydownEventListener",
    "access": null,
    "description": "漢字変換中のkeydownイベントリスナーを付加する。重ねがけは無効",
    "lineNumber": 4287,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 327,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runKeydown",
    "memberof": "js/object.js~ConvertContainer",
    "longname": "js/object.js~ConvertContainer#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容",
    "lineNumber": 4298,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 328,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InputChar",
    "memberof": "js/object.js",
    "longname": "js/object.js~InputChar",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{InputChar}",
    "description": "入力文字を表すクラス",
    "lineNumber": 4345,
    "interface": false,
    "extends": [
      "Char"
    ]
  },
  {
    "__docId__": 329,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#constructor",
    "access": null,
    "description": "",
    "lineNumber": 4360,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文字を表すオブジェクト<br>\n例\n<pre>\n<code>\n{\n\t\"char\":\"あ\",\n\t\"decolation\":[\"decolation-color-blue\"]\n\t\"fontSize\": \"auto\"\n}\n</code>\n</pre>"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-1",
        "defaultRaw": -1,
        "name": "opt_phraseNum",
        "description": "文節のインデックス"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 330,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isPhraseNum",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#isPhraseNum",
    "access": null,
    "description": "自身の文節番号がnumであるかどうか",
    "lineNumber": 4373,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "判定するインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身の文節番号がnumであればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 331,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isSelect",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#isSelect",
    "access": null,
    "description": "自身が選択されているかどうかを表す",
    "lineNumber": 4380,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が選択されていればtrue、そうでなければfalse。漢字変換が一度もされていなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 332,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "phraseNum",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#phraseNum",
    "access": null,
    "description": "この文字の文節番号をnewNumに設定する、あるいは引数省略で現在の文節番号を取得する",
    "lineNumber": 4391,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newNum",
        "description": "新たに設定する文節番号(０始まり)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputChar number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の文節のインデックス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 333,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_phraseNum",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#_phraseNum",
    "access": null,
    "description": null,
    "lineNumber": 4396,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "select",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#select",
    "access": null,
    "description": "この文字を選択状態にする",
    "lineNumber": 4407,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 335,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeSelect",
    "memberof": "js/object.js~InputChar",
    "longname": "js/object.js~InputChar#removeSelect",
    "access": null,
    "description": "この文字を非選択状態にする",
    "lineNumber": 4415,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 336,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InputBuffer",
    "memberof": "js/object.js",
    "longname": "js/object.js~InputBuffer",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{InputBuffer}",
    "description": "入力された文字をいったん保持するバッファーを表すクラス。内部の子にInputCharのインスタンス群を持つ。\n    また、一度も漢字変換がされず文節番号がすべて-1の場合と、漢字変換が行われ文節が分けられている場合と２つの状態がある",
    "lineNumber": 4426,
    "interface": false,
    "extends": [
      "Row"
    ]
  },
  {
    "__docId__": 337,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 4430,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "自身の属する文章コンテナのインスタンス"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 338,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_container",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#_container",
    "access": null,
    "description": null,
    "lineNumber": 4432,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_convertContainer",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#_convertContainer",
    "access": null,
    "description": null,
    "lineNumber": 4433,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "container",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#container",
    "access": null,
    "description": "自身の属する文章コンテナのインスタンスを取得する",
    "lineNumber": 4442,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身の属する文章コンテナ"
    },
    "generator": false
  },
  {
    "__docId__": 341,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursor",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#cursor",
    "access": null,
    "description": "カーソルのインスタンスを取得する",
    "lineNumber": 4449,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "カーソルのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 342,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorChar",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#cursorChar",
    "access": null,
    "description": "カーソルのある文字のインスタンスを取得する",
    "lineNumber": 4456,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 343,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convertContainer",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#convertContainer",
    "access": null,
    "description": "漢字変換コンテナのインスタンスを取得する",
    "lineNumber": 4463,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ConvertContainer"
      ],
      "spread": false,
      "description": "漢字変換コンテナのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 344,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "phrases",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#phrases",
    "access": null,
    "description": "指定された文節番号の入力文字インスタンスを配列にして返す",
    "lineNumber": 4471,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "集める入力文字の文節番号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputChar[]"
      ],
      "spread": false,
      "description": "指定された文節番号の入力文字インスタンスの配列"
    },
    "generator": false
  },
  {
    "__docId__": 345,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectPhrases",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#selectPhrases",
    "access": null,
    "description": "選択中の文節の入力文字インスタンスを返す",
    "lineNumber": 4482,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar[]"
      ],
      "spread": false,
      "description": "選択中の入力文字インスタンスの配列。選択されていなければ空の配列"
    },
    "generator": false
  },
  {
    "__docId__": 346,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDisplay",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#isDisplay",
    "access": null,
    "description": "自身が可視化されている(文字入力中)かどうかを返す",
    "lineNumber": 4496,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が可視化されていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 347,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPhraseNum",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#setPhraseNum",
    "access": null,
    "description": "変換候補一覧群を作成した後に、各入力文字に文節番号をふる",
    "lineNumber": 4506,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 348,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectIndex",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#selectIndex",
    "access": null,
    "description": "選択されている文節のインデックスを返す",
    "lineNumber": 4521,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "選択文節のインデックス。選択されていなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 349,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#width",
    "access": null,
    "description": "自身の幅を取得する。文章内のRowと異なり回転されていないため、css上の幅と一致する",
    "lineNumber": 4534,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    },
    "generator": false
  },
  {
    "__docId__": 350,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#height",
    "access": null,
    "description": "自身の高さを取得する。文章内のRowと異なり回転されていないため、css上の高さと一致する",
    "lineNumber": 4541,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    },
    "generator": false
  },
  {
    "__docId__": 351,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resize",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#resize",
    "access": null,
    "description": "自身の高さや幅を内部の各入力文字に合わせて調整する",
    "lineNumber": 4548,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 352,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#move",
    "access": null,
    "description": "自身の表示位置をカーソルに合わせる",
    "lineNumber": 4558,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 353,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "show",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#show",
    "access": null,
    "description": "自身を表示する",
    "lineNumber": 4567,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 354,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hide",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#hide",
    "access": null,
    "description": "自身を非表示にする",
    "lineNumber": 4575,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 355,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectNext",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#selectNext",
    "access": null,
    "description": "選択文節を次の文節に変更する。最後の文節から実行されれば、最初の文節が選択される",
    "lineNumber": 4584,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 356,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectPrev",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#selectPrev",
    "access": null,
    "description": "選択文節を前の文節に変更する。最初の文節から実行されれば、最後の文節が選択される",
    "lineNumber": 4591,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 357,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "select",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#select",
    "access": null,
    "description": "文節番号がindexの文字を選択する。引数が負になれば最後の文節を、最大の文節番号を越えれば最初の文節を選択する",
    "lineNumber": 4599,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "選択する文節のインデックス。負の数なら最後の文節、範囲より大きな数なら最初の文節が選択される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 358,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "empty",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#empty",
    "access": null,
    "description": "自身を空にして、文字入力を終了する",
    "lineNumber": 4620,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 359,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "increace",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#increace",
    "access": null,
    "description": "keycodeを追加した場合の新たな文字列で入力文字を置き換える",
    "lineNumber": 4633,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "追加するキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 360,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decreace",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#decreace",
    "access": null,
    "description": "bufferの最後の文字を削除する。内部に文字がなくなれば入力を終了する",
    "lineNumber": 4648,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputChar"
      ],
      "spread": false,
      "description": "削除した入力文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 361,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#update",
    "access": null,
    "description": "内部の入力文字をstrで置き換える",
    "lineNumber": 4663,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "置き換える文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 362,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "print",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#print",
    "access": null,
    "description": "カーソル位置に文字を挿入し、後処理を行って入力状態を終了する",
    "lineNumber": 4675,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 363,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toKatakanaAll",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#toKatakanaAll",
    "access": null,
    "description": "入力文字をすべてカタカナに置き換える",
    "lineNumber": 4686,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 364,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "convert",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#convert",
    "access": null,
    "description": "入力文字すべてを漢字変換する",
    "lineNumber": 4694,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 365,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertPhrase",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#insertPhrase",
    "access": null,
    "description": "インデックスがnumである文節の入力文字をstrで入れ替える",
    "lineNumber": 4704,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "入れ替える文節のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "入れ替える文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 366,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertPhraseAfter",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#insertPhraseAfter",
    "access": null,
    "description": "インデックスがnumである文節の後ろにstrを追加する。追加した文字の文節番号は負の値になる",
    "lineNumber": 4726,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "挿入位置の指定"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "挿入する文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 367,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "newString",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#newString",
    "access": "private",
    "description": "",
    "lineNumber": 4746,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "追加するキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "keycodeを追加して作られた文字列"
    },
    "generator": false
  },
  {
    "__docId__": 368,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getKatakana",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#getKatakana",
    "access": "private",
    "description": "",
    "lineNumber": 4759,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "カタカナに置き換えた文字列"
    },
    "generator": false
  },
  {
    "__docId__": 369,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "newWidth",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#newWidth",
    "access": "private",
    "description": "",
    "lineNumber": 4778,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された幅のピクセル数"
    },
    "generator": false
  },
  {
    "__docId__": 370,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "newHeight",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#newHeight",
    "access": "private",
    "description": "",
    "lineNumber": 4797,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された高さのピクセル数"
    },
    "generator": false
  },
  {
    "__docId__": 371,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorX",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#cursorX",
    "access": null,
    "description": "カーソル位置のX座標を返す",
    "lineNumber": 4815,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のX座標"
    },
    "generator": false
  },
  {
    "__docId__": 372,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorY",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#cursorY",
    "access": null,
    "description": "カーソル位置のY座標を返す",
    "lineNumber": 4822,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル位置のY座標"
    },
    "generator": false
  },
  {
    "__docId__": 373,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "transfer",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#transfer",
    "access": null,
    "description": "keyeventがSentenceContainerから移動するかどうかを判定して前処理を行う(キーコードをincreace()して入力文字ができれば入力モードに移行する)",
    "lineNumber": 4834,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bShift",
        "description": "シフトキーが押されていればtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 374,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addKeydownEventListener",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#addKeydownEventListener",
    "access": null,
    "description": "入力時のkeydownイベントリスナーを付加する",
    "lineNumber": 4846,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 375,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runKeydown",
    "memberof": "js/object.js~InputBuffer",
    "longname": "js/object.js~InputBuffer#runKeydown",
    "access": null,
    "description": "入力時のkeydownイベントの実行内容",
    "lineNumber": 4857,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 376,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "File",
    "memberof": "js/object.js",
    "longname": "js/object.js~File",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{File}",
    "description": "ユーザーのファイル情報のひとつを扱うクラス",
    "lineNumber": 4885,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 377,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#constructor",
    "access": null,
    "description": "",
    "lineNumber": 4890,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ファイルのID"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "ファイル名"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 378,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_link",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_link",
    "access": null,
    "description": null,
    "lineNumber": 4892,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_id",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_id",
    "access": null,
    "description": null,
    "lineNumber": 4893,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_name",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_name",
    "access": null,
    "description": null,
    "lineNumber": 4894,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_nextFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_nextFile",
    "access": null,
    "description": null,
    "lineNumber": 4895,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prevFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_prevFile",
    "access": null,
    "description": null,
    "lineNumber": 4896,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fileList",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#fileList",
    "access": null,
    "description": "自身の属するファイルリストの参照を探して取得する",
    "lineNumber": 4906,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身の属するファイルリストのインスタンス。見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 384,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "link",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#link",
    "access": null,
    "description": "内部のaタグのDOM要素を取得する",
    "lineNumber": 4917,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の持つaタグのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 385,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nextFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#nextFile",
    "access": null,
    "description": "自身の次に位置するファイルのインスタンスを新たに設定、または引数省略で取得する。\n    通常のnext()はディレクトリも含め同階層のみをつなぐ。nextFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぐ",
    "lineNumber": 4926,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_file",
        "description": "新たに設定するファイルのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の次のファイルのインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 386,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_nextFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_nextFile",
    "access": null,
    "description": null,
    "lineNumber": 4930,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prevFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#prevFile",
    "access": null,
    "description": "自身の前に位置するファイルのインスタンスを新たに設定、または引数省略で取得する。\n    通常のやprev()はディレクトリも含め同階層のみをつなぐ。prevFile()はファイルのみを、それもディレクトリ横断的に、さらに階層もまたいでつなぐ",
    "lineNumber": 4940,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_file",
        "description": "新たに設定するファイルのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは自身の前のファイルのインスタンス(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 388,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prevFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_prevFile",
    "access": null,
    "description": null,
    "lineNumber": 4944,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRoot",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返す",
    "lineNumber": 4955,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 390,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDirectory",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isDirectory",
    "access": null,
    "description": "自身がディレクトリのインスタンスであるかどうかを返す",
    "lineNumber": 4962,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 391,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isFile",
    "access": null,
    "description": "自身がファイルのインスタンスであるかどうかを返す",
    "lineNumber": 4969,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    },
    "generator": false
  },
  {
    "__docId__": 392,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isFirstFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isFirstFile",
    "access": null,
    "description": "自身が最初のファイルであるかどうかを返す(ディレクトリ単位ではなく、ファイルリスト全体の中で最初のファイルであるかどうか)",
    "lineNumber": 4976,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がファイルリストの中で最初のファイルならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 393,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLastFile",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isLastFile",
    "access": null,
    "description": "自身が最後のファイルであるかどうかを返す(ディレクトリ単位ではなく、ファイルリスト全体の中で最後のファイルであるかどうか)",
    "lineNumber": 4983,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身がファイルリストの中で最後のファイルならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 394,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isOpen",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isOpen",
    "access": null,
    "description": "自身が表すファイルが文章コンテナに読み込まれているかどうかを返す",
    "lineNumber": 4990,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が現在読み込まれていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 395,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isClose",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#isClose",
    "access": null,
    "description": "自身が表すファイルが文章コンテナに読み込まれていないかどうかを返す",
    "lineNumber": 4997,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "自身が現在読み込まれていなければtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 396,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#id",
    "access": null,
    "description": "自身のファイルIDを返す",
    "lineNumber": 5006,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身のファイルID"
    },
    "generator": false
  },
  {
    "__docId__": 397,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#name",
    "access": null,
    "description": "自身のファイル名を返す",
    "lineNumber": 5013,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身のファイル名"
    },
    "generator": false
  },
  {
    "__docId__": 398,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "open",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#open",
    "access": null,
    "description": "文章コンテナに自身のファイルを非同期で読み込む",
    "lineNumber": 5023,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 399,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#delete",
    "access": null,
    "description": "自身の要素及び自身への参照を削除し、自身が表すファイルを削除する(非同期通信)",
    "lineNumber": 5039,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 400,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#move",
    "access": null,
    "description": "自身をnewParentDirの中に移動し、ファイルリストを作り直す(非同期通信)",
    "lineNumber": 5070,
    "params": [
      {
        "nullable": null,
        "types": [
          "Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "newParentDir",
        "description": "自身の親となるディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 401,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addClickEventListener",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#addClickEventListener",
    "access": null,
    "description": "自身のリンクにクリックイベントを付加する",
    "lineNumber": 5089,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 402,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_clickArg",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 5090,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeClickEventListener",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#removeClickEventListener",
    "access": null,
    "description": "自身のリンクへのクリックイベントを除去する",
    "lineNumber": 5098,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 404,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_clickArg",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#_clickArg",
    "access": null,
    "description": null,
    "lineNumber": 5101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runClick",
    "memberof": "js/object.js~File",
    "longname": "js/object.js~File#runClick",
    "access": null,
    "description": "自身のリンクへのクリックイベントの内容(クリックするとファイルが読み込まれる)",
    "lineNumber": 5108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 406,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Directory",
    "memberof": "js/object.js",
    "longname": "js/object.js~Directory",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{Directory}",
    "description": "ユーザーのディレクトリ情報のひとつを扱うクラス",
    "lineNumber": 5116,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 407,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#constructor",
    "access": null,
    "description": "",
    "lineNumber": 5135,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dirId",
        "description": "ディレクトリID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ディレクトリの情報を持つオブジェクト\n<pre>\n<code>\n // データの内容例\n{\n\t\"directoryname\": \"dirname\",\n\t\"4\":\"indirfile\",\n\t\"9\":\"file\",\n\t\"12\": {\n\t\t\"directoryname\": \"seconddir\",\n\t\t\"17\": \"file\"\n\t}\n}\n</code>\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 408,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_link",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#_link",
    "access": null,
    "description": null,
    "lineNumber": 5155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_innerList",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#_innerList",
    "access": null,
    "description": null,
    "lineNumber": 5156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_id",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#_id",
    "access": null,
    "description": null,
    "lineNumber": 5158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_name",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#_name",
    "access": null,
    "description": null,
    "lineNumber": 5159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "link",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#link",
    "access": null,
    "description": "内部のaタグのDOM要素を取得する",
    "lineNumber": 5176,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の持つaタグのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 413,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "innerList",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#innerList",
    "access": null,
    "description": "自身の内部の要素の構築先であるDOM要素(コラプスの内容の格納先)を返す",
    "lineNumber": 5183,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "自身の内部リストのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 414,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fileList",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#fileList",
    "access": null,
    "description": "自身の属するファイルリストの参照を探して取得する",
    "lineNumber": 5190,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身の属するファイルリストのインスタンス。見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 415,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRoot",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返す",
    "lineNumber": 5203,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 416,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDirectory",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#isDirectory",
    "access": null,
    "description": "自身がDirectoryのインスタンスであるかどうかを返す",
    "lineNumber": 5210,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    },
    "generator": false
  },
  {
    "__docId__": 417,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isFile",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#isFile",
    "access": null,
    "description": "自身がFileのインスタンスであるかどうかを返す",
    "lineNumber": 5217,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 418,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#id",
    "access": null,
    "description": "自身のIDを返す",
    "lineNumber": 5229,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身のID"
    },
    "generator": false
  },
  {
    "__docId__": 419,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#name",
    "access": null,
    "description": "自身のディレクトリ名を返す",
    "lineNumber": 5236,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "自身のディレクトリ名"
    },
    "generator": false
  },
  {
    "__docId__": 420,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#append",
    "access": null,
    "description": "自身の内部の最後にfileを追加する",
    "lineNumber": 5247,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、あるいはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 421,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendElem",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#appendElem",
    "access": null,
    "description": "自身の内部リストの内部の最後にfileのDOM要素を追加する",
    "lineNumber": 5267,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、あるいはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 422,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "js/object.js~Directory",
    "longname": "js/object.js~Directory#delete",
    "access": null,
    "description": "自身を削除する(非同期通信)",
    "lineNumber": 5276,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opt_bl",
        "description": "自身の内部にファイルがあるとき、強制的に中のファイルごと削除するならtrue、そうでなければfalseを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 423,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FileList",
    "memberof": "js/object.js",
    "longname": "js/object.js~FileList",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{FileList}",
    "description": "ファイルやディレクトリを一覧にするファイルリストを表すクラス",
    "lineNumber": 5293,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 424,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#constructor",
    "access": null,
    "description": "",
    "lineNumber": 5317,
    "params": [
      {
        "nullable": null,
        "types": [
          "SentenceContainer"
        ],
        "spread": false,
        "optional": false,
        "name": "sentenceContainer",
        "description": "自身のファイルを展開する文章コンテナのインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_data",
        "description": "ファイルやディレクトリの情報を扱うオブジェクト。省略した場合は、init()にdataを渡して参照やDOMの構築を行う\n<pre>\n<code>\n // dataの中身例\n{\n\t\"directoryname\": \"root\",\n\t\"1\":\"sample\",\n\t\"8\":\"file\",\n\t\"6\": {\n\t\t\"directoryname\": \"dirname\",\n\t\t\"4\":\"indirfile\",\n\t\t\"9\":\"file\",\n\t\t\"12\": {\n\t\t\t\"directoryname\": \"seconddir\",\n\t\t\t\"17\": \"file\"\n\t\t}\n\t}\n}\n</code>\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 425,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sentenceContainer",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#_sentenceContainer",
    "access": null,
    "description": null,
    "lineNumber": 5319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_$modal",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#_$modal",
    "access": null,
    "description": null,
    "lineNumber": 5320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterInputElem",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#_filterInputElem",
    "access": null,
    "description": null,
    "lineNumber": 5321,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#init",
    "access": null,
    "description": "参照やDOMの構築を行う",
    "lineNumber": 5334,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ファイルやディレクトリの情報を扱うオブジェクト。詳細はconstructorの説明へ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 429,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sentenceContainer",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#sentenceContainer",
    "access": null,
    "description": "文章コンテナのインスタンスを返す",
    "lineNumber": 5353,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のファイルを展開する文章コンテナのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 430,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#firstFile",
    "access": null,
    "description": "自身の子のうち、最初のファイルのインスタンスを取得する",
    "lineNumber": 5360,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "最初のファイルのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 431,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#lastFile",
    "access": null,
    "description": "自身の子のうち、最後のファイルのインスタンスを取得する",
    "lineNumber": 5367,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "最後のファイルのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 432,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "currentFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#currentFile",
    "access": null,
    "description": "現在文章コンテナに展開されているファイルのインスタンスを返す",
    "lineNumber": 5377,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "現在開かれているファイルのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 433,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "$modal",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#$modal",
    "access": null,
    "description": "ファイルリストのモーダルのjQueryオブジェクトを返す",
    "lineNumber": 5387,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "jQuery"
      ],
      "spread": false,
      "description": "ファイルリストモーダルのjQueryオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 434,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filterInputElem",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#filterInputElem",
    "access": null,
    "description": "ファイルリストモーダル下部にある検索ボックスのDOM要素を返す",
    "lineNumber": 5394,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "検索用InputのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 435,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#findFile",
    "access": null,
    "description": "指定されたファイルのインスタンスを探索して返す。同じ名前を持つファイルが複数見つかる場合もあるので、結果は配列にして返す",
    "lineNumber": 5402,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrName",
        "description": "対象ファイルのID、もしくはファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File[]"
      ],
      "spread": false,
      "description": "見つかったファイルインスタンスの配列"
    },
    "generator": false
  },
  {
    "__docId__": 436,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findDirectory",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#findDirectory",
    "access": null,
    "description": "指定されたディレクトリのインスタンスを探索して返す。同じ名前を持つディレクトリが複数見つかる場合もあるので、結果は配列にして返す",
    "lineNumber": 5416,
    "params": [
      {
        "nullable": null,
        "types": [
          "number string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrName",
        "description": "対象ディレクトリのID、もしくはディレクトリ名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Directory[]"
      ],
      "spread": false,
      "description": "見つかったディレクトリインスタンスの配列"
    },
    "generator": false
  },
  {
    "__docId__": 437,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRoot",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#isRoot",
    "access": null,
    "description": "自身がFileListのインスタンスであるかどうかを返す",
    "lineNumber": 5432,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にtrue"
    },
    "generator": false
  },
  {
    "__docId__": 438,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#isFile",
    "access": null,
    "description": "自身がDirectoryのインスタンスであるかどうかを返す",
    "lineNumber": 5439,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 439,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isDirectory",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#isDirectory",
    "access": null,
    "description": "自身がFileのインスタンスであるかどうかを返す",
    "lineNumber": 5446,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "常にfalse"
    },
    "generator": false
  },
  {
    "__docId__": 440,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isOpen",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#isOpen",
    "access": null,
    "description": "ファイルリストのモーダルが開いているかどうかを返す",
    "lineNumber": 5453,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ファイルリストのモーダルが開いていればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 441,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#hasFile",
    "access": null,
    "description": "自身の内部にファイルがあるかどうかを返す",
    "lineNumber": 5460,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "ファイルがあればtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 442,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chainFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#chainFile",
    "access": null,
    "description": "内部のFile同士をポインタでつなぐ",
    "lineNumber": 5470,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 443,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findNextFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#findNextFile",
    "access": null,
    "description": "リストで上からファイルだけを数えた場合の、引数の次のファイルを返す",
    "lineNumber": 5485,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileList File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "基準とするインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "見つかったファイルのインスタンス。引数の次のファイルが見つからなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 444,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "each",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#each",
    "access": null,
    "description": "すべてのファイルとディレクトリを順に引数にして関数を実行する",
    "lineNumber": 5522,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "実行する関数オブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 445,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "showModal",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#showModal",
    "access": null,
    "description": "ファイルリストのモーダルを開く。その際、ファイル検索ボックスに自動的にフォーカスを当てる",
    "lineNumber": 5543,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 446,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hideModal",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#hideModal",
    "access": null,
    "description": "ファイルリストのモーダルを閉じる",
    "lineNumber": 5554,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 447,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#append",
    "access": null,
    "description": "ファイルリストの末端にファイル、またはディレクトリを追加する",
    "lineNumber": 5566,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、またはディレクトリ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 448,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendElem",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#appendElem",
    "access": null,
    "description": "自身のDOM要素の内部の最後にfileのDOM要素を追加する",
    "lineNumber": 5586,
    "params": [
      {
        "nullable": null,
        "types": [
          "File Directory"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "追加するファイル、またはディレクトリのインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 449,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "emptyElem",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#emptyElem",
    "access": null,
    "description": "内部のエレメントを空にする",
    "lineNumber": 5594,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 450,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetList",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#resetList",
    "access": null,
    "description": "各インスタンスの参照はそのままで、DOM要素のみを構築し直す",
    "lineNumber": 5608,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 451,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filter",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#filter",
    "access": null,
    "description": "ファイルリストの内容をstrから始まる名前を持つファイル・ディレクトリのみに置き換える(各インスタンスの参照はそのままで、DOM要素のみを変更する)",
    "lineNumber": 5620,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "この文字列から始まる名前を持つファイル、ディレクトリだけがファイルリスト内に表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 452,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "read",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#read",
    "access": null,
    "description": "ファイルリストをサーバーから読み込み、各インスタンスを構築し直す(非同期通信)",
    "lineNumber": 5640,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 453,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "openNextFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#openNextFile",
    "access": null,
    "description": "現在開いているファイルの次のファイルを読み込み、文章コンテナに展開する",
    "lineNumber": 5653,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 454,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "openPrevFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#openPrevFile",
    "access": null,
    "description": "現在開いているファイルの前のファイルを読み込み、文章コンテナに展開する",
    "lineNumber": 5667,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 455,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#deleteFile",
    "access": null,
    "description": "名前で指定されたファイルを削除する(非同期通信)。同名のファイルが複数見つかった場合は確認する",
    "lineNumber": 5682,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "削除するファイルの名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 456,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mkdir",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#mkdir",
    "access": null,
    "description": "指定された名前でディレクトリを作成する(非同期通信)",
    "lineNumber": 5709,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "新しく作成されるディレクトリの名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 457,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteDirectory",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#deleteDirectory",
    "access": null,
    "description": "指定された名前のディレクトリを削除する(非同期通信)",
    "lineNumber": 5727,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "削除するディレクトリの名前"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isForce",
        "description": "ディレクトリ内にファイル等があっても強制的に中身ごと削除するならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 458,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moveFile",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#moveFile",
    "access": null,
    "description": "指定されたファイルを指定されたディレクトリ内に移動する(非同期通信)",
    "lineNumber": 5739,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "移動するファイル名。同名のファイルが見つかった場合は、最初に見つかったファイルが選択される"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirname",
        "description": "移動先のディレクトリ名。同名のディレクトリが見つかった場合は、最初に見つかったディレクトリが選択される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 459,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEventListenerOnInput",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#addEventListenerOnInput",
    "access": null,
    "description": "ファイルリストのモーダル内にあるファイル検索ボックス関係のイベントを付加する",
    "lineNumber": 5752,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 460,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onKeyupOnInput",
    "memberof": "js/object.js~FileList",
    "longname": "js/object.js~FileList#onKeyupOnInput",
    "access": null,
    "description": "ファイル検索ボックスのkeyupイベントの内容",
    "lineNumber": 5764,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 461,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SentenceContainer",
    "memberof": "js/object.js",
    "longname": "js/object.js~SentenceContainer",
    "access": null,
    "export": true,
    "importPath": "./js/object.js",
    "importStyle": "{SentenceContainer}",
    "description": "文章コンテナを表すクラス",
    "lineNumber": 5793,
    "interface": false,
    "extends": [
      "AbstractHierarchy"
    ]
  },
  {
    "__docId__": 462,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#constructor",
    "access": null,
    "description": "",
    "lineNumber": 5843,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "ユーザーID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_data",
        "description": "文書情報のオブジェクト\n<pre>\n{\n\t\"filename\": \"sampleFile\",\n\t\"fileId\": \"12\",\n\t\"saved\": \"2016-08-23 02:13:05\",\n\t\"userId\": \"7\",\n\t\"data\": {\n\t\t\"conf\": { // 文書全体に関する設定情報\n\t\t\t\"strLen\": \"36\",\n\t\t\t\"rowLen\": \"42\"\n\t\t},\n\t\t\"text\":[ // 各段落の情報が入った配列の配列\n\t\t\t\t\t[ // 段落の情報が入った配列\n\t\t\t\t\t\t[\"decolation-textalign-center\"],\t\t // 段落のクラスが文字列の配列で格納される\n\t\t\t\t\t\t[\t // 各文字のオブジェクトが配列で格納される\n\t\t\t\t\t\t\t{\t // 文字を表すオブジェクト\n\t\t\t\t\t\t\t\t\"char\":\"あ\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-blue\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"auto\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t\t\t\t\t\t\t\t\"decolation\":[]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t[],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"い\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"char\":\"う\",\n\t\t\t\t\t\t\t\t\"decolation\":[\"decolation-color-red\"],\n\t\t\t\t\t\t\t\t\"fontSize\":\"30\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t]\n\t}\n}\n</pre>"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 463,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_userId",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_userId",
    "access": null,
    "description": null,
    "lineNumber": 5846,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_titleElem",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_titleElem",
    "access": null,
    "description": null,
    "lineNumber": 5847,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_searchInputElem",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_searchInputElem",
    "access": null,
    "description": null,
    "lineNumber": 5848,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_userAlertElem",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_userAlertElem",
    "access": null,
    "description": null,
    "lineNumber": 5849,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_cursor",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_cursor",
    "access": null,
    "description": null,
    "lineNumber": 5852,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inputBuffer",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_inputBuffer",
    "access": null,
    "description": null,
    "lineNumber": 5853,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_fileList",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_fileList",
    "access": null,
    "description": null,
    "lineNumber": 5854,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_command",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_command",
    "access": null,
    "description": null,
    "lineNumber": 5855,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_menu",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_menu",
    "access": null,
    "description": null,
    "lineNumber": 5856,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#init",
    "access": null,
    "description": "文書をコンテナに展開する",
    "lineNumber": 5865,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文書情報のオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 473,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_strLenOnRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_strLenOnRow",
    "access": null,
    "description": null,
    "lineNumber": 5871,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_rowLenOnPage",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_rowLenOnPage",
    "access": null,
    "description": null,
    "lineNumber": 5872,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paragraphs",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#paragraphs",
    "access": null,
    "description": "指定された段落のインスタンス、あるいは引数省略で子の段落のインスタンスの配列を取得する",
    "lineNumber": 5895,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_index",
        "description": "取得する段落のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Paragraph Paragraph[]"
      ],
      "spread": false,
      "description": "指定された段落のインスタンス。あるいは引数省略で段落のインスタンスの配列(子がなければ空の配列)"
    },
    "generator": false
  },
  {
    "__docId__": 476,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#firstRow",
    "access": null,
    "description": "文章内の最初の行のインスタンスを返す",
    "lineNumber": 5902,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最初の行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 477,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#lastRow",
    "access": null,
    "description": "文章内の最終行のインスタンスを返す",
    "lineNumber": 5909,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最終行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 478,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "row",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#row",
    "access": null,
    "description": "num行目のRowを取得する。numが負の数なら最初の行、numが行数以上の数値であれば最終行のインスタンスが取得される",
    "lineNumber": 5917,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "取得する行のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "見つかった行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 479,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pageRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#pageRow",
    "access": null,
    "description": "numページ目の第一行目のRowを取得する。numが負の数なら最初の行、numがページ数以上の数値であれば最終行のインスタンスが取得される",
    "lineNumber": 5931,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "何ページ目か"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "見つかった行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 480,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstChar",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#firstChar",
    "access": null,
    "description": "文書内で最初の文字(あるいはEOL)のインスタンスを返す",
    "lineNumber": 5946,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char EOL"
      ],
      "spread": false,
      "description": "見つかった文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 481,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastChar",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#lastChar",
    "access": null,
    "description": "文書内で最終文字(EOLは除く)のインスタンスを返す",
    "lineNumber": 5953,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "見つかった文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 482,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastEOL",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#lastEOL",
    "access": null,
    "description": "文書内で最終行のEOLを返す",
    "lineNumber": 5960,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "EOL"
      ],
      "spread": false,
      "description": "最後のEOL"
    },
    "generator": false
  },
  {
    "__docId__": 483,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursor",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#cursor",
    "access": null,
    "description": "カーソルのインスタンスを返す",
    "lineNumber": 5967,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Cursor"
      ],
      "spread": false,
      "description": "文書内のカーソルのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 484,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorChar",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#cursorChar",
    "access": null,
    "description": "この文書内でカーソルのあたっている文字のインスタンスを返す",
    "lineNumber": 5974,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Char"
      ],
      "spread": false,
      "description": "カーソル文字のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 485,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#cursorRow",
    "access": null,
    "description": "この文書内でカーソルのある行のインスタンスを返す",
    "lineNumber": 5981,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "カーソル行のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 486,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "inputBuffer",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#inputBuffer",
    "access": null,
    "description": "この文書に入力する際に使用する入力バッファーのインスタンスを返す",
    "lineNumber": 5988,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "InputBuffer"
      ],
      "spread": false,
      "description": "入力バッファーのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 487,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fileList",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#fileList",
    "access": null,
    "description": "この文書コンテナを使用するファイルリストのインスタンスを返す",
    "lineNumber": 5995,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "FileList"
      ],
      "spread": false,
      "description": "ファイルリストのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 488,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "command",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#command",
    "access": null,
    "description": "コマンドラインのインスタンスを返す",
    "lineNumber": 6002,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "CommandLine"
      ],
      "spread": false,
      "description": "コマンドラインのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 489,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "titleElem",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#titleElem",
    "access": null,
    "description": "ファイル名InputフォームのDOM要素を返す",
    "lineNumber": 6009,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "ファイル名inputフォームのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 490,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "searchInputElem",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#searchInputElem",
    "access": null,
    "description": "文書内語句検索で使用するinputフォームのDOM要素を返す",
    "lineNumber": 6016,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "語句検索inputフォームのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 491,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "userAlertElem",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#userAlertElem",
    "access": null,
    "description": "ユーザーへの情報を表示するinputフォームのDOM要素を返す",
    "lineNumber": 6023,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "情報表示inputフォームのDOM要素"
    },
    "generator": false
  },
  {
    "__docId__": 492,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "menu",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#menu",
    "access": null,
    "description": "この文書を操作するMenuクラスのインスタンスを返す",
    "lineNumber": 6030,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "メニューバーのインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 493,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasParagraph",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#hasParagraph",
    "access": null,
    "description": "この文書内に段落が存在するかどうかを返す",
    "lineNumber": 6040,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "段落が存在するならtrue、そうでなければfalse"
    },
    "generator": false
  },
  {
    "__docId__": 494,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushParagraph",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#pushParagraph",
    "access": null,
    "description": "子の最後にparagraphを追加する",
    "lineNumber": 6051,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "追加する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 495,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertParagraph",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#insertParagraph",
    "access": null,
    "description": "子の指定された位置にparagraphを挿入する",
    "lineNumber": 6060,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "挿入する位置のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "挿入するインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 496,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteParagraph",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#deleteParagraph",
    "access": null,
    "description": "子からparagraphを削除する",
    "lineNumber": 6068,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "削除する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 497,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#data",
    "access": null,
    "description": "文書の内容を表したオブジェクトを作成する",
    "lineNumber": 6078,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "文書内容を表すオブジェクト"
    },
    "generator": false
  },
  {
    "__docId__": 498,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "userId",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#userId",
    "access": null,
    "description": "ユーザーIDを返す",
    "lineNumber": 6093,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ユーザーID"
    },
    "generator": false
  },
  {
    "__docId__": 499,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filename",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#filename",
    "access": null,
    "description": "この文書内に展開しているファイル名を変更する、あるいは引数省略で現在のファイル名を取得する",
    "lineNumber": 6101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newFilename",
        "description": "新たに設定するファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のファイル名(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 500,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filename",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_filename",
    "access": null,
    "description": null,
    "lineNumber": 6105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fileId",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#fileId",
    "access": null,
    "description": "現在のファイルに新たなIDを与える、あるいは引数省略で現在のファイルIDを取得する",
    "lineNumber": 6116,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newId",
        "description": "新たに設定するID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のファイルID(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 502,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_fileId",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_fileId",
    "access": null,
    "description": null,
    "lineNumber": 6121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saved",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#saved",
    "access": null,
    "description": "最終更新日時を設定、あるいは引数省略で最終更新日時を取得する",
    "lineNumber": 6131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newSaved",
        "description": "新たに設定する最終更新日時の文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer string"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の最終更新日時の文字列(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 504,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_saved",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_saved",
    "access": null,
    "description": null,
    "lineNumber": 6136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "strLenOnRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#strLenOnRow",
    "access": null,
    "description": "一行の文字数を変更する、あるいは引数省略で現在の設定上の一行の文字数を取得する",
    "lineNumber": 6146,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newStrLen",
        "description": "新たに設定する行内文字数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在の設定上の行内文字数(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 506,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_strLenOnRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_strLenOnRow",
    "access": null,
    "description": null,
    "lineNumber": 6151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "rowLenOnPage",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#rowLenOnPage",
    "access": null,
    "description": "一ページの行数を変更する、あるいは引数省略で現在の一ページの行数を取得する",
    "lineNumber": 6163,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_newRowLen",
        "description": "新たに設定するページ内行数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer number"
      ],
      "spread": false,
      "description": "自身のインスタンス(引数を渡した場合)、あるいは現在のページ内行数(引数を省略した場合)"
    },
    "generator": false
  },
  {
    "__docId__": 508,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_rowLenOnPage",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_rowLenOnPage",
    "access": null,
    "description": null,
    "lineNumber": 6168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "countChar",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#countChar",
    "access": null,
    "description": "文書内文字数を数える",
    "lineNumber": 6177,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総文字数"
    },
    "generator": false
  },
  {
    "__docId__": 510,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "countRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#countRow",
    "access": null,
    "description": "文書内行数を数える",
    "lineNumber": 6189,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総行数"
    },
    "generator": false
  },
  {
    "__docId__": 511,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "countPage",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#countPage",
    "access": null,
    "description": "文書内のページ数を数える",
    "lineNumber": 6200,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "文書内の総ページ数"
    },
    "generator": false
  },
  {
    "__docId__": 512,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#width",
    "access": null,
    "description": "この文書コンテナの横幅を返す。文書コンテナは９０度回転しているため、css上は高さのこと",
    "lineNumber": 6215,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の幅"
    },
    "generator": false
  },
  {
    "__docId__": 513,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#height",
    "access": null,
    "description": "この文書コンテナの高さを返す。文書コンテナは９０度回転しているため、css上は横幅のこと",
    "lineNumber": 6223,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opt_useCache",
        "description": "true=キャッシュを利用する、false=キャッシュを利用しない。省略するとデフォルトでtrueになるので、キャッシュを使わず計算し直す場合には明示的にfalseを渡す必要がある"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "自身の高さ"
    },
    "generator": false
  },
  {
    "__docId__": 514,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeClassFromAllChar",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#removeClassFromAllChar",
    "access": null,
    "description": "文書内すべての文字から、指定されたクラスを除去する",
    "lineNumber": 6231,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "除去するクラス名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 515,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#search",
    "access": null,
    "description": "渡された文字列を本文内から探し、見つかった文字列にsearch-wordクラスを付与する。さらに、見つかった文字列の先頭文字にsearch-labelクラスを付与する",
    "lineNumber": 6242,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "検索文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 516,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "startSearchMode",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#startSearchMode",
    "access": null,
    "description": "文書内語句検索を始める。",
    "lineNumber": 6252,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 517,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_keyupOnSearchArg",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#_keyupOnSearchArg",
    "access": null,
    "description": null,
    "lineNumber": 6258,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stopSearchMode",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#stopSearchMode",
    "access": null,
    "description": "文書内語句検索を完全に終了する",
    "lineNumber": 6269,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 519,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectChars",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#selectChars",
    "access": null,
    "description": "選択範囲にある文字インスタンスを配列で返す",
    "lineNumber": 6284,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_bl",
        "description": "選択範囲を解除するならtrueを指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Char[]"
      ],
      "spread": false,
      "description": "選択範囲内にある文字インスタンスの配列"
    },
    "generator": false
  },
  {
    "__docId__": 520,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "copySelectText",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#copySelectText",
    "access": null,
    "description": "選択範囲内にある文字列をローカルストレージに保存する",
    "lineNumber": 6300,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 521,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pasteText",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#pasteText",
    "access": null,
    "description": "ローカルストレージに保存した文字列をカーソル位置から挿入する",
    "lineNumber": 6309,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 522,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "selectText",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#selectText",
    "access": null,
    "description": "選択範囲内にある文字列を返す",
    "lineNumber": 6317,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "選択範囲内の文字列"
    },
    "generator": false
  },
  {
    "__docId__": 523,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "empty",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#empty",
    "access": null,
    "description": "子を空にし、入力モード、語句検索モードは終了する",
    "lineNumber": 6333,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 524,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "append",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#append",
    "access": null,
    "description": "この文章コンテナの末尾にparagraphを追加する",
    "lineNumber": 6349,
    "params": [
      {
        "nullable": null,
        "types": [
          "Paragraph"
        ],
        "spread": false,
        "optional": false,
        "name": "paragraph",
        "description": "追加する段落のインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 525,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "printInfo",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#printInfo",
    "access": null,
    "description": "文書情報を表示する",
    "lineNumber": 6375,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 526,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cordinate",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#cordinate",
    "access": null,
    "description": "各行が指定文字数と異なる文字数なら、指定文字数に合わせて文字数を調節する。標準以外のフォントサイズの文字があれば文字数は調整される。また、空段落以外に空行があれば削除する",
    "lineNumber": 6391,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 527,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkKinsoku",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#checkKinsoku",
    "access": null,
    "description": "禁則処理を行う。各行の文字数への変化が伴うため、必ずcordinate()の後に行うこと",
    "lineNumber": 6401,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 528,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "breakPage",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#breakPage",
    "access": null,
    "description": "ページの最初の行と最終行に目印となるクラスを与える",
    "lineNumber": 6412,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 529,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "userAlert",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#userAlert",
    "access": null,
    "description": "ユーザーへの情報を表示する",
    "lineNumber": 6447,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示する情報"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'black'",
        "defaultRaw": "'black'",
        "name": "opt_color",
        "description": "黒文字以外の文字色で表示する場合に色名を指定する"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 530,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "readFile",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#readFile",
    "access": null,
    "description": "指定されたファイルを開く(非同期通信)",
    "lineNumber": 6461,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fileId",
        "description": "開くファイルのID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 531,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveFile",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#saveFile",
    "access": null,
    "description": "現在開いているファイルを上書き保存する。newFile()されて初めての保存なら名前をつけて保存する。(ともに非同期通信)",
    "lineNumber": 6470,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 532,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveAsFile",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#saveAsFile",
    "access": null,
    "description": "現在開いているファイルを名前をつけて保存する(非同期通信)",
    "lineNumber": 6493,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "新しいファイルの名前"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 533,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "newFile",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#newFile",
    "access": null,
    "description": "新しいファイルを開く",
    "lineNumber": 6511,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "新しいファイル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 534,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetDisplay",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#resetDisplay",
    "access": null,
    "description": "文書を１行目の１文字目から表示する",
    "lineNumber": 6530,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 535,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "changeDisplay",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#changeDisplay",
    "access": null,
    "description": "カーソル位置を基準として文書を表示し直す",
    "lineNumber": 6541,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_pos",
        "description": "表示後のカーソル位置を指定する。'center'と'right'に対応。\n    省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 536,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addDisplay",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#addDisplay",
    "access": null,
    "description": "firstRow行目以降を表示する。文字はfirstChar文字目以降が表示される",
    "lineNumber": 6554,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstRow",
        "description": "表示される最初の行のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstChar",
        "description": "表示される最初の文字のインデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 537,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeDisplayRowPos",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#computeDisplayRowPos",
    "access": "private",
    "description": "",
    "lineNumber": 6589,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "opt_pos",
        "description": "表示後のカーソル位置を指定する。'center'なら、カーソル位置を中央にする。'right'なら、カーソル位置が最も右になるよう表示される。\n    省略した場合は現在の表示位置から最低限の移動でカーソル文字が表示されるように表示される"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "計算された最初に表示されるべき行のインデックス"
    },
    "generator": false
  },
  {
    "__docId__": 538,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstDisplayRowPos",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#firstDisplayRowPos",
    "access": "private",
    "description": "",
    "lineNumber": 6621,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在表示されている行の最初の行のインデックス。表示行がなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 539,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastDisplayRowPos",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#lastDisplayRowPos",
    "access": "private",
    "description": "",
    "lineNumber": 6637,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "現在表示されている行の最後の行のインデックス。表示行がなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 540,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cursorRowPos",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#cursorRowPos",
    "access": "private",
    "description": "",
    "lineNumber": 6648,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "カーソル行の文書全体でのインデックス。文書内に段落がない、あるいはカーソル行がなければ-1"
    },
    "generator": false
  },
  {
    "__docId__": 541,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "firstDisplayRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#firstDisplayRow",
    "access": "private",
    "description": "",
    "lineNumber": 6665,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最初の表示行のインスタンス。表示行がなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 542,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lastDisplayRow",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#lastDisplayRow",
    "access": "private",
    "description": "",
    "lineNumber": 6678,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Row"
      ],
      "spread": false,
      "description": "最後の表示行のインスタンス。表示行がなければnull"
    },
    "generator": false
  },
  {
    "__docId__": 543,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shiftRightDisplay",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#shiftRightDisplay",
    "access": null,
    "description": "表示を一行分右に動かす",
    "lineNumber": 6689,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 544,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shiftLeftDisplay",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#shiftLeftDisplay",
    "access": null,
    "description": "表示を一行分左に動かす",
    "lineNumber": 6701,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 545,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addKeydownEventListener",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#addKeydownEventListener",
    "access": null,
    "description": "この文書コンテナにkeydownイベントリスナーを付加する",
    "lineNumber": 6717,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 546,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runKeydown",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#runKeydown",
    "access": null,
    "description": "keydownイベントの実行内容",
    "lineNumber": 6729,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "押下されたキーのキーコード"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 547,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runControlKeyDown",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#runControlKeyDown",
    "access": "private",
    "description": "",
    "lineNumber": 6782,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "keycode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 548,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "runWheel",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#runWheel",
    "access": null,
    "description": "ホイールイベントの実行内容(表示を４行分移動する)",
    "lineNumber": 6846,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isUp",
        "description": "上方向にホイールが動かされたならtrue、そうでなければfalse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SentenceContainer"
      ],
      "spread": false,
      "description": "自身のインスタンス"
    },
    "generator": false
  },
  {
    "__docId__": 549,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onKeyupOnSearchMode",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#onKeyupOnSearchMode",
    "access": null,
    "description": "語句検索inputフォームのkeyupイベント",
    "lineNumber": 6861,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "イベントオブジェクト"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 550,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onFocusoutOnSearchMode",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#onFocusoutOnSearchMode",
    "access": null,
    "description": "語句検索inputフォームからフォーカスが外れた際のイベント実行内容。文書コンテナ本体にkeydownイベントを戻す",
    "lineNumber": 6888,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 551,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onFocusinOnSearchMode",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#onFocusinOnSearchMode",
    "access": null,
    "description": "語句検索inputフォームにフォーカスがあたった際のイベント実行内容。文書コンテナ本体のkeydownイベントを外す",
    "lineNumber": 6894,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 552,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addFileTitleEvent",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#addFileTitleEvent",
    "access": null,
    "description": "ファイル名inputフォームにイベントを付加する(主に、フォーカスがあたった際と外れた際のイベント)。与えっぱなし。実行内容もここで定義",
    "lineNumber": 6902,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 553,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addSelectEvent",
    "memberof": "js/object.js~SentenceContainer",
    "longname": "js/object.js~SentenceContainer#addSelectEvent",
    "access": null,
    "description": "マウスで選択範囲を変更した際のイベントを与える。選択範囲最後の文字の次の文字にカーソルを当てる",
    "lineNumber": 6920,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 555,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 556,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 557,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 558,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 559,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 560,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 561,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 562,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 563,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 564,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 565,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 566,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 567,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 568,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 569,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 570,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 571,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 572,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 573,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 574,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 575,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 576,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 577,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 578,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 579,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 580,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 581,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 582,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 583,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 584,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 585,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 586,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 587,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 588,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 589,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 590,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 591,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 592,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 593,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 594,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 595,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 596,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 597,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 598,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 599,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 600,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 601,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 603,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 604,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 605,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 606,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 607,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 608,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 609,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 610,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]